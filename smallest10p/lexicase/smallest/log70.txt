Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-95 35 35 35] -95] [[-63 -63 -94 -63] -94] [[-11 -11 -85 -11] -85] [[-72 -72 -62 -72] -72] [[-96 11 -96 -96] -96] [[73 32 73 73] 32] [[-58 -58 15 -58] -58] [[-41 83 83 83] -41] [[67 -87 67 67] -87] [[-59 -59 -36 -59] -59] [(-16 -16 -16 -16) -16] [(-41 -41 -41 -41) -41] [(-11 -11 -11 -11) -11] [(11 11 11 11) 11] [(87 87 87 87) 87] [(9 3 6 26) 3] [(28 49 58 63) 28] [(51 87 71 21) 21] [(54 63 34 95) 34] [(34 65 19 10) 10] [(100 0 64 62) 0] [(43 75 57 71) 43] [(39 22 23 85) 22] [(72 52 41 60) 41] [(62 50 48 78) 48] [(7 12 72 13) 7] [(28 2 25 24) 2] [(41 33 97 48) 33] [(58 73 55 98) 55] [(71 82 19 96) 19] [(25 4 93 0) 0] [(29 31 81 87) 29] [(83 99 99 98) 83] [(56 24 73 89) 24] [(82 73 10 30) 10] [(100 23 -80 -42) -80] [(15 -70 -63 -14) -70] [(-7 83 20 19) -7] [(88 31 -79 52) -79] [(-95 82 -12 92) -95] [(70 70 -25 -50) -50] [(-53 87 -4 -41) -53] [(-83 67 -5 44) -83] [(-99 0 27 -99) -99] [(58 -4 29 -23) -23] [(-26 -67 11 -5) -67] [(-15 -59 4 69) -59] [(-1 68 -100 37) -100] [(-72 -85 -11 -76) -85] [(18 91 96 -56) -56] [(-52 -28 -70 74) -70] [(5 -13 -44 13) -44] [(72 39 -65 -8) -65] [(59 -24 -37 -93) -93] [(74 76 -46 -86) -86] [(-4 15 63 33) -4] [(21 7 74 54) 7] [(13 -88 -73 -17) -88] [(95 9 38 -33) -33] [(45 70 28 45) 28] [(40 88 8 70) 8] [(10 72 -27 27) -27] [(21 46 12 17) 12] [(-8 -79 -44 -76) -79] [(-23 77 18 41) -23] [(3 -73 -8 84) -73] [(-93 71 66 -93) -93] [(-15 -49 -75 -94) -94] [(-51 -11 -72 37) -72] [(86 -25 30 -55) -55] [(19 -65 11 59) -65] [(-60 -61 -51 90) -61] [(94 77 27 -99) -99] [(-76 -14 -48 33) -76] [(-70 -22 -44 57) -70] [(21 -42 -45 -86) -86] [(91 -50 90 -40) -50] [(-31 -41 -19 -7) -41] [(69 76 79 95) 69] [(80 80 -51 47) -51] [(27 -75 -8 -91) -91] [(74 -54 64 18) -54] [(-81 57 -94 59) -94] [(-90 41 -72 -91) -91] [(-54 -91 -7 27) -91] [(-93 -71 -43 -35) -93] [(-77 18 31 49) -77] [(100 52 -2 -31) -31] [(-40 -36 46 -80) -80] [(71 -78 -77 -88) -88] [(3 4 -20 50) -20] [(99 -32 -100 34) -100] [(95 -81 39 -29) -81] [(26 43 27 -71) -71] [(-9 -91 -58 -65) -91])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-95 35 35 35] -95]
Train Case:   6 | Input/Output: [[-63 -63 -94 -63] -94]
Train Case:   7 | Input/Output: [[-11 -11 -85 -11] -85]
Train Case:   8 | Input/Output: [[-72 -72 -62 -72] -72]
Train Case:   9 | Input/Output: [[-96 11 -96 -96] -96]
Train Case:  10 | Input/Output: [[73 32 73 73] 32]
Train Case:  11 | Input/Output: [[-58 -58 15 -58] -58]
Train Case:  12 | Input/Output: [[-41 83 83 83] -41]
Train Case:  13 | Input/Output: [[67 -87 67 67] -87]
Train Case:  14 | Input/Output: [[-59 -59 -36 -59] -59]
Train Case:  15 | Input/Output: [(-16 -16 -16 -16) -16]
Train Case:  16 | Input/Output: [(-41 -41 -41 -41) -41]
Train Case:  17 | Input/Output: [(-11 -11 -11 -11) -11]
Train Case:  18 | Input/Output: [(11 11 11 11) 11]
Train Case:  19 | Input/Output: [(87 87 87 87) 87]
Train Case:  20 | Input/Output: [(9 3 6 26) 3]
Train Case:  21 | Input/Output: [(28 49 58 63) 28]
Train Case:  22 | Input/Output: [(51 87 71 21) 21]
Train Case:  23 | Input/Output: [(54 63 34 95) 34]
Train Case:  24 | Input/Output: [(34 65 19 10) 10]
Train Case:  25 | Input/Output: [(100 0 64 62) 0]
Train Case:  26 | Input/Output: [(43 75 57 71) 43]
Train Case:  27 | Input/Output: [(39 22 23 85) 22]
Train Case:  28 | Input/Output: [(72 52 41 60) 41]
Train Case:  29 | Input/Output: [(62 50 48 78) 48]
Train Case:  30 | Input/Output: [(7 12 72 13) 7]
Train Case:  31 | Input/Output: [(28 2 25 24) 2]
Train Case:  32 | Input/Output: [(41 33 97 48) 33]
Train Case:  33 | Input/Output: [(58 73 55 98) 55]
Train Case:  34 | Input/Output: [(71 82 19 96) 19]
Train Case:  35 | Input/Output: [(25 4 93 0) 0]
Train Case:  36 | Input/Output: [(29 31 81 87) 29]
Train Case:  37 | Input/Output: [(83 99 99 98) 83]
Train Case:  38 | Input/Output: [(56 24 73 89) 24]
Train Case:  39 | Input/Output: [(82 73 10 30) 10]
Train Case:  40 | Input/Output: [(100 23 -80 -42) -80]
Train Case:  41 | Input/Output: [(15 -70 -63 -14) -70]
Train Case:  42 | Input/Output: [(-7 83 20 19) -7]
Train Case:  43 | Input/Output: [(88 31 -79 52) -79]
Train Case:  44 | Input/Output: [(-95 82 -12 92) -95]
Train Case:  45 | Input/Output: [(70 70 -25 -50) -50]
Train Case:  46 | Input/Output: [(-53 87 -4 -41) -53]
Train Case:  47 | Input/Output: [(-83 67 -5 44) -83]
Train Case:  48 | Input/Output: [(-99 0 27 -99) -99]
Train Case:  49 | Input/Output: [(58 -4 29 -23) -23]
Train Case:  50 | Input/Output: [(-26 -67 11 -5) -67]
Train Case:  51 | Input/Output: [(-15 -59 4 69) -59]
Train Case:  52 | Input/Output: [(-1 68 -100 37) -100]
Train Case:  53 | Input/Output: [(-72 -85 -11 -76) -85]
Train Case:  54 | Input/Output: [(18 91 96 -56) -56]
Train Case:  55 | Input/Output: [(-52 -28 -70 74) -70]
Train Case:  56 | Input/Output: [(5 -13 -44 13) -44]
Train Case:  57 | Input/Output: [(72 39 -65 -8) -65]
Train Case:  58 | Input/Output: [(59 -24 -37 -93) -93]
Train Case:  59 | Input/Output: [(74 76 -46 -86) -86]
Train Case:  60 | Input/Output: [(-4 15 63 33) -4]
Train Case:  61 | Input/Output: [(21 7 74 54) 7]
Train Case:  62 | Input/Output: [(13 -88 -73 -17) -88]
Train Case:  63 | Input/Output: [(95 9 38 -33) -33]
Train Case:  64 | Input/Output: [(45 70 28 45) 28]
Train Case:  65 | Input/Output: [(40 88 8 70) 8]
Train Case:  66 | Input/Output: [(10 72 -27 27) -27]
Train Case:  67 | Input/Output: [(21 46 12 17) 12]
Train Case:  68 | Input/Output: [(-8 -79 -44 -76) -79]
Train Case:  69 | Input/Output: [(-23 77 18 41) -23]
Train Case:  70 | Input/Output: [(3 -73 -8 84) -73]
Train Case:  71 | Input/Output: [(-93 71 66 -93) -93]
Train Case:  72 | Input/Output: [(-15 -49 -75 -94) -94]
Train Case:  73 | Input/Output: [(-51 -11 -72 37) -72]
Train Case:  74 | Input/Output: [(86 -25 30 -55) -55]
Train Case:  75 | Input/Output: [(19 -65 11 59) -65]
Train Case:  76 | Input/Output: [(-60 -61 -51 90) -61]
Train Case:  77 | Input/Output: [(94 77 27 -99) -99]
Train Case:  78 | Input/Output: [(-76 -14 -48 33) -76]
Train Case:  79 | Input/Output: [(-70 -22 -44 57) -70]
Train Case:  80 | Input/Output: [(21 -42 -45 -86) -86]
Train Case:  81 | Input/Output: [(91 -50 90 -40) -50]
Train Case:  82 | Input/Output: [(-31 -41 -19 -7) -41]
Train Case:  83 | Input/Output: [(69 76 79 95) 69]
Train Case:  84 | Input/Output: [(80 80 -51 47) -51]
Train Case:  85 | Input/Output: [(27 -75 -8 -91) -91]
Train Case:  86 | Input/Output: [(74 -54 64 18) -54]
Train Case:  87 | Input/Output: [(-81 57 -94 59) -94]
Train Case:  88 | Input/Output: [(-90 41 -72 -91) -91]
Train Case:  89 | Input/Output: [(-54 -91 -7 27) -91]
Train Case:  90 | Input/Output: [(-93 -71 -43 -35) -93]
Train Case:  91 | Input/Output: [(-77 18 31 49) -77]
Train Case:  92 | Input/Output: [(100 52 -2 -31) -31]
Train Case:  93 | Input/Output: [(-40 -36 46 -80) -80]
Train Case:  94 | Input/Output: [(71 -78 -77 -88) -88]
Train Case:  95 | Input/Output: [(3 4 -20 50) -20]
Train Case:  96 | Input/Output: [(99 -32 -100 34) -100]
Train Case:  97 | Input/Output: [(95 -81 39 -29) -81]
Train Case:  98 | Input/Output: [(26 43 27 -71) -71]
Train Case:  99 | Input/Output: [(-9 -91 -58 -65) -91]
Test Case:   0 | Input/Output: [[24 24 18 24] 18]
Test Case:   1 | Input/Output: [[-90 42 42 42] -90]
Test Case:   2 | Input/Output: [[94 94 94 -40] -40]
Test Case:   3 | Input/Output: [[71 71 -33 71] -33]
Test Case:   4 | Input/Output: [[-17 -26 -26 -26] -26]
Test Case:   5 | Input/Output: [[30 30 99 30] 30]
Test Case:   6 | Input/Output: [[-57 -20 -57 -57] -57]
Test Case:   7 | Input/Output: [[-71 -71 -71 -17] -71]
Test Case:   8 | Input/Output: [[46 46 -82 46] -82]
Test Case:   9 | Input/Output: [[-26 98 98 98] -26]
Test Case:  10 | Input/Output: [[-66 -66 -66 17] -66]
Test Case:  11 | Input/Output: [[82 82 38 82] 38]
Test Case:  12 | Input/Output: [[32 32 78 32] 32]
Test Case:  13 | Input/Output: [[59 -32 -32 -32] -32]
Test Case:  14 | Input/Output: [[6 6 -32 6] -32]
Test Case:  15 | Input/Output: [[28 28 87 28] 28]
Test Case:  16 | Input/Output: [[87 29 29 29] 29]
Test Case:  17 | Input/Output: [[95 97 97 97] 95]
Test Case:  18 | Input/Output: [[93 93 49 93] 49]
Test Case:  19 | Input/Output: [[39 39 39 83] 39]
Test Case:  20 | Input/Output: [[40 40 -28 40] -28]
Test Case:  21 | Input/Output: [[55 55 58 55] 55]
Test Case:  22 | Input/Output: [[82 82 82 -93] -93]
Test Case:  23 | Input/Output: [[-56 100 100 100] -56]
Test Case:  24 | Input/Output: [[51 -32 51 51] -32]
Test Case:  25 | Input/Output: [[-13 -89 -89 -89] -89]
Test Case:  26 | Input/Output: [[-85 -85 -85 -20] -85]
Test Case:  27 | Input/Output: [[6 6 50 6] 6]
Test Case:  28 | Input/Output: [[0 72 72 72] 0]
Test Case:  29 | Input/Output: [[54 54 -66 54] -66]
Test Case:  30 | Input/Output: [[77 77 77 56] 56]
Test Case:  31 | Input/Output: [[-91 -16 -16 -16] -91]
Test Case:  32 | Input/Output: [[80 -9 80 80] -9]
Test Case:  33 | Input/Output: [[31 31 31 -98] -98]
Test Case:  34 | Input/Output: [[-55 95 95 95] -55]
Test Case:  35 | Input/Output: [[-10 -10 -10 -16] -16]
Test Case:  36 | Input/Output: [[77 99 99 99] 77]
Test Case:  37 | Input/Output: [[1 1 1 83] 1]
Test Case:  38 | Input/Output: [[-11 -11 -11 -65] -65]
Test Case:  39 | Input/Output: [[-61 -74 -61 -61] -74]
Test Case:  40 | Input/Output: [[-93 -5 -93 -93] -93]
Test Case:  41 | Input/Output: [[-29 -29 20 -29] -29]
Test Case:  42 | Input/Output: [[46 78 78 78] 46]
Test Case:  43 | Input/Output: [[-46 -3 -46 -46] -46]
Test Case:  44 | Input/Output: [[-52 -68 -68 -68] -68]
Test Case:  45 | Input/Output: [[24 24 2 24] 2]
Test Case:  46 | Input/Output: [[-30 -30 -78 -30] -78]
Test Case:  47 | Input/Output: [[6 6 6 -14] -14]
Test Case:  48 | Input/Output: [[-16 73 -16 -16] -16]
Test Case:  49 | Input/Output: [[-89 -89 -52 -89] -89]
Test Case:  50 | Input/Output: [[-48 66 66 66] -48]
Test Case:  51 | Input/Output: [[84 84 84 47] 47]
Test Case:  52 | Input/Output: [[24 24 24 -93] -93]
Test Case:  53 | Input/Output: [[20 20 -100 20] -100]
Test Case:  54 | Input/Output: [[-77 -77 -77 52] -77]
Test Case:  55 | Input/Output: [[73 3 73 73] 3]
Test Case:  56 | Input/Output: [[-26 -26 -26 -32] -32]
Test Case:  57 | Input/Output: [[-49 -49 -49 80] -49]
Test Case:  58 | Input/Output: [[90 90 -49 90] -49]
Test Case:  59 | Input/Output: [[-9 -9 -9 39] -9]
Test Case:  60 | Input/Output: [[-82 -82 92 -82] -82]
Test Case:  61 | Input/Output: [[-93 23 23 23] -93]
Test Case:  62 | Input/Output: [[34 -73 -73 -73] -73]
Test Case:  63 | Input/Output: [[-5 -5 -20 -5] -20]
Test Case:  64 | Input/Output: [[-39 -71 -39 -39] -71]
Test Case:  65 | Input/Output: [[25 25 25 43] 25]
Test Case:  66 | Input/Output: [[65 65 92 65] 65]
Test Case:  67 | Input/Output: [[-18 -15 -18 -18] -18]
Test Case:  68 | Input/Output: [[-34 -91 -91 -91] -91]
Test Case:  69 | Input/Output: [[-11 -38 -38 -38] -38]
Test Case:  70 | Input/Output: [[-78 -78 43 -78] -78]
Test Case:  71 | Input/Output: [[94 94 5 94] 5]
Test Case:  72 | Input/Output: [[15 15 49 15] 15]
Test Case:  73 | Input/Output: [[93 -20 93 93] -20]
Test Case:  74 | Input/Output: [[26 -66 26 26] -66]
Test Case:  75 | Input/Output: [[-17 -17 -70 -17] -70]
Test Case:  76 | Input/Output: [[-7 -7 -7 53] -7]
Test Case:  77 | Input/Output: [[11 90 90 90] 11]
Test Case:  78 | Input/Output: [[-11 -11 -11 57] -11]
Test Case:  79 | Input/Output: [[5 11 11 11] 5]
Test Case:  80 | Input/Output: [[-38 83 -38 -38] -38]
Test Case:  81 | Input/Output: [[-36 98 98 98] -36]
Test Case:  82 | Input/Output: [[17 17 76 17] 17]
Test Case:  83 | Input/Output: [[74 74 74 83] 74]
Test Case:  84 | Input/Output: [[-66 15 -66 -66] -66]
Test Case:  85 | Input/Output: [[-96 -96 -96 7] -96]
Test Case:  86 | Input/Output: [[8 8 8 47] 8]
Test Case:  87 | Input/Output: [[-59 7 7 7] -59]
Test Case:  88 | Input/Output: [[-44 58 58 58] -44]
Test Case:  89 | Input/Output: [[62 93 62 62] 62]
Test Case:  90 | Input/Output: [[100 100 100 100] 100]
Test Case:  91 | Input/Output: [[75 -33 -33 -33] -33]
Test Case:  92 | Input/Output: [[78 -36 78 78] -36]
Test Case:  93 | Input/Output: [[98 98 98 -84] -84]
Test Case:  94 | Input/Output: [[100 -51 100 100] -51]
Test Case:  95 | Input/Output: [[51 51 -59 51] -59]
Test Case:  96 | Input/Output: [[11 11 11 -12] -12]
Test Case:  97 | Input/Output: [[92 29 29 29] 29]
Test Case:  98 | Input/Output: [[94 13 94 94] 13]
Test Case:  99 | Input/Output: [[60 -1 -1 -1] -1]
Test Case: 100 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 101 | Input/Output: [(86 86 86 86) 86]
Test Case: 102 | Input/Output: [(82 82 82 82) 82]
Test Case: 103 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 104 | Input/Output: [(81 81 81 81) 81]
Test Case: 105 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 106 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 107 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 108 | Input/Output: [(43 43 43 43) 43]
Test Case: 109 | Input/Output: [(50 50 50 50) 50]
Test Case: 110 | Input/Output: [(87 87 87 87) 87]
Test Case: 111 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 112 | Input/Output: [(100 100 100 100) 100]
Test Case: 113 | Input/Output: [(45 45 45 45) 45]
Test Case: 114 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 115 | Input/Output: [(95 95 95 95) 95]
Test Case: 116 | Input/Output: [(63 63 63 63) 63]
Test Case: 117 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 118 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 119 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 120 | Input/Output: [(41 41 41 41) 41]
Test Case: 121 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 122 | Input/Output: [(21 21 21 21) 21]
Test Case: 123 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 124 | Input/Output: [(59 59 59 59) 59]
Test Case: 125 | Input/Output: [(5 5 5 5) 5]
Test Case: 126 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 127 | Input/Output: [(56 56 56 56) 56]
Test Case: 128 | Input/Output: [(40 40 40 40) 40]
Test Case: 129 | Input/Output: [(37 37 37 37) 37]
Test Case: 130 | Input/Output: [(4 4 4 4) 4]
Test Case: 131 | Input/Output: [(45 45 45 45) 45]
Test Case: 132 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 133 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 134 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 135 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 136 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 137 | Input/Output: [(62 62 62 62) 62]
Test Case: 138 | Input/Output: [(65 65 65 65) 65]
Test Case: 139 | Input/Output: [(78 78 78 78) 78]
Test Case: 140 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 141 | Input/Output: [(96 96 96 96) 96]
Test Case: 142 | Input/Output: [(14 14 14 14) 14]
Test Case: 143 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 144 | Input/Output: [(65 65 65 65) 65]
Test Case: 145 | Input/Output: [(54 54 54 54) 54]
Test Case: 146 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 147 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 148 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 149 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 150 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 151 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 152 | Input/Output: [(77 77 77 77) 77]
Test Case: 153 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 154 | Input/Output: [(73 73 73 73) 73]
Test Case: 155 | Input/Output: [(22 22 22 22) 22]
Test Case: 156 | Input/Output: [(90 90 90 90) 90]
Test Case: 157 | Input/Output: [(22 22 22 22) 22]
Test Case: 158 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 159 | Input/Output: [(74 74 74 74) 74]
Test Case: 160 | Input/Output: [(99 99 99 99) 99]
Test Case: 161 | Input/Output: [(95 95 95 95) 95]
Test Case: 162 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 163 | Input/Output: [(83 83 83 83) 83]
Test Case: 164 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 165 | Input/Output: [(4 4 4 4) 4]
Test Case: 166 | Input/Output: [(62 62 62 62) 62]
Test Case: 167 | Input/Output: [(55 55 55 55) 55]
Test Case: 168 | Input/Output: [(81 81 81 81) 81]
Test Case: 169 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 170 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 171 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 172 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 173 | Input/Output: [(38 38 38 38) 38]
Test Case: 174 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 175 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 176 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 177 | Input/Output: [(77 77 77 77) 77]
Test Case: 178 | Input/Output: [(65 65 65 65) 65]
Test Case: 179 | Input/Output: [(80 80 80 80) 80]
Test Case: 180 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 181 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 182 | Input/Output: [(64 64 64 64) 64]
Test Case: 183 | Input/Output: [(7 7 7 7) 7]
Test Case: 184 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 185 | Input/Output: [(16 16 16 16) 16]
Test Case: 186 | Input/Output: [(36 36 36 36) 36]
Test Case: 187 | Input/Output: [(6 6 6 6) 6]
Test Case: 188 | Input/Output: [(5 5 5 5) 5]
Test Case: 189 | Input/Output: [(26 26 26 26) 26]
Test Case: 190 | Input/Output: [(29 29 29 29) 29]
Test Case: 191 | Input/Output: [(80 80 80 80) 80]
Test Case: 192 | Input/Output: [(48 48 48 48) 48]
Test Case: 193 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 194 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 195 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 196 | Input/Output: [(26 26 26 26) 26]
Test Case: 197 | Input/Output: [(1 1 1 1) 1]
Test Case: 198 | Input/Output: [(54 54 54 54) 54]
Test Case: 199 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 200 | Input/Output: [(16 31 80 7) 7]
Test Case: 201 | Input/Output: [(42 19 87 9) 9]
Test Case: 202 | Input/Output: [(12 41 70 81) 12]
Test Case: 203 | Input/Output: [(24 70 25 73) 24]
Test Case: 204 | Input/Output: [(25 75 86 67) 25]
Test Case: 205 | Input/Output: [(8 70 100 55) 8]
Test Case: 206 | Input/Output: [(57 10 69 51) 10]
Test Case: 207 | Input/Output: [(53 22 27 61) 22]
Test Case: 208 | Input/Output: [(74 71 74 13) 13]
Test Case: 209 | Input/Output: [(11 67 16 46) 11]
Test Case: 210 | Input/Output: [(11 71 10 40) 10]
Test Case: 211 | Input/Output: [(56 49 34 63) 34]
Test Case: 212 | Input/Output: [(14 2 47 74) 2]
Test Case: 213 | Input/Output: [(86 37 92 59) 37]
Test Case: 214 | Input/Output: [(67 29 66 94) 29]
Test Case: 215 | Input/Output: [(72 33 31 69) 31]
Test Case: 216 | Input/Output: [(94 11 0 25) 0]
Test Case: 217 | Input/Output: [(58 78 60 12) 12]
Test Case: 218 | Input/Output: [(38 67 48 67) 38]
Test Case: 219 | Input/Output: [(44 27 70 66) 27]
Test Case: 220 | Input/Output: [(0 42 2 53) 0]
Test Case: 221 | Input/Output: [(1 85 72 39) 1]
Test Case: 222 | Input/Output: [(2 67 79 95) 2]
Test Case: 223 | Input/Output: [(53 42 46 75) 42]
Test Case: 224 | Input/Output: [(74 93 41 28) 28]
Test Case: 225 | Input/Output: [(50 23 76 19) 19]
Test Case: 226 | Input/Output: [(75 55 43 71) 43]
Test Case: 227 | Input/Output: [(67 75 53 41) 41]
Test Case: 228 | Input/Output: [(41 48 47 7) 7]
Test Case: 229 | Input/Output: [(76 53 39 73) 39]
Test Case: 230 | Input/Output: [(51 25 63 26) 25]
Test Case: 231 | Input/Output: [(10 13 26 32) 10]
Test Case: 232 | Input/Output: [(63 16 72 94) 16]
Test Case: 233 | Input/Output: [(11 77 31 75) 11]
Test Case: 234 | Input/Output: [(88 75 15 65) 15]
Test Case: 235 | Input/Output: [(11 17 69 30) 11]
Test Case: 236 | Input/Output: [(71 8 87 50) 8]
Test Case: 237 | Input/Output: [(31 11 16 94) 11]
Test Case: 238 | Input/Output: [(64 55 18 92) 18]
Test Case: 239 | Input/Output: [(88 58 99 10) 10]
Test Case: 240 | Input/Output: [(86 25 63 59) 25]
Test Case: 241 | Input/Output: [(80 6 21 69) 6]
Test Case: 242 | Input/Output: [(23 16 81 43) 16]
Test Case: 243 | Input/Output: [(44 87 39 87) 39]
Test Case: 244 | Input/Output: [(28 93 98 50) 28]
Test Case: 245 | Input/Output: [(96 62 18 0) 0]
Test Case: 246 | Input/Output: [(63 97 7 18) 7]
Test Case: 247 | Input/Output: [(48 70 100 17) 17]
Test Case: 248 | Input/Output: [(10 95 94 69) 10]
Test Case: 249 | Input/Output: [(87 89 41 34) 34]
Test Case: 250 | Input/Output: [(56 98 39 1) 1]
Test Case: 251 | Input/Output: [(71 8 38 26) 8]
Test Case: 252 | Input/Output: [(0 60 18 66) 0]
Test Case: 253 | Input/Output: [(62 32 75 68) 32]
Test Case: 254 | Input/Output: [(93 2 56 74) 2]
Test Case: 255 | Input/Output: [(36 35 24 22) 22]
Test Case: 256 | Input/Output: [(67 39 89 70) 39]
Test Case: 257 | Input/Output: [(41 29 51 19) 19]
Test Case: 258 | Input/Output: [(59 27 34 61) 27]
Test Case: 259 | Input/Output: [(34 48 20 99) 20]
Test Case: 260 | Input/Output: [(12 20 19 72) 12]
Test Case: 261 | Input/Output: [(86 90 26 26) 26]
Test Case: 262 | Input/Output: [(15 55 2 51) 2]
Test Case: 263 | Input/Output: [(71 21 2 7) 2]
Test Case: 264 | Input/Output: [(5 19 49 30) 5]
Test Case: 265 | Input/Output: [(1 74 88 14) 1]
Test Case: 266 | Input/Output: [(55 85 23 32) 23]
Test Case: 267 | Input/Output: [(90 16 42 73) 16]
Test Case: 268 | Input/Output: [(45 90 46 65) 45]
Test Case: 269 | Input/Output: [(29 35 44 37) 29]
Test Case: 270 | Input/Output: [(67 0 29 85) 0]
Test Case: 271 | Input/Output: [(65 21 63 50) 21]
Test Case: 272 | Input/Output: [(8 44 6 88) 6]
Test Case: 273 | Input/Output: [(25 96 54 67) 25]
Test Case: 274 | Input/Output: [(49 65 88 64) 49]
Test Case: 275 | Input/Output: [(83 89 80 20) 20]
Test Case: 276 | Input/Output: [(64 24 5 41) 5]
Test Case: 277 | Input/Output: [(27 14 20 24) 14]
Test Case: 278 | Input/Output: [(7 86 72 12) 7]
Test Case: 279 | Input/Output: [(13 75 13 81) 13]
Test Case: 280 | Input/Output: [(42 17 22 45) 17]
Test Case: 281 | Input/Output: [(65 90 63 58) 58]
Test Case: 282 | Input/Output: [(21 37 79 76) 21]
Test Case: 283 | Input/Output: [(93 47 34 96) 34]
Test Case: 284 | Input/Output: [(28 53 3 70) 3]
Test Case: 285 | Input/Output: [(84 23 79 33) 23]
Test Case: 286 | Input/Output: [(87 49 27 67) 27]
Test Case: 287 | Input/Output: [(20 73 71 93) 20]
Test Case: 288 | Input/Output: [(19 40 83 78) 19]
Test Case: 289 | Input/Output: [(92 41 82 2) 2]
Test Case: 290 | Input/Output: [(56 34 85 88) 34]
Test Case: 291 | Input/Output: [(85 17 32 11) 11]
Test Case: 292 | Input/Output: [(10 6 26 98) 6]
Test Case: 293 | Input/Output: [(52 76 29 10) 10]
Test Case: 294 | Input/Output: [(96 5 94 89) 5]
Test Case: 295 | Input/Output: [(75 8 79 21) 8]
Test Case: 296 | Input/Output: [(56 94 82 52) 52]
Test Case: 297 | Input/Output: [(23 37 34 89) 23]
Test Case: 298 | Input/Output: [(99 92 63 21) 21]
Test Case: 299 | Input/Output: [(20 14 37 0) 0]
Test Case: 300 | Input/Output: [(63 91 94 17) 17]
Test Case: 301 | Input/Output: [(59 77 25 1) 1]
Test Case: 302 | Input/Output: [(92 16 81 46) 16]
Test Case: 303 | Input/Output: [(8 42 6 12) 6]
Test Case: 304 | Input/Output: [(46 43 95 93) 43]
Test Case: 305 | Input/Output: [(82 13 44 59) 13]
Test Case: 306 | Input/Output: [(40 55 32 4) 4]
Test Case: 307 | Input/Output: [(88 63 59 38) 38]
Test Case: 308 | Input/Output: [(92 84 4 61) 4]
Test Case: 309 | Input/Output: [(22 8 70 79) 8]
Test Case: 310 | Input/Output: [(4 42 35 49) 4]
Test Case: 311 | Input/Output: [(34 26 71 42) 26]
Test Case: 312 | Input/Output: [(97 56 100 19) 19]
Test Case: 313 | Input/Output: [(72 13 98 37) 13]
Test Case: 314 | Input/Output: [(58 91 58 99) 58]
Test Case: 315 | Input/Output: [(16 80 88 65) 16]
Test Case: 316 | Input/Output: [(49 19 55 84) 19]
Test Case: 317 | Input/Output: [(90 29 22 84) 22]
Test Case: 318 | Input/Output: [(71 64 27 74) 27]
Test Case: 319 | Input/Output: [(24 59 88 65) 24]
Test Case: 320 | Input/Output: [(61 60 67 54) 54]
Test Case: 321 | Input/Output: [(88 74 59 74) 59]
Test Case: 322 | Input/Output: [(41 61 100 29) 29]
Test Case: 323 | Input/Output: [(8 67 91 97) 8]
Test Case: 324 | Input/Output: [(67 77 42 60) 42]
Test Case: 325 | Input/Output: [(79 19 99 58) 19]
Test Case: 326 | Input/Output: [(62 75 7 51) 7]
Test Case: 327 | Input/Output: [(48 5 75 85) 5]
Test Case: 328 | Input/Output: [(18 92 11 36) 11]
Test Case: 329 | Input/Output: [(89 81 46 43) 43]
Test Case: 330 | Input/Output: [(35 52 58 28) 28]
Test Case: 331 | Input/Output: [(96 45 31 58) 31]
Test Case: 332 | Input/Output: [(31 82 10 42) 10]
Test Case: 333 | Input/Output: [(74 50 66 5) 5]
Test Case: 334 | Input/Output: [(25 47 7 51) 7]
Test Case: 335 | Input/Output: [(32 41 3 2) 2]
Test Case: 336 | Input/Output: [(4 39 84 51) 4]
Test Case: 337 | Input/Output: [(65 39 52 2) 2]
Test Case: 338 | Input/Output: [(18 94 95 55) 18]
Test Case: 339 | Input/Output: [(80 6 86 10) 6]
Test Case: 340 | Input/Output: [(10 34 71 53) 10]
Test Case: 341 | Input/Output: [(38 10 27 47) 10]
Test Case: 342 | Input/Output: [(33 69 50 14) 14]
Test Case: 343 | Input/Output: [(67 60 49 63) 49]
Test Case: 344 | Input/Output: [(43 19 86 96) 19]
Test Case: 345 | Input/Output: [(44 88 28 63) 28]
Test Case: 346 | Input/Output: [(53 15 76 99) 15]
Test Case: 347 | Input/Output: [(6 68 50 23) 6]
Test Case: 348 | Input/Output: [(56 57 15 56) 15]
Test Case: 349 | Input/Output: [(52 87 64 92) 52]
Test Case: 350 | Input/Output: [(3 68 47 4) 3]
Test Case: 351 | Input/Output: [(17 3 26 90) 3]
Test Case: 352 | Input/Output: [(46 65 57 17) 17]
Test Case: 353 | Input/Output: [(10 76 29 65) 10]
Test Case: 354 | Input/Output: [(72 83 3 79) 3]
Test Case: 355 | Input/Output: [(79 85 46 83) 46]
Test Case: 356 | Input/Output: [(62 75 89 20) 20]
Test Case: 357 | Input/Output: [(83 17 16 88) 16]
Test Case: 358 | Input/Output: [(17 46 43 80) 17]
Test Case: 359 | Input/Output: [(46 14 64 78) 14]
Test Case: 360 | Input/Output: [(34 46 85 1) 1]
Test Case: 361 | Input/Output: [(65 35 27 38) 27]
Test Case: 362 | Input/Output: [(10 34 40 32) 10]
Test Case: 363 | Input/Output: [(41 23 96 97) 23]
Test Case: 364 | Input/Output: [(2 27 68 16) 2]
Test Case: 365 | Input/Output: [(89 60 62 10) 10]
Test Case: 366 | Input/Output: [(57 75 42 32) 32]
Test Case: 367 | Input/Output: [(76 85 53 75) 53]
Test Case: 368 | Input/Output: [(16 41 42 43) 16]
Test Case: 369 | Input/Output: [(42 80 37 87) 37]
Test Case: 370 | Input/Output: [(9 85 62 25) 9]
Test Case: 371 | Input/Output: [(97 73 41 73) 41]
Test Case: 372 | Input/Output: [(97 62 60 42) 42]
Test Case: 373 | Input/Output: [(73 32 24 17) 17]
Test Case: 374 | Input/Output: [(33 69 100 53) 33]
Test Case: 375 | Input/Output: [(71 41 14 98) 14]
Test Case: 376 | Input/Output: [(27 58 97 55) 27]
Test Case: 377 | Input/Output: [(17 49 8 64) 8]
Test Case: 378 | Input/Output: [(0 66 19 5) 0]
Test Case: 379 | Input/Output: [(93 19 66 62) 19]
Test Case: 380 | Input/Output: [(88 6 38 21) 6]
Test Case: 381 | Input/Output: [(5 23 71 82) 5]
Test Case: 382 | Input/Output: [(94 79 68 0) 0]
Test Case: 383 | Input/Output: [(68 4 62 46) 4]
Test Case: 384 | Input/Output: [(15 59 39 20) 15]
Test Case: 385 | Input/Output: [(30 20 29 72) 20]
Test Case: 386 | Input/Output: [(86 17 88 22) 17]
Test Case: 387 | Input/Output: [(100 37 16 9) 9]
Test Case: 388 | Input/Output: [(67 82 63 25) 25]
Test Case: 389 | Input/Output: [(95 78 20 52) 20]
Test Case: 390 | Input/Output: [(72 49 62 36) 36]
Test Case: 391 | Input/Output: [(25 53 62 36) 25]
Test Case: 392 | Input/Output: [(91 15 51 78) 15]
Test Case: 393 | Input/Output: [(1 79 26 9) 1]
Test Case: 394 | Input/Output: [(40 17 96 67) 17]
Test Case: 395 | Input/Output: [(44 36 41 65) 36]
Test Case: 396 | Input/Output: [(47 80 81 75) 47]
Test Case: 397 | Input/Output: [(89 37 61 72) 37]
Test Case: 398 | Input/Output: [(1 8 6 28) 1]
Test Case: 399 | Input/Output: [(68 87 23 59) 23]
Test Case: 400 | Input/Output: [(-27 -54 -92 -55) -92]
Test Case: 401 | Input/Output: [(8 95 65 27) 8]
Test Case: 402 | Input/Output: [(-55 85 -51 40) -55]
Test Case: 403 | Input/Output: [(4 -5 -39 48) -39]
Test Case: 404 | Input/Output: [(13 32 -59 6) -59]
Test Case: 405 | Input/Output: [(-24 -74 -16 -84) -84]
Test Case: 406 | Input/Output: [(-67 16 -92 -20) -92]
Test Case: 407 | Input/Output: [(28 -94 77 81) -94]
Test Case: 408 | Input/Output: [(12 -83 55 8) -83]
Test Case: 409 | Input/Output: [(-89 -84 -27 -47) -89]
Test Case: 410 | Input/Output: [(5 -36 6 -56) -56]
Test Case: 411 | Input/Output: [(-30 -27 -30 -90) -90]
Test Case: 412 | Input/Output: [(-33 58 -1 -92) -92]
Test Case: 413 | Input/Output: [(-76 79 98 -24) -76]
Test Case: 414 | Input/Output: [(-68 89 76 82) -68]
Test Case: 415 | Input/Output: [(-52 42 74 76) -52]
Test Case: 416 | Input/Output: [(-86 -2 -26 -2) -86]
Test Case: 417 | Input/Output: [(-4 8 -12 41) -12]
Test Case: 418 | Input/Output: [(12 14 24 55) 12]
Test Case: 419 | Input/Output: [(60 10 26 -47) -47]
Test Case: 420 | Input/Output: [(43 46 -93 -58) -93]
Test Case: 421 | Input/Output: [(46 5 -15 -85) -85]
Test Case: 422 | Input/Output: [(-50 20 90 -51) -51]
Test Case: 423 | Input/Output: [(67 -29 -56 -54) -56]
Test Case: 424 | Input/Output: [(-84 62 44 -4) -84]
Test Case: 425 | Input/Output: [(3 37 -41 -25) -41]
Test Case: 426 | Input/Output: [(-16 61 98 8) -16]
Test Case: 427 | Input/Output: [(-26 -73 58 -1) -73]
Test Case: 428 | Input/Output: [(37 -88 52 -29) -88]
Test Case: 429 | Input/Output: [(-99 -15 82 -73) -99]
Test Case: 430 | Input/Output: [(-70 38 56 -85) -85]
Test Case: 431 | Input/Output: [(-61 -73 -77 -91) -91]
Test Case: 432 | Input/Output: [(31 97 -39 69) -39]
Test Case: 433 | Input/Output: [(-48 -7 -60 52) -60]
Test Case: 434 | Input/Output: [(16 62 25 69) 16]
Test Case: 435 | Input/Output: [(43 -78 11 -57) -78]
Test Case: 436 | Input/Output: [(49 -61 2 -52) -61]
Test Case: 437 | Input/Output: [(98 40 -81 33) -81]
Test Case: 438 | Input/Output: [(15 -53 -24 79) -53]
Test Case: 439 | Input/Output: [(-53 -74 -70 4) -74]
Test Case: 440 | Input/Output: [(-40 24 -32 -16) -40]
Test Case: 441 | Input/Output: [(-69 87 -72 -33) -72]
Test Case: 442 | Input/Output: [(13 -26 7 -83) -83]
Test Case: 443 | Input/Output: [(-27 -19 20 -72) -72]
Test Case: 444 | Input/Output: [(-15 60 -70 -5) -70]
Test Case: 445 | Input/Output: [(56 94 -89 93) -89]
Test Case: 446 | Input/Output: [(48 30 71 -17) -17]
Test Case: 447 | Input/Output: [(-40 74 -98 -34) -98]
Test Case: 448 | Input/Output: [(-29 39 99 90) -29]
Test Case: 449 | Input/Output: [(2 -9 39 -95) -95]
Test Case: 450 | Input/Output: [(-53 -94 26 -86) -94]
Test Case: 451 | Input/Output: [(-28 -37 -3 -20) -37]
Test Case: 452 | Input/Output: [(74 18 10 99) 10]
Test Case: 453 | Input/Output: [(-43 -65 -95 -72) -95]
Test Case: 454 | Input/Output: [(-76 -17 -20 -87) -87]
Test Case: 455 | Input/Output: [(21 30 71 -30) -30]
Test Case: 456 | Input/Output: [(-51 -12 -48 73) -51]
Test Case: 457 | Input/Output: [(-37 2 20 6) -37]
Test Case: 458 | Input/Output: [(41 6 -76 -62) -76]
Test Case: 459 | Input/Output: [(93 57 -10 12) -10]
Test Case: 460 | Input/Output: [(-85 -79 -35 -34) -85]
Test Case: 461 | Input/Output: [(68 62 -54 -2) -54]
Test Case: 462 | Input/Output: [(85 -70 86 -63) -70]
Test Case: 463 | Input/Output: [(-74 -81 -47 61) -81]
Test Case: 464 | Input/Output: [(-17 -36 -99 -92) -99]
Test Case: 465 | Input/Output: [(99 25 66 -45) -45]
Test Case: 466 | Input/Output: [(-92 36 -22 2) -92]
Test Case: 467 | Input/Output: [(24 -6 61 -92) -92]
Test Case: 468 | Input/Output: [(1 -41 -66 -55) -66]
Test Case: 469 | Input/Output: [(-34 -4 -66 -55) -66]
Test Case: 470 | Input/Output: [(-63 -22 -67 36) -67]
Test Case: 471 | Input/Output: [(33 45 -20 -54) -54]
Test Case: 472 | Input/Output: [(91 -65 -38 63) -65]
Test Case: 473 | Input/Output: [(18 45 -54 -85) -85]
Test Case: 474 | Input/Output: [(5 13 24 68) 5]
Test Case: 475 | Input/Output: [(98 -22 65 6) -22]
Test Case: 476 | Input/Output: [(42 -41 2 -79) -79]
Test Case: 477 | Input/Output: [(95 -86 -21 -36) -86]
Test Case: 478 | Input/Output: [(-74 7 14 80) -74]
Test Case: 479 | Input/Output: [(24 -44 -9 47) -44]
Test Case: 480 | Input/Output: [(-70 -8 87 -26) -70]
Test Case: 481 | Input/Output: [(95 52 -48 59) -48]
Test Case: 482 | Input/Output: [(-64 -3 23 -25) -64]
Test Case: 483 | Input/Output: [(64 -19 57 -22) -22]
Test Case: 484 | Input/Output: [(83 -8 7 -17) -17]
Test Case: 485 | Input/Output: [(60 89 53 10) 10]
Test Case: 486 | Input/Output: [(74 100 -35 -15) -35]
Test Case: 487 | Input/Output: [(-9 -77 -48 -39) -77]
Test Case: 488 | Input/Output: [(39 -54 -62 5) -62]
Test Case: 489 | Input/Output: [(32 85 3 -93) -93]
Test Case: 490 | Input/Output: [(51 70 -11 19) -11]
Test Case: 491 | Input/Output: [(68 4 -80 28) -80]
Test Case: 492 | Input/Output: [(-16 -100 21 -37) -100]
Test Case: 493 | Input/Output: [(-100 47 -48 -29) -100]
Test Case: 494 | Input/Output: [(35 -50 66 -27) -50]
Test Case: 495 | Input/Output: [(-49 95 35 24) -49]
Test Case: 496 | Input/Output: [(1 -74 23 51) -74]
Test Case: 497 | Input/Output: [(87 92 -1 90) -1]
Test Case: 498 | Input/Output: [(-74 94 -7 4) -74]
Test Case: 499 | Input/Output: [(-25 -10 50 33) -25]
Test Case: 500 | Input/Output: [(8 44 81 -8) -8]
Test Case: 501 | Input/Output: [(81 -94 -80 -29) -94]
Test Case: 502 | Input/Output: [(40 86 -98 -49) -98]
Test Case: 503 | Input/Output: [(43 19 85 -20) -20]
Test Case: 504 | Input/Output: [(-16 64 -22 84) -22]
Test Case: 505 | Input/Output: [(18 -52 75 -45) -52]
Test Case: 506 | Input/Output: [(87 58 62 73) 58]
Test Case: 507 | Input/Output: [(-6 89 12 55) -6]
Test Case: 508 | Input/Output: [(-21 76 45 92) -21]
Test Case: 509 | Input/Output: [(-2 53 94 -60) -60]
Test Case: 510 | Input/Output: [(33 59 -32 97) -32]
Test Case: 511 | Input/Output: [(-16 -67 73 11) -67]
Test Case: 512 | Input/Output: [(11 40 79 -27) -27]
Test Case: 513 | Input/Output: [(-92 97 49 81) -92]
Test Case: 514 | Input/Output: [(72 27 -73 85) -73]
Test Case: 515 | Input/Output: [(18 28 63 -84) -84]
Test Case: 516 | Input/Output: [(-72 78 99 17) -72]
Test Case: 517 | Input/Output: [(-96 -7 31 22) -96]
Test Case: 518 | Input/Output: [(14 -5 -11 -51) -51]
Test Case: 519 | Input/Output: [(-21 95 -72 -17) -72]
Test Case: 520 | Input/Output: [(63 15 -82 34) -82]
Test Case: 521 | Input/Output: [(-53 -53 -89 -47) -89]
Test Case: 522 | Input/Output: [(13 -20 80 -28) -28]
Test Case: 523 | Input/Output: [(10 93 -58 -96) -96]
Test Case: 524 | Input/Output: [(-67 -62 42 -50) -67]
Test Case: 525 | Input/Output: [(58 29 -91 -10) -91]
Test Case: 526 | Input/Output: [(-21 -65 0 45) -65]
Test Case: 527 | Input/Output: [(-86 -25 -10 24) -86]
Test Case: 528 | Input/Output: [(-19 64 -56 -74) -74]
Test Case: 529 | Input/Output: [(-84 16 94 45) -84]
Test Case: 530 | Input/Output: [(52 -66 -85 -17) -85]
Test Case: 531 | Input/Output: [(-35 -94 -70 -94) -94]
Test Case: 532 | Input/Output: [(32 3 97 -75) -75]
Test Case: 533 | Input/Output: [(53 -79 9 73) -79]
Test Case: 534 | Input/Output: [(68 68 36 72) 36]
Test Case: 535 | Input/Output: [(40 5 -33 -45) -45]
Test Case: 536 | Input/Output: [(-36 6 90 -76) -76]
Test Case: 537 | Input/Output: [(-67 -86 -16 -90) -90]
Test Case: 538 | Input/Output: [(14 -88 -16 27) -88]
Test Case: 539 | Input/Output: [(-97 -66 71 -97) -97]
Test Case: 540 | Input/Output: [(62 -55 -88 -89) -89]
Test Case: 541 | Input/Output: [(-49 17 -13 51) -49]
Test Case: 542 | Input/Output: [(69 -14 1 11) -14]
Test Case: 543 | Input/Output: [(88 15 -34 -55) -55]
Test Case: 544 | Input/Output: [(19 -13 -12 -34) -34]
Test Case: 545 | Input/Output: [(-90 -79 -10 93) -90]
Test Case: 546 | Input/Output: [(-19 -65 56 92) -65]
Test Case: 547 | Input/Output: [(49 -30 -5 -60) -60]
Test Case: 548 | Input/Output: [(83 61 -3 -78) -78]
Test Case: 549 | Input/Output: [(94 32 -63 19) -63]
Test Case: 550 | Input/Output: [(8 -96 17 83) -96]
Test Case: 551 | Input/Output: [(-90 -24 -82 76) -90]
Test Case: 552 | Input/Output: [(46 -86 -75 -44) -86]
Test Case: 553 | Input/Output: [(-86 17 -65 16) -86]
Test Case: 554 | Input/Output: [(57 -52 -72 91) -72]
Test Case: 555 | Input/Output: [(-85 -33 -36 -88) -88]
Test Case: 556 | Input/Output: [(100 29 13 -58) -58]
Test Case: 557 | Input/Output: [(-51 -34 -75 -62) -75]
Test Case: 558 | Input/Output: [(80 43 49 -78) -78]
Test Case: 559 | Input/Output: [(71 41 4 82) 4]
Test Case: 560 | Input/Output: [(20 -62 -100 34) -100]
Test Case: 561 | Input/Output: [(-75 -81 -46 71) -81]
Test Case: 562 | Input/Output: [(99 -69 -63 -28) -69]
Test Case: 563 | Input/Output: [(97 17 -79 -56) -79]
Test Case: 564 | Input/Output: [(-55 26 -3 43) -55]
Test Case: 565 | Input/Output: [(74 -2 -18 33) -18]
Test Case: 566 | Input/Output: [(58 35 56 -85) -85]
Test Case: 567 | Input/Output: [(-27 -98 -54 -33) -98]
Test Case: 568 | Input/Output: [(-64 90 -69 83) -69]
Test Case: 569 | Input/Output: [(-87 -59 -69 67) -87]
Test Case: 570 | Input/Output: [(-99 -47 -44 30) -99]
Test Case: 571 | Input/Output: [(53 50 91 -4) -4]
Test Case: 572 | Input/Output: [(43 -60 -28 47) -60]
Test Case: 573 | Input/Output: [(-100 -41 -32 -1) -100]
Test Case: 574 | Input/Output: [(22 -29 35 40) -29]
Test Case: 575 | Input/Output: [(63 6 -57 75) -57]
Test Case: 576 | Input/Output: [(-62 -1 36 12) -62]
Test Case: 577 | Input/Output: [(28 61 -90 -44) -90]
Test Case: 578 | Input/Output: [(-70 -83 -76 -5) -83]
Test Case: 579 | Input/Output: [(76 12 -7 9) -7]
Test Case: 580 | Input/Output: [(-10 -56 10 49) -56]
Test Case: 581 | Input/Output: [(-75 -3 16 -12) -75]
Test Case: 582 | Input/Output: [(-21 80 21 -34) -34]
Test Case: 583 | Input/Output: [(83 92 -63 -51) -63]
Test Case: 584 | Input/Output: [(-18 -3 -19 -55) -55]
Test Case: 585 | Input/Output: [(-75 11 64 -24) -75]
Test Case: 586 | Input/Output: [(-31 44 11 -48) -48]
Test Case: 587 | Input/Output: [(-7 -88 -51 55) -88]
Test Case: 588 | Input/Output: [(-44 33 -57 -94) -94]
Test Case: 589 | Input/Output: [(16 -74 -82 -60) -82]
Test Case: 590 | Input/Output: [(-80 -24 23 19) -80]
Test Case: 591 | Input/Output: [(-35 -54 25 66) -54]
Test Case: 592 | Input/Output: [(-5 2 22 -15) -15]
Test Case: 593 | Input/Output: [(81 -63 72 94) -63]
Test Case: 594 | Input/Output: [(-65 48 -21 10) -65]
Test Case: 595 | Input/Output: [(-8 68 94 -53) -53]
Test Case: 596 | Input/Output: [(-8 -98 -69 -34) -98]
Test Case: 597 | Input/Output: [(-12 -60 -18 -28) -60]
Test Case: 598 | Input/Output: [(-100 -12 -14 20) -100]
Test Case: 599 | Input/Output: [(-35 -63 -15 -91) -91]
Test Case: 600 | Input/Output: [(-1 98 61 79) -1]
Test Case: 601 | Input/Output: [(-5 -47 100 -47) -47]
Test Case: 602 | Input/Output: [(-54 -65 -15 44) -65]
Test Case: 603 | Input/Output: [(22 95 54 -44) -44]
Test Case: 604 | Input/Output: [(-29 -27 49 66) -29]
Test Case: 605 | Input/Output: [(-32 -67 -100 99) -100]
Test Case: 606 | Input/Output: [(-18 58 -15 27) -18]
Test Case: 607 | Input/Output: [(-26 -4 45 58) -26]
Test Case: 608 | Input/Output: [(35 -94 -10 -29) -94]
Test Case: 609 | Input/Output: [(-24 64 6 -32) -32]
Test Case: 610 | Input/Output: [(-1 -20 -13 91) -20]
Test Case: 611 | Input/Output: [(73 -95 79 30) -95]
Test Case: 612 | Input/Output: [(11 -17 -70 9) -70]
Test Case: 613 | Input/Output: [(48 -65 15 -69) -69]
Test Case: 614 | Input/Output: [(-29 13 -47 -71) -71]
Test Case: 615 | Input/Output: [(9 -75 51 -78) -78]
Test Case: 616 | Input/Output: [(47 -97 -90 -88) -97]
Test Case: 617 | Input/Output: [(-7 -71 39 20) -71]
Test Case: 618 | Input/Output: [(41 66 -46 -55) -55]
Test Case: 619 | Input/Output: [(21 40 74 -67) -67]
Test Case: 620 | Input/Output: [(7 -64 19 -83) -83]
Test Case: 621 | Input/Output: [(66 23 11 21) 11]
Test Case: 622 | Input/Output: [(-9 -2 -29 -82) -82]
Test Case: 623 | Input/Output: [(-89 -49 61 42) -89]
Test Case: 624 | Input/Output: [(76 13 -49 40) -49]
Test Case: 625 | Input/Output: [(25 -56 -53 -40) -56]
Test Case: 626 | Input/Output: [(-32 -94 -13 86) -94]
Test Case: 627 | Input/Output: [(90 34 -7 24) -7]
Test Case: 628 | Input/Output: [(-90 0 7 54) -90]
Test Case: 629 | Input/Output: [(-93 -47 -89 44) -93]
Test Case: 630 | Input/Output: [(82 10 -84 74) -84]
Test Case: 631 | Input/Output: [(-81 78 8 -49) -81]
Test Case: 632 | Input/Output: [(-55 58 -91 -36) -91]
Test Case: 633 | Input/Output: [(-41 -82 16 -78) -82]
Test Case: 634 | Input/Output: [(-39 62 88 83) -39]
Test Case: 635 | Input/Output: [(18 -86 99 19) -86]
Test Case: 636 | Input/Output: [(-73 84 4 71) -73]
Test Case: 637 | Input/Output: [(20 -55 66 23) -55]
Test Case: 638 | Input/Output: [(37 -68 -83 75) -83]
Test Case: 639 | Input/Output: [(-42 -78 77 -96) -96]
Test Case: 640 | Input/Output: [(-48 30 -8 76) -48]
Test Case: 641 | Input/Output: [(35 32 -71 -87) -87]
Test Case: 642 | Input/Output: [(41 6 -95 25) -95]
Test Case: 643 | Input/Output: [(68 -79 7 3) -79]
Test Case: 644 | Input/Output: [(89 -96 9 91) -96]
Test Case: 645 | Input/Output: [(-41 -34 47 -60) -60]
Test Case: 646 | Input/Output: [(4 0 -17 -22) -22]
Test Case: 647 | Input/Output: [(65 -47 -66 -34) -66]
Test Case: 648 | Input/Output: [(-74 -23 48 -98) -98]
Test Case: 649 | Input/Output: [(72 36 -94 84) -94]
Test Case: 650 | Input/Output: [(7 -89 14 -65) -89]
Test Case: 651 | Input/Output: [(92 -23 -80 -70) -80]
Test Case: 652 | Input/Output: [(36 -51 -43 -3) -51]
Test Case: 653 | Input/Output: [(-24 11 -11 -44) -44]
Test Case: 654 | Input/Output: [(-7 -11 -11 -24) -24]
Test Case: 655 | Input/Output: [(-58 25 -99 -92) -99]
Test Case: 656 | Input/Output: [(9 48 -24 -46) -46]
Test Case: 657 | Input/Output: [(1 18 -69 -29) -69]
Test Case: 658 | Input/Output: [(70 -37 -52 93) -52]
Test Case: 659 | Input/Output: [(90 -50 -32 24) -50]
Test Case: 660 | Input/Output: [(-74 44 -57 -74) -74]
Test Case: 661 | Input/Output: [(23 96 -96 84) -96]
Test Case: 662 | Input/Output: [(81 28 -73 10) -73]
Test Case: 663 | Input/Output: [(-86 -71 -1 -15) -86]
Test Case: 664 | Input/Output: [(2 74 -40 97) -40]
Test Case: 665 | Input/Output: [(99 44 -9 65) -9]
Test Case: 666 | Input/Output: [(-19 -30 -50 -45) -50]
Test Case: 667 | Input/Output: [(81 -55 33 -24) -55]
Test Case: 668 | Input/Output: [(12 -29 11 37) -29]
Test Case: 669 | Input/Output: [(35 5 -99 30) -99]
Test Case: 670 | Input/Output: [(23 -92 -5 -3) -92]
Test Case: 671 | Input/Output: [(88 16 -10 65) -10]
Test Case: 672 | Input/Output: [(-56 -6 15 -86) -86]
Test Case: 673 | Input/Output: [(-27 45 39 1) -27]
Test Case: 674 | Input/Output: [(-15 70 -91 59) -91]
Test Case: 675 | Input/Output: [(-66 42 -91 93) -91]
Test Case: 676 | Input/Output: [(44 -49 59 -11) -49]
Test Case: 677 | Input/Output: [(-70 -11 -29 60) -70]
Test Case: 678 | Input/Output: [(-2 -23 1 88) -23]
Test Case: 679 | Input/Output: [(0 -69 94 -68) -69]
Test Case: 680 | Input/Output: [(64 43 12 43) 12]
Test Case: 681 | Input/Output: [(50 -44 29 -48) -48]
Test Case: 682 | Input/Output: [(-71 35 -66 31) -71]
Test Case: 683 | Input/Output: [(97 12 32 96) 12]
Test Case: 684 | Input/Output: [(56 -77 -67 9) -77]
Test Case: 685 | Input/Output: [(62 -62 43 29) -62]
Test Case: 686 | Input/Output: [(78 55 -60 85) -60]
Test Case: 687 | Input/Output: [(94 96 -55 -65) -65]
Test Case: 688 | Input/Output: [(60 36 -34 96) -34]
Test Case: 689 | Input/Output: [(-3 -96 -90 -45) -96]
Test Case: 690 | Input/Output: [(-41 62 76 -67) -67]
Test Case: 691 | Input/Output: [(69 50 -61 9) -61]
Test Case: 692 | Input/Output: [(12 -60 55 -61) -61]
Test Case: 693 | Input/Output: [(9 14 46 85) 9]
Test Case: 694 | Input/Output: [(-64 70 64 72) -64]
Test Case: 695 | Input/Output: [(-54 39 28 -53) -54]
Test Case: 696 | Input/Output: [(83 13 15 6) 6]
Test Case: 697 | Input/Output: [(84 23 -9 5) -9]
Test Case: 698 | Input/Output: [(52 -45 -71 56) -71]
Test Case: 699 | Input/Output: [(-41 -48 -37 94) -48]
Test Case: 700 | Input/Output: [(77 31 -77 97) -77]
Test Case: 701 | Input/Output: [(-87 -40 -95 -2) -95]
Test Case: 702 | Input/Output: [(-1 -84 44 -68) -84]
Test Case: 703 | Input/Output: [(-7 22 -68 -69) -69]
Test Case: 704 | Input/Output: [(39 -93 -52 -91) -93]
Test Case: 705 | Input/Output: [(30 -37 57 86) -37]
Test Case: 706 | Input/Output: [(54 -94 57 66) -94]
Test Case: 707 | Input/Output: [(92 -73 59 32) -73]
Test Case: 708 | Input/Output: [(-70 46 70 92) -70]
Test Case: 709 | Input/Output: [(-50 44 65 85) -50]
Test Case: 710 | Input/Output: [(-31 36 77 -89) -89]
Test Case: 711 | Input/Output: [(87 68 -46 16) -46]
Test Case: 712 | Input/Output: [(42 -53 82 -74) -74]
Test Case: 713 | Input/Output: [(23 -84 25 -57) -84]
Test Case: 714 | Input/Output: [(19 -28 -11 46) -28]
Test Case: 715 | Input/Output: [(11 82 34 65) 11]
Test Case: 716 | Input/Output: [(-37 -27 57 89) -37]
Test Case: 717 | Input/Output: [(-52 -8 -61 -21) -61]
Test Case: 718 | Input/Output: [(-16 1 67 73) -16]
Test Case: 719 | Input/Output: [(44 11 30 -1) -1]
Test Case: 720 | Input/Output: [(19 79 75 19) 19]
Test Case: 721 | Input/Output: [(-83 34 38 48) -83]
Test Case: 722 | Input/Output: [(19 63 -35 41) -35]
Test Case: 723 | Input/Output: [(-46 60 -48 45) -48]
Test Case: 724 | Input/Output: [(-89 6 -94 -28) -94]
Test Case: 725 | Input/Output: [(-71 16 28 28) -71]
Test Case: 726 | Input/Output: [(-19 25 28 -17) -19]
Test Case: 727 | Input/Output: [(-86 -74 -18 -8) -86]
Test Case: 728 | Input/Output: [(-7 -11 59 -9) -11]
Test Case: 729 | Input/Output: [(-30 -58 17 -63) -63]
Test Case: 730 | Input/Output: [(-67 36 -52 8) -67]
Test Case: 731 | Input/Output: [(-21 27 18 -7) -21]
Test Case: 732 | Input/Output: [(36 -87 70 -59) -87]
Test Case: 733 | Input/Output: [(-88 9 10 -84) -88]
Test Case: 734 | Input/Output: [(51 -44 51 3) -44]
Test Case: 735 | Input/Output: [(74 -77 43 1) -77]
Test Case: 736 | Input/Output: [(-26 -32 -37 -93) -93]
Test Case: 737 | Input/Output: [(66 22 50 21) 21]
Test Case: 738 | Input/Output: [(4 13 53 -60) -60]
Test Case: 739 | Input/Output: [(15 67 53 -24) -24]
Test Case: 740 | Input/Output: [(-48 -56 -46 -55) -56]
Test Case: 741 | Input/Output: [(3 -48 85 78) -48]
Test Case: 742 | Input/Output: [(-70 8 36 90) -70]
Test Case: 743 | Input/Output: [(-44 -12 77 60) -44]
Test Case: 744 | Input/Output: [(-89 -12 -18 1) -89]
Test Case: 745 | Input/Output: [(-97 -8 -82 -96) -97]
Test Case: 746 | Input/Output: [(14 -76 -29 -52) -76]
Test Case: 747 | Input/Output: [(95 24 -87 -14) -87]
Test Case: 748 | Input/Output: [(43 -36 24 66) -36]
Test Case: 749 | Input/Output: [(-38 -32 88 43) -38]
Test Case: 750 | Input/Output: [(13 90 -98 -67) -98]
Test Case: 751 | Input/Output: [(85 50 -24 -84) -84]
Test Case: 752 | Input/Output: [(-36 -100 23 -93) -100]
Test Case: 753 | Input/Output: [(-18 -11 1 84) -18]
Test Case: 754 | Input/Output: [(-44 77 -66 -2) -66]
Test Case: 755 | Input/Output: [(-57 -34 70 -83) -83]
Test Case: 756 | Input/Output: [(23 33 -46 54) -46]
Test Case: 757 | Input/Output: [(-26 78 -64 -65) -65]
Test Case: 758 | Input/Output: [(-74 46 -23 -68) -74]
Test Case: 759 | Input/Output: [(2 -91 34 -19) -91]
Test Case: 760 | Input/Output: [(-8 -92 12 -88) -92]
Test Case: 761 | Input/Output: [(98 -4 53 -47) -47]
Test Case: 762 | Input/Output: [(8 65 -53 40) -53]
Test Case: 763 | Input/Output: [(-86 72 -78 -4) -86]
Test Case: 764 | Input/Output: [(36 -78 -22 -36) -78]
Test Case: 765 | Input/Output: [(-71 -100 49 13) -100]
Test Case: 766 | Input/Output: [(-5 48 -14 64) -14]
Test Case: 767 | Input/Output: [(-99 6 -61 71) -99]
Test Case: 768 | Input/Output: [(-64 79 -39 48) -64]
Test Case: 769 | Input/Output: [(-10 45 80 -5) -10]
Test Case: 770 | Input/Output: [(74 0 66 -78) -78]
Test Case: 771 | Input/Output: [(31 -20 28 -83) -83]
Test Case: 772 | Input/Output: [(61 3 -54 -48) -54]
Test Case: 773 | Input/Output: [(35 91 -22 66) -22]
Test Case: 774 | Input/Output: [(14 -46 8 -11) -46]
Test Case: 775 | Input/Output: [(-6 -61 -10 -86) -86]
Test Case: 776 | Input/Output: [(-15 -57 13 78) -57]
Test Case: 777 | Input/Output: [(-21 39 58 90) -21]
Test Case: 778 | Input/Output: [(-40 69 -26 68) -40]
Test Case: 779 | Input/Output: [(-49 66 11 94) -49]
Test Case: 780 | Input/Output: [(-26 -84 -57 39) -84]
Test Case: 781 | Input/Output: [(-94 -97 -93 -27) -97]
Test Case: 782 | Input/Output: [(51 54 -92 -73) -92]
Test Case: 783 | Input/Output: [(-29 50 23 48) -29]
Test Case: 784 | Input/Output: [(36 -58 -86 -61) -86]
Test Case: 785 | Input/Output: [(80 73 54 14) 14]
Test Case: 786 | Input/Output: [(-12 -60 57 22) -60]
Test Case: 787 | Input/Output: [(14 32 -23 33) -23]
Test Case: 788 | Input/Output: [(69 -69 -33 3) -69]
Test Case: 789 | Input/Output: [(81 -2 59 44) -2]
Test Case: 790 | Input/Output: [(-98 16 -16 -85) -98]
Test Case: 791 | Input/Output: [(-85 70 -53 -52) -85]
Test Case: 792 | Input/Output: [(85 -89 59 42) -89]
Test Case: 793 | Input/Output: [(28 -26 34 99) -26]
Test Case: 794 | Input/Output: [(-54 -40 93 -31) -54]
Test Case: 795 | Input/Output: [(-8 28 61 -44) -44]
Test Case: 796 | Input/Output: [(-100 -85 36 -22) -100]
Test Case: 797 | Input/Output: [(-53 -44 -48 6) -53]
Test Case: 798 | Input/Output: [(85 66 56 82) 56]
Test Case: 799 | Input/Output: [(71 92 -74 65) -74]
Test Case: 800 | Input/Output: [(-69 -14 54 14) -69]
Test Case: 801 | Input/Output: [(62 -96 79 35) -96]
Test Case: 802 | Input/Output: [(8 -5 -86 -27) -86]
Test Case: 803 | Input/Output: [(-64 -33 39 -55) -64]
Test Case: 804 | Input/Output: [(-18 -21 83 55) -21]
Test Case: 805 | Input/Output: [(90 52 -18 -2) -18]
Test Case: 806 | Input/Output: [(-27 18 -82 61) -82]
Test Case: 807 | Input/Output: [(50 40 -35 31) -35]
Test Case: 808 | Input/Output: [(18 1 64 20) 1]
Test Case: 809 | Input/Output: [(-29 35 50 17) -29]
Test Case: 810 | Input/Output: [(-77 17 97 -88) -88]
Test Case: 811 | Input/Output: [(-65 -24 -31 -95) -95]
Test Case: 812 | Input/Output: [(6 -83 -50 -81) -83]
Test Case: 813 | Input/Output: [(53 -95 13 -62) -95]
Test Case: 814 | Input/Output: [(-79 33 81 -25) -79]
Test Case: 815 | Input/Output: [(64 23 -90 -85) -90]
Test Case: 816 | Input/Output: [(91 30 -95 55) -95]
Test Case: 817 | Input/Output: [(-14 -89 22 65) -89]
Test Case: 818 | Input/Output: [(-99 80 -15 -24) -99]
Test Case: 819 | Input/Output: [(56 -54 47 89) -54]
Test Case: 820 | Input/Output: [(-11 82 -67 -60) -67]
Test Case: 821 | Input/Output: [(93 3 -33 -52) -52]
Test Case: 822 | Input/Output: [(66 35 -32 17) -32]
Test Case: 823 | Input/Output: [(-9 41 32 65) -9]
Test Case: 824 | Input/Output: [(57 -25 73 98) -25]
Test Case: 825 | Input/Output: [(-81 5 -84 81) -84]
Test Case: 826 | Input/Output: [(-100 78 2 -11) -100]
Test Case: 827 | Input/Output: [(-61 29 28 57) -61]
Test Case: 828 | Input/Output: [(0 -22 -73 66) -73]
Test Case: 829 | Input/Output: [(-8 71 -72 -39) -72]
Test Case: 830 | Input/Output: [(-28 -4 95 6) -28]
Test Case: 831 | Input/Output: [(59 29 -80 -22) -80]
Test Case: 832 | Input/Output: [(48 -67 0 68) -67]
Test Case: 833 | Input/Output: [(-43 40 -39 46) -43]
Test Case: 834 | Input/Output: [(5 87 -1 76) -1]
Test Case: 835 | Input/Output: [(-76 -81 -91 88) -91]
Test Case: 836 | Input/Output: [(-20 -30 -10 32) -30]
Test Case: 837 | Input/Output: [(-43 25 -68 -63) -68]
Test Case: 838 | Input/Output: [(20 48 68 -100) -100]
Test Case: 839 | Input/Output: [(37 81 30 -96) -96]
Test Case: 840 | Input/Output: [(63 81 67 40) 40]
Test Case: 841 | Input/Output: [(-44 -84 3 -60) -84]
Test Case: 842 | Input/Output: [(1 -24 62 52) -24]
Test Case: 843 | Input/Output: [(-42 -35 15 27) -42]
Test Case: 844 | Input/Output: [(-92 34 -30 -21) -92]
Test Case: 845 | Input/Output: [(-94 -46 62 41) -94]
Test Case: 846 | Input/Output: [(100 73 -75 -6) -75]
Test Case: 847 | Input/Output: [(-10 -23 -1 67) -23]
Test Case: 848 | Input/Output: [(31 86 -95 -88) -95]
Test Case: 849 | Input/Output: [(78 67 69 47) 47]
Test Case: 850 | Input/Output: [(-85 25 -79 23) -85]
Test Case: 851 | Input/Output: [(74 90 -61 -12) -61]
Test Case: 852 | Input/Output: [(79 -89 -76 18) -89]
Test Case: 853 | Input/Output: [(51 97 25 -50) -50]
Test Case: 854 | Input/Output: [(35 86 93 -36) -36]
Test Case: 855 | Input/Output: [(31 -46 -34 79) -46]
Test Case: 856 | Input/Output: [(71 -97 26 -53) -97]
Test Case: 857 | Input/Output: [(-80 -24 -84 -90) -90]
Test Case: 858 | Input/Output: [(-46 -83 -33 87) -83]
Test Case: 859 | Input/Output: [(35 -81 -30 17) -81]
Test Case: 860 | Input/Output: [(10 40 -56 -97) -97]
Test Case: 861 | Input/Output: [(18 -60 -86 -29) -86]
Test Case: 862 | Input/Output: [(-62 26 -13 -54) -62]
Test Case: 863 | Input/Output: [(-73 20 -50 -91) -91]
Test Case: 864 | Input/Output: [(-3 61 -59 -12) -59]
Test Case: 865 | Input/Output: [(67 9 -85 -21) -85]
Test Case: 866 | Input/Output: [(-30 -24 12 27) -30]
Test Case: 867 | Input/Output: [(-30 -25 -7 -91) -91]
Test Case: 868 | Input/Output: [(-92 35 -89 31) -92]
Test Case: 869 | Input/Output: [(81 -64 40 18) -64]
Test Case: 870 | Input/Output: [(-6 2 -26 -30) -30]
Test Case: 871 | Input/Output: [(67 80 98 26) 26]
Test Case: 872 | Input/Output: [(-60 -99 4 56) -99]
Test Case: 873 | Input/Output: [(-60 68 -54 2) -60]
Test Case: 874 | Input/Output: [(-81 -9 77 93) -81]
Test Case: 875 | Input/Output: [(-69 -61 59 60) -69]
Test Case: 876 | Input/Output: [(-41 -35 -28 7) -41]
Test Case: 877 | Input/Output: [(-63 -21 -35 -42) -63]
Test Case: 878 | Input/Output: [(-46 -78 15 -10) -78]
Test Case: 879 | Input/Output: [(-70 97 31 0) -70]
Test Case: 880 | Input/Output: [(46 -75 -23 99) -75]
Test Case: 881 | Input/Output: [(-95 -67 -59 -2) -95]
Test Case: 882 | Input/Output: [(74 -54 69 82) -54]
Test Case: 883 | Input/Output: [(-61 -57 -62 81) -62]
Test Case: 884 | Input/Output: [(45 94 -1 93) -1]
Test Case: 885 | Input/Output: [(-41 9 -33 -21) -41]
Test Case: 886 | Input/Output: [(-19 -15 100 -65) -65]
Test Case: 887 | Input/Output: [(-40 -70 28 43) -70]
Test Case: 888 | Input/Output: [(6 95 32 -99) -99]
Test Case: 889 | Input/Output: [(8 28 33 -33) -33]
Test Case: 890 | Input/Output: [(-61 -25 71 45) -61]
Test Case: 891 | Input/Output: [(-2 92 84 -25) -25]
Test Case: 892 | Input/Output: [(55 -91 4 -62) -91]
Test Case: 893 | Input/Output: [(-4 40 -67 -85) -85]
Test Case: 894 | Input/Output: [(46 34 -88 53) -88]
Test Case: 895 | Input/Output: [(67 -70 62 -62) -70]
Test Case: 896 | Input/Output: [(60 -95 -20 -81) -95]
Test Case: 897 | Input/Output: [(-76 -58 37 -84) -84]
Test Case: 898 | Input/Output: [(22 20 41 73) 20]
Test Case: 899 | Input/Output: [(87 -22 58 -3) -22]
Test Case: 900 | Input/Output: [(-63 -23 59 13) -63]
Test Case: 901 | Input/Output: [(-19 -52 10 -94) -94]
Test Case: 902 | Input/Output: [(11 -61 -97 86) -97]
Test Case: 903 | Input/Output: [(75 -75 -44 76) -75]
Test Case: 904 | Input/Output: [(-67 46 -42 41) -67]
Test Case: 905 | Input/Output: [(22 -32 77 19) -32]
Test Case: 906 | Input/Output: [(21 -15 43 16) -15]
Test Case: 907 | Input/Output: [(23 -53 -23 -31) -53]
Test Case: 908 | Input/Output: [(-49 -25 -97 -50) -97]
Test Case: 909 | Input/Output: [(74 -58 99 -19) -58]
Test Case: 910 | Input/Output: [(52 90 70 92) 52]
Test Case: 911 | Input/Output: [(-98 86 23 78) -98]
Test Case: 912 | Input/Output: [(30 13 61 -28) -28]
Test Case: 913 | Input/Output: [(-13 -60 47 25) -60]
Test Case: 914 | Input/Output: [(98 -11 21 -78) -78]
Test Case: 915 | Input/Output: [(-78 -33 8 -60) -78]
Test Case: 916 | Input/Output: [(4 29 -83 79) -83]
Test Case: 917 | Input/Output: [(-78 47 100 44) -78]
Test Case: 918 | Input/Output: [(-91 -10 -27 15) -91]
Test Case: 919 | Input/Output: [(80 87 67 55) 55]
Test Case: 920 | Input/Output: [(24 49 -70 2) -70]
Test Case: 921 | Input/Output: [(22 42 -85 42) -85]
Test Case: 922 | Input/Output: [(61 85 -58 52) -58]
Test Case: 923 | Input/Output: [(14 45 50 -77) -77]
Test Case: 924 | Input/Output: [(22 1 68 83) 1]
Test Case: 925 | Input/Output: [(65 -16 50 48) -16]
Test Case: 926 | Input/Output: [(90 -48 42 5) -48]
Test Case: 927 | Input/Output: [(67 83 -27 96) -27]
Test Case: 928 | Input/Output: [(-44 -68 44 -6) -68]
Test Case: 929 | Input/Output: [(93 26 62 -41) -41]
Test Case: 930 | Input/Output: [(-5 93 -15 69) -15]
Test Case: 931 | Input/Output: [(-83 85 -48 58) -83]
Test Case: 932 | Input/Output: [(-49 3 -52 73) -52]
Test Case: 933 | Input/Output: [(-29 -93 43 98) -93]
Test Case: 934 | Input/Output: [(55 -8 87 -51) -51]
Test Case: 935 | Input/Output: [(14 98 -13 -22) -22]
Test Case: 936 | Input/Output: [(24 -59 19 87) -59]
Test Case: 937 | Input/Output: [(43 -15 49 -77) -77]
Test Case: 938 | Input/Output: [(92 86 -41 -17) -41]
Test Case: 939 | Input/Output: [(-45 -64 17 -90) -90]
Test Case: 940 | Input/Output: [(-36 -56 -38 29) -56]
Test Case: 941 | Input/Output: [(-94 56 -80 73) -94]
Test Case: 942 | Input/Output: [(1 6 68 -29) -29]
Test Case: 943 | Input/Output: [(66 47 -37 39) -37]
Test Case: 944 | Input/Output: [(-4 85 -52 0) -52]
Test Case: 945 | Input/Output: [(-92 57 -26 -66) -92]
Test Case: 946 | Input/Output: [(27 77 -45 -59) -59]
Test Case: 947 | Input/Output: [(98 79 24 -55) -55]
Test Case: 948 | Input/Output: [(-80 34 -46 -54) -80]
Test Case: 949 | Input/Output: [(-91 91 50 -78) -91]
Test Case: 950 | Input/Output: [(96 -55 -86 55) -86]
Test Case: 951 | Input/Output: [(18 -10 -63 53) -63]
Test Case: 952 | Input/Output: [(3 -93 -83 77) -93]
Test Case: 953 | Input/Output: [(66 86 98 -13) -13]
Test Case: 954 | Input/Output: [(37 -49 33 42) -49]
Test Case: 955 | Input/Output: [(-77 -43 -51 89) -77]
Test Case: 956 | Input/Output: [(49 95 14 67) 14]
Test Case: 957 | Input/Output: [(48 26 8 89) 8]
Test Case: 958 | Input/Output: [(-42 -33 -46 12) -46]
Test Case: 959 | Input/Output: [(14 72 18 -89) -89]
Test Case: 960 | Input/Output: [(39 2 -89 50) -89]
Test Case: 961 | Input/Output: [(89 -61 6 36) -61]
Test Case: 962 | Input/Output: [(76 -61 -8 84) -61]
Test Case: 963 | Input/Output: [(61 73 -58 99) -58]
Test Case: 964 | Input/Output: [(65 -95 77 94) -95]
Test Case: 965 | Input/Output: [(-84 67 46 -100) -100]
Test Case: 966 | Input/Output: [(-27 -48 -21 -26) -48]
Test Case: 967 | Input/Output: [(-28 39 -71 97) -71]
Test Case: 968 | Input/Output: [(75 74 82 -3) -3]
Test Case: 969 | Input/Output: [(71 14 15 34) 14]
Test Case: 970 | Input/Output: [(99 -21 23 -85) -85]
Test Case: 971 | Input/Output: [(-48 -67 55 -28) -67]
Test Case: 972 | Input/Output: [(-87 -78 35 -42) -87]
Test Case: 973 | Input/Output: [(55 -9 91 -5) -9]
Test Case: 974 | Input/Output: [(-34 -54 6 30) -54]
Test Case: 975 | Input/Output: [(-29 98 26 -79) -79]
Test Case: 976 | Input/Output: [(81 18 -85 -19) -85]
Test Case: 977 | Input/Output: [(-42 -92 -75 53) -92]
Test Case: 978 | Input/Output: [(57 29 17 -27) -27]
Test Case: 979 | Input/Output: [(-68 -16 5 6) -68]
Test Case: 980 | Input/Output: [(-75 93 4 -90) -90]
Test Case: 981 | Input/Output: [(85 -78 89 2) -78]
Test Case: 982 | Input/Output: [(-72 65 -83 -9) -83]
Test Case: 983 | Input/Output: [(80 -57 99 1) -57]
Test Case: 984 | Input/Output: [(31 51 -48 -81) -81]
Test Case: 985 | Input/Output: [(43 -87 -51 61) -87]
Test Case: 986 | Input/Output: [(9 42 47 -89) -89]
Test Case: 987 | Input/Output: [(74 93 87 87) 74]
Test Case: 988 | Input/Output: [(34 19 -30 98) -30]
Test Case: 989 | Input/Output: [(10 3 37 91) 3]
Test Case: 990 | Input/Output: [(-11 63 15 74) -11]
Test Case: 991 | Input/Output: [(-21 -30 73 47) -30]
Test Case: 992 | Input/Output: [(67 -44 92 72) -44]
Test Case: 993 | Input/Output: [(16 -13 43 22) -13]
Test Case: 994 | Input/Output: [(-51 91 -23 62) -51]
Test Case: 995 | Input/Output: [(14 -14 82 -35) -35]
Test Case: 996 | Input/Output: [(-80 -86 92 -35) -86]
Test Case: 997 | Input/Output: [(-82 70 53 -45) -82]
Test Case: 998 | Input/Output: [(59 50 15 9) 9]
Test Case: 999 | Input/Output: [(95 -26 61 -83) -83]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -120 -56 -96 -3 97 34 -51 67 -35 -18 113 15 28 -3 66 -58
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-95 35 35 35] -95] [[-63 -63 -94 -63] -94] [[-11 -11 -85 -11] -85] [[-72 -72 -62 -72] -72] [[-96 11 -96 -96] -96] [[73 32 73 73] 32] [[-58 -58 15 -58] -58] [[-41 83 83 83] -41] [[67 -87 67 67] -87] [[-59 -59 -36 -59] -59] [(-16 -16 -16 -16) -16] [(-41 -41 -41 -41) -41] [(-11 -11 -11 -11) -11] [(11 11 11 11) 11] [(87 87 87 87) 87] [(9 3 6 26) 3] [(28 49 58 63) 28] [(51 87 71 21) 21] [(54 63 34 95) 34] [(34 65 19 10) 10] [(100 0 64 62) 0] [(43 75 57 71) 43] [(39 22 23 85) 22] [(72 52 41 60) 41] [(62 50 48 78) 48] [(7 12 72 13) 7] [(28 2 25 24) 2] [(41 33 97 48) 33] [(58 73 55 98) 55] [(71 82 19 96) 19] [(25 4 93 0) 0] [(29 31 81 87) 29] [(83 99 99 98) 83] [(56 24 73 89) 24] [(82 73 10 30) 10] [(100 23 -80 -42) -80] [(15 -70 -63 -14) -70] [(-7 83 20 19) -7] [(88 31 -79 52) -79] [(-95 82 -12 92) -95] [(70 70 -25 -50) -50] [(-53 87 -4 -41) -53] [(-83 67 -5 44) -83] [(-99 0 27 -99) -99] [(58 -4 29 -23) -23] [(-26 -67 11 -5) -67] [(-15 -59 4 69) -59] [(-1 68 -100 37) -100] [(-72 -85 -11 -76) -85] [(18 91 96 -56) -56] [(-52 -28 -70 74) -70] [(5 -13 -44 13) -44] [(72 39 -65 -8) -65] [(59 -24 -37 -93) -93] [(74 76 -46 -86) -86] [(-4 15 63 33) -4] [(21 7 74 54) 7] [(13 -88 -73 -17) -88] [(95 9 38 -33) -33] [(45 70 28 45) 28] [(40 88 8 70) 8] [(10 72 -27 27) -27] [(21 46 12 17) 12] [(-8 -79 -44 -76) -79] [(-23 77 18 41) -23] [(3 -73 -8 84) -73] [(-93 71 66 -93) -93] [(-15 -49 -75 -94) -94] [(-51 -11 -72 37) -72] [(86 -25 30 -55) -55] [(19 -65 11 59) -65] [(-60 -61 -51 90) -61] [(94 77 27 -99) -99] [(-76 -14 -48 33) -76] [(-70 -22 -44 57) -70] [(21 -42 -45 -86) -86] [(91 -50 90 -40) -50] [(-31 -41 -19 -7) -41] [(69 76 79 95) 69] [(80 80 -51 47) -51] [(27 -75 -8 -91) -91] [(74 -54 64 18) -54] [(-81 57 -94 59) -94] [(-90 41 -72 -91) -91] [(-54 -91 -7 27) -91] [(-93 -71 -43 -35) -93] [(-77 18 31 49) -77] [(100 52 -2 -31) -31] [(-40 -36 46 -80) -80] [(71 -78 -77 -88) -88] [(3 4 -20 50) -20] [(99 -32 -100 34) -100] [(95 -81 39 -29) -81] [(26 43 27 -71) -71] [(-9 -91 -58 -65) -91])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: 15                 
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -36                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 6                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 71                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 19                 
Correct output: 0                   | Program output: 64                 
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 23                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 72                 
Correct output: 2                   | Program output: 25                 
Correct output: 33                  | Program output: 97                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 93                 
Correct output: 29                  | Program output: 81                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -63                
Correct output: -7                  | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -25                
Correct output: -53                 | Program output: -4                 
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: 27                 
Correct output: -23                 | Program output: 29                 
Correct output: -67                 | Program output: 11                 
Correct output: -59                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -11                
Correct output: -56                 | Program output: 96                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -37                
Correct output: -86                 | Program output: -46                
Correct output: -4                  | Program output: 63                 
Correct output: 7                   | Program output: 74                 
Correct output: -88                 | Program output: -73                
Correct output: -33                 | Program output: 38                 
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -44                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -8                 
Correct output: -93                 | Program output: 66                 
Correct output: -94                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 30                 
Correct output: -65                 | Program output: 11                 
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: 27                 
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -45                
Correct output: -50                 | Program output: 90                 
Correct output: -41                 | Program output: -19                
Correct output: 69                  | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -8                 
Correct output: -54                 | Program output: 64                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -72                
Correct output: -91                 | Program output: -7                 
Correct output: -93                 | Program output: -43                
Correct output: -77                 | Program output: 31                 
Correct output: -31                 | Program output: -2                 
Correct output: -80                 | Program output: 46                 
Correct output: -88                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: 39                 
Correct output: -71                 | Program output: 27                 
Correct output: -91                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_803} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction -64} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush})
Lexicase best program: (exec_k (exec_noop exec_do*while (exec_yankdup exec_do*times (integer_rot boolean_invert_first_then_and) exec_noop exec_dup_items exec_rot (in3 in3 print_integer exec_when () integer_empty exec_rot (integer_yank boolean_not exec_dup_times (integer_add)) (integer_pop) (exec_flush boolean_dup_times boolean_yank exec_rot (exec_empty integer_add exec_do*while (exec_do*count (exec_empty boolean_dup_times exec_k_when_autoconstructing (exec_k (tagged_803 integer_fromboolean integer_min integer_gt exec_shove (boolean_or -64) boolean_flush exec_rot () () (exec_if (integer_yank print_integer boolean_pop in4) () boolean_dup exec_dup_items exec_rot (boolean_yank integer_flush) () ())) ()) ()))) () ())) () ())) ())
Lexicase best errors: [0 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 83
Percent parens: 0.373
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_803} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction -64} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush})
Zero cases best program: (exec_k (exec_noop exec_do*while (exec_yankdup exec_do*times (integer_rot boolean_invert_first_then_and) exec_noop exec_dup_items exec_rot (in3 in3 print_integer exec_when () integer_empty exec_rot (integer_yank boolean_not exec_dup_times (integer_add)) (integer_pop) (exec_flush boolean_dup_times boolean_yank exec_rot (exec_empty integer_add exec_do*while (exec_do*count (exec_empty boolean_dup_times exec_k_when_autoconstructing (exec_k (tagged_803 integer_fromboolean integer_min integer_gt exec_shove (boolean_or -64) boolean_flush exec_rot () () (exec_if (integer_yank print_integer boolean_pop in4) () boolean_dup exec_dup_items exec_rot (boolean_yank integer_flush) () ())) ()) ()))) () ())) () ())) ())
Zero cases best errors: [0 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 83
Percent parens: 0.373
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 3 2 3 4 4 4 3 4 3)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (4 3 2 3 4 4 4 3 4 3)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_if} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop})
Best program: (integer_mod exec_y_when_autoconstructing (integer_pop) in3 integer_gte print_integer exec_do*while (exec_do*count (boolean_xor exec_do*times (integer_min exec_pop (integer_pop boolean_rot boolean_xor) exec_s (integer_rot print_boolean boolean_dup_items) (boolean_or boolean_dup_items in4 boolean_dup_items exec_if () () exec_when () boolean_invert_first_then_and boolean_or boolean_and boolean_shove exec_shove (boolean_dup_items) integer_lt integer_mult exec_empty exec_while (integer_inc boolean_invert_second_then_and boolean_rot boolean_pop)) ()))))
Errors: [0 1 1 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 53
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 9.966
Median total errors in population: 10
Error averages by case: (0.996 0.997 0.998 0.997 0.996 0.996 0.996 0.997 0.996 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.71
Average program size in population (points): 68.249
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 470348
--- Timings ---
Current time: 1559584020305 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.4%
Reproduction:         0.8 seconds, 32.4%
Fitness Testing:      1.6 seconds, 63.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: 15                 
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -36                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 6                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 71                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 19                 
Correct output: 0                   | Program output: 64                 
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 23                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 72                 
Correct output: 2                   | Program output: 25                 
Correct output: 33                  | Program output: 97                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 93                 
Correct output: 29                  | Program output: 81                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -63                
Correct output: -7                  | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -25                
Correct output: -53                 | Program output: -4                 
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: 27                 
Correct output: -23                 | Program output: 29                 
Correct output: -67                 | Program output: 11                 
Correct output: -59                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -11                
Correct output: -56                 | Program output: 96                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -37                
Correct output: -86                 | Program output: -46                
Correct output: -4                  | Program output: 63                 
Correct output: 7                   | Program output: 74                 
Correct output: -88                 | Program output: -73                
Correct output: -33                 | Program output: 38                 
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -44                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -8                 
Correct output: -93                 | Program output: 66                 
Correct output: -94                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 30                 
Correct output: -65                 | Program output: 11                 
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: 27                 
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -45                
Correct output: -50                 | Program output: 90                 
Correct output: -41                 | Program output: -19                
Correct output: 69                  | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -8                 
Correct output: -54                 | Program output: 64                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -72                
Correct output: -91                 | Program output: -7                 
Correct output: -93                 | Program output: -43                
Correct output: -77                 | Program output: 31                 
Correct output: -31                 | Program output: -2                 
Correct output: -80                 | Program output: 46                 
Correct output: -88                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: 39                 
Correct output: -71                 | Program output: 27                 
Correct output: -91                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_if} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_s (integer_add) (print_integer boolean_swap integer_inc boolean_not boolean_xor integer_flush integer_rot integer_yankdup boolean_yank) (integer_add exec_when (integer_swap) in3 boolean_and integer_add) boolean_stackdepth exec_dup () boolean_dup_items in4 boolean_dup_items exec_if () () exec_when () boolean_invert_first_then_and boolean_or boolean_and boolean_shove exec_shove (boolean_dup_items) integer_lt integer_mult exec_empty exec_while (integer_inc boolean_invert_second_then_and boolean_rot boolean_pop))
Lexicase best errors: [0 1 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_if} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_s (integer_add) (print_integer boolean_swap integer_inc boolean_not boolean_xor integer_flush integer_rot integer_yankdup boolean_yank) (integer_add exec_when (integer_swap) in3 boolean_and integer_add) boolean_stackdepth exec_dup () boolean_dup_items in4 boolean_dup_items exec_if () () exec_when () boolean_invert_first_then_and boolean_or boolean_and boolean_shove exec_shove (boolean_dup_items) integer_lt integer_mult exec_empty exec_while (integer_inc boolean_invert_second_then_and boolean_rot boolean_pop))
Zero cases best errors: [0 1 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (432 41 432 80 180 430 182 432 824 80)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (432 41 432 80 180 430 182 432 824 80)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction tag_integer_140} {:close 0, :instruction tag_integer_264} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_87} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_flush})
Best program: (exec_s (integer_add) (print_integer boolean_swap integer_inc boolean_not boolean_xor integer_flush integer_rot integer_yankdup boolean_yank) (integer_add exec_when (integer_swap) in3 boolean_and integer_add) boolean_stackdepth exec_dup () integer_mult boolean_stackdepth exec_shove (integer_mult tag_integer_140) tag_integer_264 boolean_swap integer_dup_items integer_eq tagged_87 integer_lte integer_stackdepth integer_eq boolean_yank boolean_and exec_noop integer_eq exec_do*range (integer_swap) boolean_shove exec_dup (boolean_and exec_stackdepth exec_when (exec_do*while () boolean_invert_first_then_and integer_flush exec_noop) exec_do*while (boolean_frominteger exec_s () (exec_eq exec_do*range (integer_shove) integer_lt boolean_dup_times exec_stackdepth boolean_invert_second_then_and integer_yank boolean_xor) (boolean_flush exec_stackdepth integer_inc print_boolean)) integer_stackdepth integer_flush integer_dup_times exec_yank) boolean_yank integer_mult integer_gt boolean_yank boolean_dup_times exec_do*count (boolean_swap integer_fromboolean) integer_lte boolean_or integer_add boolean_invert_first_then_and integer_sub integer_flush)
Errors: [0 1 0 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 81
Size: 98
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 6.887
Median total errors in population: 7
Error averages by case: (0.568 0.959 0.568 0.92 0.82 0.57 0.818 0.568 0.176 0.92)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.984
Average program size in population (points): 78.128
Average percent parens in population: 0.269
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.491
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.557
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1030755
--- Timings ---
Current time: 1559584023562 milliseconds
Total Time:           5.4 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.5 seconds, 46.8%
Fitness Testing:      2.2 seconds, 41.5%
Report:               0.5 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 34                  | Program output: 63                 
Correct output: 10                  | Program output: 65                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 75                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 73                 
Correct output: 19                  | Program output: 82                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 73                 
Correct output: -80                 | Program output: 23                 
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 83                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: 82                 
Correct output: -50                 | Program output: 70                 
Correct output: -53                 | Program output: 87                 
Correct output: -83                 | Program output: 67                 
Correct output: -99                 | Program output: 0                  
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: 68                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 91                 
Correct output: -70                 | Program output: -28                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: -24                
Correct output: -86                 | Program output: 76                 
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 70                 
Correct output: 8                   | Program output: 88                 
Correct output: -27                 | Program output: 72                 
Correct output: 12                  | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: 71                 
Correct output: -94                 | Program output: -49                
Correct output: -72                 | Program output: -11                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 77                 
Correct output: -76                 | Program output: -14                
Correct output: -70                 | Program output: -22                
Correct output: -86                 | Program output: -42                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: 80                 
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: 57                 
Correct output: -91                 | Program output: 41                 
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: 52                 
Correct output: -80                 | Program output: -36                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: 4                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 43                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_empty boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Lexicase best errors: [1 1 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_empty boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Zero cases best errors: [1 1 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 397 1000 1000 892 398 297 297 297 297)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (198 397 0 0 892 398 297 297 297 297)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Best program: (boolean_empty boolean_xor tag_integer_865 exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Errors: [1 1 1 1 0 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 26
Size: 29
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 6.927
Median total errors in population: 7
Error averages by case: (0.802 0.603 1.0 1.0 0.108 0.602 0.703 0.703 0.703 0.703)
Error minima by case: (0 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 44.744
Average program size in population (points): 60.25
Average percent parens in population: 0.232
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9555
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 156
Genome diversity (% unique genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1472881
--- Timings ---
Current time: 1559584026442 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.7 seconds, 52.2%
Fitness Testing:      2.7 seconds, 30.2%
Report:               1.5 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 34                  | Program output: 63                 
Correct output: 10                  | Program output: 65                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 75                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 73                 
Correct output: 19                  | Program output: 82                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 73                 
Correct output: -80                 | Program output: 23                 
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 83                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: 82                 
Correct output: -50                 | Program output: 70                 
Correct output: -53                 | Program output: 87                 
Correct output: -83                 | Program output: 67                 
Correct output: -99                 | Program output: 0                  
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: 68                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 91                 
Correct output: -70                 | Program output: -28                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: -24                
Correct output: -86                 | Program output: 76                 
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 70                 
Correct output: 8                   | Program output: 88                 
Correct output: -27                 | Program output: 72                 
Correct output: 12                  | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: 71                 
Correct output: -94                 | Program output: -49                
Correct output: -72                 | Program output: -11                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 77                 
Correct output: -76                 | Program output: -14                
Correct output: -70                 | Program output: -22                
Correct output: -86                 | Program output: -42                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: 80                 
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: 57                 
Correct output: -91                 | Program output: 41                 
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: 52                 
Correct output: -80                 | Program output: -36                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: 4                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 43                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_empty boolean_xor tag_integer_865 exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Lexicase best errors: [0 1 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.103
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_empty boolean_xor tag_integer_865 exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Zero cases best errors: [0 1 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (541 138 541 541 541 1000 1000 229 229 367)
Population mean number of elite cases: 5.13
Count of perfect (error zero) individuals by case: (541 138 541 541 541 0 0 229 229 367)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Best program: (boolean_empty boolean_xor tag_integer_865 exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Errors: [0 1 0 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 29
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 6.873
Median total errors in population: 6
Error averages by case: (0.459 0.862 0.459 0.459 0.459 1.0 1.0 0.771 0.771 0.633)
Error minima by case: (0 0 0 0 0 1 1 0 0 0)
Average genome size in population (length): 36.968
Average program size in population (points): 47.946
Average percent parens in population: 0.191
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.3975
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 201
Genome diversity (% unique genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 256
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1829016
--- Timings ---
Current time: 1559584029179 milliseconds
Total Time:          11.7 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.8 seconds, 58.3%
Fitness Testing:      3.0 seconds, 25.9%
Report:               1.7 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 26                 
Correct output: 28                  | Program output: 63                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 95                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 62                 
Correct output: 43                  | Program output: 71                 
Correct output: 22                  | Program output: 85                 
Correct output: 41                  | Program output: 60                 
Correct output: 48                  | Program output: 78                 
Correct output: 7                   | Program output: 13                 
Correct output: 2                   | Program output: 24                 
Correct output: 33                  | Program output: 48                 
Correct output: 55                  | Program output: 98                 
Correct output: 19                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 87                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 89                 
Correct output: 10                  | Program output: 30                 
Correct output: -80                 | Program output: -42                
Correct output: -70                 | Program output: -14                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: 52                 
Correct output: -95                 | Program output: 92                 
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: 44                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -5                 
Correct output: -59                 | Program output: 69                 
Correct output: -100                | Program output: 37                 
Correct output: -85                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 74                 
Correct output: -44                 | Program output: 13                 
Correct output: -65                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 33                 
Correct output: 7                   | Program output: 54                 
Correct output: -88                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 70                 
Correct output: -27                 | Program output: 27                 
Correct output: 12                  | Program output: 17                 
Correct output: -79                 | Program output: -76                
Correct output: -23                 | Program output: 41                 
Correct output: -73                 | Program output: 84                 
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 59                 
Correct output: -61                 | Program output: 90                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: 33                 
Correct output: -70                 | Program output: 57                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -40                
Correct output: -41                 | Program output: -7                 
Correct output: 69                  | Program output: 95                 
Correct output: -51                 | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: 18                 
Correct output: -94                 | Program output: 59                 
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: 27                 
Correct output: -93                 | Program output: -35                
Correct output: -77                 | Program output: 49                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: 50                 
Correct output: -100                | Program output: 34                 
Correct output: -81                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_803})
Lexicase best program: (integer_dup_items integer_gte in4 integer_swap print_integer boolean_yankdup integer_yankdup exec_y (integer_stackdepth exec_dup_items exec_flush integer_mult exec_dup () boolean_dup_items) boolean_or integer_yankdup exec_yank integer_div boolean_shove exec_k (exec_eq) (integer_dup_times) integer_lte integer_dec boolean_shove exec_do*count (exec_empty boolean_dup_times exec_k_when_autoconstructing (exec_k (tagged_803) ()) ()))
Lexicase best errors: [1 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_803})
Zero cases best program: (integer_dup_items integer_gte in4 integer_swap print_integer boolean_yankdup integer_yankdup exec_y (integer_stackdepth exec_dup_items exec_flush integer_mult exec_dup () boolean_dup_items) boolean_or integer_yankdup exec_yank integer_div boolean_shove exec_k (exec_eq) (integer_dup_times) integer_lte integer_dec boolean_shove exec_do*count (exec_empty boolean_dup_times exec_k_when_autoconstructing (exec_k (tagged_803) ()) ()))
Zero cases best errors: [1 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (434 1000 317 158 434 158 158 1000 158 593)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (434 0 317 158 434 158 158 0 158 593)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction tag_exec_897} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -47} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_495} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt})
Best program: (exec_k (exec_noop exec_do*while (exec_yankdup exec_do*times (integer_rot boolean_invert_first_then_and)) exec_noop integer_swap integer_add integer_empty integer_max) (boolean_swap) exec_while (tag_exec_897 (boolean_empty)) integer_gte exec_pop (integer_pop) exec_yank exec_shove (in4 integer_dup print_integer boolean_invert_second_then_and boolean_empty exec_eq integer_fromboolean boolean_invert_first_then_and) boolean_flush integer_lt exec_k (boolean_xor integer_yank integer_min exec_s (exec_y_when_autoconstructing (integer_swap exec_s_when_autoconstructing (boolean_rot print_boolean exec_s (exec_noop) (exec_yankdup exec_k (boolean_frominteger integer_stackdepth boolean_invert_second_then_and -47 boolean_and integer_add boolean_xor exec_yankdup integer_lte integer_empty exec_while (boolean_yankdup exec_if () (integer_mod exec_do*range (integer_pop boolean_yank exec_flush exec_shove (integer_gte integer_eq exec_rot () () (exec_y_when_autoconstructing (boolean_invert_first_then_and in3 integer_eq integer_div print_integer) integer_dec tagged_495 boolean_frominteger boolean_empty exec_shove (boolean_empty boolean_eq boolean_stackdepth boolean_yank integer_gt))))))) ()) ()) () ())) () ()) ())
Errors: [1 1 1 0 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 83
Size: 116
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 7.59
Median total errors in population: 7
Error averages by case: (0.566 1.0 0.683 0.842 0.566 0.842 0.842 1.0 0.842 0.407)
Error minima by case: (0 1 0 0 0 0 0 1 0 0)
Average genome size in population (length): 38.18
Average program size in population (points): 50.624
Average percent parens in population: 0.212
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.87175
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2195179
--- Timings ---
Current time: 1559584031795 milliseconds
Total Time:          14.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.7 seconds, 61.4%
Fitness Testing:      3.4 seconds, 23.7%
Report:               2.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 34                  | Program output: 63                 
Correct output: 10                  | Program output: 65                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 75                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 73                 
Correct output: 19                  | Program output: 82                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 73                 
Correct output: -80                 | Program output: 23                 
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 83                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: 82                 
Correct output: -50                 | Program output: 70                 
Correct output: -53                 | Program output: 87                 
Correct output: -83                 | Program output: 67                 
Correct output: -99                 | Program output: 0                  
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: 68                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 91                 
Correct output: -70                 | Program output: -28                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: -24                
Correct output: -86                 | Program output: 76                 
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 70                 
Correct output: 8                   | Program output: 88                 
Correct output: -27                 | Program output: 72                 
Correct output: 12                  | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: 71                 
Correct output: -94                 | Program output: -49                
Correct output: -72                 | Program output: -11                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 77                 
Correct output: -76                 | Program output: -14                
Correct output: -70                 | Program output: -22                
Correct output: -86                 | Program output: -42                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: 80                 
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: 57                 
Correct output: -91                 | Program output: 41                 
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: 52                 
Correct output: -80                 | Program output: -36                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: 4                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 43                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_empty boolean_xor tag_integer_865 exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush in1 boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Lexicase best errors: [1 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.103
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_empty boolean_xor tag_integer_865 exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush in1 boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Zero cases best errors: [1 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (131 1000 253 902 900 252 902 131 518 252)
Population mean number of elite cases: 5.24
Count of perfect (error zero) individuals by case: (131 0 253 902 900 252 902 131 518 252)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Best program: (boolean_empty boolean_xor tag_integer_865 exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Errors: [1 1 0 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 29
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 5.759
Median total errors in population: 6
Error averages by case: (0.869 1.0 0.747 0.098 0.1 0.748 0.098 0.869 0.482 0.748)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.263
Average program size in population (points): 52.725
Average percent parens in population: 0.238
Minimum age in population: 5.0
Maximum age in population: 9.0625
Average age in population: 7.2934375
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2651526
--- Timings ---
Current time: 1559584034828 milliseconds
Total Time:          17.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        11.1 seconds, 63.8%
Fitness Testing:      3.7 seconds, 21.6%
Report:               2.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 26                 
Correct output: 28                  | Program output: 63                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 95                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 62                 
Correct output: 43                  | Program output: 71                 
Correct output: 22                  | Program output: 85                 
Correct output: 41                  | Program output: 60                 
Correct output: 48                  | Program output: 78                 
Correct output: 7                   | Program output: 13                 
Correct output: 2                   | Program output: 24                 
Correct output: 33                  | Program output: 48                 
Correct output: 55                  | Program output: 98                 
Correct output: 19                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 87                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 89                 
Correct output: 10                  | Program output: 30                 
Correct output: -80                 | Program output: -42                
Correct output: -70                 | Program output: -14                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: 52                 
Correct output: -95                 | Program output: 92                 
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: 44                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -5                 
Correct output: -59                 | Program output: 69                 
Correct output: -100                | Program output: 37                 
Correct output: -85                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 74                 
Correct output: -44                 | Program output: 13                 
Correct output: -65                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 33                 
Correct output: 7                   | Program output: 54                 
Correct output: -88                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 70                 
Correct output: -27                 | Program output: 27                 
Correct output: 12                  | Program output: 17                 
Correct output: -79                 | Program output: -76                
Correct output: -23                 | Program output: 41                 
Correct output: -73                 | Program output: 84                 
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 59                 
Correct output: -61                 | Program output: 90                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: 33                 
Correct output: -70                 | Program output: 57                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -40                
Correct output: -41                 | Program output: -7                 
Correct output: 69                  | Program output: 95                 
Correct output: -51                 | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: 18                 
Correct output: -94                 | Program output: 59                 
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: 27                 
Correct output: -93                 | Program output: -35                
Correct output: -77                 | Program output: 49                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: 50                 
Correct output: -100                | Program output: 34                 
Correct output: -81                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction tag_boolean_95} {:close 2, :instruction print_newline} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -16} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 1, :instruction integer_mult} {:close 0, :instruction tag_boolean_68} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_147} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range})
Lexicase best program: (in4 integer_max boolean_or print_integer integer_gte boolean_rot integer_lte boolean_invert_second_then_and integer_dup_items print_boolean integer_mult exec_shove (in2 boolean_rot) exec_stackdepth exec_noop integer_empty boolean_yankdup integer_div boolean_stackdepth exec_y () exec_while () tag_boolean_95 print_newline boolean_swap integer_pop boolean_invert_second_then_and -16 boolean_eq exec_flush integer_swap integer_yankdup exec_if (integer_mult) (tag_boolean_68 boolean_pop exec_swap (exec_yank exec_while (tagged_147 integer_dup)) (integer_swap exec_shove (integer_rot print_integer boolean_not exec_y (integer_lt integer_max exec_do*range ())))))
Lexicase best errors: [0 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 62
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction tag_boolean_95} {:close 2, :instruction print_newline} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -16} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 1, :instruction integer_mult} {:close 0, :instruction tag_boolean_68} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_147} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range})
Zero cases best program: (in4 integer_max boolean_or print_integer integer_gte boolean_rot integer_lte boolean_invert_second_then_and integer_dup_items print_boolean integer_mult exec_shove (in2 boolean_rot) exec_stackdepth exec_noop integer_empty boolean_yankdup integer_div boolean_stackdepth exec_y () exec_while () tag_boolean_95 print_newline boolean_swap integer_pop boolean_invert_second_then_and -16 boolean_eq exec_flush integer_swap integer_yankdup exec_if (integer_mult) (tag_boolean_68 boolean_pop exec_swap (exec_yank exec_while (tagged_147 integer_dup)) (integer_swap exec_shove (integer_rot print_integer boolean_not exec_y (integer_lt integer_max exec_do*range ())))))
Zero cases best errors: [0 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 62
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (151 1000 440 152 1000 151 1000 151 441 903)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (151 0 440 152 0 151 0 151 441 903)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 2, :instruction exec_y} {:close 0, :instruction print_newline} {:close 1, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_423} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 2, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_frominteger})
Best program: (integer_dup_items integer_gte in4 integer_swap print_integer exec_rot (integer_yankdup exec_y (integer_stackdepth exec_dup_items exec_flush integer_mult exec_dup () boolean_dup_items boolean_or integer_yankdup exec_yank integer_div boolean_shove exec_k (exec_eq) (integer_dup_times) integer_lte boolean_shove boolean_shove boolean_pop integer_eq boolean_pop exec_dup (boolean_swap boolean_or boolean_dup_items exec_do*times () exec_s_when_autoconstructing () (exec_rot () (boolean_dup) (exec_k (exec_dup_items integer_lt integer_dec integer_div integer_yankdup integer_shove) (integer_flush integer_max) exec_when (integer_mult exec_s (integer_dup_items exec_pop (print_boolean print_boolean exec_do*range () exec_flush exec_if (exec_y ()) (print_newline exec_dup () print_exec (print_integer) boolean_yank exec_empty exec_stackdepth integer_div integer_rot tag_boolean_423 boolean_eq exec_y (boolean_dup in1 exec_do*times ()) print_integer boolean_frominteger exec_if (boolean_yankdup exec_rot (exec_k_when_autoconstructing (in4 boolean_flush integer_fromboolean boolean_frominteger) ()) () ()) ()))) () ()))) ()))) () ())
Errors: [0 1 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 81
Size: 119
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 7.611
Median total errors in population: 7
Error averages by case: (0.849 1.0 0.56 0.848 1.0 0.849 1.0 0.849 0.559 0.097)
Error minima by case: (0 1 0 0 1 0 1 0 0 0)
Average genome size in population (length): 35.102
Average program size in population (points): 46.121
Average percent parens in population: 0.211
Minimum age in population: 6.375
Maximum age in population: 10.84375
Average age in population: 8.75896875
Median age in population: 8.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3013046
--- Timings ---
Current time: 1559584037274 milliseconds
Total Time:          19.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.9 seconds, 65.4%
Fitness Testing:      4.1 seconds, 20.5%
Report:               2.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 26                 
Correct output: 28                  | Program output: 63                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 95                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 62                 
Correct output: 43                  | Program output: 71                 
Correct output: 22                  | Program output: 85                 
Correct output: 41                  | Program output: 60                 
Correct output: 48                  | Program output: 78                 
Correct output: 7                   | Program output: 13                 
Correct output: 2                   | Program output: 24                 
Correct output: 33                  | Program output: 48                 
Correct output: 55                  | Program output: 98                 
Correct output: 19                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 87                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 89                 
Correct output: 10                  | Program output: 30                 
Correct output: -80                 | Program output: -42                
Correct output: -70                 | Program output: -14                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: 52                 
Correct output: -95                 | Program output: 92                 
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: 44                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -5                 
Correct output: -59                 | Program output: 69                 
Correct output: -100                | Program output: 37                 
Correct output: -85                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 74                 
Correct output: -44                 | Program output: 13                 
Correct output: -65                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 33                 
Correct output: 7                   | Program output: 54                 
Correct output: -88                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 70                 
Correct output: -27                 | Program output: 27                 
Correct output: 12                  | Program output: 17                 
Correct output: -79                 | Program output: -76                
Correct output: -23                 | Program output: 41                 
Correct output: -73                 | Program output: 84                 
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 59                 
Correct output: -61                 | Program output: 90                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: 33                 
Correct output: -70                 | Program output: 57                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -40                
Correct output: -41                 | Program output: -7                 
Correct output: 69                  | Program output: 95                 
Correct output: -51                 | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: 18                 
Correct output: -94                 | Program output: 59                 
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: 27                 
Correct output: -93                 | Program output: -35                
Correct output: -77                 | Program output: 49                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: 50                 
Correct output: -100                | Program output: 34                 
Correct output: -81                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Lexicase best program: (integer_dup_items integer_gte in4 integer_swap print_integer boolean_yankdup integer_yankdup exec_y (integer_stackdepth exec_dup_items boolean_flush exec_noop) boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Lexicase best errors: [1 1 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 28
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Zero cases best program: (integer_dup_items integer_gte in4 integer_swap print_integer boolean_yankdup integer_yankdup exec_y (integer_stackdepth exec_dup_items boolean_flush exec_noop) boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Zero cases best errors: [1 1 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 28
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 302 908 606 1 605 302 1000 1 1000)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (1 302 908 606 1 605 302 0 1 0)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when})
Best program: (integer_dup_items integer_gte in4 integer_swap print_integer exec_rot (integer_yankdup exec_y (integer_stackdepth exec_dup_items exec_flush integer_mult exec_dup () exec_noop) boolean_eq) (in2 exec_empty print_integer) (in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_when ())))
Errors: [1 1 0 0 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 26
Size: 34
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.274
Median total errors in population: 7
Error averages by case: (0.999 0.698 0.092 0.394 0.999 0.395 0.698 1.0 0.999 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 0 1)
Average genome size in population (length): 33.571
Average program size in population (points): 43.863
Average percent parens in population: 0.222
Minimum age in population: 7.5
Maximum age in population: 12.09375
Average age in population: 10.299171875
Median age in population: 10.390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3464277
--- Timings ---
Current time: 1559584039934 milliseconds
Total Time:          22.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.0 seconds, 66.6%
Fitness Testing:      4.5 seconds, 19.8%
Report:               2.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: 15                 
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -36                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 6                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 71                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 19                 
Correct output: 0                   | Program output: 64                 
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 23                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 72                 
Correct output: 2                   | Program output: 25                 
Correct output: 33                  | Program output: 97                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 93                 
Correct output: 29                  | Program output: 81                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -63                
Correct output: -7                  | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -25                
Correct output: -53                 | Program output: -4                 
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: 27                 
Correct output: -23                 | Program output: 29                 
Correct output: -67                 | Program output: 11                 
Correct output: -59                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -11                
Correct output: -56                 | Program output: 96                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -37                
Correct output: -86                 | Program output: -46                
Correct output: -4                  | Program output: 63                 
Correct output: 7                   | Program output: 74                 
Correct output: -88                 | Program output: -73                
Correct output: -33                 | Program output: 38                 
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -44                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -8                 
Correct output: -93                 | Program output: 66                 
Correct output: -94                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 30                 
Correct output: -65                 | Program output: 11                 
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: 27                 
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -45                
Correct output: -50                 | Program output: 90                 
Correct output: -41                 | Program output: -19                
Correct output: 69                  | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -8                 
Correct output: -54                 | Program output: 64                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -72                
Correct output: -91                 | Program output: -7                 
Correct output: -93                 | Program output: -43                
Correct output: -77                 | Program output: 31                 
Correct output: -31                 | Program output: -2                 
Correct output: -80                 | Program output: 46                 
Correct output: -88                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: 39                 
Correct output: -71                 | Program output: 27                 
Correct output: -91                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -47} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod})
Lexicase best program: (integer_dup_items integer_gte in3 integer_swap print_integer exec_rot (boolean_or exec_y (integer_stackdepth exec_dup_items exec_flush integer_mult exec_dup () boolean_dup_items) boolean_or integer_yankdup exec_yank exec_do*range (boolean_pop boolean_frominteger exec_s_when_autoconstructing (boolean_rot exec_k (exec_rot (boolean_xor exec_dup_items integer_rot exec_do*while (exec_eq) exec_if (in1 integer_yankdup integer_lte boolean_frominteger exec_k_when_autoconstructing (boolean_dup) () integer_pop in4 boolean_frominteger integer_stackdepth boolean_invert_second_then_and -47 boolean_and integer_add boolean_xor exec_yankdup integer_lte integer_empty exec_while (boolean_yankdup exec_if () (integer_mod))) ()) () ()) ()) () ())) () ())
Lexicase best errors: [1 0 1 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 75
Percent parens: 0.307
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -47} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod})
Zero cases best program: (integer_dup_items integer_gte in3 integer_swap print_integer exec_rot (boolean_or exec_y (integer_stackdepth exec_dup_items exec_flush integer_mult exec_dup () boolean_dup_items) boolean_or integer_yankdup exec_yank exec_do*range (boolean_pop boolean_frominteger exec_s_when_autoconstructing (boolean_rot exec_k (exec_rot (boolean_xor exec_dup_items integer_rot exec_do*while (exec_eq) exec_if (in1 integer_yankdup integer_lte boolean_frominteger exec_k_when_autoconstructing (boolean_dup) () integer_pop in4 boolean_frominteger integer_stackdepth boolean_invert_second_then_and -47 boolean_and integer_add boolean_xor exec_yankdup integer_lte integer_empty exec_while (boolean_yankdup exec_if () (integer_mod))) ()) () ()) ()) () ())) () ())
Zero cases best errors: [1 0 1 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 75
Percent parens: 0.307
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 354 290 353 1000 277 1000 644 353 1000)
Population mean number of elite cases: 5.55
Count of perfect (error zero) individuals by case: (277 354 290 353 0 277 0 644 353 0)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -47} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod})
Best program: (integer_dup_items integer_gte in3 integer_swap print_integer exec_rot (boolean_or exec_y (integer_stackdepth in1 exec_flush integer_mult exec_dup () boolean_dup_items) boolean_or integer_yankdup exec_yank exec_do*range (boolean_pop boolean_frominteger exec_s_when_autoconstructing (boolean_rot exec_k (boolean_xor boolean_xor exec_dup_items integer_rot exec_do*while (exec_eq) exec_if (in1 integer_yankdup integer_lte boolean_frominteger exec_k_when_autoconstructing (boolean_dup) () integer_pop in4 boolean_frominteger integer_stackdepth boolean_invert_second_then_and -47 boolean_and integer_add boolean_xor exec_yankdup integer_lte integer_empty exec_while (boolean_yankdup exec_if () (integer_mod))) ()) ()) () ())) () ())
Errors: [1 0 1 0 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 52
Size: 72
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 7.452
Median total errors in population: 8
Error averages by case: (0.723 0.646 0.71 0.647 1.0 0.723 1.0 0.356 0.647 1.0)
Error minima by case: (0 0 0 0 1 0 1 0 0 1)
Average genome size in population (length): 38.391
Average program size in population (points): 51.027
Average percent parens in population: 0.230
Minimum age in population: 8.5
Maximum age in population: 13.5625
Average age in population: 12.0756484375
Median age in population: 12.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3766108
--- Timings ---
Current time: 1559584042131 milliseconds
Total Time:          24.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        16.7 seconds, 67.6%
Fitness Testing:      4.8 seconds, 19.2%
Report:               3.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 34                  | Program output: 63                 
Correct output: 10                  | Program output: 65                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 75                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 73                 
Correct output: 19                  | Program output: 82                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 73                 
Correct output: -80                 | Program output: 23                 
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 83                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: 82                 
Correct output: -50                 | Program output: 70                 
Correct output: -53                 | Program output: 87                 
Correct output: -83                 | Program output: 67                 
Correct output: -99                 | Program output: 0                  
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: 68                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 91                 
Correct output: -70                 | Program output: -28                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: -24                
Correct output: -86                 | Program output: 76                 
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 70                 
Correct output: 8                   | Program output: 88                 
Correct output: -27                 | Program output: 72                 
Correct output: 12                  | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: 71                 
Correct output: -94                 | Program output: -49                
Correct output: -72                 | Program output: -11                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 77                 
Correct output: -76                 | Program output: -14                
Correct output: -70                 | Program output: -22                
Correct output: -86                 | Program output: -42                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: 80                 
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: 57                 
Correct output: -91                 | Program output: 41                 
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: 52                 
Correct output: -80                 | Program output: -36                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: 4                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 43                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_empty boolean_xor tag_integer_865 exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (boolean_dup_times in4 integer_max exec_when (exec_while ())))
Lexicase best errors: [0 1 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.118
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_empty boolean_xor tag_integer_865 exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (boolean_dup_times in4 integer_max exec_when (exec_while ())))
Zero cases best errors: [0 1 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 506 506 249 1000 250 249 506 249 1000)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (249 506 506 249 0 250 249 506 249 0)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Best program: (boolean_empty boolean_xor tag_integer_865 exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_pop () boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Errors: [0 1 1 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 30
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 7.236
Median total errors in population: 7
Error averages by case: (0.751 0.494 0.494 0.751 1.0 0.75 0.751 0.494 0.751 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 40.375
Average program size in population (points): 54.149
Average percent parens in population: 0.238
Minimum age in population: 10.75
Maximum age in population: 15.23046875
Average age in population: 13.6668828125
Median age in population: 13.7421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4022202
--- Timings ---
Current time: 1559584044752 milliseconds
Total Time:          27.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.8 seconds, 69.0%
Fitness Testing:      5.0 seconds, 18.4%
Report:               3.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 87                 
Correct output: 34                  | Program output: 63                 
Correct output: 10                  | Program output: 65                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 75                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 73                 
Correct output: 19                  | Program output: 82                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 73                 
Correct output: -80                 | Program output: 23                 
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 83                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: 82                 
Correct output: -50                 | Program output: 70                 
Correct output: -53                 | Program output: 87                 
Correct output: -83                 | Program output: 67                 
Correct output: -99                 | Program output: 0                  
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: 68                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 91                 
Correct output: -70                 | Program output: -28                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: -24                
Correct output: -86                 | Program output: 76                 
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 70                 
Correct output: 8                   | Program output: 88                 
Correct output: -27                 | Program output: 72                 
Correct output: 12                  | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: 71                 
Correct output: -94                 | Program output: -49                
Correct output: -72                 | Program output: -11                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 77                 
Correct output: -76                 | Program output: -14                
Correct output: -70                 | Program output: -22                
Correct output: -86                 | Program output: -42                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: 80                 
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: 57                 
Correct output: -91                 | Program output: 41                 
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: 52                 
Correct output: -80                 | Program output: -36                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: 4                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 43                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_empty boolean_xor tag_integer_865 exec_stackdepth boolean_not boolean_stackdepth integer_fromboolean integer_empty integer_pop boolean_xor boolean_dup integer_pop boolean_flush exec_noop boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Lexicase best errors: [1 1 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.103
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_empty boolean_xor tag_integer_865 exec_stackdepth boolean_not boolean_stackdepth integer_fromboolean integer_empty integer_pop boolean_xor boolean_dup integer_pop boolean_flush exec_noop boolean_eq in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Zero cases best errors: [1 1 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1000 1 1000 590 589 590 589 589 1000)
Population mean number of elite cases: 5.95
Count of perfect (error zero) individuals by case: (1 0 1 0 590 589 590 589 589 0)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_flush} {:close 2, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Best program: (boolean_empty boolean_xor tag_integer_865 exec_stackdepth boolean_shove boolean_dup_times integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in2 exec_empty print_integer in2 integer_yank integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Errors: [1 1 1 1 0 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 29
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 7.051
Median total errors in population: 5
Error averages by case: (0.999 1.0 0.999 1.0 0.41 0.411 0.41 0.411 0.411 1.0)
Error minima by case: (0 1 0 1 0 0 0 0 0 1)
Average genome size in population (length): 34.159
Average program size in population (points): 43.864
Average percent parens in population: 0.195
Minimum age in population: 11.90625
Maximum age in population: 16.896484375
Average age in population: 15.035779296875
Median age in population: 15.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4283660
--- Timings ---
Current time: 1559584047224 milliseconds
Total Time:          29.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.8 seconds, 69.8%
Fitness Testing:      5.3 seconds, 17.7%
Report:               3.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: 15                 
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -36                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 6                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 71                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 19                 
Correct output: 0                   | Program output: 64                 
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 23                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 72                 
Correct output: 2                   | Program output: 25                 
Correct output: 33                  | Program output: 97                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 93                 
Correct output: 29                  | Program output: 81                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -63                
Correct output: -7                  | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -25                
Correct output: -53                 | Program output: -4                 
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: 27                 
Correct output: -23                 | Program output: 29                 
Correct output: -67                 | Program output: 11                 
Correct output: -59                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -11                
Correct output: -56                 | Program output: 96                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -37                
Correct output: -86                 | Program output: -46                
Correct output: -4                  | Program output: 63                 
Correct output: 7                   | Program output: 74                 
Correct output: -88                 | Program output: -73                
Correct output: -33                 | Program output: 38                 
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -44                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -8                 
Correct output: -93                 | Program output: 66                 
Correct output: -94                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 30                 
Correct output: -65                 | Program output: 11                 
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: 27                 
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -45                
Correct output: -50                 | Program output: 90                 
Correct output: -41                 | Program output: -19                
Correct output: 69                  | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -8                 
Correct output: -54                 | Program output: 64                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -72                
Correct output: -91                 | Program output: -7                 
Correct output: -93                 | Program output: -43                
Correct output: -77                 | Program output: 31                 
Correct output: -31                 | Program output: -2                 
Correct output: -80                 | Program output: 46                 
Correct output: -88                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: 39                 
Correct output: -71                 | Program output: 27                 
Correct output: -91                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (boolean_empty boolean_xor tag_integer_865 exec_stackdepth) (boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3 exec_empty print_integer in2 in1 integer_flush exec_yankdup in4 integer_max exec_when (exec_while ()))
Lexicase best errors: [1 1 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (boolean_empty boolean_xor tag_integer_865 exec_stackdepth) (boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3 exec_empty print_integer in2 in1 integer_flush exec_yankdup in4 integer_max exec_when (exec_while ()))
Zero cases best errors: [1 1 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (363 551 1000 1 1 364 1000 1 1 550)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (363 551 0 1 1 364 0 1 1 550)
Population mean number of perfect (error zero) cases: 1.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (boolean_empty boolean_xor tag_integer_865 exec_stackdepth) (boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3 exec_empty print_integer in2 in1 integer_flush exec_yankdup in4 integer_max exec_when (exec_while ()))
Errors: [1 1 1 0 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 36
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 8.168
Median total errors in population: 8
Error averages by case: (0.637 0.449 1.0 0.999 0.999 0.636 1.0 0.999 0.999 0.45)
Error minima by case: (0 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 36.338
Average program size in population (points): 47.06
Average percent parens in population: 0.200
Minimum age in population: 13.375
Maximum age in population: 18.349609375
Average age in population: 16.50176953125
Median age in population: 16.5029296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 173
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 175
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4526796
--- Timings ---
Current time: 1559584049408 milliseconds
Total Time:          31.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        22.5 seconds, 70.4%
Fitness Testing:      5.5 seconds, 17.3%
Report:               3.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: 15                 
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -36                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 6                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 71                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 19                 
Correct output: 0                   | Program output: 64                 
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 23                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 72                 
Correct output: 2                   | Program output: 25                 
Correct output: 33                  | Program output: 97                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 93                 
Correct output: 29                  | Program output: 81                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -63                
Correct output: -7                  | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -25                
Correct output: -53                 | Program output: -4                 
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: 27                 
Correct output: -23                 | Program output: 29                 
Correct output: -67                 | Program output: 11                 
Correct output: -59                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -11                
Correct output: -56                 | Program output: 96                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -37                
Correct output: -86                 | Program output: -46                
Correct output: -4                  | Program output: 63                 
Correct output: 7                   | Program output: 74                 
Correct output: -88                 | Program output: -73                
Correct output: -33                 | Program output: 38                 
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -44                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -8                 
Correct output: -93                 | Program output: 66                 
Correct output: -94                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 30                 
Correct output: -65                 | Program output: 11                 
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: 27                 
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -45                
Correct output: -50                 | Program output: 90                 
Correct output: -41                 | Program output: -19                
Correct output: 69                  | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -8                 
Correct output: -54                 | Program output: 64                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -72                
Correct output: -91                 | Program output: -7                 
Correct output: -93                 | Program output: -43                
Correct output: -77                 | Program output: 31                 
Correct output: -31                 | Program output: -2                 
Correct output: -80                 | Program output: 46                 
Correct output: -88                 | Program output: -77                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: 39                 
Correct output: -71                 | Program output: 27                 
Correct output: -91                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_22} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (boolean_empty boolean_xor tag_integer_865 exec_y_when_autoconstructing () boolean_shove boolean_stackdepth integer_fromboolean tag_integer_22 integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) (boolean_eq) in3 exec_empty print_integer in2 in1 integer_flush exec_yankdup in4 exec_dup_items exec_when (exec_while ()))
Lexicase best errors: [1 0 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 37
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_22} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (boolean_empty boolean_xor tag_integer_865 exec_y_when_autoconstructing () boolean_shove boolean_stackdepth integer_fromboolean tag_integer_22 integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) (boolean_eq) in3 exec_empty print_integer in2 in1 integer_flush exec_yankdup in4 exec_dup_items exec_when (exec_while ()))
Zero cases best errors: [1 0 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 37
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 920 452 2 452 230 2 920 452 452)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (235 920 452 2 452 230 2 920 452 452)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (boolean_empty boolean_xor tag_integer_865 exec_stackdepth) (boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3 exec_empty print_integer in2 in1 integer_flush exec_yankdup in4 integer_max exec_when (exec_while ()))
Errors: [1 0 0 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 36
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 5.883
Median total errors in population: 7
Error averages by case: (0.765 0.08 0.548 0.998 0.548 0.77 0.998 0.08 0.548 0.548)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.216
Average program size in population (points): 41.97
Average percent parens in population: 0.191
Minimum age in population: 15.625
Maximum age in population: 19.6650390625
Average age in population: 18.2793603515625
Median age in population: 18.22705078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 310
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 325
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4790763
--- Timings ---
Current time: 1559584051757 milliseconds
Total Time:          34.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.3 seconds, 70.9%
Fitness Testing:      5.8 seconds, 16.8%
Report:               4.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -41                
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 9                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 51                 
Correct output: 34                  | Program output: 54                 
Correct output: 10                  | Program output: 34                 
Correct output: 0                   | Program output: 100                
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 39                 
Correct output: 41                  | Program output: 72                 
Correct output: 48                  | Program output: 62                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 28                 
Correct output: 33                  | Program output: 41                 
Correct output: 55                  | Program output: 58                 
Correct output: 19                  | Program output: 71                 
Correct output: 0                   | Program output: 25                 
Correct output: 29                  | Program output: 29                 
Correct output: 83                  | Program output: 83                 
Correct output: 24                  | Program output: 56                 
Correct output: 10                  | Program output: 82                 
Correct output: -80                 | Program output: 100                
Correct output: -70                 | Program output: 15                 
Correct output: -7                  | Program output: -7                 
Correct output: -79                 | Program output: 88                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: 58                 
Correct output: -67                 | Program output: -26                
Correct output: -59                 | Program output: -15                
Correct output: -100                | Program output: -1                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 18                 
Correct output: -70                 | Program output: -52                
Correct output: -44                 | Program output: 5                  
Correct output: -65                 | Program output: 72                 
Correct output: -93                 | Program output: 59                 
Correct output: -86                 | Program output: 74                 
Correct output: -4                  | Program output: -4                 
Correct output: 7                   | Program output: 21                 
Correct output: -88                 | Program output: 13                 
Correct output: -33                 | Program output: 95                 
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 40                 
Correct output: -27                 | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: -79                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -73                 | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -15                
Correct output: -72                 | Program output: -51                
Correct output: -55                 | Program output: 86                 
Correct output: -65                 | Program output: 19                 
Correct output: -61                 | Program output: -60                
Correct output: -99                 | Program output: 94                 
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70                
Correct output: -86                 | Program output: 21                 
Correct output: -50                 | Program output: 91                 
Correct output: -41                 | Program output: -31                
Correct output: 69                  | Program output: 69                 
Correct output: -51                 | Program output: 80                 
Correct output: -91                 | Program output: 27                 
Correct output: -54                 | Program output: 74                 
Correct output: -94                 | Program output: -81                
Correct output: -91                 | Program output: -90                
Correct output: -91                 | Program output: -54                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: 100                
Correct output: -80                 | Program output: -40                
Correct output: -88                 | Program output: 71                 
Correct output: -20                 | Program output: 3                  
Correct output: -100                | Program output: 99                 
Correct output: -81                 | Program output: 95                 
Correct output: -71                 | Program output: 26                 
Correct output: -91                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -18} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Lexicase best program: (-18 boolean_xor tag_integer_865 exec_stackdepth boolean_shove print_boolean integer_dup boolean_dup_times integer_add boolean_xor boolean_dup integer_pop boolean_flush exec_noop exec_while () in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times print_integer exec_yankdup in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Lexicase best errors: [0 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.114
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -18} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Zero cases best program: (-18 boolean_xor tag_integer_865 exec_stackdepth boolean_shove print_boolean integer_dup boolean_dup_times integer_add boolean_xor boolean_dup integer_pop boolean_flush exec_noop exec_while () in2 exec_empty print_integer in2 in1 integer_flush boolean_dup_times print_integer exec_yankdup in1 integer_flush boolean_dup_times in4 integer_max exec_when (exec_while ()))
Zero cases best errors: [0 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 470 915 115 107 107 224 107 914 118)
Population mean number of elite cases: 3.19
Count of perfect (error zero) individuals by case: (115 470 915 115 107 107 224 107 914 118)
Population mean number of perfect (error zero) cases: 3.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while})
Best program: (integer_min in1 in3 integer_swap print_integer exec_rot (boolean_or exec_y (integer_stackdepth exec_dup_items exec_flush integer_mult exec_dup () boolean_dup_items) boolean_or integer_yankdup boolean_dup_times in4) (integer_max exec_when (exec_while ())) ())
Errors: [1 1 0 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 6.808
Median total errors in population: 7
Error averages by case: (0.885 0.53 0.085 0.885 0.893 0.893 0.776 0.893 0.086 0.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.201
Average program size in population (points): 48.58
Average percent parens in population: 0.212
Minimum age in population: 16.625
Maximum age in population: 21.346923828125
Average age in population: 19.79805419921875
Median age in population: 19.98046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 220
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 241
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5044750
--- Timings ---
Current time: 1559584054119 milliseconds
Total Time:          36.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.2 seconds, 71.4%
Fitness Testing:      6.0 seconds, 16.4%
Report:               4.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -41                
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 51                 
Correct output: 34                  | Program output: 54                 
Correct output: 10                  | Program output: 34                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 58                 
Correct output: 19                  | Program output: 71                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 29                 
Correct output: 83                  | Program output: 83                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 73                 
Correct output: -80                 | Program output: 23                 
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: -7                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 18                 
Correct output: -70                 | Program output: -52                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: -24                
Correct output: -86                 | Program output: 74                 
Correct output: -4                  | Program output: -4                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 40                 
Correct output: -27                 | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -49                
Correct output: -72                 | Program output: -51                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 77                 
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70                
Correct output: -86                 | Program output: -42                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 69                 
Correct output: -51                 | Program output: 80                 
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -81                
Correct output: -91                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: 52                 
Correct output: -80                 | Program output: -40                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: 3                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 26                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 36
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 36
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 340 927 104 105 464 927 341 341 105)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (341 340 927 104 105 464 927 341 341 105)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Errors: [0 0 0 1 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.005
Median total errors in population: 7
Error averages by case: (0.659 0.66 0.073 0.896 0.895 0.536 0.073 0.659 0.659 0.895)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.468
Average program size in population (points): 49.712
Average percent parens in population: 0.223
Minimum age in population: 17.625
Maximum age in population: 22.973388671875
Average age in population: 21.13406066894531
Median age in population: 21.222900390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5283700
--- Timings ---
Current time: 1559584057423 milliseconds
Total Time:          39.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.2 seconds, 72.1%
Fitness Testing:      6.3 seconds, 16.0%
Report:               4.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 11                 
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 26                 
Correct output: 28                  | Program output: 63                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 95                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 62                 
Correct output: 43                  | Program output: 71                 
Correct output: 22                  | Program output: 85                 
Correct output: 41                  | Program output: 60                 
Correct output: 48                  | Program output: 78                 
Correct output: 7                   | Program output: 13                 
Correct output: 2                   | Program output: 24                 
Correct output: 33                  | Program output: 48                 
Correct output: 55                  | Program output: 98                 
Correct output: 19                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 87                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 89                 
Correct output: 10                  | Program output: 30                 
Correct output: -80                 | Program output: -42                
Correct output: -70                 | Program output: -14                
Correct output: -7                  | Program output: 83                 
Correct output: -79                 | Program output: 52                 
Correct output: -95                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: 87                 
Correct output: -83                 | Program output: 67                 
Correct output: -99                 | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: 68                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -28                
Correct output: -44                 | Program output: 13                 
Correct output: -65                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 54                 
Correct output: -88                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 70                 
Correct output: -27                 | Program output: 27                 
Correct output: 12                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 77                 
Correct output: -73                 | Program output: 84                 
Correct output: -93                 | Program output: 71                 
Correct output: -94                 | Program output: -49                
Correct output: -72                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 59                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -14                
Correct output: -70                 | Program output: -22                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -40                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 95                 
Correct output: -51                 | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: 18                 
Correct output: -94                 | Program output: 57                 
Correct output: -91                 | Program output: 41                 
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -36                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: 50                 
Correct output: -100                | Program output: 34                 
Correct output: -81                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (integer_yankdup print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Lexicase best errors: [0 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 36
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (integer_yankdup print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Zero cases best errors: [0 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 36
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 87 910 827 443 375 375 378 534 443)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (87 87 910 827 443 375 375 378 534 443)
Population mean number of perfect (error zero) cases: 4.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (integer_yankdup print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Errors: [0 0 0 0 0 1 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.541
Median total errors in population: 5
Error averages by case: (0.913 0.913 0.09 0.173 0.557 0.625 0.625 0.622 0.466 0.557)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.957
Average program size in population (points): 36.312
Average percent parens in population: 0.200
Minimum age in population: 20.515625
Maximum age in population: 24.36639404296875
Average age in population: 23.1625126953125
Median age in population: 22.993408203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 363
Genome diversity (% unique genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 363
Syntactic diversity (% unique Push programs):	 0.419
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6194797
--- Timings ---
Current time: 1559584061188 milliseconds
Total Time:          43.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.3 seconds, 70.4%
Fitness Testing:      7.1 seconds, 16.4%
Report:               5.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -41                
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 51                 
Correct output: 34                  | Program output: 54                 
Correct output: 10                  | Program output: 34                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 58                 
Correct output: 19                  | Program output: 71                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 29                 
Correct output: 83                  | Program output: 83                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 73                 
Correct output: -80                 | Program output: 23                 
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: -7                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 18                 
Correct output: -70                 | Program output: -52                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: -24                
Correct output: -86                 | Program output: 74                 
Correct output: -4                  | Program output: -4                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 40                 
Correct output: -27                 | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -49                
Correct output: -72                 | Program output: -51                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 77                 
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70                
Correct output: -86                 | Program output: -42                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 69                 
Correct output: -51                 | Program output: 80                 
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -81                
Correct output: -91                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: 52                 
Correct output: -80                 | Program output: -40                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: 3                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 26                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Lexicase best errors: [0 0 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 36
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Zero cases best errors: [0 0 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 36
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (155 157 425 426 380 316 155 155 317 156)
Population mean number of elite cases: 2.64
Count of perfect (error zero) individuals by case: (155 157 425 426 380 316 155 155 317 156)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Errors: [0 0 1 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.358
Median total errors in population: 8
Error averages by case: (0.845 0.843 0.575 0.574 0.62 0.684 0.845 0.845 0.683 0.844)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.291
Average program size in population (points): 35.188
Average percent parens in population: 0.194
Minimum age in population: 21.515625
Maximum age in population: 26.09231567382812
Average age in population: 24.75781997680664
Median age in population: 24.883056640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 187
Genome diversity (% unique genomes):	 0.489
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7165605
--- Timings ---
Current time: 1559584065049 milliseconds
Total Time:          46.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.3 seconds, 69.0%
Fitness Testing:      7.9 seconds, 16.8%
Report:               6.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -41                
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 9                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 62                 
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 39                 
Correct output: 41                  | Program output: 60                 
Correct output: 48                  | Program output: 62                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 24                 
Correct output: 33                  | Program output: 41                 
Correct output: 55                  | Program output: 58                 
Correct output: 19                  | Program output: 71                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 29                 
Correct output: 83                  | Program output: 83                 
Correct output: 24                  | Program output: 56                 
Correct output: 10                  | Program output: 30                 
Correct output: -80                 | Program output: -42                
Correct output: -70                 | Program output: -14                
Correct output: -7                  | Program output: -7                 
Correct output: -79                 | Program output: 52                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -26                
Correct output: -59                 | Program output: -15                
Correct output: -100                | Program output: -1                 
Correct output: -85                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -52                
Correct output: -44                 | Program output: 5                  
Correct output: -65                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: -4                 
Correct output: 7                   | Program output: 21                 
Correct output: -88                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 40                 
Correct output: -27                 | Program output: 10                 
Correct output: 12                  | Program output: 17                 
Correct output: -79                 | Program output: -76                
Correct output: -23                 | Program output: -23                
Correct output: -73                 | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -51                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 19                 
Correct output: -61                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -40                
Correct output: -41                 | Program output: -31                
Correct output: 69                  | Program output: 69                 
Correct output: -51                 | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: 18                 
Correct output: -94                 | Program output: -81                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -54                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: 3                  
Correct output: -100                | Program output: 34                 
Correct output: -81                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3 exec_empty print_integer in2 in1)
Lexicase best errors: [0 1 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 33
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3 exec_empty print_integer in2 in1)
Zero cases best errors: [0 1 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 33
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 511 426 321 426 109 660 142 141 427)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (236 511 426 321 426 109 660 142 141 427)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3 exec_empty print_integer in2 in1)
Errors: [0 1 0 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 33
Percent parens: 0.152
--- Population Statistics ---
Average total errors in population: 6.601
Median total errors in population: 7
Error averages by case: (0.764 0.489 0.574 0.679 0.574 0.891 0.34 0.858 0.859 0.573)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.626
Average program size in population (points): 34.82
Average percent parens in population: 0.205
Minimum age in population: 22.515625
Maximum age in population: 27.938232421875
Average age in population: 26.39364974975586
Median age in population: 26.493408203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 293
Genome diversity (% unique genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 294
Syntactic diversity (% unique Push programs):	 0.447
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8314479
--- Timings ---
Current time: 1559584069193 milliseconds
Total Time:          51.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.5 seconds, 67.7%
Fitness Testing:      8.9 seconds, 17.4%
Report:               7.5 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -41                
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 51                 
Correct output: 34                  | Program output: 54                 
Correct output: 10                  | Program output: 34                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 58                 
Correct output: 19                  | Program output: 71                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 29                 
Correct output: 83                  | Program output: 83                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 73                 
Correct output: -80                 | Program output: 23                 
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: -7                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 18                 
Correct output: -70                 | Program output: -52                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: -24                
Correct output: -86                 | Program output: 74                 
Correct output: -4                  | Program output: -4                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 40                 
Correct output: -27                 | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -49                
Correct output: -72                 | Program output: -51                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 77                 
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70                
Correct output: -86                 | Program output: -42                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 69                 
Correct output: -51                 | Program output: 80                 
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -81                
Correct output: -91                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: 52                 
Correct output: -80                 | Program output: -40                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: 3                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 26                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (integer_yankdup exec_empty print_integer) (in2 in1))
Lexicase best errors: [0 0 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 36
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_rot (integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (integer_yankdup exec_empty print_integer) (in2 in1))
Zero cases best errors: [0 0 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 36
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 873 264 200 201 200 503 591 264 201)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (201 873 264 200 201 200 503 591 264 201)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_boolean_835} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (boolean_invert_second_then_and in4 exec_y (exec_rot (integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty tag_boolean_835 boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1)))
Errors: [0 0 0 1 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 6.502
Median total errors in population: 7
Error averages by case: (0.799 0.127 0.736 0.8 0.799 0.8 0.497 0.409 0.736 0.799)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.19
Average program size in population (points): 34.409
Average percent parens in population: 0.179
Minimum age in population: 23.98046875
Maximum age in population: 29.688232421875
Average age in population: 27.58495352935791
Median age in population: 27.68830108642578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 277
Genome diversity (% unique genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 9418753
--- Timings ---
Current time: 1559584073128 milliseconds
Total Time:          54.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.5 seconds, 66.5%
Fitness Testing:      9.8 seconds, 17.9%
Report:               8.5 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 6                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 62                 
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 23                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 13                 
Correct output: 2                   | Program output: 24                 
Correct output: 33                  | Program output: 48                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 81                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -63                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -5                 
Correct output: -59                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 33                 
Correct output: 7                   | Program output: 54                 
Correct output: -88                 | Program output: -73                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -76                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 11                 
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -40                
Correct output: -41                 | Program output: -19                
Correct output: 69                  | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -7                 
Correct output: -93                 | Program output: -43                
Correct output: -77                 | Program output: 31                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3)
Lexicase best errors: [1 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 29
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3)
Zero cases best errors: [1 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 29
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 920 245 569 924 246 245 245 248 656)
Population mean number of elite cases: 4.59
Count of perfect (error zero) individuals by case: (291 920 245 569 924 246 245 245 248 656)
Population mean number of perfect (error zero) cases: 4.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3)
Errors: [1 0 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 24
Size: 29
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 5.411
Median total errors in population: 6
Error averages by case: (0.709 0.08 0.755 0.431 0.076 0.754 0.755 0.755 0.752 0.344)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.236
Average program size in population (points): 32.307
Average percent parens in population: 0.186
Minimum age in population: 26.67649841308594
Maximum age in population: 30.81345367431641
Average age in population: 29.03910039901733
Median age in population: 29.14331436157227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.382
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 186
Syntactic diversity (% unique Push programs):	 0.372
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 10762753
--- Timings ---
Current time: 1559584077117 milliseconds
Total Time:          58.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.4 seconds, 65.2%
Fitness Testing:     10.9 seconds, 18.6%
Report:               9.4 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 6                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 62                 
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 23                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 13                 
Correct output: 2                   | Program output: 24                 
Correct output: 33                  | Program output: 48                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 81                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -63                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -5                 
Correct output: -59                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 33                 
Correct output: 7                   | Program output: 54                 
Correct output: -88                 | Program output: -73                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -76                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 11                 
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -40                
Correct output: -41                 | Program output: -19                
Correct output: 69                  | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -7                 
Correct output: -93                 | Program output: -43                
Correct output: -77                 | Program output: 31                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3)
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 29
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3)
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 29
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (622 791 886 151 792 619 791 622 792 276)
Population mean number of elite cases: 6.34
Count of perfect (error zero) individuals by case: (622 791 886 151 792 619 791 622 792 276)
Population mean number of perfect (error zero) cases: 6.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop) (boolean_eq) in3)
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 24
Size: 29
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 3.658
Median total errors in population: 2
Error averages by case: (0.378 0.209 0.114 0.849 0.208 0.381 0.209 0.378 0.208 0.724)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.931
Average program size in population (points): 30.295
Average percent parens in population: 0.176
Minimum age in population: 28.43080139160156
Maximum age in population: 32.32133102416992
Average age in population: 30.50738199424744
Median age in population: 30.48836517333984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 349
Genome diversity (% unique genomes):	 0.406
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 365
Syntactic diversity (% unique Push programs):	 0.389
Total error diversity:				 0.009
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 12105223
--- Timings ---
Current time: 1559584081106 milliseconds
Total Time:          62.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.3 seconds, 64.1%
Fitness Testing:     12.1 seconds, 19.2%
Report:              10.4 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 6                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 62                 
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 23                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 13                 
Correct output: 2                   | Program output: 24                 
Correct output: 33                  | Program output: 48                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 81                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -63                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -5                 
Correct output: -59                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 33                 
Correct output: 7                   | Program output: 54                 
Correct output: -88                 | Program output: -73                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -76                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 11                 
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -40                
Correct output: -41                 | Program output: -19                
Correct output: 69                  | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -7                 
Correct output: -93                 | Program output: -43                
Correct output: -77                 | Program output: 31                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3)
Lexicase best errors: [0 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3)
Zero cases best errors: [0 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (538 920 369 535 3 919 920 534 370 929)
Population mean number of elite cases: 6.04
Count of perfect (error zero) individuals by case: (538 920 369 535 3 919 920 534 370 929)
Population mean number of perfect (error zero) cases: 6.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3))
Errors: [0 0 1 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 37
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 3.963
Median total errors in population: 3
Error averages by case: (0.462 0.08 0.631 0.465 0.997 0.081 0.08 0.466 0.63 0.071)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.635
Average program size in population (points): 30.696
Average percent parens in population: 0.165
Minimum age in population: 29.85678100585938
Maximum age in population: 33.71964168548584
Average age in population: 32.00637363624573
Median age in population: 32.09063148498535
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 230
Genome diversity (% unique genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 241
Syntactic diversity (% unique Push programs):	 0.428
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 13443320
--- Timings ---
Current time: 1559584085105 milliseconds
Total Time:          66.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.3 seconds, 63.2%
Fitness Testing:     13.2 seconds, 19.7%
Report:              11.4 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -41                
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 9                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 62                 
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 39                 
Correct output: 41                  | Program output: 60                 
Correct output: 48                  | Program output: 62                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 24                 
Correct output: 33                  | Program output: 41                 
Correct output: 55                  | Program output: 58                 
Correct output: 19                  | Program output: 71                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 29                 
Correct output: 83                  | Program output: 83                 
Correct output: 24                  | Program output: 56                 
Correct output: 10                  | Program output: 30                 
Correct output: -80                 | Program output: -42                
Correct output: -70                 | Program output: -14                
Correct output: -7                  | Program output: -7                 
Correct output: -79                 | Program output: 52                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -26                
Correct output: -59                 | Program output: -15                
Correct output: -100                | Program output: -1                 
Correct output: -85                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -52                
Correct output: -44                 | Program output: 5                  
Correct output: -65                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: -4                 
Correct output: 7                   | Program output: 21                 
Correct output: -88                 | Program output: -17                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 40                 
Correct output: -27                 | Program output: 10                 
Correct output: 12                  | Program output: 17                 
Correct output: -79                 | Program output: -76                
Correct output: -23                 | Program output: -23                
Correct output: -73                 | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -51                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 19                 
Correct output: -61                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -40                
Correct output: -41                 | Program output: -31                
Correct output: 69                  | Program output: 69                 
Correct output: -51                 | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: 18                 
Correct output: -94                 | Program output: -81                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -54                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: 3                  
Correct output: -100                | Program output: 34                 
Correct output: -81                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3 exec_empty print_integer in2 in1)
Lexicase best errors: [0 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 33
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3 exec_empty print_integer in2 in1)
Zero cases best errors: [0 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 33
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (473 863 866 358 427 358 182 358 430 866)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (473 863 866 358 427 358 182 358 430 866)
Population mean number of perfect (error zero) cases: 5.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or) (exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove) boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in3 exec_empty print_integer in2 in1)
Errors: [0 0 0 0 1 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 33
Percent parens: 0.152
--- Population Statistics ---
Average total errors in population: 4.819
Median total errors in population: 5
Error averages by case: (0.527 0.137 0.134 0.642 0.573 0.642 0.818 0.642 0.57 0.134)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.95
Average program size in population (points): 31.301
Average percent parens in population: 0.171
Minimum age in population: 30.95706176757812
Maximum age in population: 35.34286499023438
Average age in population: 33.54754701375961
Median age in population: 33.59853506088257
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 14771590
--- Timings ---
Current time: 1559584089071 milliseconds
Total Time:          70.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.1 seconds, 62.3%
Fitness Testing:     14.3 seconds, 20.2%
Report:              12.3 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 71                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -25                
Correct output: -53                 | Program output: -4                 
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: 0                  
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 91                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -37                
Correct output: -86                 | Program output: -46                
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: 66                 
Correct output: -94                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 27                 
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -72                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: -2                 
Correct output: -80                 | Program output: -36                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Lexicase best program: (boolean_invert_second_then_and in2 exec_stackdepth exec_yankdup integer_min print_integer exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in3)
Lexicase best errors: [1 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.050
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Zero cases best program: (boolean_invert_second_then_and in2 exec_stackdepth exec_yankdup integer_min print_integer exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in3)
Zero cases best errors: [1 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.050
--- Lexicase Population Statistics ---
Count of elite individuals by case: (471 291 339 338 291 338 471 739 339 471)
Population mean number of elite cases: 4.09
Count of perfect (error zero) individuals by case: (471 291 339 338 291 338 471 739 339 471)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Best program: (boolean_invert_second_then_and in2 exec_stackdepth exec_yankdup integer_min print_integer exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in3)
Errors: [1 0 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 5.912
Median total errors in population: 6
Error averages by case: (0.529 0.709 0.661 0.662 0.709 0.662 0.529 0.261 0.661 0.529)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.904
Average program size in population (points): 30.809
Average percent parens in population: 0.154
Minimum age in population: 32.56133270263672
Maximum age in population: 36.87055444717407
Average age in population: 34.79611246848106
Median age in population: 34.87268626689911
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.525
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 15967099
--- Timings ---
Current time: 1559584092142 milliseconds
Total Time:          74.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.0 seconds, 61.6%
Fitness Testing:     15.3 seconds, 20.5%
Report:              13.3 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -41                
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 51                 
Correct output: 34                  | Program output: 54                 
Correct output: 10                  | Program output: 34                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 58                 
Correct output: 19                  | Program output: 71                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 29                 
Correct output: 83                  | Program output: 83                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 73                 
Correct output: -80                 | Program output: 23                 
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: -7                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 18                 
Correct output: -70                 | Program output: -52                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: -24                
Correct output: -86                 | Program output: 74                 
Correct output: -4                  | Program output: -4                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 40                 
Correct output: -27                 | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -49                
Correct output: -72                 | Program output: -51                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 77                 
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70                
Correct output: -86                 | Program output: -42                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 69                 
Correct output: -51                 | Program output: 80                 
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -81                
Correct output: -91                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: 52                 
Correct output: -80                 | Program output: -40                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: 3                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 26                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () () (boolean_or exec_y (exec_do*count (boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) integer_pop boolean_xor integer_lte) integer_pop boolean_flush exec_noop boolean_eq) in3 exec_empty print_integer in2 in1)
Lexicase best errors: [0 0 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () () (boolean_or exec_y (exec_do*count (boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) integer_pop boolean_xor integer_lte) integer_pop boolean_flush exec_noop boolean_eq) in3 exec_empty print_integer in2 in1)
Zero cases best errors: [0 0 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (931 319 362 598 319 362 520 602 518 319)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (931 319 362 598 319 362 520 602 518 319)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 boolean_stackdepth print_integer) (in2 in1))
Errors: [0 0 1 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.15
Median total errors in population: 5
Error averages by case: (0.069 0.681 0.638 0.402 0.681 0.638 0.48 0.398 0.482 0.681)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.696
Average program size in population (points): 27.878
Average percent parens in population: 0.135
Minimum age in population: 33.77343940734863
Maximum age in population: 38.41517162322998
Average age in population: 36.08303363656998
Median age in population: 36.11917734146118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 242
Genome diversity (% unique genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 276
Syntactic diversity (% unique Push programs):	 0.467
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 16834833
--- Timings ---
Current time: 1559584095822 milliseconds
Total Time:          77.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.0 seconds, 61.8%
Fitness Testing:     16.0 seconds, 20.7%
Report:              13.5 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 71                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 73                 
Correct output: 19                  | Program output: 82                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 30                 
Correct output: -80                 | Program output: -42                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: 44                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: 37                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -28                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 70                 
Correct output: -27                 | Program output: 27                 
Correct output: 12                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 41                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -14                
Correct output: -70                 | Program output: -22                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: 57                 
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: 4                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_849} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_boolean_849 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3 exec_empty print_integer in2)
Lexicase best errors: [1 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_849} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_boolean_849 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq in3 exec_empty print_integer in2)
Zero cases best errors: [1 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (337 538 337 474 762 931 473 538 445 473)
Population mean number of elite cases: 5.31
Count of perfect (error zero) individuals by case: (337 538 337 474 762 931 473 538 445 473)
Population mean number of perfect (error zero) cases: 5.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2})
Best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean) (integer_empty integer_add boolean_xor integer_lte) integer_pop boolean_flush exec_noop boolean_eq in3 exec_empty print_integer in2)
Errors: [1 0 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 27
Size: 32
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 4.692
Median total errors in population: 4
Error averages by case: (0.663 0.462 0.663 0.526 0.238 0.069 0.527 0.462 0.555 0.527)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.543
Average program size in population (points): 30.767
Average percent parens in population: 0.161
Minimum age in population: 34.77343940734863
Maximum age in population: 39.65767246484756
Average age in population: 37.67786572110653
Median age in population: 37.75642716884613
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 17937784
--- Timings ---
Current time: 1559584099606 milliseconds
Total Time:          81.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.9 seconds, 61.3%
Fitness Testing:     17.0 seconds, 20.9%
Report:              14.4 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 71                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -25                
Correct output: -53                 | Program output: -4                 
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: 0                  
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 91                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -37                
Correct output: -86                 | Program output: -46                
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: 66                 
Correct output: -94                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 27                 
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -72                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: -2                 
Correct output: -80                 | Program output: -36                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Lexicase best program: (boolean_invert_second_then_and in2 exec_stackdepth exec_yankdup integer_min print_integer exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_rot boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in3)
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 20
Percent parens: 0.050
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Zero cases best program: (boolean_invert_second_then_and in2 exec_stackdepth exec_yankdup integer_min print_integer exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_rot boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in3)
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 20
Percent parens: 0.050
--- Lexicase Population Statistics ---
Count of elite individuals by case: (587 401 403 584 403 938 215 215 587 584)
Population mean number of elite cases: 4.92
Count of perfect (error zero) individuals by case: (587 401 403 584 403 938 215 215 587 584)
Population mean number of perfect (error zero) cases: 4.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3})
Best program: (boolean_invert_second_then_and in2 exec_stackdepth exec_yankdup integer_min print_integer exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in3)
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 5.083
Median total errors in population: 5
Error averages by case: (0.413 0.599 0.597 0.416 0.597 0.062 0.785 0.785 0.413 0.416)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.051
Average program size in population (points): 29.781
Average percent parens in population: 0.150
Minimum age in population: 35.77343940734863
Maximum age in population: 41.30565765500069
Average age in population: 39.09000711905956
Median age in population: 39.19426640868187
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 18998324
--- Timings ---
Current time: 1559584102881 milliseconds
Total Time:          85.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.1 seconds, 61.0%
Fitness Testing:     17.9 seconds, 20.9%
Report:              15.4 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 6                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 62                 
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 23                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 13                 
Correct output: 2                   | Program output: 24                 
Correct output: 33                  | Program output: 48                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 81                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -63                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -5                 
Correct output: -59                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 33                 
Correct output: 7                   | Program output: 54                 
Correct output: -88                 | Program output: -73                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -76                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 11                 
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -40                
Correct output: -41                 | Program output: -19                
Correct output: 69                  | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -7                 
Correct output: -93                 | Program output: -43                
Correct output: -77                 | Program output: 31                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Lexicase best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_stackdepth) (boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_fromboolean boolean_flush exec_noop) boolean_eq in3)
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 24
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Zero cases best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_stackdepth) (boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_fromboolean boolean_flush exec_noop) boolean_eq in3)
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 24
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (927 937 542 856 71 539 335 539 67 71)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (927 937 542 856 71 539 335 539 67 71)
Population mean number of perfect (error zero) cases: 4.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (boolean_eq) in3)
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.116
Median total errors in population: 4
Error averages by case: (0.073 0.063 0.458 0.144 0.929 0.461 0.665 0.461 0.933 0.929)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.403
Average program size in population (points): 26.154
Average percent parens in population: 0.123
Minimum age in population: 36.77343940734863
Maximum age in population: 42.62354443967342
Average age in population: 40.53811812132597
Median age in population: 40.66725116223097
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 218
Genome diversity (% unique genomes):	 0.41
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 289
Syntactic diversity (% unique Push programs):	 0.367
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 19644274
--- Timings ---
Current time: 1559584106545 milliseconds
Total Time:          88.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.3 seconds, 61.4%
Fitness Testing:     18.4 seconds, 20.9%
Report:              15.6 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 71                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -25                
Correct output: -53                 | Program output: -4                 
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: 0                  
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 91                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -37                
Correct output: -86                 | Program output: -46                
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: 66                 
Correct output: -94                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 27                 
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -72                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: -2                 
Correct output: -80                 | Program output: -36                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (boolean_invert_second_then_and in2 exec_stackdepth exec_yankdup integer_min print_integer exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in2 in1)
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 21
Percent parens: 0.048
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (boolean_invert_second_then_and in2 exec_stackdepth exec_yankdup integer_min print_integer exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in2 in1)
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 21
Percent parens: 0.048
--- Lexicase Population Statistics ---
Count of elite individuals by case: (924 279 280 596 920 591 280 191 280 786)
Population mean number of elite cases: 5.13
Count of perfect (error zero) individuals by case: (924 279 280 596 920 591 280 191 280 786)
Population mean number of perfect (error zero) cases: 5.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Best program: (boolean_invert_second_then_and in2 exec_stackdepth exec_yankdup integer_min print_integer exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in3)
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 4.873
Median total errors in population: 5
Error averages by case: (0.076 0.721 0.72 0.404 0.08 0.409 0.72 0.809 0.72 0.214)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.531
Average program size in population (points): 27.33
Average percent parens in population: 0.164
Minimum age in population: 38.70258182287216
Maximum age in population: 44.51244269311428
Average age in population: 42.13882018692791
Median age in population: 42.30038766562939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.375
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.354
Total error diversity:				 0.009
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 20306600
--- Timings ---
Current time: 1559584109240 milliseconds
Total Time:          91.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.2 seconds, 61.2%
Fitness Testing:     19.0 seconds, 20.7%
Report:              16.5 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -41                
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 51                 
Correct output: 34                  | Program output: 54                 
Correct output: 10                  | Program output: 34                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 58                 
Correct output: 19                  | Program output: 71                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 29                 
Correct output: 83                  | Program output: 83                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 73                 
Correct output: -80                 | Program output: 23                 
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: -7                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 18                 
Correct output: -70                 | Program output: -52                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: -24                
Correct output: -86                 | Program output: 74                 
Correct output: -4                  | Program output: -4                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 40                 
Correct output: -27                 | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -49                
Correct output: -72                 | Program output: -51                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 77                 
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70                
Correct output: -86                 | Program output: -42                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 69                 
Correct output: -51                 | Program output: 80                 
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -81                
Correct output: -91                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: 52                 
Correct output: -80                 | Program output: -40                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: 3                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 26                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Lexicase best errors: [0 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 36
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Zero cases best errors: [0 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 36
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (773 380 775 380 775 803 145 775 147 380)
Population mean number of elite cases: 5.33
Count of perfect (error zero) individuals by case: (773 380 775 380 775 803 145 775 147 380)
Population mean number of perfect (error zero) cases: 5.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (boolean_invert_second_then_and in2 exec_stackdepth exec_yankdup integer_min print_integer exec_stackdepth boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add boolean_xor integer_lte integer_pop boolean_flush exec_noop boolean_eq in2 in1)
Errors: [0 0 0 0 0 0 1 0 1 0]
Total: 2
Mean: 0.2
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 4.667
Median total errors in population: 5
Error averages by case: (0.227 0.62 0.225 0.62 0.225 0.197 0.855 0.225 0.853 0.62)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.556
Average program size in population (points): 26.756
Average percent parens in population: 0.136
Minimum age in population: 39.70258182287216
Maximum age in population: 45.77288565412164
Average age in population: 43.4809980737865
Median age in population: 43.5727578625083
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.415
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 195
Syntactic diversity (% unique Push programs):	 0.372
Total error diversity:				 0.009
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 20986404
--- Timings ---
Current time: 1559584111913 milliseconds
Total Time:          94.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.1 seconds, 61.5%
Fitness Testing:     19.6 seconds, 20.8%
Report:              16.7 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -41                
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 51                 
Correct output: 34                  | Program output: 54                 
Correct output: 10                  | Program output: 34                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 58                 
Correct output: 19                  | Program output: 71                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 29                 
Correct output: 83                  | Program output: 83                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 73                 
Correct output: -80                 | Program output: 23                 
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: -7                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 18                 
Correct output: -70                 | Program output: -52                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: -24                
Correct output: -86                 | Program output: 74                 
Correct output: -4                  | Program output: -4                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 40                 
Correct output: -27                 | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -49                
Correct output: -72                 | Program output: -51                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 77                 
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70                
Correct output: -86                 | Program output: -42                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 69                 
Correct output: -51                 | Program output: 80                 
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -81                
Correct output: -91                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: 52                 
Correct output: -80                 | Program output: -40                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: 3                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 26                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Lexicase best errors: [0 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_empty integer_add integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Zero cases best errors: [0 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (601 634 5 598 634 636 530 5 5 636)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (601 634 5 598 634 636 530 5 5 636)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_not integer_fromboolean integer_empty integer_add boolean_xor integer_lte) (integer_pop boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in1))
Errors: [0 0 1 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.716
Median total errors in population: 5
Error averages by case: (0.399 0.366 0.995 0.402 0.366 0.364 0.47 0.995 0.995 0.364)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.18
Average program size in population (points): 34.255
Average percent parens in population: 0.199
Minimum age in population: 40.70258182287216
Maximum age in population: 46.94172399118543
Average age in population: 45.22384757020324
Median age in population: 45.2745505226776
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.417
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 22150167
--- Timings ---
Current time: 1559584115798 milliseconds
Total Time:          97.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.0 seconds, 61.5%
Fitness Testing:     20.6 seconds, 21.1%
Report:              16.9 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 73                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: 67                 
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 6                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 62                 
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 23                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 13                 
Correct output: 2                   | Program output: 24                 
Correct output: 33                  | Program output: 48                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 81                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -63                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -5                 
Correct output: -59                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 33                 
Correct output: 7                   | Program output: 54                 
Correct output: -88                 | Program output: -73                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -76                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: 11                 
Correct output: -61                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -40                
Correct output: -41                 | Program output: -19                
Correct output: 69                  | Program output: 79                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -7                 
Correct output: -93                 | Program output: -43                
Correct output: -77                 | Program output: 31                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -29                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Lexicase best program: (exec_y_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 integer_inc) integer_add boolean_xor integer_mod) (boolean_swap boolean_flush exec_noop) boolean_eq) in3)
Lexicase best errors: [0 0 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3})
Zero cases best program: (exec_y_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 integer_inc) integer_add boolean_xor integer_mod) (boolean_swap boolean_flush exec_noop) boolean_eq) in3)
Zero cases best errors: [0 0 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (930 279 447 448 280 279 553 553 448 553)
Population mean number of elite cases: 4.77
Count of perfect (error zero) individuals by case: (930 279 447 448 280 279 553 553 448 553)
Population mean number of perfect (error zero) cases: 4.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_max integer_add) (boolean_xor integer_lte) integer_pop) (boolean_flush exec_noop) (boolean_eq) in3 exec_empty print_integer in2 in3)
Errors: [0 0 1 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 37
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 5.23
Median total errors in population: 6
Error averages by case: (0.07 0.721 0.553 0.552 0.72 0.721 0.447 0.447 0.552 0.447)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.985
Average program size in population (points): 32.986
Average percent parens in population: 0.207
Minimum age in population: 43.48854914307594
Maximum age in population: 48.52444833517075
Average age in population: 46.41801351123303
Median age in population: 46.41037953831255
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.436
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 23347650
--- Timings ---
Current time: 1559584119664 milliseconds
Total Time:         101.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.9 seconds, 61.0%
Fitness Testing:     21.6 seconds, 21.3%
Report:              17.8 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 71                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 73                 
Correct output: 19                  | Program output: 82                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 30                 
Correct output: -80                 | Program output: -42                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: 44                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: 37                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -28                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 70                 
Correct output: -27                 | Program output: 27                 
Correct output: 12                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 41                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -14                
Correct output: -70                 | Program output: -22                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: 57                 
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: 4                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2})
Lexicase best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 integer_inc) integer_add boolean_xor integer_mod) (boolean_swap boolean_flush exec_noop) boolean_eq) (boolean_stackdepth) (integer_fromboolean integer_fromboolean integer_add boolean_xor integer_lte) integer_pop boolean_flush exec_noop boolean_eq in3 exec_empty boolean_eq in2)
Lexicase best errors: [1 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 41
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2})
Zero cases best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 integer_inc) integer_add boolean_xor integer_mod) (boolean_swap boolean_flush exec_noop) boolean_eq) (boolean_stackdepth) (integer_fromboolean integer_fromboolean integer_add boolean_xor integer_lte) integer_pop boolean_flush exec_noop boolean_eq in3 exec_empty boolean_eq in2)
Zero cases best errors: [1 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 41
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (438 25 949 26 376 27 460 829 829 829)
Population mean number of elite cases: 4.79
Count of perfect (error zero) individuals by case: (438 25 949 26 376 27 460 829 829 829)
Population mean number of perfect (error zero) cases: 4.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2})
Best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) integer_inc boolean_stackdepth integer_fromboolean integer_max integer_add) (boolean_xor integer_lte) integer_pop) (boolean_flush exec_noop) (boolean_eq) in3 exec_empty print_integer in2)
Errors: [1 0 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.212
Median total errors in population: 5
Error averages by case: (0.562 0.975 0.051 0.974 0.624 0.973 0.54 0.171 0.171 0.171)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.682
Average program size in population (points): 33.939
Average percent parens in population: 0.215
Minimum age in population: 45.19129054993391
Maximum age in population: 49.76906465739012
Average age in population: 47.71192298185872
Median age in population: 47.78877060511149
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 24628809
--- Timings ---
Current time: 1559584123831 milliseconds
Total Time:         105.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.1 seconds, 60.7%
Fitness Testing:     22.7 seconds, 21.5%
Report:              18.8 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 71                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 73                 
Correct output: 19                  | Program output: 82                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 30                 
Correct output: -80                 | Program output: -42                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: 44                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: 37                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -28                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 70                 
Correct output: -27                 | Program output: 27                 
Correct output: 12                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 41                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -14                
Correct output: -70                 | Program output: -22                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: 57                 
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: 4                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2})
Lexicase best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) integer_inc boolean_stackdepth integer_fromboolean integer_max integer_add) (boolean_xor integer_lte) integer_pop) (boolean_flush exec_noop) (boolean_eq) in3 exec_empty print_integer in2)
Lexicase best errors: [1 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 36
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2})
Zero cases best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) integer_inc boolean_stackdepth integer_fromboolean integer_max integer_add) (boolean_xor integer_lte) integer_pop) (boolean_flush exec_noop) (boolean_eq) in3 exec_empty print_integer in2)
Zero cases best errors: [1 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 36
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (408 617 240 925 618 515 518 925 241 515)
Population mean number of elite cases: 5.52
Count of perfect (error zero) individuals by case: (408 617 240 925 618 515 518 925 241 515)
Population mean number of perfect (error zero) cases: 5.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2})
Best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 integer_inc) integer_add boolean_xor integer_mod) (boolean_swap boolean_flush exec_noop) boolean_eq) (boolean_stackdepth) (integer_fromboolean integer_fromboolean integer_add boolean_xor integer_lte) integer_pop boolean_flush exec_noop boolean_eq in3 exec_empty boolean_eq in2)
Errors: [1 0 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 33
Size: 41
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 4.478
Median total errors in population: 4
Error averages by case: (0.592 0.383 0.76 0.075 0.382 0.485 0.482 0.075 0.759 0.485)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.854
Average program size in population (points): 35.306
Average percent parens in population: 0.211
Minimum age in population: 46.89261481165886
Maximum age in population: 51.25921515352093
Average age in population: 49.27417023205222
Median age in population: 49.31373016978614
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.515
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 25926072
--- Timings ---
Current time: 1559584127679 milliseconds
Total Time:         109.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.0 seconds, 60.2%
Fitness Testing:     23.7 seconds, 21.7%
Report:              19.7 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 71                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -25                
Correct output: -53                 | Program output: -4                 
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: 0                  
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 91                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -37                
Correct output: -86                 | Program output: -46                
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: 66                 
Correct output: -94                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 27                 
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -72                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: -2                 
Correct output: -80                 | Program output: -36                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Lexicase best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 integer_lte) integer_pop) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 29
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Zero cases best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 integer_lte) integer_pop) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 29
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (563 459 461 459 461 935 461 245 564 564)
Population mean number of elite cases: 5.17
Count of perfect (error zero) individuals by case: (563 459 461 459 461 935 461 245 564 564)
Population mean number of perfect (error zero) cases: 5.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Best program: (exec_y_when_autoconstructing (in4 exec_stackdepth exec_yankdup boolean_invert_second_then_and exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth integer_fromboolean integer_max exec_if () (boolean_xor integer_lte) integer_pop) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3)))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 33
Size: 44
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.828
Median total errors in population: 5
Error averages by case: (0.437 0.541 0.539 0.541 0.539 0.065 0.539 0.755 0.436 0.436)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.971
Average program size in population (points): 34.65
Average percent parens in population: 0.222
Minimum age in population: 47.97978347539902
Maximum age in population: 52.43888424837496
Average age in population: 50.642879682953
Median age in population: 50.72251063457225
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 27216979
--- Timings ---
Current time: 1559584131690 milliseconds
Total Time:         113.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.0 seconds, 59.9%
Fitness Testing:     24.8 seconds, 21.8%
Report:              20.6 seconds, 18.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -41                
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 51                 
Correct output: 34                  | Program output: 54                 
Correct output: 10                  | Program output: 34                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 58                 
Correct output: 19                  | Program output: 71                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 29                 
Correct output: 83                  | Program output: 83                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 73                 
Correct output: -80                 | Program output: 23                 
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: -7                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 18                 
Correct output: -70                 | Program output: -52                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: -24                
Correct output: -86                 | Program output: 74                 
Correct output: -4                  | Program output: -4                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 40                 
Correct output: -27                 | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -49                
Correct output: -72                 | Program output: -51                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 77                 
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70                
Correct output: -86                 | Program output: -42                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 69                 
Correct output: -51                 | Program output: 80                 
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -81                
Correct output: -91                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: 52                 
Correct output: -80                 | Program output: -40                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: 3                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 26                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_stackdepth boolean_frominteger boolean_shove boolean_stackdepth boolean_stackdepth integer_fromboolean integer_empty integer_sub boolean_xor integer_lte exec_y (boolean_flush exec_noop) boolean_eq) (in3 in2 in1))
Lexicase best errors: [1 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (boolean_invert_second_then_and in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_stackdepth boolean_frominteger boolean_shove boolean_stackdepth boolean_stackdepth integer_fromboolean integer_empty integer_sub boolean_xor integer_lte exec_y (boolean_flush exec_noop) boolean_eq) (in3 in2 in1))
Zero cases best errors: [1 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 928 283 283 743 924 282 572 138 572)
Population mean number of elite cases: 4.87
Count of perfect (error zero) individuals by case: (142 928 283 283 743 924 282 572 138 572)
Population mean number of perfect (error zero) cases: 4.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (boolean_invert_second_then_and exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
Errors: [1 0 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 38
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 5.133
Median total errors in population: 5
Error averages by case: (0.858 0.072 0.717 0.717 0.257 0.076 0.718 0.428 0.862 0.428)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.966
Average program size in population (points): 33.276
Average percent parens in population: 0.249
Minimum age in population: 48.97978347539902
Maximum age in population: 53.90681752364617
Average age in population: 52.04003832050989
Median age in population: 52.12901280980441
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.423
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.422
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 28530301
--- Timings ---
Current time: 1559584135650 milliseconds
Total Time:         117.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.9 seconds, 59.5%
Fitness Testing:     25.9 seconds, 22.0%
Report:              21.6 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 71                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 4                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -25                
Correct output: -53                 | Program output: -4                 
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: 0                  
Correct output: -23                 | Program output: -4                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 91                 
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -37                
Correct output: -86                 | Program output: -46                
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: 9                  
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: 66                 
Correct output: -94                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -25                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: 27                 
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -75                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -72                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: -2                 
Correct output: -80                 | Program output: -36                
Correct output: -88                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Lexicase best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor boolean_dup_times integer_lte) integer_pop) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Lexicase best errors: [1 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Zero cases best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor boolean_dup_times integer_lte) integer_pop) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Zero cases best errors: [1 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (511 578 577 412 412 260 261 260 413 917)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (511 578 577 412 412 260 261 260 413 917)
Population mean number of perfect (error zero) cases: 4.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 integer_lte) integer_pop) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Errors: [1 1 1 0 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 5.399
Median total errors in population: 5
Error averages by case: (0.489 0.422 0.423 0.588 0.588 0.74 0.739 0.74 0.587 0.083)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.749
Average program size in population (points): 34.804
Average percent parens in population: 0.232
Minimum age in population: 51.10093146236613
Maximum age in population: 55.2888755343447
Average age in population: 53.7095281577663
Median age in population: 53.72617943963269
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 29821809
--- Timings ---
Current time: 1559584139495 milliseconds
Total Time:         121.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.8 seconds, 59.1%
Fitness Testing:     26.9 seconds, 22.2%
Report:              22.6 seconds, 18.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Lexicase best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add integer_pop) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Zero cases best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add integer_pop) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (545 537 479 542 536 549 936 462 546 540)
Population mean number of elite cases: 5.67
Count of perfect (error zero) individuals by case: (545 537 479 542 536 549 936 462 546 540)
Population mean number of perfect (error zero) cases: 5.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_or exec_y (boolean_xor tag_integer_865 integer_lte) boolean_xor) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 4.328
Median total errors in population: 4
Error averages by case: (0.455 0.463 0.521 0.458 0.464 0.451 0.064 0.538 0.454 0.46)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.516
Average program size in population (points): 34.588
Average percent parens in population: 0.234
Minimum age in population: 52.2409310285002
Maximum age in population: 56.71545454942679
Average age in population: 54.86317784205505
Median age in population: 54.96094321768032
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 237
Genome diversity (% unique genomes):	 0.424
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 238
Syntactic diversity (% unique Push programs):	 0.421
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 31131993
--- Timings ---
Current time: 1559584143436 milliseconds
Total Time:         125.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.7 seconds, 58.8%
Fitness Testing:     28.0 seconds, 22.4%
Report:              23.5 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Lexicase best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add integer_pop) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Zero cases best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add integer_pop) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (248 693 248 800 620 619 692 690 615 619)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (248 693 248 800 620 619 692 690 615 619)
Population mean number of perfect (error zero) cases: 5.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add integer_pop) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 4.156
Median total errors in population: 3
Error averages by case: (0.752 0.307 0.752 0.2 0.38 0.381 0.308 0.31 0.385 0.381)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.861
Average program size in population (points): 35.034
Average percent parens in population: 0.233
Minimum age in population: 53.89637243456673
Maximum age in population: 58.17889309654856
Average age in population: 56.98036742862497
Median age in population: 56.90286314534023
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 222
Genome diversity (% unique genomes):	 0.414
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.413
Total error diversity:				 0.009
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 32452781
--- Timings ---
Current time: 1559584147436 milliseconds
Total Time:         129.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.6 seconds, 58.5%
Fitness Testing:     29.1 seconds, 22.5%
Report:              24.4 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Lexicase best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_or exec_y (boolean_xor tag_integer_865 integer_lte) boolean_xor) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 37
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Zero cases best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_or exec_y (boolean_xor tag_integer_865 integer_lte) boolean_xor) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 37
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (413 592 600 534 592 538 926 594 592 728)
Population mean number of elite cases: 6.11
Count of perfect (error zero) individuals by case: (413 592 600 534 592 538 926 594 592 728)
Population mean number of perfect (error zero) cases: 6.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_or exec_y (boolean_xor tag_integer_865 integer_lte) boolean_xor) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 3.891
Median total errors in population: 2
Error averages by case: (0.587 0.408 0.4 0.466 0.408 0.462 0.074 0.406 0.408 0.272)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.503
Average program size in population (points): 35.482
Average percent parens in population: 0.225
Minimum age in population: 54.89637243456673
Maximum age in population: 59.99936624259135
Average age in population: 58.4066502389241
Median age in population: 58.49461315097869
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.01
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 33776481
--- Timings ---
Current time: 1559584151430 milliseconds
Total Time:         133.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.5 seconds, 58.2%
Fitness Testing:     30.2 seconds, 22.7%
Report:              25.4 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 49                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 7                   | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 31                 
Correct output: 83                  | Program output: 98                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -41                
Correct output: -83                 | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -44                 | Program output: -44                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 15                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -48                
Correct output: -70                 | Program output: -44                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 76                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -71                
Correct output: -77                 | Program output: 18                 
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: -20                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Lexicase best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add integer_pop) (boolean_flush exec_noop) boolean_eq) (in3 boolean_yank print_integer) (in2 in3))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Zero cases best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add integer_pop) (boolean_flush exec_noop) boolean_eq) (in3 boolean_yank print_integer) (in2 in3))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (582 584 581 917 844 701 917 316 582 582)
Population mean number of elite cases: 6.61
Count of perfect (error zero) individuals by case: (582 584 581 917 844 701 917 316 582 582)
Population mean number of perfect (error zero) cases: 6.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in3})
Best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_or exec_y (boolean_xor tag_integer_865 integer_lte) boolean_xor) (boolean_flush exec_noop) boolean_eq) (in3 exec_empty print_integer) (in2 in3))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 3.394
Median total errors in population: 1
Error averages by case: (0.418 0.416 0.419 0.083 0.156 0.299 0.083 0.684 0.418 0.418)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.468
Average program size in population (points): 36.856
Average percent parens in population: 0.228
Minimum age in population: 57.26986316789407
Maximum age in population: 61.53292457173302
Average age in population: 59.89006526896508
Median age in population: 59.97361449609343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 170
Genome diversity (% unique genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.01
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 35101017
--- Timings ---
Current time: 1559584155398 milliseconds
Total Time:         137.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.4 seconds, 57.9%
Fitness Testing:     31.4 seconds, 22.9%
Report:              26.3 seconds, 19.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 210
Test mean error for best: 0.21000
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -41                
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 58                 
Correct output: 19                  | Program output: 71                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 29                 
Correct output: 83                  | Program output: 83                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 30                 
Correct output: -80                 | Program output: -42                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: -7                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -52                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: -4                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 40                 
Correct output: -27                 | Program output: 10                 
Correct output: 12                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -51                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 69                 
Correct output: -51                 | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -81                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: 3                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop integer_pop integer_pop boolean_flush boolean_shove)) (in3 exec_empty print_integer) (in2 in1))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 38
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (boolean_xor tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop integer_pop integer_pop boolean_flush boolean_shove)) (in3 exec_empty print_integer) (in2 in1))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 38
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (776 371 922 453 452 368 373 368 921 453)
Population mean number of elite cases: 5.46
Count of perfect (error zero) individuals by case: (776 371 922 453 452 368 373 368 921 453)
Population mean number of perfect (error zero) cases: 5.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction tag_integer_865} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (integer_add tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 30
Size: 38
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 4.543
Median total errors in population: 4
Error averages by case: (0.224 0.629 0.078 0.547 0.548 0.632 0.627 0.632 0.079 0.547)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.365
Average program size in population (points): 36.688
Average percent parens in population: 0.227
Minimum age in population: 58.97077838428959
Maximum age in population: 63.08003031821045
Average age in population: 61.34359111499422
Median age in population: 61.42965876451171
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 280
Genome diversity (% unique genomes):	 0.449
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 280
Syntactic diversity (% unique Push programs):	 0.449
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 36398117
--- Timings ---
Current time: 1559584159393 milliseconds
Total Time:         141.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.3 seconds, 57.6%
Fitness Testing:     32.4 seconds, 23.0%
Report:              27.3 seconds, 19.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 41
Successful program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (integer_add tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 38


Auto-simplifying with starting size: 38
step: 0
program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (integer_add tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 500
program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (integer_add tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 1000
program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (integer_add tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 1500
program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (integer_add tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 2000
program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (integer_add tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 2500
program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (integer_add tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 3000
program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (integer_add tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 3500
program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (integer_add tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 4000
program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (integer_add tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 4500
program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (integer_add tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 5000
program: (exec_s_when_autoconstructing (in4 exec_stackdepth exec_yankdup integer_min integer_min print_integer exec_rot () (boolean_or exec_y (integer_add tag_integer_865 exec_stackdepth) boolean_shove boolean_stackdepth boolean_or integer_stackdepth integer_add boolean_xor integer_lte) (integer_pop boolean_flush integer_pop boolean_flush exec_noop)) (in3 exec_empty print_integer) (in2 in1))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 210
Test mean error for best: 0.21000
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -63                
Correct output: -85                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: 32                  | Program output: 32                 
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -41                
Correct output: -87                 | Program output: -87                
Correct output: -59                 | Program output: -59                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -11                 | Program output: -11                
Correct output: 11                  | Program output: 11                 
Correct output: 87                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 43                  | Program output: 43                 
Correct output: 22                  | Program output: 22                 
Correct output: 41                  | Program output: 52                 
Correct output: 48                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 55                  | Program output: 58                 
Correct output: 19                  | Program output: 71                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 29                 
Correct output: 83                  | Program output: 83                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 30                 
Correct output: -80                 | Program output: -42                
Correct output: -70                 | Program output: -70                
Correct output: -7                  | Program output: -7                 
Correct output: -79                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: -50                
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -99                 | Program output: -99                
Correct output: -23                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -52                
Correct output: -44                 | Program output: -13                
Correct output: -65                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: -4                 
Correct output: 7                   | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: 28                  | Program output: 45                 
Correct output: 8                   | Program output: 40                 
Correct output: -27                 | Program output: 10                 
Correct output: 12                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -23                 | Program output: -23                
Correct output: -73                 | Program output: -73                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -51                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -41                 | Program output: -41                
Correct output: 69                  | Program output: 69                 
Correct output: -51                 | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -54                 | Program output: -54                
Correct output: -94                 | Program output: -81                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: -31                
Correct output: -80                 | Program output: -80                
Correct output: -88                 | Program output: -88                
Correct output: -20                 | Program output: 3                  
Correct output: -100                | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -91                 | Program output: -91                
;;******************************
