Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[51 51 51 -49] -49] [[-37 -37 -37 2] -37] [[50 -48 50 50] -48] [[64 61 64 64] 61] [[54 54 54 -80] -80] [[14 -78 -78 -78] -78] [[-32 33 -32 -32] -32] [[-9 -9 -9 34] -9] [[70 70 70 -54] -54] [[16 10 16 16] 10] [(40 40 40 40) 40] [(89 89 89 89) 89] [(38 38 38 38) 38] [(46 46 46 46) 46] [(-87 -87 -87 -87) -87] [(81 16 51 93) 16] [(67 99 96 9) 9] [(38 16 71 44) 16] [(8 69 8 55) 8] [(81 27 49 59) 27] [(16 93 42 93) 16] [(56 68 33 23) 23] [(71 0 28 4) 0] [(76 62 34 55) 34] [(74 72 39 41) 39] [(22 7 31 18) 7] [(97 2 42 56) 2] [(46 8 63 89) 8] [(71 49 91 99) 49] [(55 93 47 42) 42] [(74 1 91 57) 1] [(21 87 96 46) 21] [(81 93 96 13) 13] [(49 50 42 86) 42] [(87 50 0 70) 0] [(-94 -38 63 -66) -94] [(12 10 -54 -74) -74] [(-57 75 -14 -72) -72] [(7 -50 15 -47) -50] [(64 59 -37 -98) -98] [(-5 -65 65 70) -65] [(-57 7 -55 0) -57] [(-4 59 16 -91) -91] [(26 -4 18 -9) -9] [(0 96 -3 -1) -3] [(75 -11 -52 14) -52] [(3 31 -20 -73) -73] [(71 -87 40 34) -87] [(-40 -1 42 -49) -49] [(-16 -35 -75 -80) -80] [(-27 -94 -3 67) -94] [(-6 25 98 -19) -19] [(15 -90 6 -7) -90] [(99 -31 30 -65) -65] [(60 16 -40 68) -40] [(-24 40 34 -56) -56] [(-30 21 5 -88) -88] [(97 28 -29 39) -29] [(77 -30 90 -50) -50] [(33 -90 -17 -5) -90] [(-83 -69 78 82) -83] [(46 19 46 33) 19] [(-89 -66 50 -99) -99] [(-49 -35 -74 3) -74] [(-19 21 98 5) -19] [(-80 -69 66 -7) -80] [(98 -81 57 43) -81] [(-50 -9 94 -90) -90] [(-48 -97 20 -25) -97] [(3 4 25 82) 3] [(80 64 95 44) 44] [(-2 59 -14 -98) -98] [(-36 17 -89 -66) -89] [(-60 24 71 -71) -71] [(6 25 -20 46) -20] [(-89 10 25 70) -89] [(-22 93 -43 40) -43] [(-50 -50 10 79) -50] [(14 -83 -48 48) -83] [(-68 -65 38 6) -68] [(17 -56 54 51) -56] [(-26 -53 -72 -84) -84] [(6 -21 1 -27) -27] [(-19 41 30 54) -19] [(44 -21 28 -81) -81] [(89 35 88 25) 25] [(-43 -86 47 -48) -86] [(-33 -98 50 42) -98] [(-67 79 -31 67) -67] [(92 -52 -100 48) -100] [(-65 90 -99 -18) -99] [(-32 26 -72 -94) -94] [(-22 73 57 -95) -95] [(15 6 21 71) 6] [(-55 -62 4 50) -62])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[51 51 51 -49] -49]
Train Case:   6 | Input/Output: [[-37 -37 -37 2] -37]
Train Case:   7 | Input/Output: [[50 -48 50 50] -48]
Train Case:   8 | Input/Output: [[64 61 64 64] 61]
Train Case:   9 | Input/Output: [[54 54 54 -80] -80]
Train Case:  10 | Input/Output: [[14 -78 -78 -78] -78]
Train Case:  11 | Input/Output: [[-32 33 -32 -32] -32]
Train Case:  12 | Input/Output: [[-9 -9 -9 34] -9]
Train Case:  13 | Input/Output: [[70 70 70 -54] -54]
Train Case:  14 | Input/Output: [[16 10 16 16] 10]
Train Case:  15 | Input/Output: [(40 40 40 40) 40]
Train Case:  16 | Input/Output: [(89 89 89 89) 89]
Train Case:  17 | Input/Output: [(38 38 38 38) 38]
Train Case:  18 | Input/Output: [(46 46 46 46) 46]
Train Case:  19 | Input/Output: [(-87 -87 -87 -87) -87]
Train Case:  20 | Input/Output: [(81 16 51 93) 16]
Train Case:  21 | Input/Output: [(67 99 96 9) 9]
Train Case:  22 | Input/Output: [(38 16 71 44) 16]
Train Case:  23 | Input/Output: [(8 69 8 55) 8]
Train Case:  24 | Input/Output: [(81 27 49 59) 27]
Train Case:  25 | Input/Output: [(16 93 42 93) 16]
Train Case:  26 | Input/Output: [(56 68 33 23) 23]
Train Case:  27 | Input/Output: [(71 0 28 4) 0]
Train Case:  28 | Input/Output: [(76 62 34 55) 34]
Train Case:  29 | Input/Output: [(74 72 39 41) 39]
Train Case:  30 | Input/Output: [(22 7 31 18) 7]
Train Case:  31 | Input/Output: [(97 2 42 56) 2]
Train Case:  32 | Input/Output: [(46 8 63 89) 8]
Train Case:  33 | Input/Output: [(71 49 91 99) 49]
Train Case:  34 | Input/Output: [(55 93 47 42) 42]
Train Case:  35 | Input/Output: [(74 1 91 57) 1]
Train Case:  36 | Input/Output: [(21 87 96 46) 21]
Train Case:  37 | Input/Output: [(81 93 96 13) 13]
Train Case:  38 | Input/Output: [(49 50 42 86) 42]
Train Case:  39 | Input/Output: [(87 50 0 70) 0]
Train Case:  40 | Input/Output: [(-94 -38 63 -66) -94]
Train Case:  41 | Input/Output: [(12 10 -54 -74) -74]
Train Case:  42 | Input/Output: [(-57 75 -14 -72) -72]
Train Case:  43 | Input/Output: [(7 -50 15 -47) -50]
Train Case:  44 | Input/Output: [(64 59 -37 -98) -98]
Train Case:  45 | Input/Output: [(-5 -65 65 70) -65]
Train Case:  46 | Input/Output: [(-57 7 -55 0) -57]
Train Case:  47 | Input/Output: [(-4 59 16 -91) -91]
Train Case:  48 | Input/Output: [(26 -4 18 -9) -9]
Train Case:  49 | Input/Output: [(0 96 -3 -1) -3]
Train Case:  50 | Input/Output: [(75 -11 -52 14) -52]
Train Case:  51 | Input/Output: [(3 31 -20 -73) -73]
Train Case:  52 | Input/Output: [(71 -87 40 34) -87]
Train Case:  53 | Input/Output: [(-40 -1 42 -49) -49]
Train Case:  54 | Input/Output: [(-16 -35 -75 -80) -80]
Train Case:  55 | Input/Output: [(-27 -94 -3 67) -94]
Train Case:  56 | Input/Output: [(-6 25 98 -19) -19]
Train Case:  57 | Input/Output: [(15 -90 6 -7) -90]
Train Case:  58 | Input/Output: [(99 -31 30 -65) -65]
Train Case:  59 | Input/Output: [(60 16 -40 68) -40]
Train Case:  60 | Input/Output: [(-24 40 34 -56) -56]
Train Case:  61 | Input/Output: [(-30 21 5 -88) -88]
Train Case:  62 | Input/Output: [(97 28 -29 39) -29]
Train Case:  63 | Input/Output: [(77 -30 90 -50) -50]
Train Case:  64 | Input/Output: [(33 -90 -17 -5) -90]
Train Case:  65 | Input/Output: [(-83 -69 78 82) -83]
Train Case:  66 | Input/Output: [(46 19 46 33) 19]
Train Case:  67 | Input/Output: [(-89 -66 50 -99) -99]
Train Case:  68 | Input/Output: [(-49 -35 -74 3) -74]
Train Case:  69 | Input/Output: [(-19 21 98 5) -19]
Train Case:  70 | Input/Output: [(-80 -69 66 -7) -80]
Train Case:  71 | Input/Output: [(98 -81 57 43) -81]
Train Case:  72 | Input/Output: [(-50 -9 94 -90) -90]
Train Case:  73 | Input/Output: [(-48 -97 20 -25) -97]
Train Case:  74 | Input/Output: [(3 4 25 82) 3]
Train Case:  75 | Input/Output: [(80 64 95 44) 44]
Train Case:  76 | Input/Output: [(-2 59 -14 -98) -98]
Train Case:  77 | Input/Output: [(-36 17 -89 -66) -89]
Train Case:  78 | Input/Output: [(-60 24 71 -71) -71]
Train Case:  79 | Input/Output: [(6 25 -20 46) -20]
Train Case:  80 | Input/Output: [(-89 10 25 70) -89]
Train Case:  81 | Input/Output: [(-22 93 -43 40) -43]
Train Case:  82 | Input/Output: [(-50 -50 10 79) -50]
Train Case:  83 | Input/Output: [(14 -83 -48 48) -83]
Train Case:  84 | Input/Output: [(-68 -65 38 6) -68]
Train Case:  85 | Input/Output: [(17 -56 54 51) -56]
Train Case:  86 | Input/Output: [(-26 -53 -72 -84) -84]
Train Case:  87 | Input/Output: [(6 -21 1 -27) -27]
Train Case:  88 | Input/Output: [(-19 41 30 54) -19]
Train Case:  89 | Input/Output: [(44 -21 28 -81) -81]
Train Case:  90 | Input/Output: [(89 35 88 25) 25]
Train Case:  91 | Input/Output: [(-43 -86 47 -48) -86]
Train Case:  92 | Input/Output: [(-33 -98 50 42) -98]
Train Case:  93 | Input/Output: [(-67 79 -31 67) -67]
Train Case:  94 | Input/Output: [(92 -52 -100 48) -100]
Train Case:  95 | Input/Output: [(-65 90 -99 -18) -99]
Train Case:  96 | Input/Output: [(-32 26 -72 -94) -94]
Train Case:  97 | Input/Output: [(-22 73 57 -95) -95]
Train Case:  98 | Input/Output: [(15 6 21 71) 6]
Train Case:  99 | Input/Output: [(-55 -62 4 50) -62]
Test Case:   0 | Input/Output: [[-76 -76 91 -76] -76]
Test Case:   1 | Input/Output: [[22 60 22 22] 22]
Test Case:   2 | Input/Output: [[76 44 76 76] 44]
Test Case:   3 | Input/Output: [[9 9 -33 9] -33]
Test Case:   4 | Input/Output: [[-5 -5 -24 -5] -24]
Test Case:   5 | Input/Output: [[-27 -27 22 -27] -27]
Test Case:   6 | Input/Output: [[-43 -43 53 -43] -43]
Test Case:   7 | Input/Output: [[53 53 -46 53] -46]
Test Case:   8 | Input/Output: [[42 72 42 42] 42]
Test Case:   9 | Input/Output: [[-10 74 74 74] -10]
Test Case:  10 | Input/Output: [[67 67 67 40] 40]
Test Case:  11 | Input/Output: [[-100 54 54 54] -100]
Test Case:  12 | Input/Output: [[-83 -83 20 -83] -83]
Test Case:  13 | Input/Output: [[-13 -13 -82 -13] -82]
Test Case:  14 | Input/Output: [[63 22 22 22] 22]
Test Case:  15 | Input/Output: [[-57 -57 22 -57] -57]
Test Case:  16 | Input/Output: [[-4 -4 -4 14] -4]
Test Case:  17 | Input/Output: [[-98 82 82 82] -98]
Test Case:  18 | Input/Output: [[-75 -33 -75 -75] -75]
Test Case:  19 | Input/Output: [[71 87 87 87] 71]
Test Case:  20 | Input/Output: [[-82 -82 -72 -82] -82]
Test Case:  21 | Input/Output: [[73 73 -53 73] -53]
Test Case:  22 | Input/Output: [[-85 -67 -67 -67] -85]
Test Case:  23 | Input/Output: [[-88 23 23 23] -88]
Test Case:  24 | Input/Output: [[71 4 71 71] 4]
Test Case:  25 | Input/Output: [[-33 -35 -35 -35] -35]
Test Case:  26 | Input/Output: [[-99 -99 -99 -40] -99]
Test Case:  27 | Input/Output: [[27 -87 27 27] -87]
Test Case:  28 | Input/Output: [[-21 72 -21 -21] -21]
Test Case:  29 | Input/Output: [[19 -77 -77 -77] -77]
Test Case:  30 | Input/Output: [[-40 -40 93 -40] -40]
Test Case:  31 | Input/Output: [[91 73 73 73] 73]
Test Case:  32 | Input/Output: [[36 36 36 87] 36]
Test Case:  33 | Input/Output: [[-29 -89 -89 -89] -89]
Test Case:  34 | Input/Output: [[72 72 72 -34] -34]
Test Case:  35 | Input/Output: [[-53 -33 -53 -53] -53]
Test Case:  36 | Input/Output: [[-35 -35 -22 -35] -35]
Test Case:  37 | Input/Output: [[17 86 17 17] 17]
Test Case:  38 | Input/Output: [[-11 31 -11 -11] -11]
Test Case:  39 | Input/Output: [[-69 -8 -8 -8] -69]
Test Case:  40 | Input/Output: [[-67 -18 -18 -18] -67]
Test Case:  41 | Input/Output: [[39 -49 39 39] -49]
Test Case:  42 | Input/Output: [[-99 18 -99 -99] -99]
Test Case:  43 | Input/Output: [[65 65 65 69] 65]
Test Case:  44 | Input/Output: [[-100 37 37 37] -100]
Test Case:  45 | Input/Output: [[-8 60 -8 -8] -8]
Test Case:  46 | Input/Output: [[-68 -68 66 -68] -68]
Test Case:  47 | Input/Output: [[90 52 52 52] 52]
Test Case:  48 | Input/Output: [[34 34 39 34] 34]
Test Case:  49 | Input/Output: [[-2 84 -2 -2] -2]
Test Case:  50 | Input/Output: [[-16 77 -16 -16] -16]
Test Case:  51 | Input/Output: [[44 44 44 67] 44]
Test Case:  52 | Input/Output: [[45 -55 -55 -55] -55]
Test Case:  53 | Input/Output: [[-26 -26 -26 -84] -84]
Test Case:  54 | Input/Output: [[-58 18 -58 -58] -58]
Test Case:  55 | Input/Output: [[-84 -89 -89 -89] -89]
Test Case:  56 | Input/Output: [[-19 -77 -19 -19] -77]
Test Case:  57 | Input/Output: [[-25 -25 -25 -2] -25]
Test Case:  58 | Input/Output: [[34 23 34 34] 23]
Test Case:  59 | Input/Output: [[38 38 -16 38] -16]
Test Case:  60 | Input/Output: [[-24 -15 -15 -15] -24]
Test Case:  61 | Input/Output: [[-39 50 50 50] -39]
Test Case:  62 | Input/Output: [[55 -88 55 55] -88]
Test Case:  63 | Input/Output: [[80 97 97 97] 80]
Test Case:  64 | Input/Output: [[24 -16 24 24] -16]
Test Case:  65 | Input/Output: [[75 -56 -56 -56] -56]
Test Case:  66 | Input/Output: [[-4 -2 -4 -4] -4]
Test Case:  67 | Input/Output: [[89 89 89 5] 5]
Test Case:  68 | Input/Output: [[94 80 80 80] 80]
Test Case:  69 | Input/Output: [[-91 -91 -91 59] -91]
Test Case:  70 | Input/Output: [[43 43 60 43] 43]
Test Case:  71 | Input/Output: [[10 -68 10 10] -68]
Test Case:  72 | Input/Output: [[100 100 100 89] 89]
Test Case:  73 | Input/Output: [[94 94 83 94] 83]
Test Case:  74 | Input/Output: [[13 91 13 13] 13]
Test Case:  75 | Input/Output: [[-68 -68 -31 -68] -68]
Test Case:  76 | Input/Output: [[69 69 69 -36] -36]
Test Case:  77 | Input/Output: [[-15 1 1 1] -15]
Test Case:  78 | Input/Output: [[-44 52 52 52] -44]
Test Case:  79 | Input/Output: [[48 12 12 12] 12]
Test Case:  80 | Input/Output: [[15 15 15 -81] -81]
Test Case:  81 | Input/Output: [[-40 -40 -56 -40] -56]
Test Case:  82 | Input/Output: [[-6 -6 30 -6] -6]
Test Case:  83 | Input/Output: [[-1 -1 84 -1] -1]
Test Case:  84 | Input/Output: [[31 31 31 42] 31]
Test Case:  85 | Input/Output: [[52 -19 -19 -19] -19]
Test Case:  86 | Input/Output: [[59 72 59 59] 59]
Test Case:  87 | Input/Output: [[-52 20 20 20] -52]
Test Case:  88 | Input/Output: [[-78 -78 -12 -78] -78]
Test Case:  89 | Input/Output: [[-24 -24 -24 -73] -73]
Test Case:  90 | Input/Output: [[-64 -74 -74 -74] -74]
Test Case:  91 | Input/Output: [[100 100 22 100] 22]
Test Case:  92 | Input/Output: [[26 -44 26 26] -44]
Test Case:  93 | Input/Output: [[67 67 -62 67] -62]
Test Case:  94 | Input/Output: [[87 52 87 87] 52]
Test Case:  95 | Input/Output: [[1 -76 1 1] -76]
Test Case:  96 | Input/Output: [[-12 55 55 55] -12]
Test Case:  97 | Input/Output: [[78 46 46 46] 46]
Test Case:  98 | Input/Output: [[-53 -74 -53 -53] -74]
Test Case:  99 | Input/Output: [[-24 20 -24 -24] -24]
Test Case: 100 | Input/Output: [(11 11 11 11) 11]
Test Case: 101 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 102 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 103 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 104 | Input/Output: [(24 24 24 24) 24]
Test Case: 105 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 106 | Input/Output: [(43 43 43 43) 43]
Test Case: 107 | Input/Output: [(81 81 81 81) 81]
Test Case: 108 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 109 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 110 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 111 | Input/Output: [(77 77 77 77) 77]
Test Case: 112 | Input/Output: [(48 48 48 48) 48]
Test Case: 113 | Input/Output: [(17 17 17 17) 17]
Test Case: 114 | Input/Output: [(41 41 41 41) 41]
Test Case: 115 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 116 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 117 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 118 | Input/Output: [(19 19 19 19) 19]
Test Case: 119 | Input/Output: [(10 10 10 10) 10]
Test Case: 120 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 121 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 122 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 123 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 124 | Input/Output: [(46 46 46 46) 46]
Test Case: 125 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 126 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 127 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 128 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 129 | Input/Output: [(88 88 88 88) 88]
Test Case: 130 | Input/Output: [(63 63 63 63) 63]
Test Case: 131 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 132 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 133 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 134 | Input/Output: [(71 71 71 71) 71]
Test Case: 135 | Input/Output: [(78 78 78 78) 78]
Test Case: 136 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 137 | Input/Output: [(41 41 41 41) 41]
Test Case: 138 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 139 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 140 | Input/Output: [(37 37 37 37) 37]
Test Case: 141 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 142 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 143 | Input/Output: [(39 39 39 39) 39]
Test Case: 144 | Input/Output: [(98 98 98 98) 98]
Test Case: 145 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 146 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 147 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 148 | Input/Output: [(26 26 26 26) 26]
Test Case: 149 | Input/Output: [(61 61 61 61) 61]
Test Case: 150 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 151 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 152 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 153 | Input/Output: [(27 27 27 27) 27]
Test Case: 154 | Input/Output: [(4 4 4 4) 4]
Test Case: 155 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 156 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 157 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 158 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 159 | Input/Output: [(56 56 56 56) 56]
Test Case: 160 | Input/Output: [(24 24 24 24) 24]
Test Case: 161 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 162 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 163 | Input/Output: [(60 60 60 60) 60]
Test Case: 164 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 165 | Input/Output: [(83 83 83 83) 83]
Test Case: 166 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 167 | Input/Output: [(58 58 58 58) 58]
Test Case: 168 | Input/Output: [(73 73 73 73) 73]
Test Case: 169 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 170 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 171 | Input/Output: [(98 98 98 98) 98]
Test Case: 172 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 173 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 174 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 175 | Input/Output: [(92 92 92 92) 92]
Test Case: 176 | Input/Output: [(46 46 46 46) 46]
Test Case: 177 | Input/Output: [(93 93 93 93) 93]
Test Case: 178 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 179 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 180 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 181 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 182 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 183 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 184 | Input/Output: [(75 75 75 75) 75]
Test Case: 185 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 186 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 187 | Input/Output: [(77 77 77 77) 77]
Test Case: 188 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 189 | Input/Output: [(95 95 95 95) 95]
Test Case: 190 | Input/Output: [(42 42 42 42) 42]
Test Case: 191 | Input/Output: [(96 96 96 96) 96]
Test Case: 192 | Input/Output: [(84 84 84 84) 84]
Test Case: 193 | Input/Output: [(72 72 72 72) 72]
Test Case: 194 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 195 | Input/Output: [(17 17 17 17) 17]
Test Case: 196 | Input/Output: [(1 1 1 1) 1]
Test Case: 197 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 198 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 199 | Input/Output: [(61 61 61 61) 61]
Test Case: 200 | Input/Output: [(44 64 7 7) 7]
Test Case: 201 | Input/Output: [(2 85 30 90) 2]
Test Case: 202 | Input/Output: [(71 0 84 72) 0]
Test Case: 203 | Input/Output: [(69 3 15 73) 3]
Test Case: 204 | Input/Output: [(93 50 39 28) 28]
Test Case: 205 | Input/Output: [(6 84 3 80) 3]
Test Case: 206 | Input/Output: [(78 69 39 35) 35]
Test Case: 207 | Input/Output: [(93 93 98 97) 93]
Test Case: 208 | Input/Output: [(9 52 76 70) 9]
Test Case: 209 | Input/Output: [(55 53 85 54) 53]
Test Case: 210 | Input/Output: [(82 69 66 46) 46]
Test Case: 211 | Input/Output: [(81 5 46 24) 5]
Test Case: 212 | Input/Output: [(96 82 89 17) 17]
Test Case: 213 | Input/Output: [(28 28 16 12) 12]
Test Case: 214 | Input/Output: [(42 76 89 48) 42]
Test Case: 215 | Input/Output: [(54 35 37 4) 4]
Test Case: 216 | Input/Output: [(16 7 38 96) 7]
Test Case: 217 | Input/Output: [(60 84 68 49) 49]
Test Case: 218 | Input/Output: [(27 97 14 25) 14]
Test Case: 219 | Input/Output: [(31 0 15 98) 0]
Test Case: 220 | Input/Output: [(77 90 5 32) 5]
Test Case: 221 | Input/Output: [(57 52 0 9) 0]
Test Case: 222 | Input/Output: [(100 4 24 80) 4]
Test Case: 223 | Input/Output: [(51 18 5 66) 5]
Test Case: 224 | Input/Output: [(41 7 70 0) 0]
Test Case: 225 | Input/Output: [(7 19 36 76) 7]
Test Case: 226 | Input/Output: [(67 0 81 75) 0]
Test Case: 227 | Input/Output: [(89 75 9 53) 9]
Test Case: 228 | Input/Output: [(0 96 62 13) 0]
Test Case: 229 | Input/Output: [(7 13 49 73) 7]
Test Case: 230 | Input/Output: [(82 38 78 76) 38]
Test Case: 231 | Input/Output: [(39 12 38 67) 12]
Test Case: 232 | Input/Output: [(80 93 53 79) 53]
Test Case: 233 | Input/Output: [(15 71 31 50) 15]
Test Case: 234 | Input/Output: [(69 31 42 23) 23]
Test Case: 235 | Input/Output: [(74 22 59 76) 22]
Test Case: 236 | Input/Output: [(31 100 96 35) 31]
Test Case: 237 | Input/Output: [(45 82 100 79) 45]
Test Case: 238 | Input/Output: [(85 33 63 72) 33]
Test Case: 239 | Input/Output: [(21 85 23 92) 21]
Test Case: 240 | Input/Output: [(32 73 0 1) 0]
Test Case: 241 | Input/Output: [(15 18 94 74) 15]
Test Case: 242 | Input/Output: [(83 49 46 95) 46]
Test Case: 243 | Input/Output: [(8 44 32 84) 8]
Test Case: 244 | Input/Output: [(37 89 75 100) 37]
Test Case: 245 | Input/Output: [(27 47 59 59) 27]
Test Case: 246 | Input/Output: [(43 68 28 84) 28]
Test Case: 247 | Input/Output: [(23 80 78 27) 23]
Test Case: 248 | Input/Output: [(34 50 70 100) 34]
Test Case: 249 | Input/Output: [(84 65 98 63) 63]
Test Case: 250 | Input/Output: [(69 79 5 29) 5]
Test Case: 251 | Input/Output: [(59 17 53 19) 17]
Test Case: 252 | Input/Output: [(3 100 53 52) 3]
Test Case: 253 | Input/Output: [(26 17 51 49) 17]
Test Case: 254 | Input/Output: [(76 77 88 79) 76]
Test Case: 255 | Input/Output: [(47 24 9 63) 9]
Test Case: 256 | Input/Output: [(89 64 4 38) 4]
Test Case: 257 | Input/Output: [(38 30 82 26) 26]
Test Case: 258 | Input/Output: [(16 96 65 83) 16]
Test Case: 259 | Input/Output: [(6 6 67 89) 6]
Test Case: 260 | Input/Output: [(34 98 4 80) 4]
Test Case: 261 | Input/Output: [(11 60 14 65) 11]
Test Case: 262 | Input/Output: [(83 22 80 63) 22]
Test Case: 263 | Input/Output: [(37 83 58 48) 37]
Test Case: 264 | Input/Output: [(82 81 21 49) 21]
Test Case: 265 | Input/Output: [(73 21 58 30) 21]
Test Case: 266 | Input/Output: [(52 10 82 60) 10]
Test Case: 267 | Input/Output: [(85 82 88 3) 3]
Test Case: 268 | Input/Output: [(49 11 49 42) 11]
Test Case: 269 | Input/Output: [(65 77 98 74) 65]
Test Case: 270 | Input/Output: [(92 44 27 76) 27]
Test Case: 271 | Input/Output: [(44 11 30 95) 11]
Test Case: 272 | Input/Output: [(35 6 70 11) 6]
Test Case: 273 | Input/Output: [(100 53 20 22) 20]
Test Case: 274 | Input/Output: [(20 73 86 79) 20]
Test Case: 275 | Input/Output: [(9 39 94 61) 9]
Test Case: 276 | Input/Output: [(7 13 27 86) 7]
Test Case: 277 | Input/Output: [(33 55 52 21) 21]
Test Case: 278 | Input/Output: [(18 33 91 48) 18]
Test Case: 279 | Input/Output: [(88 99 63 49) 49]
Test Case: 280 | Input/Output: [(40 45 39 38) 38]
Test Case: 281 | Input/Output: [(83 43 0 68) 0]
Test Case: 282 | Input/Output: [(87 43 33 6) 6]
Test Case: 283 | Input/Output: [(94 0 61 99) 0]
Test Case: 284 | Input/Output: [(35 67 49 71) 35]
Test Case: 285 | Input/Output: [(73 11 25 87) 11]
Test Case: 286 | Input/Output: [(94 0 51 62) 0]
Test Case: 287 | Input/Output: [(28 64 94 24) 24]
Test Case: 288 | Input/Output: [(78 34 83 36) 34]
Test Case: 289 | Input/Output: [(36 80 93 76) 36]
Test Case: 290 | Input/Output: [(49 8 43 31) 8]
Test Case: 291 | Input/Output: [(85 61 97 82) 61]
Test Case: 292 | Input/Output: [(67 85 88 90) 67]
Test Case: 293 | Input/Output: [(95 12 11 35) 11]
Test Case: 294 | Input/Output: [(30 80 6 13) 6]
Test Case: 295 | Input/Output: [(68 23 87 4) 4]
Test Case: 296 | Input/Output: [(78 79 83 66) 66]
Test Case: 297 | Input/Output: [(25 57 75 52) 25]
Test Case: 298 | Input/Output: [(2 26 96 63) 2]
Test Case: 299 | Input/Output: [(100 87 45 6) 6]
Test Case: 300 | Input/Output: [(51 65 77 41) 41]
Test Case: 301 | Input/Output: [(19 39 83 6) 6]
Test Case: 302 | Input/Output: [(56 96 40 37) 37]
Test Case: 303 | Input/Output: [(35 34 20 53) 20]
Test Case: 304 | Input/Output: [(0 83 2 21) 0]
Test Case: 305 | Input/Output: [(32 33 77 98) 32]
Test Case: 306 | Input/Output: [(88 49 90 90) 49]
Test Case: 307 | Input/Output: [(98 46 7 43) 7]
Test Case: 308 | Input/Output: [(9 50 23 17) 9]
Test Case: 309 | Input/Output: [(10 65 94 24) 10]
Test Case: 310 | Input/Output: [(79 53 97 15) 15]
Test Case: 311 | Input/Output: [(36 14 89 56) 14]
Test Case: 312 | Input/Output: [(38 90 71 86) 38]
Test Case: 313 | Input/Output: [(34 58 60 90) 34]
Test Case: 314 | Input/Output: [(63 0 15 66) 0]
Test Case: 315 | Input/Output: [(9 14 20 54) 9]
Test Case: 316 | Input/Output: [(28 75 22 0) 0]
Test Case: 317 | Input/Output: [(73 82 29 77) 29]
Test Case: 318 | Input/Output: [(15 69 49 92) 15]
Test Case: 319 | Input/Output: [(43 95 34 57) 34]
Test Case: 320 | Input/Output: [(65 8 95 51) 8]
Test Case: 321 | Input/Output: [(33 65 71 74) 33]
Test Case: 322 | Input/Output: [(42 78 15 86) 15]
Test Case: 323 | Input/Output: [(33 49 78 56) 33]
Test Case: 324 | Input/Output: [(23 44 48 45) 23]
Test Case: 325 | Input/Output: [(2 73 76 35) 2]
Test Case: 326 | Input/Output: [(53 17 30 54) 17]
Test Case: 327 | Input/Output: [(56 61 12 25) 12]
Test Case: 328 | Input/Output: [(60 91 7 51) 7]
Test Case: 329 | Input/Output: [(1 31 69 27) 1]
Test Case: 330 | Input/Output: [(79 88 67 42) 42]
Test Case: 331 | Input/Output: [(5 99 52 22) 5]
Test Case: 332 | Input/Output: [(8 64 81 18) 8]
Test Case: 333 | Input/Output: [(64 45 0 50) 0]
Test Case: 334 | Input/Output: [(51 19 33 41) 19]
Test Case: 335 | Input/Output: [(91 4 33 57) 4]
Test Case: 336 | Input/Output: [(34 81 50 76) 34]
Test Case: 337 | Input/Output: [(78 82 50 22) 22]
Test Case: 338 | Input/Output: [(30 82 9 54) 9]
Test Case: 339 | Input/Output: [(50 31 29 27) 27]
Test Case: 340 | Input/Output: [(10 33 23 51) 10]
Test Case: 341 | Input/Output: [(99 52 90 19) 19]
Test Case: 342 | Input/Output: [(36 70 30 18) 18]
Test Case: 343 | Input/Output: [(49 44 73 65) 44]
Test Case: 344 | Input/Output: [(45 55 14 15) 14]
Test Case: 345 | Input/Output: [(37 29 81 94) 29]
Test Case: 346 | Input/Output: [(97 100 63 33) 33]
Test Case: 347 | Input/Output: [(52 13 93 9) 9]
Test Case: 348 | Input/Output: [(84 84 98 96) 84]
Test Case: 349 | Input/Output: [(2 36 76 40) 2]
Test Case: 350 | Input/Output: [(38 68 86 80) 38]
Test Case: 351 | Input/Output: [(26 25 1 15) 1]
Test Case: 352 | Input/Output: [(99 46 39 82) 39]
Test Case: 353 | Input/Output: [(44 91 70 93) 44]
Test Case: 354 | Input/Output: [(24 73 97 20) 20]
Test Case: 355 | Input/Output: [(23 89 85 48) 23]
Test Case: 356 | Input/Output: [(47 28 4 25) 4]
Test Case: 357 | Input/Output: [(45 39 90 82) 39]
Test Case: 358 | Input/Output: [(19 85 94 1) 1]
Test Case: 359 | Input/Output: [(6 88 14 97) 6]
Test Case: 360 | Input/Output: [(39 12 31 57) 12]
Test Case: 361 | Input/Output: [(100 78 8 52) 8]
Test Case: 362 | Input/Output: [(30 60 20 65) 20]
Test Case: 363 | Input/Output: [(26 21 36 57) 21]
Test Case: 364 | Input/Output: [(56 89 96 56) 56]
Test Case: 365 | Input/Output: [(9 44 3 9) 3]
Test Case: 366 | Input/Output: [(78 49 48 40) 40]
Test Case: 367 | Input/Output: [(22 3 74 59) 3]
Test Case: 368 | Input/Output: [(1 63 17 15) 1]
Test Case: 369 | Input/Output: [(8 13 20 5) 5]
Test Case: 370 | Input/Output: [(55 27 94 77) 27]
Test Case: 371 | Input/Output: [(48 100 64 89) 48]
Test Case: 372 | Input/Output: [(87 43 2 31) 2]
Test Case: 373 | Input/Output: [(58 55 43 20) 20]
Test Case: 374 | Input/Output: [(74 55 21 47) 21]
Test Case: 375 | Input/Output: [(33 13 93 14) 13]
Test Case: 376 | Input/Output: [(16 83 89 3) 3]
Test Case: 377 | Input/Output: [(49 17 45 60) 17]
Test Case: 378 | Input/Output: [(43 28 23 86) 23]
Test Case: 379 | Input/Output: [(50 34 49 49) 34]
Test Case: 380 | Input/Output: [(14 38 41 72) 14]
Test Case: 381 | Input/Output: [(23 60 51 66) 23]
Test Case: 382 | Input/Output: [(88 87 76 82) 76]
Test Case: 383 | Input/Output: [(21 46 3 52) 3]
Test Case: 384 | Input/Output: [(43 60 8 15) 8]
Test Case: 385 | Input/Output: [(59 61 65 78) 59]
Test Case: 386 | Input/Output: [(10 64 78 69) 10]
Test Case: 387 | Input/Output: [(6 11 22 51) 6]
Test Case: 388 | Input/Output: [(99 96 45 21) 21]
Test Case: 389 | Input/Output: [(38 60 31 23) 23]
Test Case: 390 | Input/Output: [(35 34 60 52) 34]
Test Case: 391 | Input/Output: [(63 95 3 48) 3]
Test Case: 392 | Input/Output: [(86 25 9 46) 9]
Test Case: 393 | Input/Output: [(63 99 34 48) 34]
Test Case: 394 | Input/Output: [(90 82 82 88) 82]
Test Case: 395 | Input/Output: [(18 18 51 7) 7]
Test Case: 396 | Input/Output: [(1 15 15 83) 1]
Test Case: 397 | Input/Output: [(66 48 80 63) 48]
Test Case: 398 | Input/Output: [(97 26 92 7) 7]
Test Case: 399 | Input/Output: [(18 54 6 30) 6]
Test Case: 400 | Input/Output: [(12 -36 -18 -86) -86]
Test Case: 401 | Input/Output: [(9 69 48 29) 9]
Test Case: 402 | Input/Output: [(-9 -81 -32 -31) -81]
Test Case: 403 | Input/Output: [(-65 -54 73 -43) -65]
Test Case: 404 | Input/Output: [(-97 2 -58 -26) -97]
Test Case: 405 | Input/Output: [(-68 4 62 62) -68]
Test Case: 406 | Input/Output: [(-9 60 -65 97) -65]
Test Case: 407 | Input/Output: [(-54 1 -1 12) -54]
Test Case: 408 | Input/Output: [(2 -61 57 -85) -85]
Test Case: 409 | Input/Output: [(42 -28 -77 -10) -77]
Test Case: 410 | Input/Output: [(29 -56 1 37) -56]
Test Case: 411 | Input/Output: [(41 85 -63 -3) -63]
Test Case: 412 | Input/Output: [(-98 46 15 60) -98]
Test Case: 413 | Input/Output: [(16 52 23 -21) -21]
Test Case: 414 | Input/Output: [(98 -18 -23 44) -23]
Test Case: 415 | Input/Output: [(-95 6 -62 -5) -95]
Test Case: 416 | Input/Output: [(-70 2 -27 37) -70]
Test Case: 417 | Input/Output: [(9 85 -2 -82) -82]
Test Case: 418 | Input/Output: [(27 -8 -91 18) -91]
Test Case: 419 | Input/Output: [(-85 -30 -32 -27) -85]
Test Case: 420 | Input/Output: [(-38 69 -23 -29) -38]
Test Case: 421 | Input/Output: [(-79 -15 -27 -74) -79]
Test Case: 422 | Input/Output: [(-78 94 36 -58) -78]
Test Case: 423 | Input/Output: [(-74 -50 90 63) -74]
Test Case: 424 | Input/Output: [(-40 7 -87 16) -87]
Test Case: 425 | Input/Output: [(46 -100 50 -33) -100]
Test Case: 426 | Input/Output: [(59 82 99 -35) -35]
Test Case: 427 | Input/Output: [(59 26 85 -34) -34]
Test Case: 428 | Input/Output: [(4 97 37 -52) -52]
Test Case: 429 | Input/Output: [(50 63 58 -84) -84]
Test Case: 430 | Input/Output: [(79 -95 -5 -61) -95]
Test Case: 431 | Input/Output: [(-71 -7 -70 33) -71]
Test Case: 432 | Input/Output: [(23 -13 -89 81) -89]
Test Case: 433 | Input/Output: [(9 72 65 91) 9]
Test Case: 434 | Input/Output: [(-83 -78 27 25) -83]
Test Case: 435 | Input/Output: [(-68 -61 63 -45) -68]
Test Case: 436 | Input/Output: [(100 64 -50 10) -50]
Test Case: 437 | Input/Output: [(52 -78 95 -36) -78]
Test Case: 438 | Input/Output: [(92 -59 -38 79) -59]
Test Case: 439 | Input/Output: [(-10 10 28 -15) -15]
Test Case: 440 | Input/Output: [(0 95 81 -12) -12]
Test Case: 441 | Input/Output: [(-45 9 8 -66) -66]
Test Case: 442 | Input/Output: [(-23 84 -53 20) -53]
Test Case: 443 | Input/Output: [(13 -34 59 15) -34]
Test Case: 444 | Input/Output: [(48 -82 11 -85) -85]
Test Case: 445 | Input/Output: [(75 -44 14 26) -44]
Test Case: 446 | Input/Output: [(16 -33 76 10) -33]
Test Case: 447 | Input/Output: [(36 94 -12 -40) -40]
Test Case: 448 | Input/Output: [(13 -32 -29 -76) -76]
Test Case: 449 | Input/Output: [(99 52 -55 4) -55]
Test Case: 450 | Input/Output: [(37 37 84 -54) -54]
Test Case: 451 | Input/Output: [(66 10 -9 23) -9]
Test Case: 452 | Input/Output: [(29 58 82 -11) -11]
Test Case: 453 | Input/Output: [(31 42 -6 28) -6]
Test Case: 454 | Input/Output: [(60 68 -17 -93) -93]
Test Case: 455 | Input/Output: [(41 -50 83 96) -50]
Test Case: 456 | Input/Output: [(-53 89 -39 86) -53]
Test Case: 457 | Input/Output: [(100 12 -51 52) -51]
Test Case: 458 | Input/Output: [(-69 89 -86 83) -86]
Test Case: 459 | Input/Output: [(32 -92 -37 -38) -92]
Test Case: 460 | Input/Output: [(93 -68 -6 97) -68]
Test Case: 461 | Input/Output: [(57 -33 -63 83) -63]
Test Case: 462 | Input/Output: [(-4 -79 86 -74) -79]
Test Case: 463 | Input/Output: [(30 14 -42 55) -42]
Test Case: 464 | Input/Output: [(85 79 -55 21) -55]
Test Case: 465 | Input/Output: [(58 92 -74 -41) -74]
Test Case: 466 | Input/Output: [(-5 -99 -12 -42) -99]
Test Case: 467 | Input/Output: [(-15 -32 -33 -64) -64]
Test Case: 468 | Input/Output: [(-92 43 -96 -34) -96]
Test Case: 469 | Input/Output: [(13 20 56 -55) -55]
Test Case: 470 | Input/Output: [(-58 -31 -43 -49) -58]
Test Case: 471 | Input/Output: [(-50 -8 91 59) -50]
Test Case: 472 | Input/Output: [(33 86 97 36) 33]
Test Case: 473 | Input/Output: [(81 62 -53 34) -53]
Test Case: 474 | Input/Output: [(-48 -89 90 -58) -89]
Test Case: 475 | Input/Output: [(-47 4 62 -51) -51]
Test Case: 476 | Input/Output: [(97 77 -100 -55) -100]
Test Case: 477 | Input/Output: [(-40 17 96 -59) -59]
Test Case: 478 | Input/Output: [(-70 -97 3 -66) -97]
Test Case: 479 | Input/Output: [(18 15 58 -4) -4]
Test Case: 480 | Input/Output: [(3 -20 34 -30) -30]
Test Case: 481 | Input/Output: [(6 -15 -85 35) -85]
Test Case: 482 | Input/Output: [(31 72 89 -27) -27]
Test Case: 483 | Input/Output: [(10 62 -59 57) -59]
Test Case: 484 | Input/Output: [(-20 -81 -69 -51) -81]
Test Case: 485 | Input/Output: [(-46 87 96 51) -46]
Test Case: 486 | Input/Output: [(-56 -51 -6 -95) -95]
Test Case: 487 | Input/Output: [(54 58 93 65) 54]
Test Case: 488 | Input/Output: [(65 53 -40 63) -40]
Test Case: 489 | Input/Output: [(-30 66 66 8) -30]
Test Case: 490 | Input/Output: [(-51 20 85 86) -51]
Test Case: 491 | Input/Output: [(78 44 39 32) 32]
Test Case: 492 | Input/Output: [(30 -2 16 54) -2]
Test Case: 493 | Input/Output: [(-1 14 38 -24) -24]
Test Case: 494 | Input/Output: [(17 -39 78 17) -39]
Test Case: 495 | Input/Output: [(-86 -83 42 51) -86]
Test Case: 496 | Input/Output: [(32 65 -81 69) -81]
Test Case: 497 | Input/Output: [(36 -74 62 18) -74]
Test Case: 498 | Input/Output: [(22 -85 -7 -7) -85]
Test Case: 499 | Input/Output: [(-70 85 -38 7) -70]
Test Case: 500 | Input/Output: [(51 52 59 -87) -87]
Test Case: 501 | Input/Output: [(-70 -92 52 86) -92]
Test Case: 502 | Input/Output: [(13 -98 -46 17) -98]
Test Case: 503 | Input/Output: [(-75 -97 44 56) -97]
Test Case: 504 | Input/Output: [(39 73 -52 30) -52]
Test Case: 505 | Input/Output: [(64 -38 100 -90) -90]
Test Case: 506 | Input/Output: [(-24 -91 -58 35) -91]
Test Case: 507 | Input/Output: [(16 15 97 -19) -19]
Test Case: 508 | Input/Output: [(-43 -40 -75 35) -75]
Test Case: 509 | Input/Output: [(-52 67 -56 88) -56]
Test Case: 510 | Input/Output: [(-53 28 84 -97) -97]
Test Case: 511 | Input/Output: [(-100 47 -50 12) -100]
Test Case: 512 | Input/Output: [(33 -69 3 -38) -69]
Test Case: 513 | Input/Output: [(82 -24 24 -76) -76]
Test Case: 514 | Input/Output: [(15 16 45 -58) -58]
Test Case: 515 | Input/Output: [(14 -1 93 -54) -54]
Test Case: 516 | Input/Output: [(66 -76 58 -67) -76]
Test Case: 517 | Input/Output: [(27 10 -99 87) -99]
Test Case: 518 | Input/Output: [(-99 63 -9 92) -99]
Test Case: 519 | Input/Output: [(-89 46 72 13) -89]
Test Case: 520 | Input/Output: [(1 10 86 13) 1]
Test Case: 521 | Input/Output: [(38 83 47 -8) -8]
Test Case: 522 | Input/Output: [(-39 -25 95 0) -39]
Test Case: 523 | Input/Output: [(-54 45 -36 -46) -54]
Test Case: 524 | Input/Output: [(62 34 34 -79) -79]
Test Case: 525 | Input/Output: [(-52 -8 -55 29) -55]
Test Case: 526 | Input/Output: [(84 -57 2 -50) -57]
Test Case: 527 | Input/Output: [(-67 -97 83 -87) -97]
Test Case: 528 | Input/Output: [(-85 95 42 -57) -85]
Test Case: 529 | Input/Output: [(2 -19 -71 10) -71]
Test Case: 530 | Input/Output: [(77 61 -5 -44) -44]
Test Case: 531 | Input/Output: [(-14 70 -73 -74) -74]
Test Case: 532 | Input/Output: [(90 -34 -4 -96) -96]
Test Case: 533 | Input/Output: [(8 -60 -31 -12) -60]
Test Case: 534 | Input/Output: [(-89 38 -12 48) -89]
Test Case: 535 | Input/Output: [(-94 -92 67 -10) -94]
Test Case: 536 | Input/Output: [(40 -34 -63 37) -63]
Test Case: 537 | Input/Output: [(-6 85 -73 -93) -93]
Test Case: 538 | Input/Output: [(92 49 -18 -94) -94]
Test Case: 539 | Input/Output: [(-33 -92 69 7) -92]
Test Case: 540 | Input/Output: [(61 -46 66 -58) -58]
Test Case: 541 | Input/Output: [(-16 -27 61 44) -27]
Test Case: 542 | Input/Output: [(-17 10 10 41) -17]
Test Case: 543 | Input/Output: [(-69 76 -5 -1) -69]
Test Case: 544 | Input/Output: [(78 2 71 65) 2]
Test Case: 545 | Input/Output: [(-83 -45 -29 98) -83]
Test Case: 546 | Input/Output: [(3 65 35 -46) -46]
Test Case: 547 | Input/Output: [(18 -65 -71 -7) -71]
Test Case: 548 | Input/Output: [(-25 25 -82 87) -82]
Test Case: 549 | Input/Output: [(80 12 23 40) 12]
Test Case: 550 | Input/Output: [(65 33 46 50) 33]
Test Case: 551 | Input/Output: [(11 27 -16 69) -16]
Test Case: 552 | Input/Output: [(-34 -34 -91 40) -91]
Test Case: 553 | Input/Output: [(-23 80 -35 -42) -42]
Test Case: 554 | Input/Output: [(-12 -10 79 -57) -57]
Test Case: 555 | Input/Output: [(93 98 43 74) 43]
Test Case: 556 | Input/Output: [(23 -20 -46 68) -46]
Test Case: 557 | Input/Output: [(87 12 -41 28) -41]
Test Case: 558 | Input/Output: [(32 -38 -74 -19) -74]
Test Case: 559 | Input/Output: [(51 50 85 -19) -19]
Test Case: 560 | Input/Output: [(63 30 59 -71) -71]
Test Case: 561 | Input/Output: [(-25 -32 -82 34) -82]
Test Case: 562 | Input/Output: [(-99 11 9 77) -99]
Test Case: 563 | Input/Output: [(-100 -47 18 -91) -100]
Test Case: 564 | Input/Output: [(43 67 -6 76) -6]
Test Case: 565 | Input/Output: [(-45 -2 -34 -95) -95]
Test Case: 566 | Input/Output: [(-57 3 -73 90) -73]
Test Case: 567 | Input/Output: [(8 -46 -56 30) -56]
Test Case: 568 | Input/Output: [(-59 40 -48 44) -59]
Test Case: 569 | Input/Output: [(40 6 49 -8) -8]
Test Case: 570 | Input/Output: [(-96 0 25 48) -96]
Test Case: 571 | Input/Output: [(67 95 -8 77) -8]
Test Case: 572 | Input/Output: [(-39 18 67 -86) -86]
Test Case: 573 | Input/Output: [(-22 -69 -48 17) -69]
Test Case: 574 | Input/Output: [(-56 81 -22 -65) -65]
Test Case: 575 | Input/Output: [(79 -65 -66 27) -66]
Test Case: 576 | Input/Output: [(37 -3 -84 -98) -98]
Test Case: 577 | Input/Output: [(35 56 -29 99) -29]
Test Case: 578 | Input/Output: [(-34 2 73 -68) -68]
Test Case: 579 | Input/Output: [(62 79 -9 30) -9]
Test Case: 580 | Input/Output: [(76 -57 -70 53) -70]
Test Case: 581 | Input/Output: [(34 -59 50 -26) -59]
Test Case: 582 | Input/Output: [(28 -5 0 -32) -32]
Test Case: 583 | Input/Output: [(-82 -2 -52 -95) -95]
Test Case: 584 | Input/Output: [(-9 0 20 -45) -45]
Test Case: 585 | Input/Output: [(-14 95 67 45) -14]
Test Case: 586 | Input/Output: [(18 -4 8 74) -4]
Test Case: 587 | Input/Output: [(11 -44 -11 -78) -78]
Test Case: 588 | Input/Output: [(-16 33 90 -76) -76]
Test Case: 589 | Input/Output: [(5 5 -20 11) -20]
Test Case: 590 | Input/Output: [(100 26 6 -8) -8]
Test Case: 591 | Input/Output: [(-38 63 -4 -96) -96]
Test Case: 592 | Input/Output: [(62 -57 -77 -10) -77]
Test Case: 593 | Input/Output: [(-86 -89 -84 -40) -89]
Test Case: 594 | Input/Output: [(73 -49 65 14) -49]
Test Case: 595 | Input/Output: [(-66 -52 61 -62) -66]
Test Case: 596 | Input/Output: [(-96 -22 -27 78) -96]
Test Case: 597 | Input/Output: [(-13 -70 62 -30) -70]
Test Case: 598 | Input/Output: [(-81 2 45 -30) -81]
Test Case: 599 | Input/Output: [(91 -16 65 51) -16]
Test Case: 600 | Input/Output: [(52 -40 -35 4) -40]
Test Case: 601 | Input/Output: [(-22 -9 60 62) -22]
Test Case: 602 | Input/Output: [(-72 49 99 62) -72]
Test Case: 603 | Input/Output: [(-93 12 67 -36) -93]
Test Case: 604 | Input/Output: [(-72 -3 -24 12) -72]
Test Case: 605 | Input/Output: [(66 45 64 86) 45]
Test Case: 606 | Input/Output: [(79 -23 7 -95) -95]
Test Case: 607 | Input/Output: [(-23 9 38 100) -23]
Test Case: 608 | Input/Output: [(-39 67 -52 -37) -52]
Test Case: 609 | Input/Output: [(-92 73 35 -93) -93]
Test Case: 610 | Input/Output: [(-42 -88 51 4) -88]
Test Case: 611 | Input/Output: [(-66 29 -97 -42) -97]
Test Case: 612 | Input/Output: [(-33 -10 -36 -73) -73]
Test Case: 613 | Input/Output: [(19 94 44 9) 9]
Test Case: 614 | Input/Output: [(-52 -73 -24 98) -73]
Test Case: 615 | Input/Output: [(-77 -29 95 -55) -77]
Test Case: 616 | Input/Output: [(-37 100 89 8) -37]
Test Case: 617 | Input/Output: [(3 67 16 -37) -37]
Test Case: 618 | Input/Output: [(95 28 91 -43) -43]
Test Case: 619 | Input/Output: [(30 61 -73 32) -73]
Test Case: 620 | Input/Output: [(67 79 75 45) 45]
Test Case: 621 | Input/Output: [(3 -27 34 8) -27]
Test Case: 622 | Input/Output: [(28 77 -8 58) -8]
Test Case: 623 | Input/Output: [(-4 28 -35 -50) -50]
Test Case: 624 | Input/Output: [(94 29 -82 -11) -82]
Test Case: 625 | Input/Output: [(-63 -7 42 79) -63]
Test Case: 626 | Input/Output: [(-75 85 -3 86) -75]
Test Case: 627 | Input/Output: [(-58 -88 -12 -36) -88]
Test Case: 628 | Input/Output: [(28 -6 -63 42) -63]
Test Case: 629 | Input/Output: [(-26 -15 14 -98) -98]
Test Case: 630 | Input/Output: [(100 4 53 -93) -93]
Test Case: 631 | Input/Output: [(16 93 84 -29) -29]
Test Case: 632 | Input/Output: [(84 -49 85 -58) -58]
Test Case: 633 | Input/Output: [(-26 -63 -36 -14) -63]
Test Case: 634 | Input/Output: [(-58 92 -32 -66) -66]
Test Case: 635 | Input/Output: [(-7 80 -48 74) -48]
Test Case: 636 | Input/Output: [(-12 -94 -53 -9) -94]
Test Case: 637 | Input/Output: [(31 61 -55 81) -55]
Test Case: 638 | Input/Output: [(95 36 22 -46) -46]
Test Case: 639 | Input/Output: [(-52 30 -20 49) -52]
Test Case: 640 | Input/Output: [(-34 3 -49 -69) -69]
Test Case: 641 | Input/Output: [(75 -19 -15 31) -19]
Test Case: 642 | Input/Output: [(70 43 28 27) 27]
Test Case: 643 | Input/Output: [(-47 33 6 -23) -47]
Test Case: 644 | Input/Output: [(34 -13 -41 -38) -41]
Test Case: 645 | Input/Output: [(-40 46 42 -73) -73]
Test Case: 646 | Input/Output: [(-22 67 -75 67) -75]
Test Case: 647 | Input/Output: [(-28 -91 -11 33) -91]
Test Case: 648 | Input/Output: [(-84 -53 -70 -98) -98]
Test Case: 649 | Input/Output: [(-57 -61 -35 30) -61]
Test Case: 650 | Input/Output: [(-53 -64 14 -3) -64]
Test Case: 651 | Input/Output: [(79 -42 57 -47) -47]
Test Case: 652 | Input/Output: [(-77 84 76 -26) -77]
Test Case: 653 | Input/Output: [(71 60 86 82) 60]
Test Case: 654 | Input/Output: [(82 -33 -17 -25) -33]
Test Case: 655 | Input/Output: [(-21 -89 60 -24) -89]
Test Case: 656 | Input/Output: [(69 98 -18 87) -18]
Test Case: 657 | Input/Output: [(-100 10 56 97) -100]
Test Case: 658 | Input/Output: [(-76 -28 35 -66) -76]
Test Case: 659 | Input/Output: [(-53 -37 10 8) -53]
Test Case: 660 | Input/Output: [(49 11 41 -65) -65]
Test Case: 661 | Input/Output: [(72 63 -29 -55) -55]
Test Case: 662 | Input/Output: [(88 21 34 -33) -33]
Test Case: 663 | Input/Output: [(30 44 -74 40) -74]
Test Case: 664 | Input/Output: [(-95 5 27 -2) -95]
Test Case: 665 | Input/Output: [(-25 66 -26 -84) -84]
Test Case: 666 | Input/Output: [(-73 -94 25 -44) -94]
Test Case: 667 | Input/Output: [(7 47 79 -77) -77]
Test Case: 668 | Input/Output: [(14 -94 -68 -49) -94]
Test Case: 669 | Input/Output: [(2 64 27 -99) -99]
Test Case: 670 | Input/Output: [(5 -90 -12 -40) -90]
Test Case: 671 | Input/Output: [(55 13 -43 -13) -43]
Test Case: 672 | Input/Output: [(6 -27 -44 -11) -44]
Test Case: 673 | Input/Output: [(39 71 -31 -88) -88]
Test Case: 674 | Input/Output: [(93 -86 -50 -24) -86]
Test Case: 675 | Input/Output: [(27 -39 -48 -49) -49]
Test Case: 676 | Input/Output: [(-25 -8 29 75) -25]
Test Case: 677 | Input/Output: [(76 98 -95 -87) -95]
Test Case: 678 | Input/Output: [(-82 -36 -69 -12) -82]
Test Case: 679 | Input/Output: [(94 26 -71 -45) -71]
Test Case: 680 | Input/Output: [(27 8 -69 -79) -79]
Test Case: 681 | Input/Output: [(-28 29 55 -100) -100]
Test Case: 682 | Input/Output: [(-35 -99 -87 -24) -99]
Test Case: 683 | Input/Output: [(-58 45 41 8) -58]
Test Case: 684 | Input/Output: [(-6 24 61 -5) -6]
Test Case: 685 | Input/Output: [(32 -45 -5 -46) -46]
Test Case: 686 | Input/Output: [(-80 -67 63 18) -80]
Test Case: 687 | Input/Output: [(-15 41 71 -25) -25]
Test Case: 688 | Input/Output: [(13 92 23 -77) -77]
Test Case: 689 | Input/Output: [(-38 -94 -66 15) -94]
Test Case: 690 | Input/Output: [(42 72 89 8) 8]
Test Case: 691 | Input/Output: [(-59 52 -15 54) -59]
Test Case: 692 | Input/Output: [(26 83 -80 -89) -89]
Test Case: 693 | Input/Output: [(-6 -13 -80 -26) -80]
Test Case: 694 | Input/Output: [(-96 21 98 76) -96]
Test Case: 695 | Input/Output: [(19 -50 -3 74) -50]
Test Case: 696 | Input/Output: [(-98 8 -51 72) -98]
Test Case: 697 | Input/Output: [(-62 -18 -64 55) -64]
Test Case: 698 | Input/Output: [(99 73 65 46) 46]
Test Case: 699 | Input/Output: [(-47 68 48 17) -47]
Test Case: 700 | Input/Output: [(0 -85 29 -74) -85]
Test Case: 701 | Input/Output: [(-58 45 30 -66) -66]
Test Case: 702 | Input/Output: [(64 -93 97 -59) -93]
Test Case: 703 | Input/Output: [(79 -54 -73 -26) -73]
Test Case: 704 | Input/Output: [(88 -80 76 21) -80]
Test Case: 705 | Input/Output: [(1 -69 19 -37) -69]
Test Case: 706 | Input/Output: [(36 3 51 -81) -81]
Test Case: 707 | Input/Output: [(-90 -34 -36 -20) -90]
Test Case: 708 | Input/Output: [(-40 4 83 -76) -76]
Test Case: 709 | Input/Output: [(-92 -55 14 -56) -92]
Test Case: 710 | Input/Output: [(43 50 54 50) 43]
Test Case: 711 | Input/Output: [(99 -3 -59 -81) -81]
Test Case: 712 | Input/Output: [(94 63 32 18) 18]
Test Case: 713 | Input/Output: [(-74 36 -41 -80) -80]
Test Case: 714 | Input/Output: [(-13 0 12 -96) -96]
Test Case: 715 | Input/Output: [(40 -41 -6 -88) -88]
Test Case: 716 | Input/Output: [(-71 37 92 95) -71]
Test Case: 717 | Input/Output: [(-60 43 59 -92) -92]
Test Case: 718 | Input/Output: [(90 90 -58 -84) -84]
Test Case: 719 | Input/Output: [(12 -43 31 -74) -74]
Test Case: 720 | Input/Output: [(59 96 42 78) 42]
Test Case: 721 | Input/Output: [(60 -15 -15 -93) -93]
Test Case: 722 | Input/Output: [(43 -100 18 80) -100]
Test Case: 723 | Input/Output: [(-83 38 35 48) -83]
Test Case: 724 | Input/Output: [(65 62 82 -64) -64]
Test Case: 725 | Input/Output: [(97 -22 59 -83) -83]
Test Case: 726 | Input/Output: [(-81 -13 5 -40) -81]
Test Case: 727 | Input/Output: [(41 69 -18 3) -18]
Test Case: 728 | Input/Output: [(-52 -96 72 -85) -96]
Test Case: 729 | Input/Output: [(0 45 24 -33) -33]
Test Case: 730 | Input/Output: [(-59 94 -55 81) -59]
Test Case: 731 | Input/Output: [(96 92 96 -27) -27]
Test Case: 732 | Input/Output: [(88 -92 -89 -81) -92]
Test Case: 733 | Input/Output: [(25 38 60 -16) -16]
Test Case: 734 | Input/Output: [(-94 -53 12 -75) -94]
Test Case: 735 | Input/Output: [(97 -96 -63 93) -96]
Test Case: 736 | Input/Output: [(-23 51 -23 64) -23]
Test Case: 737 | Input/Output: [(-90 100 -30 98) -90]
Test Case: 738 | Input/Output: [(-45 36 -83 -2) -83]
Test Case: 739 | Input/Output: [(-7 57 -84 -15) -84]
Test Case: 740 | Input/Output: [(13 13 62 -11) -11]
Test Case: 741 | Input/Output: [(46 35 44 57) 35]
Test Case: 742 | Input/Output: [(-91 -14 23 63) -91]
Test Case: 743 | Input/Output: [(95 77 25 9) 9]
Test Case: 744 | Input/Output: [(-4 -61 59 77) -61]
Test Case: 745 | Input/Output: [(-63 -37 33 -72) -72]
Test Case: 746 | Input/Output: [(60 48 -97 2) -97]
Test Case: 747 | Input/Output: [(22 16 -7 51) -7]
Test Case: 748 | Input/Output: [(69 4 -96 -31) -96]
Test Case: 749 | Input/Output: [(28 8 -94 -51) -94]
Test Case: 750 | Input/Output: [(-21 -6 -81 38) -81]
Test Case: 751 | Input/Output: [(-85 -66 34 32) -85]
Test Case: 752 | Input/Output: [(87 -45 24 -24) -45]
Test Case: 753 | Input/Output: [(-34 22 24 40) -34]
Test Case: 754 | Input/Output: [(-17 79 -70 81) -70]
Test Case: 755 | Input/Output: [(-97 -16 -33 -26) -97]
Test Case: 756 | Input/Output: [(-68 -38 -18 99) -68]
Test Case: 757 | Input/Output: [(-70 65 -15 12) -70]
Test Case: 758 | Input/Output: [(-50 65 15 -54) -54]
Test Case: 759 | Input/Output: [(15 -67 -74 -75) -75]
Test Case: 760 | Input/Output: [(65 -59 -6 43) -59]
Test Case: 761 | Input/Output: [(-66 89 -63 38) -66]
Test Case: 762 | Input/Output: [(49 -6 -10 -11) -11]
Test Case: 763 | Input/Output: [(28 50 59 29) 28]
Test Case: 764 | Input/Output: [(-9 -75 69 -70) -75]
Test Case: 765 | Input/Output: [(83 77 -71 -65) -71]
Test Case: 766 | Input/Output: [(70 90 97 -21) -21]
Test Case: 767 | Input/Output: [(-50 56 31 -61) -61]
Test Case: 768 | Input/Output: [(2 64 -70 85) -70]
Test Case: 769 | Input/Output: [(39 -39 -45 64) -45]
Test Case: 770 | Input/Output: [(-93 86 1 -86) -93]
Test Case: 771 | Input/Output: [(61 -17 90 25) -17]
Test Case: 772 | Input/Output: [(-36 -12 98 -46) -46]
Test Case: 773 | Input/Output: [(35 -76 23 -10) -76]
Test Case: 774 | Input/Output: [(86 -85 70 89) -85]
Test Case: 775 | Input/Output: [(41 -89 52 -49) -89]
Test Case: 776 | Input/Output: [(-94 86 22 91) -94]
Test Case: 777 | Input/Output: [(95 23 23 -81) -81]
Test Case: 778 | Input/Output: [(-63 70 11 89) -63]
Test Case: 779 | Input/Output: [(-65 -51 -47 -3) -65]
Test Case: 780 | Input/Output: [(-98 -73 98 57) -98]
Test Case: 781 | Input/Output: [(28 -76 -28 90) -76]
Test Case: 782 | Input/Output: [(-63 -56 3 -50) -63]
Test Case: 783 | Input/Output: [(67 94 18 -6) -6]
Test Case: 784 | Input/Output: [(-17 -57 -49 -34) -57]
Test Case: 785 | Input/Output: [(-85 -38 -73 -87) -87]
Test Case: 786 | Input/Output: [(-50 -26 21 -71) -71]
Test Case: 787 | Input/Output: [(-25 -1 89 -92) -92]
Test Case: 788 | Input/Output: [(95 59 -18 -93) -93]
Test Case: 789 | Input/Output: [(-29 4 -44 -67) -67]
Test Case: 790 | Input/Output: [(-43 37 -68 66) -68]
Test Case: 791 | Input/Output: [(-83 -51 33 -3) -83]
Test Case: 792 | Input/Output: [(-2 64 43 -34) -34]
Test Case: 793 | Input/Output: [(-88 -6 -67 -67) -88]
Test Case: 794 | Input/Output: [(52 62 -50 98) -50]
Test Case: 795 | Input/Output: [(35 81 -1 87) -1]
Test Case: 796 | Input/Output: [(20 49 68 4) 4]
Test Case: 797 | Input/Output: [(-92 2 61 -75) -92]
Test Case: 798 | Input/Output: [(-3 80 84 79) -3]
Test Case: 799 | Input/Output: [(97 -67 -3 99) -67]
Test Case: 800 | Input/Output: [(69 53 -8 17) -8]
Test Case: 801 | Input/Output: [(-75 3 -23 -60) -75]
Test Case: 802 | Input/Output: [(-74 58 -83 -90) -90]
Test Case: 803 | Input/Output: [(62 63 -77 -10) -77]
Test Case: 804 | Input/Output: [(57 68 -61 53) -61]
Test Case: 805 | Input/Output: [(63 -40 41 12) -40]
Test Case: 806 | Input/Output: [(-51 24 -4 47) -51]
Test Case: 807 | Input/Output: [(-93 78 60 17) -93]
Test Case: 808 | Input/Output: [(-25 40 18 -38) -38]
Test Case: 809 | Input/Output: [(-61 39 -13 10) -61]
Test Case: 810 | Input/Output: [(23 18 -35 -97) -97]
Test Case: 811 | Input/Output: [(-79 -43 39 28) -79]
Test Case: 812 | Input/Output: [(-47 -90 -82 95) -90]
Test Case: 813 | Input/Output: [(-90 20 -40 51) -90]
Test Case: 814 | Input/Output: [(60 12 79 -18) -18]
Test Case: 815 | Input/Output: [(-7 86 46 48) -7]
Test Case: 816 | Input/Output: [(50 -22 21 58) -22]
Test Case: 817 | Input/Output: [(6 -14 31 -93) -93]
Test Case: 818 | Input/Output: [(40 31 -24 38) -24]
Test Case: 819 | Input/Output: [(41 -30 96 16) -30]
Test Case: 820 | Input/Output: [(97 -74 -87 53) -87]
Test Case: 821 | Input/Output: [(7 -14 -81 -43) -81]
Test Case: 822 | Input/Output: [(-57 -23 93 -4) -57]
Test Case: 823 | Input/Output: [(11 72 -63 3) -63]
Test Case: 824 | Input/Output: [(80 -51 21 -21) -51]
Test Case: 825 | Input/Output: [(-76 -79 40 -66) -79]
Test Case: 826 | Input/Output: [(-58 58 -53 -33) -58]
Test Case: 827 | Input/Output: [(38 67 34 46) 34]
Test Case: 828 | Input/Output: [(-57 -93 -89 -1) -93]
Test Case: 829 | Input/Output: [(54 -43 -8 -64) -64]
Test Case: 830 | Input/Output: [(54 -38 100 13) -38]
Test Case: 831 | Input/Output: [(-13 31 -29 47) -29]
Test Case: 832 | Input/Output: [(78 66 -6 31) -6]
Test Case: 833 | Input/Output: [(40 59 92 35) 35]
Test Case: 834 | Input/Output: [(-17 -28 26 -55) -55]
Test Case: 835 | Input/Output: [(94 7 -64 -92) -92]
Test Case: 836 | Input/Output: [(-37 55 -90 83) -90]
Test Case: 837 | Input/Output: [(-97 -89 42 -99) -99]
Test Case: 838 | Input/Output: [(-40 -34 -93 -21) -93]
Test Case: 839 | Input/Output: [(62 -11 49 -1) -11]
Test Case: 840 | Input/Output: [(72 -91 90 -72) -91]
Test Case: 841 | Input/Output: [(99 -10 -39 92) -39]
Test Case: 842 | Input/Output: [(14 6 82 13) 6]
Test Case: 843 | Input/Output: [(-21 -68 -33 40) -68]
Test Case: 844 | Input/Output: [(-43 -44 -19 97) -44]
Test Case: 845 | Input/Output: [(6 83 -59 36) -59]
Test Case: 846 | Input/Output: [(-4 84 -92 -91) -92]
Test Case: 847 | Input/Output: [(-19 100 33 -5) -19]
Test Case: 848 | Input/Output: [(42 -68 -58 28) -68]
Test Case: 849 | Input/Output: [(21 15 -30 72) -30]
Test Case: 850 | Input/Output: [(-12 -100 8 -36) -100]
Test Case: 851 | Input/Output: [(72 81 -90 11) -90]
Test Case: 852 | Input/Output: [(-35 57 42 -29) -35]
Test Case: 853 | Input/Output: [(-42 -70 29 53) -70]
Test Case: 854 | Input/Output: [(-15 -5 21 35) -15]
Test Case: 855 | Input/Output: [(52 -54 79 57) -54]
Test Case: 856 | Input/Output: [(-95 25 36 44) -95]
Test Case: 857 | Input/Output: [(-14 56 95 5) -14]
Test Case: 858 | Input/Output: [(32 -11 29 5) -11]
Test Case: 859 | Input/Output: [(-69 -83 -3 -77) -83]
Test Case: 860 | Input/Output: [(-40 -40 -9 72) -40]
Test Case: 861 | Input/Output: [(45 23 -29 29) -29]
Test Case: 862 | Input/Output: [(73 97 -65 -20) -65]
Test Case: 863 | Input/Output: [(90 11 91 -86) -86]
Test Case: 864 | Input/Output: [(-50 -30 65 70) -50]
Test Case: 865 | Input/Output: [(44 -21 26 -3) -21]
Test Case: 866 | Input/Output: [(96 -5 36 71) -5]
Test Case: 867 | Input/Output: [(46 58 -33 -84) -84]
Test Case: 868 | Input/Output: [(-72 -58 20 -79) -79]
Test Case: 869 | Input/Output: [(75 57 14 -9) -9]
Test Case: 870 | Input/Output: [(72 77 51 -18) -18]
Test Case: 871 | Input/Output: [(-68 6 16 89) -68]
Test Case: 872 | Input/Output: [(-9 83 97 90) -9]
Test Case: 873 | Input/Output: [(-10 87 93 -38) -38]
Test Case: 874 | Input/Output: [(14 43 38 81) 14]
Test Case: 875 | Input/Output: [(2 -44 -31 56) -44]
Test Case: 876 | Input/Output: [(10 14 -98 -30) -98]
Test Case: 877 | Input/Output: [(-43 -68 -75 8) -75]
Test Case: 878 | Input/Output: [(-68 -86 -96 40) -96]
Test Case: 879 | Input/Output: [(45 43 3 98) 3]
Test Case: 880 | Input/Output: [(98 34 61 -89) -89]
Test Case: 881 | Input/Output: [(92 50 -20 -66) -66]
Test Case: 882 | Input/Output: [(48 -80 -30 51) -80]
Test Case: 883 | Input/Output: [(92 -34 -31 -57) -57]
Test Case: 884 | Input/Output: [(100 44 81 -80) -80]
Test Case: 885 | Input/Output: [(-59 -67 -88 78) -88]
Test Case: 886 | Input/Output: [(38 -94 29 63) -94]
Test Case: 887 | Input/Output: [(17 -59 76 60) -59]
Test Case: 888 | Input/Output: [(100 85 51 63) 51]
Test Case: 889 | Input/Output: [(-96 -23 47 87) -96]
Test Case: 890 | Input/Output: [(99 -63 67 46) -63]
Test Case: 891 | Input/Output: [(100 63 21 58) 21]
Test Case: 892 | Input/Output: [(78 -8 84 -43) -43]
Test Case: 893 | Input/Output: [(16 -21 58 -76) -76]
Test Case: 894 | Input/Output: [(6 66 68 -47) -47]
Test Case: 895 | Input/Output: [(7 -32 22 66) -32]
Test Case: 896 | Input/Output: [(60 26 -70 83) -70]
Test Case: 897 | Input/Output: [(69 80 -58 -23) -58]
Test Case: 898 | Input/Output: [(-97 -98 0 58) -98]
Test Case: 899 | Input/Output: [(-44 -51 -97 4) -97]
Test Case: 900 | Input/Output: [(43 71 -15 49) -15]
Test Case: 901 | Input/Output: [(19 -90 29 -80) -90]
Test Case: 902 | Input/Output: [(-95 -33 45 30) -95]
Test Case: 903 | Input/Output: [(57 93 26 43) 26]
Test Case: 904 | Input/Output: [(-15 -61 19 -23) -61]
Test Case: 905 | Input/Output: [(-12 82 95 -66) -66]
Test Case: 906 | Input/Output: [(-93 14 97 -25) -93]
Test Case: 907 | Input/Output: [(-32 -51 -62 -97) -97]
Test Case: 908 | Input/Output: [(-38 0 -13 14) -38]
Test Case: 909 | Input/Output: [(-27 14 47 77) -27]
Test Case: 910 | Input/Output: [(-24 48 76 89) -24]
Test Case: 911 | Input/Output: [(-77 -75 -51 76) -77]
Test Case: 912 | Input/Output: [(-54 -10 71 -26) -54]
Test Case: 913 | Input/Output: [(94 13 0 1) 0]
Test Case: 914 | Input/Output: [(-96 -95 -46 34) -96]
Test Case: 915 | Input/Output: [(-93 -21 -37 -2) -93]
Test Case: 916 | Input/Output: [(-31 -28 -23 -12) -31]
Test Case: 917 | Input/Output: [(-73 55 -99 73) -99]
Test Case: 918 | Input/Output: [(-76 -37 -68 63) -76]
Test Case: 919 | Input/Output: [(-92 -96 -76 83) -96]
Test Case: 920 | Input/Output: [(-97 -6 66 9) -97]
Test Case: 921 | Input/Output: [(1 -23 4 49) -23]
Test Case: 922 | Input/Output: [(2 85 -58 -48) -58]
Test Case: 923 | Input/Output: [(-87 -48 19 -38) -87]
Test Case: 924 | Input/Output: [(16 11 23 41) 11]
Test Case: 925 | Input/Output: [(-37 -84 -100 80) -100]
Test Case: 926 | Input/Output: [(55 -53 33 9) -53]
Test Case: 927 | Input/Output: [(-28 -44 21 33) -44]
Test Case: 928 | Input/Output: [(100 43 -51 57) -51]
Test Case: 929 | Input/Output: [(-68 -53 61 53) -68]
Test Case: 930 | Input/Output: [(-18 -18 90 70) -18]
Test Case: 931 | Input/Output: [(-68 5 4 -94) -94]
Test Case: 932 | Input/Output: [(-60 -42 62 47) -60]
Test Case: 933 | Input/Output: [(-4 37 -99 -36) -99]
Test Case: 934 | Input/Output: [(-49 -95 -59 59) -95]
Test Case: 935 | Input/Output: [(-74 28 52 72) -74]
Test Case: 936 | Input/Output: [(-16 45 -29 43) -29]
Test Case: 937 | Input/Output: [(66 43 56 -47) -47]
Test Case: 938 | Input/Output: [(36 58 -90 4) -90]
Test Case: 939 | Input/Output: [(87 -13 -84 -26) -84]
Test Case: 940 | Input/Output: [(-27 50 -58 8) -58]
Test Case: 941 | Input/Output: [(-76 -3 -33 21) -76]
Test Case: 942 | Input/Output: [(1 19 -22 -20) -22]
Test Case: 943 | Input/Output: [(-94 -59 -67 -6) -94]
Test Case: 944 | Input/Output: [(-5 -42 64 71) -42]
Test Case: 945 | Input/Output: [(33 3 -61 84) -61]
Test Case: 946 | Input/Output: [(72 -52 -37 -47) -52]
Test Case: 947 | Input/Output: [(-4 80 5 37) -4]
Test Case: 948 | Input/Output: [(-73 -86 35 -83) -86]
Test Case: 949 | Input/Output: [(-32 -11 13 -81) -81]
Test Case: 950 | Input/Output: [(9 81 -92 -36) -92]
Test Case: 951 | Input/Output: [(55 23 84 -1) -1]
Test Case: 952 | Input/Output: [(-56 22 60 33) -56]
Test Case: 953 | Input/Output: [(-77 24 -62 8) -77]
Test Case: 954 | Input/Output: [(-94 -7 91 -56) -94]
Test Case: 955 | Input/Output: [(-20 -1 32 47) -20]
Test Case: 956 | Input/Output: [(-6 -99 93 49) -99]
Test Case: 957 | Input/Output: [(47 -32 -26 -48) -48]
Test Case: 958 | Input/Output: [(13 14 85 -52) -52]
Test Case: 959 | Input/Output: [(87 52 -75 2) -75]
Test Case: 960 | Input/Output: [(43 70 -38 97) -38]
Test Case: 961 | Input/Output: [(19 3 80 -70) -70]
Test Case: 962 | Input/Output: [(-30 47 26 -61) -61]
Test Case: 963 | Input/Output: [(-36 -82 53 -43) -82]
Test Case: 964 | Input/Output: [(98 49 51 20) 20]
Test Case: 965 | Input/Output: [(34 -56 16 31) -56]
Test Case: 966 | Input/Output: [(62 27 -10 -90) -90]
Test Case: 967 | Input/Output: [(-29 -74 41 9) -74]
Test Case: 968 | Input/Output: [(-31 22 -94 -1) -94]
Test Case: 969 | Input/Output: [(73 -96 89 9) -96]
Test Case: 970 | Input/Output: [(-22 98 15 -66) -66]
Test Case: 971 | Input/Output: [(88 9 10 -12) -12]
Test Case: 972 | Input/Output: [(96 84 25 -45) -45]
Test Case: 973 | Input/Output: [(-95 -50 -73 98) -95]
Test Case: 974 | Input/Output: [(-81 12 96 50) -81]
Test Case: 975 | Input/Output: [(55 21 -87 -7) -87]
Test Case: 976 | Input/Output: [(-67 -47 12 0) -67]
Test Case: 977 | Input/Output: [(76 0 -33 -33) -33]
Test Case: 978 | Input/Output: [(-90 12 -69 87) -90]
Test Case: 979 | Input/Output: [(-97 -9 74 59) -97]
Test Case: 980 | Input/Output: [(-3 -34 -51 -62) -62]
Test Case: 981 | Input/Output: [(-73 18 -57 12) -73]
Test Case: 982 | Input/Output: [(-65 83 -54 -3) -65]
Test Case: 983 | Input/Output: [(52 51 28 -81) -81]
Test Case: 984 | Input/Output: [(-92 18 -21 71) -92]
Test Case: 985 | Input/Output: [(-50 -38 -35 -68) -68]
Test Case: 986 | Input/Output: [(-7 17 -74 27) -74]
Test Case: 987 | Input/Output: [(-83 18 -36 26) -83]
Test Case: 988 | Input/Output: [(89 34 28 45) 28]
Test Case: 989 | Input/Output: [(-82 -18 10 14) -82]
Test Case: 990 | Input/Output: [(-42 -76 -13 -10) -76]
Test Case: 991 | Input/Output: [(-81 -65 -5 -99) -99]
Test Case: 992 | Input/Output: [(-95 8 -100 28) -100]
Test Case: 993 | Input/Output: [(27 79 22 58) 22]
Test Case: 994 | Input/Output: [(9 10 23 -17) -17]
Test Case: 995 | Input/Output: [(26 54 11 -50) -50]
Test Case: 996 | Input/Output: [(87 90 -9 47) -9]
Test Case: 997 | Input/Output: [(-88 80 -89 97) -89]
Test Case: 998 | Input/Output: [(83 50 77 -12) -12]
Test Case: 999 | Input/Output: [(-12 -49 -92 -74) -92]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 70 93 33 116 116 -85 -18 -41 -118 -26 -50 76 106 -58 8 -20
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[51 51 51 -49] -49] [[-37 -37 -37 2] -37] [[50 -48 50 50] -48] [[64 61 64 64] 61] [[54 54 54 -80] -80] [[14 -78 -78 -78] -78] [[-32 33 -32 -32] -32] [[-9 -9 -9 34] -9] [[70 70 70 -54] -54] [[16 10 16 16] 10] [(40 40 40 40) 40] [(89 89 89 89) 89] [(38 38 38 38) 38] [(46 46 46 46) 46] [(-87 -87 -87 -87) -87] [(81 16 51 93) 16] [(67 99 96 9) 9] [(38 16 71 44) 16] [(8 69 8 55) 8] [(81 27 49 59) 27] [(16 93 42 93) 16] [(56 68 33 23) 23] [(71 0 28 4) 0] [(76 62 34 55) 34] [(74 72 39 41) 39] [(22 7 31 18) 7] [(97 2 42 56) 2] [(46 8 63 89) 8] [(71 49 91 99) 49] [(55 93 47 42) 42] [(74 1 91 57) 1] [(21 87 96 46) 21] [(81 93 96 13) 13] [(49 50 42 86) 42] [(87 50 0 70) 0] [(-94 -38 63 -66) -94] [(12 10 -54 -74) -74] [(-57 75 -14 -72) -72] [(7 -50 15 -47) -50] [(64 59 -37 -98) -98] [(-5 -65 65 70) -65] [(-57 7 -55 0) -57] [(-4 59 16 -91) -91] [(26 -4 18 -9) -9] [(0 96 -3 -1) -3] [(75 -11 -52 14) -52] [(3 31 -20 -73) -73] [(71 -87 40 34) -87] [(-40 -1 42 -49) -49] [(-16 -35 -75 -80) -80] [(-27 -94 -3 67) -94] [(-6 25 98 -19) -19] [(15 -90 6 -7) -90] [(99 -31 30 -65) -65] [(60 16 -40 68) -40] [(-24 40 34 -56) -56] [(-30 21 5 -88) -88] [(97 28 -29 39) -29] [(77 -30 90 -50) -50] [(33 -90 -17 -5) -90] [(-83 -69 78 82) -83] [(46 19 46 33) 19] [(-89 -66 50 -99) -99] [(-49 -35 -74 3) -74] [(-19 21 98 5) -19] [(-80 -69 66 -7) -80] [(98 -81 57 43) -81] [(-50 -9 94 -90) -90] [(-48 -97 20 -25) -97] [(3 4 25 82) 3] [(80 64 95 44) 44] [(-2 59 -14 -98) -98] [(-36 17 -89 -66) -89] [(-60 24 71 -71) -71] [(6 25 -20 46) -20] [(-89 10 25 70) -89] [(-22 93 -43 40) -43] [(-50 -50 10 79) -50] [(14 -83 -48 48) -83] [(-68 -65 38 6) -68] [(17 -56 54 51) -56] [(-26 -53 -72 -84) -84] [(6 -21 1 -27) -27] [(-19 41 30 54) -19] [(44 -21 28 -81) -81] [(89 35 88 25) 25] [(-43 -86 47 -48) -86] [(-33 -98 50 42) -98] [(-67 79 -31 67) -67] [(92 -52 -100 48) -100] [(-65 90 -99 -18) -99] [(-32 26 -72 -94) -94] [(-22 73 57 -95) -95] [(15 6 21 71) 6] [(-55 -62 4 50) -62])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction 3} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction 19} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_315} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tagged_204} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_125} {:close 1, :instruction integer_dec} {:close 0, :instruction tag_integer_604} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 2, :instruction boolean_yank} {:close 2, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_empty boolean_swap 3 integer_pop boolean_rot boolean_empty boolean_yank integer_inc integer_eq exec_dup_times (exec_pop (19) boolean_stackdepth) boolean_empty exec_dup_times (boolean_yankdup) integer_empty integer_yank integer_swap boolean_yankdup exec_rot () (integer_rot exec_do*range (tagged_315) integer_yank boolean_pop integer_eq integer_fromboolean boolean_shove boolean_swap exec_shove () exec_noop boolean_dup_times) (tagged_204 boolean_shove) exec_s (exec_noop integer_swap) (in4 print_integer) (boolean_xor in4 boolean_dup_times tagged_125 integer_dec) tag_integer_604 exec_k (exec_y_when_autoconstructing (integer_mod boolean_swap exec_flush integer_dup exec_shove () integer_sub integer_stackdepth integer_swap integer_mod exec_rot (exec_y_when_autoconstructing ()) (boolean_frominteger) (boolean_invert_second_then_and integer_gt boolean_empty boolean_dup_times integer_max boolean_dup_times exec_rot () (integer_lt boolean_xor boolean_shove) (boolean_empty boolean_shove boolean_frominteger integer_dec exec_swap (exec_pop () boolean_yank) () integer_dec)) boolean_empty boolean_rot boolean_shove boolean_shove exec_k () (exec_eq integer_dup_items boolean_and integer_mod in4 exec_shove (exec_noop) integer_fromboolean) integer_mult exec_do*while () integer_lte boolean_invert_second_then_and boolean_dup)) ())
Lexicase best errors: [0 1 1 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 126
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction 3} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction 19} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_315} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tagged_204} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_125} {:close 1, :instruction integer_dec} {:close 0, :instruction tag_integer_604} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 2, :instruction boolean_yank} {:close 2, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_empty boolean_swap 3 integer_pop boolean_rot boolean_empty boolean_yank integer_inc integer_eq exec_dup_times (exec_pop (19) boolean_stackdepth) boolean_empty exec_dup_times (boolean_yankdup) integer_empty integer_yank integer_swap boolean_yankdup exec_rot () (integer_rot exec_do*range (tagged_315) integer_yank boolean_pop integer_eq integer_fromboolean boolean_shove boolean_swap exec_shove () exec_noop boolean_dup_times) (tagged_204 boolean_shove) exec_s (exec_noop integer_swap) (in4 print_integer) (boolean_xor in4 boolean_dup_times tagged_125 integer_dec) tag_integer_604 exec_k (exec_y_when_autoconstructing (integer_mod boolean_swap exec_flush integer_dup exec_shove () integer_sub integer_stackdepth integer_swap integer_mod exec_rot (exec_y_when_autoconstructing ()) (boolean_frominteger) (boolean_invert_second_then_and integer_gt boolean_empty boolean_dup_times integer_max boolean_dup_times exec_rot () (integer_lt boolean_xor boolean_shove) (boolean_empty boolean_shove boolean_frominteger integer_dec exec_swap (exec_pop () boolean_yank) () integer_dec)) boolean_empty boolean_rot boolean_shove boolean_shove exec_k () (exec_eq integer_dup_items boolean_and integer_mod in4 exec_shove (exec_noop) integer_fromboolean) integer_mult exec_do*while () integer_lte boolean_invert_second_then_and boolean_dup)) ())
Zero cases best errors: [0 1 1 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 126
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 3 3 5 4 5 3 3 2 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (5 3 3 5 4 5 3 3 2 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction tag_integer_673} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and})
Best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 boolean_dup integer_swap exec_when (integer_max exec_rot (exec_y () exec_y_when_autoconstructing (exec_yankdup boolean_swap boolean_and boolean_dup exec_y (integer_lt in2) exec_do*range (integer_gte exec_stackdepth exec_do*while (exec_s_when_autoconstructing (integer_shove) (exec_k_when_autoconstructing () (exec_k (boolean_not exec_shove (integer_swap exec_do*while (boolean_flush exec_do*count () integer_shove) in2 exec_while (boolean_rot boolean_dup integer_min integer_dec exec_eq exec_do*while (boolean_or) exec_empty) exec_stackdepth) integer_mult integer_shove boolean_or exec_if (integer_dup_times in4 boolean_shove) (tag_integer_673 integer_eq exec_do*count (integer_inc integer_dup_times exec_do*while (integer_yank integer_yankdup boolean_invert_second_then_and)) boolean_yankdup) integer_stackdepth exec_do*while (exec_stackdepth) boolean_yank integer_dup_items) (exec_pop (exec_shove () exec_flush) integer_gt exec_dup (exec_empty integer_dup_items exec_do*times () integer_gt boolean_dup_items) boolean_eq in3) integer_rot exec_yank boolean_yankdup exec_shove (integer_swap integer_dup_items boolean_and))) ())))) () ()))
Errors: [1 1 0 1 1 1 1 1 0 0]
Total: 7
Mean: 0.7
Genome size: 92
Size: 124
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 9.964
Median total errors in population: 10
Error averages by case: (0.995 0.997 0.997 0.995 0.996 0.995 0.997 0.997 0.998 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.025
Average program size in population (points): 67.779
Average percent parens in population: 0.284
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 468748
--- Timings ---
Current time: 1559583464102 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.3%
Reproduction:         0.8 seconds, 29.2%
Fitness Testing:      1.7 seconds, 67.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction print_integer} {:close 1, :instruction 93} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s})
Lexicase best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range (print_exec () integer_inc) in4 boolean_eq boolean_empty boolean_stackdepth integer_gte integer_fromboolean integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_yankdup integer_yank boolean_dup print_exec (in4 boolean_yank)) exec_rot (exec_dup_items integer_flush exec_s_when_autoconstructing () (exec_eq integer_rot print_exec () exec_s_when_autoconstructing (exec_noop integer_div exec_dup_items exec_empty boolean_not exec_while () exec_dup_items integer_gte integer_flush) (exec_s (exec_while (print_integer) 93) (boolean_dup_items) (integer_gt exec_eq) boolean_not integer_shove exec_eq integer_lt integer_lt integer_gte exec_y () exec_swap (boolean_flush exec_s () () ()) ()) ()) ()) () ())
Lexicase best errors: [0 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 90
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction print_integer} {:close 1, :instruction 93} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s})
Zero cases best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range (print_exec () integer_inc) in4 boolean_eq boolean_empty boolean_stackdepth integer_gte integer_fromboolean integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_yankdup integer_yank boolean_dup print_exec (in4 boolean_yank)) exec_rot (exec_dup_items integer_flush exec_s_when_autoconstructing () (exec_eq integer_rot print_exec () exec_s_when_autoconstructing (exec_noop integer_div exec_dup_items exec_empty boolean_not exec_while () exec_dup_items integer_gte integer_flush) (exec_s (exec_while (print_integer) 93) (boolean_dup_items) (integer_gt exec_eq) boolean_not integer_shove exec_eq integer_lt integer_lt integer_gte exec_y () exec_swap (boolean_flush exec_s () () ()) ()) ()) ()) () ())
Zero cases best errors: [0 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 90
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (276 177 276 827 276 276 261 260 276 827)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (276 177 276 827 276 276 261 260 276 827)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range})
Best program: (boolean_yank in4 exec_s (boolean_yank boolean_not) (integer_yankdup boolean_yankdup exec_while () print_integer) (exec_y_when_autoconstructing (integer_max) integer_lte) boolean_yankdup exec_flush boolean_yankdup exec_yankdup exec_do*count (boolean_dup_items integer_empty integer_shove) print_newline integer_stackdepth exec_y_when_autoconstructing (integer_dup boolean_dup_times exec_rot (exec_dup (exec_if (in2 integer_mod) () in2 exec_do*range ())) () ()))
Errors: [0 1 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 47
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 6.268
Median total errors in population: 6
Error averages by case: (0.724 0.823 0.724 0.173 0.724 0.724 0.739 0.74 0.724 0.173)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.793
Average program size in population (points): 78.15
Average percent parens in population: 0.280
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.484
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 968481
--- Timings ---
Current time: 1559583466781 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.4 seconds, 41.6%
Fitness Testing:      2.5 seconds, 44.0%
Report:               0.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 3, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction -81} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_swap})
Lexicase best program: (exec_dup_items in4 exec_k (print_integer) (exec_flush exec_do*range (integer_shove integer_yankdup) boolean_stackdepth integer_mod exec_yankdup) exec_while (integer_pop exec_y_when_autoconstructing (print_integer exec_swap (print_boolean) ()) in3 exec_do*while (exec_yankdup boolean_pop) exec_stackdepth integer_flush integer_lt integer_dec boolean_dup exec_dup_times (boolean_invert_first_then_and boolean_shove boolean_eq boolean_empty exec_dup_items integer_div exec_do*times () integer_dup_items boolean_not boolean_shove integer_mod integer_mult) print_exec () -81) exec_s (exec_swap (boolean_invert_first_then_and integer_mod exec_swap (integer_eq integer_eq integer_div) (boolean_dup_times integer_add) boolean_flush exec_do*range () exec_shove (integer_empty) exec_s_when_autoconstructing (boolean_and exec_do*times (exec_while (exec_if (integer_swap boolean_empty) (exec_pop (exec_y_when_autoconstructing () exec_y (in2 exec_dup_times () exec_stackdepth) integer_empty in2 integer_fromboolean exec_rot (exec_rot (in3 boolean_frominteger print_boolean) (boolean_dup_times integer_add) () exec_when (integer_rot boolean_pop) integer_swap) () ()))))) () ()) ()) () ())
Lexicase best errors: [1 0 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 121
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 3, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction -81} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_swap})
Zero cases best program: (exec_dup_items in4 exec_k (print_integer) (exec_flush exec_do*range (integer_shove integer_yankdup) boolean_stackdepth integer_mod exec_yankdup) exec_while (integer_pop exec_y_when_autoconstructing (print_integer exec_swap (print_boolean) ()) in3 exec_do*while (exec_yankdup boolean_pop) exec_stackdepth integer_flush integer_lt integer_dec boolean_dup exec_dup_times (boolean_invert_first_then_and boolean_shove boolean_eq boolean_empty exec_dup_items integer_div exec_do*times () integer_dup_items boolean_not boolean_shove integer_mod integer_mult) print_exec () -81) exec_s (exec_swap (boolean_invert_first_then_and integer_mod exec_swap (integer_eq integer_eq integer_div) (boolean_dup_times integer_add) boolean_flush exec_do*range () exec_shove (integer_empty) exec_s_when_autoconstructing (boolean_and exec_do*times (exec_while (exec_if (integer_swap boolean_empty) (exec_pop (exec_y_when_autoconstructing () exec_y (in2 exec_dup_times () exec_stackdepth) integer_empty in2 integer_fromboolean exec_rot (exec_rot (in3 boolean_frominteger print_boolean) (boolean_dup_times integer_add) () exec_when (integer_rot boolean_pop) integer_swap) () ()))))) () ()) ()) () ())
Zero cases best errors: [1 0 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 121
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 568 568 112 568 890 109 1 210 568)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (1 568 568 112 568 890 109 1 210 568)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tagged_204} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_125} {:close 1, :instruction integer_dec} {:close 0, :instruction tag_integer_604} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 2, :instruction boolean_yank} {:close 2, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_373} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_flush})
Best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range (print_exec () integer_inc) in4 boolean_eq boolean_empty boolean_stackdepth integer_gte integer_fromboolean integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_yankdup integer_yank boolean_dup print_exec (in4 boolean_yank)) exec_shove () exec_noop boolean_dup_times tagged_204 boolean_shove exec_s (exec_noop integer_swap) (in4 print_integer) (boolean_xor in4 boolean_dup_times tagged_125 integer_dec) tag_integer_604 exec_k (exec_y_when_autoconstructing (integer_mod boolean_swap exec_flush integer_dup exec_shove () integer_sub integer_stackdepth integer_swap integer_mod exec_rot (exec_y_when_autoconstructing ()) (boolean_frominteger) (boolean_invert_second_then_and integer_gt boolean_empty boolean_dup_times integer_max boolean_dup_times exec_rot () (integer_lt boolean_xor boolean_shove) (boolean_empty boolean_shove boolean_frominteger integer_dec exec_swap (exec_pop () boolean_yank) () integer_dec)) boolean_or boolean_pop exec_flush boolean_not) integer_mod) (exec_noop exec_s (exec_if (exec_y (integer_dup_items exec_yank) integer_dup tagged_373 boolean_not) (boolean_flush)) () ()))
Errors: [1 0 0 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 92
Size: 122
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 6.405
Median total errors in population: 5
Error averages by case: (0.999 0.432 0.432 0.888 0.432 0.11 0.891 0.999 0.79 0.432)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.112
Average program size in population (points): 77.941
Average percent parens in population: 0.265
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9545
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1360378
--- Timings ---
Current time: 1559583469934 milliseconds
Total Time:           9.0 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.8 seconds, 53.2%
Fitness Testing:      3.1 seconds, 34.6%
Report:               1.0 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction 3} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction 18} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_315} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tagged_204} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_125} {:close 1, :instruction integer_dec} {:close 0, :instruction tag_integer_604} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 2, :instruction print_boolean} {:close 2, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_empty boolean_swap 3 integer_pop boolean_rot boolean_empty boolean_yank integer_inc integer_eq exec_dup_times (exec_pop (18) boolean_stackdepth) boolean_empty exec_dup_times (boolean_yankdup) integer_empty integer_yank integer_swap boolean_yankdup exec_rot () (integer_rot exec_do*range (tagged_315) integer_yank boolean_pop integer_eq integer_fromboolean boolean_shove boolean_swap exec_shove (exec_noop boolean_dup_times) tagged_204 boolean_shove) () exec_s (exec_noop integer_swap) (in4 print_integer) (boolean_xor in4 boolean_dup_times tagged_125 integer_dec) tag_integer_604 exec_k (exec_y_when_autoconstructing (integer_mod boolean_swap exec_flush integer_dup exec_shove () integer_sub integer_stackdepth integer_swap integer_mod exec_rot (exec_y_when_autoconstructing ()) (boolean_frominteger) (boolean_invert_second_then_and integer_gt boolean_empty) boolean_dup_times integer_max boolean_dup_times exec_rot () (integer_lt boolean_xor boolean_shove) (boolean_empty boolean_shove boolean_frominteger integer_dec exec_swap () (exec_pop () print_boolean)) integer_dec)) (boolean_empty boolean_rot boolean_shove boolean_shove exec_k () (exec_eq integer_dup_items boolean_and integer_mod in4 exec_shove (exec_noop) integer_fromboolean) integer_mult exec_do*while () integer_lte boolean_invert_second_then_and boolean_dup))
Lexicase best errors: [1 1 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 126
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction 3} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction 18} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_315} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tagged_204} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_125} {:close 1, :instruction integer_dec} {:close 0, :instruction tag_integer_604} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 2, :instruction print_boolean} {:close 2, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_empty boolean_swap 3 integer_pop boolean_rot boolean_empty boolean_yank integer_inc integer_eq exec_dup_times (exec_pop (18) boolean_stackdepth) boolean_empty exec_dup_times (boolean_yankdup) integer_empty integer_yank integer_swap boolean_yankdup exec_rot () (integer_rot exec_do*range (tagged_315) integer_yank boolean_pop integer_eq integer_fromboolean boolean_shove boolean_swap exec_shove (exec_noop boolean_dup_times) tagged_204 boolean_shove) () exec_s (exec_noop integer_swap) (in4 print_integer) (boolean_xor in4 boolean_dup_times tagged_125 integer_dec) tag_integer_604 exec_k (exec_y_when_autoconstructing (integer_mod boolean_swap exec_flush integer_dup exec_shove () integer_sub integer_stackdepth integer_swap integer_mod exec_rot (exec_y_when_autoconstructing ()) (boolean_frominteger) (boolean_invert_second_then_and integer_gt boolean_empty) boolean_dup_times integer_max boolean_dup_times exec_rot () (integer_lt boolean_xor boolean_shove) (boolean_empty boolean_shove boolean_frominteger integer_dec exec_swap () (exec_pop () print_boolean)) integer_dec)) (boolean_empty boolean_rot boolean_shove boolean_shove exec_k () (exec_eq integer_dup_items boolean_and integer_mod in4 exec_shove (exec_noop) integer_fromboolean) integer_mult exec_do*while () integer_lte boolean_invert_second_then_and boolean_dup))
Zero cases best errors: [1 1 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 126
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (100 191 100 375 100 372 372 373 230 231)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (100 191 100 375 100 372 372 373 230 231)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 3, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction -81} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_empty})
Best program: (exec_dup_items in4 exec_k (print_integer) (exec_flush exec_do*range (integer_shove integer_yankdup) boolean_stackdepth integer_mod exec_yankdup) exec_while (integer_pop exec_y_when_autoconstructing (print_integer exec_swap (print_boolean) ()) in3 exec_do*while (exec_yankdup boolean_pop) exec_stackdepth integer_flush integer_lt integer_dec boolean_dup exec_dup_times (boolean_invert_first_then_and boolean_shove boolean_eq boolean_empty exec_dup_items integer_div exec_do*times () integer_dup_items boolean_not boolean_shove integer_mod integer_mult) print_exec () -81) exec_s (exec_swap (boolean_invert_first_then_and integer_mod exec_swap (integer_eq integer_eq integer_div) (boolean_dup_times integer_add) boolean_flush exec_do*range () exec_shove (integer_empty) exec_s_when_autoconstructing (boolean_and exec_do*times (exec_while (exec_if (integer_swap boolean_empty) (exec_pop (integer_sub) exec_y (in2 exec_dup_times () exec_stackdepth) integer_empty)))) () ()) ()) () ())
Errors: [1 1 1 0 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 69
Size: 100
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.556
Median total errors in population: 8
Error averages by case: (0.9 0.809 0.9 0.625 0.9 0.628 0.628 0.627 0.77 0.769)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.385
Average program size in population (points): 65.268
Average percent parens in population: 0.281
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.22525
Median age in population: 4.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1644946
--- Timings ---
Current time: 1559583472953 milliseconds
Total Time:          11.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.8 seconds, 58.6%
Fitness Testing:      3.5 seconds, 30.2%
Report:               1.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times})
Lexicase best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer integer_lt integer_dup exec_flush boolean_yankdup exec_yankdup exec_do*count (boolean_dup_items integer_empty integer_shove) print_newline integer_stackdepth exec_y_when_autoconstructing (integer_dup boolean_dup_times integer_stackdepth integer_lte exec_if (in2 integer_mod) () in2 exec_do*times ()))
Lexicase best errors: [1 0 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 33
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times})
Zero cases best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer integer_lt integer_dup exec_flush boolean_yankdup exec_yankdup exec_do*count (boolean_dup_items integer_empty integer_shove) print_newline integer_stackdepth exec_y_when_autoconstructing (integer_dup boolean_dup_times integer_stackdepth integer_lte exec_if (in2 integer_mod) () in2 exec_do*times ()))
Zero cases best errors: [1 0 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 33
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 422 259 888 383 259 260 159 383 260)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (87 422 259 888 383 259 260 159 383 260)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction tag_integer_673} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc})
Best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 boolean_dup integer_swap exec_when (integer_max exec_rot (exec_y () exec_y_when_autoconstructing (exec_yankdup boolean_swap boolean_and boolean_dup exec_y (integer_yankdup in2) exec_do*range (integer_gte exec_stackdepth exec_do*while (exec_s_when_autoconstructing (integer_shove) (exec_k_when_autoconstructing () (exec_k (boolean_not exec_shove (integer_swap exec_do*while (boolean_flush exec_do*count () integer_shove) in2 exec_while (boolean_rot boolean_dup integer_min integer_dec exec_eq exec_do*while (boolean_or) exec_empty) exec_stackdepth) integer_mult integer_shove boolean_or exec_if (integer_dup_times in4 boolean_shove) (tag_integer_673 integer_eq exec_do*count (integer_inc integer_dup_times exec_do*while (integer_yank integer_yankdup boolean_invert_second_then_and)) integer_gte exec_y () exec_swap (boolean_flush exec_s (exec_y_when_autoconstructing (integer_add) integer_yankdup exec_rot (integer_inc) () ()) () ()) ())) ())) ())))) () ()))
Errors: [1 0 0 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 77
Size: 113
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 6.64
Median total errors in population: 7
Error averages by case: (0.913 0.578 0.741 0.112 0.617 0.741 0.74 0.841 0.617 0.74)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.728
Average program size in population (points): 65.333
Average percent parens in population: 0.273
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.78525
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1995736
--- Timings ---
Current time: 1559583476193 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.0 seconds, 60.7%
Fitness Testing:      4.0 seconds, 26.5%
Report:               1.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_768} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc})
Lexicase best program: (integer_lt exec_do*range (print_boolean in4 boolean_swap boolean_yank print_integer exec_while (boolean_or exec_k () (integer_dup) integer_eq boolean_and integer_mod integer_swap exec_empty integer_swap boolean_xor) tagged_768 boolean_yankdup integer_rot integer_lte integer_pop integer_inc))
Lexicase best errors: [1 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_768} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc})
Zero cases best program: (integer_lt exec_do*range (print_boolean in4 boolean_swap boolean_yank print_integer exec_while (boolean_or exec_k () (integer_dup) integer_eq boolean_and integer_mod integer_swap exec_empty integer_swap boolean_xor) tagged_768 boolean_yankdup integer_rot integer_lte integer_pop integer_inc))
Zero cases best errors: [1 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (464 95 220 220 220 220 126 220 220 590)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (464 95 220 220 220 220 126 220 220 590)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer})
Best program: (boolean_yank in4 exec_s (boolean_yank boolean_not) (integer_yankdup boolean_yankdup exec_while () print_integer) (exec_y_when_autoconstructing (integer_max) integer_lte) boolean_yankdup exec_flush boolean_yankdup print_integer)
Errors: [1 1 0 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 16
Size: 22
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.405
Median total errors in population: 8
Error averages by case: (0.536 0.905 0.78 0.78 0.78 0.78 0.874 0.78 0.78 0.41)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.622
Average program size in population (points): 64.55
Average percent parens in population: 0.283
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.3011875
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2430635
--- Timings ---
Current time: 1559583479190 milliseconds
Total Time:          18.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.3 seconds, 62.2%
Fitness Testing:      4.5 seconds, 24.5%
Report:               2.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 1, :instruction integer_lte})
Lexicase best program: (integer_lt exec_do*range (print_boolean in4 boolean_swap boolean_yank print_integer exec_while (boolean_or exec_k () (integer_dup) integer_eq exec_y_when_autoconstructing (integer_max) integer_lte)))
Lexicase best errors: [1 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 21
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 1, :instruction integer_lte})
Zero cases best program: (integer_lt exec_do*range (print_boolean in4 boolean_swap boolean_yank print_integer exec_while (boolean_or exec_k () (integer_dup) integer_eq exec_y_when_autoconstructing (integer_max) integer_lte)))
Zero cases best errors: [1 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 21
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (152 156 522 522 100 140 140 522 140 99)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (152 156 522 522 100 140 140 522 140 99)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 1, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_897} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dec})
Best program: (exec_dup_items in4 exec_k (print_integer) (integer_max) exec_eq exec_dup (exec_do*times () boolean_flush exec_empty integer_gt exec_k (boolean_yank print_exec () exec_do*range (boolean_swap exec_dup (exec_do*times () boolean_flush exec_empty integer_gt exec_k (boolean_yank print_exec () exec_do*range (boolean_swap exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (integer_dup_items boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup exec_empty integer_gte exec_pop (in2 boolean_frominteger integer_yankdup) integer_shove integer_stackdepth tagged_897 boolean_invert_first_then_and)) integer_dec) ()))) ()))
Errors: [1 1 0 0 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 49
Size: 69
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 7.507
Median total errors in population: 7
Error averages by case: (0.848 0.844 0.478 0.478 0.9 0.86 0.86 0.478 0.86 0.901)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.838
Average program size in population (points): 59.865
Average percent parens in population: 0.275
Minimum age in population: 6.0
Maximum age in population: 10.5625
Average age in population: 8.81175
Median age in population: 8.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2712281
--- Timings ---
Current time: 1559583481721 milliseconds
Total Time:          20.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.3 seconds, 64.1%
Fitness Testing:      4.8 seconds, 23.2%
Report:               2.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range () print_exec () integer_inc in4 boolean_eq boolean_empty boolean_stackdepth integer_gte integer_fromboolean integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing ())
Lexicase best errors: [1 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range () print_exec () integer_inc in4 boolean_eq boolean_empty boolean_stackdepth integer_gte integer_fromboolean integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing ())
Zero cases best errors: [1 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (184 282 728 284 283 262 653 283 184 282)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (184 282 728 284 283 262 653 283 184 282)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range})
Best program: (exec_do*while (in4 exec_s (boolean_yank boolean_invert_second_then_and) (integer_yankdup boolean_yankdup exec_while () print_integer) (exec_y_when_autoconstructing (integer_max) integer_lte) boolean_yankdup exec_flush boolean_yankdup exec_yankdup exec_do*count (boolean_dup_items integer_empty integer_shove) print_newline integer_stackdepth exec_y_when_autoconstructing (integer_dup boolean_dup_times exec_rot (integer_lte exec_if (in2 integer_mod) () in2 exec_do*range ()) () ())))
Errors: [1 0 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 47
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 6.575
Median total errors in population: 8
Error averages by case: (0.816 0.718 0.272 0.716 0.717 0.738 0.347 0.717 0.816 0.718)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.448
Average program size in population (points): 55.98
Average percent parens in population: 0.287
Minimum age in population: 7.5
Maximum age in population: 12.078125
Average age in population: 10.247109375
Median age in population: 10.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3025702
--- Timings ---
Current time: 1559583484624 milliseconds
Total Time:          23.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.6 seconds, 66.1%
Fitness Testing:      5.2 seconds, 22.1%
Report:               2.7 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range})
Lexicase best program: (boolean_yank in4 exec_s (boolean_yank boolean_not) (integer_yankdup boolean_yankdup exec_while () print_integer) (exec_y_when_autoconstructing (integer_max) integer_lte) boolean_yankdup exec_flush boolean_yankdup exec_yankdup exec_do*count (boolean_dup_items exec_do*count (boolean_dup_items integer_empty integer_shove) print_newline integer_stackdepth exec_y_when_autoconstructing (integer_dup boolean_dup_times exec_rot (integer_lte exec_if (in2 integer_mod) () in2 exec_do*range ()) () ())))
Lexicase best errors: [1 1 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range})
Zero cases best program: (boolean_yank in4 exec_s (boolean_yank boolean_not) (integer_yankdup boolean_yankdup exec_while () print_integer) (exec_y_when_autoconstructing (integer_max) integer_lte) boolean_yankdup exec_flush boolean_yankdup exec_yankdup exec_do*count (boolean_dup_items exec_do*count (boolean_dup_items integer_empty integer_shove) print_newline integer_stackdepth exec_y_when_autoconstructing (integer_dup boolean_dup_times exec_rot (integer_lte exec_if (in2 integer_mod) () in2 exec_do*range ()) () ())))
Zero cases best errors: [1 1 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (113 113 1 582 581 582 581 582 918 113)
Population mean number of elite cases: 4.17
Count of perfect (error zero) individuals by case: (113 113 1 582 581 582 581 582 918 113)
Population mean number of perfect (error zero) cases: 4.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction tag_integer_673} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_pop})
Best program: (integer_lt exec_do*range (print_boolean in4 boolean_swap boolean_yank print_integer exec_while (boolean_or exec_k () (integer_dup) integer_eq boolean_and integer_mod exec_y () exec_y_when_autoconstructing (exec_yankdup integer_lt boolean_and boolean_dup exec_y (integer_lt in2) integer_inc integer_dec boolean_and boolean_dup exec_y (integer_lt in2) exec_do*range (integer_gte exec_stackdepth exec_do*while (exec_s_when_autoconstructing (integer_shove) (exec_k_when_autoconstructing () (exec_k (boolean_not exec_shove (integer_swap exec_do*while (boolean_flush exec_do*count () integer_shove) in2 exec_while (boolean_rot boolean_dup integer_min integer_dec exec_eq exec_do*while (boolean_or) exec_empty) exec_stackdepth) integer_sub integer_shove boolean_or exec_if (integer_dup_times in4 boolean_shove) (tag_integer_673 integer_eq exec_do*count (integer_inc integer_dup_times exec_do*while (integer_yank integer_yankdup boolean_invert_second_then_and)) boolean_yankdup) integer_stackdepth exec_do*while (exec_stackdepth) boolean_yank integer_dup_items) (exec_pop ()))) ()))))))
Errors: [1 1 1 0 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 79
Size: 108
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 5.834
Median total errors in population: 4
Error averages by case: (0.887 0.887 0.999 0.418 0.419 0.418 0.419 0.418 0.082 0.887)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.119
Average program size in population (points): 57.569
Average percent parens in population: 0.265
Minimum age in population: 8.5
Maximum age in population: 13.875
Average age in population: 11.744359375
Median age in population: 11.8359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3263808
--- Timings ---
Current time: 1559583487376 milliseconds
Total Time:          26.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.9 seconds, 67.8%
Fitness Testing:      5.5 seconds, 20.9%
Report:               2.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult})
Lexicase best program: (integer_pop boolean_dup in4 integer_max in1 print_integer exec_flush integer_min exec_y () exec_do*range (print_exec () integer_inc) in4 boolean_eq boolean_empty integer_mod integer_gte integer_fromboolean integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_yankdup integer_yank boolean_and boolean_dup exec_y (integer_lt in2) exec_do*range (integer_gte exec_stackdepth exec_do*while (exec_s_when_autoconstructing (integer_shove) (boolean_flush exec_do*count ()) (integer_shove) in2 exec_while (boolean_rot boolean_dup integer_min) integer_dec exec_eq exec_do*while (boolean_or exec_empty) boolean_shove) integer_mult)))
Lexicase best errors: [1 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.215
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult})
Zero cases best program: (integer_pop boolean_dup in4 integer_max in1 print_integer exec_flush integer_min exec_y () exec_do*range (print_exec () integer_inc) in4 boolean_eq boolean_empty integer_mod integer_gte integer_fromboolean integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_yankdup integer_yank boolean_and boolean_dup exec_y (integer_lt in2) exec_do*range (integer_gte exec_stackdepth exec_do*while (exec_s_when_autoconstructing (integer_shove) (boolean_flush exec_do*count ()) (integer_shove) in2 exec_while (boolean_rot boolean_dup integer_min) integer_dec exec_eq exec_do*while (boolean_or exec_empty) boolean_shove) integer_mult)))
Zero cases best errors: [1 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.215
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 283 112 534 929 929 534 283 112 112)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (283 283 112 534 929 929 534 283 112 112)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_956} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction tag_integer_673} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and})
Best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 boolean_dup integer_swap exec_when (integer_max exec_rot (exec_y () exec_y_when_autoconstructing (exec_yankdup boolean_swap boolean_and boolean_dup exec_y (integer_lt in2) exec_do*range (integer_gte exec_stackdepth exec_do*while (exec_s_when_autoconstructing (integer_shove exec_k_when_autoconstructing () (exec_k (boolean_not exec_shove (integer_swap exec_do*while (boolean_flush exec_do*count () integer_shove) in2 exec_while (boolean_rot boolean_dup integer_min integer_dec exec_eq tagged_956 boolean_or) exec_empty) exec_stackdepth) (integer_mult integer_shove exec_y_when_autoconstructing (exec_if (integer_dup_times in4 boolean_shove) (tag_integer_673 integer_eq exec_do*count (integer_inc integer_dup_times exec_do*while (integer_yank exec_rot () (integer_lt boolean_xor boolean_shove) (boolean_empty exec_pop (exec_shove () exec_flush integer_gt exec_dup (exec_empty integer_dup_items exec_do*times (integer_gt boolean_dup_items) boolean_eq in3) integer_rot exec_yank boolean_yankdup exec_shove (integer_swap integer_dup_items boolean_and)))))))))) () ())))) () ()))
Errors: [0 0 1 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 89
Size: 123
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 5.889
Median total errors in population: 6
Error averages by case: (0.717 0.717 0.888 0.466 0.071 0.071 0.466 0.717 0.888 0.888)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.174
Average program size in population (points): 67.283
Average percent parens in population: 0.261
Minimum age in population: 9.5
Maximum age in population: 15.2109375
Average age in population: 12.82402734375
Median age in population: 12.953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3558680
--- Timings ---
Current time: 1559583490466 milliseconds
Total Time:          29.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.1 seconds, 69.0%
Fitness Testing:      5.9 seconds, 20.1%
Report:               3.1 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_integer_673} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range (print_exec () integer_inc) in4 boolean_eq boolean_empty boolean_stackdepth integer_gte integer_fromboolean integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (in2) exec_do*range (integer_gte exec_stackdepth integer_rot exec_s_when_autoconstructing (integer_shove) (exec_k_when_autoconstructing () (exec_k (boolean_not exec_shove (integer_swap exec_do*while (boolean_flush exec_do*count () integer_shove) in2 exec_while (boolean_rot boolean_dup integer_min integer_dec exec_eq exec_do*while (boolean_or) exec_empty) exec_stackdepth) integer_mult integer_shove boolean_or exec_if (integer_dup_times in4 boolean_shove tag_integer_673 integer_eq exec_do*count (integer_inc integer_dup_times exec_do*while (integer_yank integer_lt boolean_xor boolean_shove) integer_gt boolean_shove boolean_frominteger integer_dec exec_pop (exec_shove () exec_flush) integer_gt exec_dup (exec_empty integer_dup_items exec_do*times () integer_gt boolean_dup_items) boolean_eq in3) integer_rot exec_yank boolean_yankdup exec_shove (integer_swap integer_dup_items boolean_and)) ()) ())) ()))
Lexicase best errors: [0 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 117
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_integer_673} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range (print_exec () integer_inc) in4 boolean_eq boolean_empty boolean_stackdepth integer_gte integer_fromboolean integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (in2) exec_do*range (integer_gte exec_stackdepth integer_rot exec_s_when_autoconstructing (integer_shove) (exec_k_when_autoconstructing () (exec_k (boolean_not exec_shove (integer_swap exec_do*while (boolean_flush exec_do*count () integer_shove) in2 exec_while (boolean_rot boolean_dup integer_min integer_dec exec_eq exec_do*while (boolean_or) exec_empty) exec_stackdepth) integer_mult integer_shove boolean_or exec_if (integer_dup_times in4 boolean_shove tag_integer_673 integer_eq exec_do*count (integer_inc integer_dup_times exec_do*while (integer_yank integer_lt boolean_xor boolean_shove) integer_gt boolean_shove boolean_frominteger integer_dec exec_pop (exec_shove () exec_flush) integer_gt exec_dup (exec_empty integer_dup_items exec_do*times () integer_gt boolean_dup_items) boolean_eq in3) integer_rot exec_yank boolean_yankdup exec_shove (integer_swap integer_dup_items boolean_and)) ()) ())) ()))
Zero cases best errors: [0 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 117
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (598 359 359 238 355 355 238 238 1000 238)
Population mean number of elite cases: 3.98
Count of perfect (error zero) individuals by case: (598 359 359 238 355 355 238 238 0 238)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_768} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 1, :instruction tagged_904} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction tag_integer_673} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count})
Best program: (integer_lt exec_do*range (print_boolean in4 boolean_swap boolean_yank print_integer exec_while () boolean_or exec_k () (integer_dup)) integer_eq boolean_and integer_mod integer_swap exec_empty integer_swap boolean_xor tagged_768 boolean_yankdup integer_rot integer_lte integer_pop integer_inc integer_dec integer_dup_items boolean_flush integer_mult boolean_and integer_flush tagged_904 integer_shove exec_k_when_autoconstructing () (exec_k (boolean_not exec_shove (integer_swap exec_do*while (boolean_flush exec_do*count () integer_shove) in2 exec_while (boolean_rot boolean_dup integer_min integer_dec exec_eq exec_do*while (boolean_or) exec_empty) exec_stackdepth) integer_mult boolean_pop boolean_or exec_if (integer_dup_times in4 boolean_shove) (tag_integer_673 integer_eq exec_do*count ())) ()))
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 79
Percent parens: 0.215
--- Population Statistics ---
Average total errors in population: 7.022
Median total errors in population: 7
Error averages by case: (0.402 0.641 0.641 0.762 0.645 0.645 0.762 0.762 1.0 0.762)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 55.691
Average program size in population (points): 76.545
Average percent parens in population: 0.262
Minimum age in population: 10.5
Maximum age in population: 16.248046875
Average age in population: 13.747220703125
Median age in population: 13.873046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3842845
--- Timings ---
Current time: 1559583493282 milliseconds
Total Time:          32.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.1 seconds, 69.0%
Fitness Testing:      6.2 seconds, 19.5%
Report:               3.6 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_lt integer_stackdepth integer_empty exec_do*times () in2 print_integer integer_lt integer_dup)
Lexicase best errors: [1 1 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 10
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_lt integer_stackdepth integer_empty exec_do*times () in2 print_integer integer_lt integer_dup)
Zero cases best errors: [1 1 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 10
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 258 473 208 939 932 208 258 1000 932)
Population mean number of elite cases: 6.21
Count of perfect (error zero) individuals by case: (0 258 473 208 939 932 208 258 0 932)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction 93} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_539} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_flush})
Best program: (integer_pop integer_lt integer_flush integer_empty integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 boolean_dup integer_mod exec_when (integer_max exec_rot (integer_pop in3 print_integer integer_dec) (boolean_and print_integer) (exec_when (integer_lte integer_dup_times boolean_and boolean_invert_second_then_and exec_k (boolean_pop) (exec_s_when_autoconstructing (integer_shove) (exec_noop integer_div exec_dup_items integer_add boolean_not exec_eq) (exec_dup_items integer_gte integer_flush)) exec_s (exec_while (print_integer) 93 boolean_dup_items exec_while (exec_eq) boolean_not integer_shove exec_eq integer_lt integer_lt integer_gte exec_y () exec_swap (boolean_flush exec_s (exec_y_when_autoconstructing (integer_add)) (integer_yankdup exec_rot (integer_inc boolean_dup_times) (exec_empty exec_y (boolean_flush) boolean_not exec_dup_items exec_while () exec_do*while () exec_while (boolean_or) boolean_invert_second_then_and exec_swap (tagged_539 exec_do*while (integer_lte exec_y (boolean_or boolean_pop exec_flush))) ()) ()) ()) ()) () ()))))
Errors: [1 1 1 0 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 82
Size: 116
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 5.792
Median total errors in population: 6
Error averages by case: (1.0 0.742 0.527 0.792 0.061 0.068 0.792 0.742 1.0 0.068)
Error minima by case: (1 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 51.743
Average program size in population (points): 70.661
Average percent parens in population: 0.255
Minimum age in population: 11.5
Maximum age in population: 17.6845703125
Average age in population: 15.37842578125
Median age in population: 15.51416015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4104643
--- Timings ---
Current time: 1559583496254 milliseconds
Total Time:          34.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.2 seconds, 69.2%
Fitness Testing:      6.6 seconds, 18.8%
Report:               4.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_768} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 1, :instruction tagged_904} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_9} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_lt exec_do*range (print_boolean in4 boolean_swap boolean_yank print_integer exec_while () boolean_or exec_k () (integer_dup) integer_eq integer_mod integer_mod integer_swap integer_dup_items integer_swap boolean_pop) tagged_768 boolean_yankdup integer_rot integer_lte integer_pop integer_inc integer_fromboolean integer_dup_items boolean_flush integer_mult boolean_and integer_flush tagged_904 integer_yank integer_gte print_integer tag_integer_9 boolean_and integer_pop boolean_dup boolean_dup boolean_yank integer_dup_items)
Lexicase best errors: [0 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.109
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_768} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 1, :instruction tagged_904} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_9} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_lt exec_do*range (print_boolean in4 boolean_swap boolean_yank print_integer exec_while () boolean_or exec_k () (integer_dup) integer_eq integer_mod integer_mod integer_swap integer_dup_items integer_swap boolean_pop) tagged_768 boolean_yankdup integer_rot integer_lte integer_pop integer_inc integer_fromboolean integer_dup_items boolean_flush integer_mult boolean_and integer_flush tagged_904 integer_yank integer_gte print_integer tag_integer_9 boolean_and integer_pop boolean_dup boolean_dup boolean_yank integer_dup_items)
Zero cases best errors: [0 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.109
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 374 374 201 754 201 201 201 201 955)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (201 374 374 201 754 201 201 201 201 955)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction 55})
Best program: (integer_pop boolean_dup in4 exec_swap (in1) (print_integer exec_flush) integer_min exec_y () exec_do*range (print_exec () integer_inc) in4 boolean_eq boolean_empty integer_mod integer_gte integer_fromboolean integer_dec boolean_eq exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_yankdup integer_yank boolean_and boolean_dup exec_y (integer_lt in2) exec_do*range (integer_gte integer_flush boolean_stackdepth) exec_k (integer_div integer_inc boolean_flush print_boolean) (boolean_yank integer_gte exec_stackdepth in2 boolean_rot boolean_dup_times boolean_swap exec_if (exec_eq exec_dup_times (integer_inc exec_when (55))) ())))
Errors: [0 1 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 52
Size: 67
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 6.337
Median total errors in population: 6
Error averages by case: (0.799 0.626 0.626 0.799 0.246 0.799 0.799 0.799 0.799 0.045)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.457
Average program size in population (points): 70.248
Average percent parens in population: 0.254
Minimum age in population: 12.5
Maximum age in population: 19.39453125
Average age in population: 16.73593359375
Median age in population: 16.845458984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4404473
--- Timings ---
Current time: 1559583498848 milliseconds
Total Time:          37.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.2 seconds, 69.1%
Fitness Testing:      7.0 seconds, 18.4%
Report:               4.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y})
Lexicase best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer exec_y (integer_dup integer_flush integer_lte in3 boolean_dup) integer_swap exec_when (exec_do*count (exec_rot (exec_y ()) () ())))
Lexicase best errors: [1 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y})
Zero cases best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer exec_y (integer_dup integer_flush integer_lte in3 boolean_dup) integer_swap exec_when (exec_do*count (exec_rot (exec_y ()) () ())))
Zero cases best errors: [1 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (611 1000 321 322 937 1000 322 611 322 322)
Population mean number of elite cases: 5.77
Count of perfect (error zero) individuals by case: (611 0 321 322 937 0 322 611 322 322)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction in4})
Best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 boolean_dup integer_swap exec_when (integer_max exec_rot (exec_y () exec_y_when_autoconstructing (exec_yankdup boolean_swap boolean_and boolean_dup exec_y (exec_pop (in2 exec_do*range (integer_gte exec_stackdepth exec_do*while (exec_s_when_autoconstructing (integer_shove) (exec_k_when_autoconstructing () (exec_k (boolean_not exec_s (integer_swap exec_do*while (boolean_flush exec_do*count () integer_shove) in2 exec_while (boolean_rot boolean_dup integer_min integer_dec exec_eq boolean_dup boolean_or) exec_empty exec_stackdepth) (integer_mult integer_shove boolean_or exec_if (integer_dup_times boolean_frominteger exec_do*times (integer_mult exec_dup (boolean_xor exec_do*times (exec_yankdup) exec_do*range (exec_s_when_autoconstructing (integer_swap) (integer_yank integer_dup_times exec_when (exec_dup_times (boolean_flush boolean_dup_items exec_dup_items integer_div boolean_frominteger exec_empty boolean_pop integer_lte) exec_shove (exec_s_when_autoconstructing (in4 in1 exec_do*while (boolean_pop integer_gte exec_if (exec_y (integer_lte exec_pop (integer_swap boolean_not in4))) ())) () ()))) ())))) ()) ()) ())) ())))))) () ()))
Errors: [1 1 0 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 92
Size: 136
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.232
Median total errors in population: 7
Error averages by case: (0.389 1.0 0.679 0.678 0.063 1.0 0.678 0.389 0.678 0.678)
Error minima by case: (0 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 41.664
Average program size in population (points): 56.581
Average percent parens in population: 0.251
Minimum age in population: 15.71875
Maximum age in population: 20.4189453125
Average age in population: 18.50078491210938
Median age in population: 18.581298828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4745061
--- Timings ---
Current time: 1559583501830 milliseconds
Total Time:          40.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.3 seconds, 69.7%
Fitness Testing:      7.4 seconds, 18.2%
Report:               4.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction 74} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 boolean_dup 74 exec_when (integer_max exec_rot (exec_y (exec_y_when_autoconstructing (exec_yankdup boolean_swap boolean_and boolean_dup exec_y (exec_stackdepth in2) exec_do*range (integer_gte integer_dec integer_dup_items) boolean_flush) integer_mult boolean_and)) () ()))
Lexicase best errors: [1 0 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction 74} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 boolean_dup 74 exec_when (integer_max exec_rot (exec_y (exec_y_when_autoconstructing (exec_yankdup boolean_swap boolean_and boolean_dup exec_y (exec_stackdepth in2) exec_do*range (integer_gte integer_dec integer_dup_items) boolean_flush) integer_mult boolean_and)) () ()))
Zero cases best errors: [1 0 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 657 1000 657 277 657 1000 657 937 1000)
Population mean number of elite cases: 6.84
Count of perfect (error zero) individuals by case: (2 657 0 657 277 657 0 657 937 0)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction tag_integer_965} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times})
Best program: (exec_yankdup boolean_yankdup exec_dup () tag_integer_965 print_integer in2 print_integer integer_lt integer_dup integer_min exec_y () exec_do*range (integer_lt) integer_inc integer_dup integer_flush integer_lte in3 boolean_dup integer_swap exec_when (integer_max exec_rot (exec_y (exec_y_when_autoconstructing (exec_yankdup boolean_swap boolean_and exec_stackdepth exec_y (integer_lt in2) exec_do*range (integer_gte exec_stackdepth exec_do*while (exec_s_when_autoconstructing (integer_shove) (exec_k_when_autoconstructing () (exec_k (boolean_not exec_shove (integer_swap exec_do*while (boolean_flush exec_do*count () integer_shove) in2 exec_while (boolean_rot boolean_dup integer_gte integer_dec exec_eq exec_do*while (boolean_or) exec_empty) exec_stackdepth) integer_mult integer_shove boolean_or exec_if (integer_dup_times) ()) ())) ()))))) () ()))
Errors: [1 0 1 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 63
Size: 90
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.156
Median total errors in population: 5
Error averages by case: (0.998 0.343 1.0 0.343 0.723 0.343 1.0 0.343 0.063 1.0)
Error minima by case: (0 0 1 0 0 0 1 0 0 1)
Average genome size in population (length): 38.804
Average program size in population (points): 52.752
Average percent parens in population: 0.257
Minimum age in population: 16.7314453125
Maximum age in population: 22.1773681640625
Average age in population: 19.996029296875
Median age in population: 20.102783203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5219573
--- Timings ---
Current time: 1559583504684 milliseconds
Total Time:          43.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.1 seconds, 69.3%
Fitness Testing:      7.9 seconds, 18.3%
Report:               5.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range})
Lexicase best program: (integer_pop boolean_dup in4 integer_max integer_gt print_integer exec_flush integer_min exec_y () exec_do*range (print_exec () integer_inc) in4 boolean_eq boolean_empty integer_mod integer_gte integer_fromboolean integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_yankdup exec_rot (integer_lte exec_if () (in2 integer_mod)) (in2 exec_do*range ()) ()))
Lexicase best errors: [1 0 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range})
Zero cases best program: (integer_pop boolean_dup in4 integer_max integer_gt print_integer exec_flush integer_min exec_y () exec_do*range (print_exec () integer_inc) in4 boolean_eq boolean_empty integer_mod integer_gte integer_fromboolean integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_yankdup exec_rot (integer_lte exec_if () (in2 integer_mod)) (in2 exec_do*range ()) ()))
Zero cases best errors: [1 0 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (168 155 936 155 613 155 155 614 168 155)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (168 155 936 155 613 155 155 614 168 155)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot})
Best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range (print_exec () integer_inc) in4 boolean_eq boolean_empty boolean_stackdepth integer_swap boolean_yank integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_swap integer_yank exec_y (print_exec (in4 boolean_yank)) exec_rot (exec_dup_items integer_flush integer_lt) (exec_eq integer_rot) ()))
Errors: [1 0 0 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 45
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.726
Median total errors in population: 7
Error averages by case: (0.832 0.845 0.064 0.845 0.387 0.845 0.845 0.386 0.832 0.845)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.711
Average program size in population (points): 48.764
Average percent parens in population: 0.254
Minimum age in population: 18.625732421875
Maximum age in population: 23.56390380859375
Average age in population: 21.54548120117188
Median age in population: 21.56866455078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5641060
--- Timings ---
Current time: 1559583506989 milliseconds
Total Time:          46.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.8 seconds, 68.9%
Fitness Testing:      8.4 seconds, 18.3%
Report:               5.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 boolean_dup integer_swap exec_when (integer_max exec_rot (exec_y () exec_y_when_autoconstructing (exec_yankdup boolean_swap boolean_and exec_s_when_autoconstructing (exec_y (integer_gt in2) exec_do*range (integer_gte exec_stackdepth exec_do*while (exec_when (integer_shove) exec_k_when_autoconstructing () (exec_k (integer_yank) ())))) () ())) () ()))
Lexicase best errors: [0 0 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 52
Percent parens: 0.346
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 boolean_dup integer_swap exec_when (integer_max exec_rot (exec_y () exec_y_when_autoconstructing (exec_yankdup boolean_swap boolean_and exec_s_when_autoconstructing (exec_y (integer_gt in2) exec_do*range (integer_gte exec_stackdepth exec_do*while (exec_when (integer_shove) exec_k_when_autoconstructing () (exec_k (integer_yank) ())))) () ())) () ()))
Zero cases best errors: [0 0 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 52
Percent parens: 0.346
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 205 929 929 206 518 206 205 519 1000)
Population mean number of elite cases: 4.92
Count of perfect (error zero) individuals by case: (204 205 929 929 206 518 206 205 519 0)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction tagged_893} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove})
Best program: (integer_lt integer_flush exec_while (integer_yank) in2 print_integer integer_lt tagged_893 integer_flush integer_lte in3 boolean_dup integer_swap exec_when (integer_max exec_rot (integer_dup_items) (exec_y_when_autoconstructing (exec_yankdup boolean_swap boolean_and boolean_dup exec_do*count () integer_shove) in2 exec_while (boolean_rot boolean_dup integer_min integer_dec exec_eq integer_empty boolean_or) exec_empty exec_stackdepth) (integer_mult integer_shove)))
Errors: [0 0 0 0 1 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 6.079
Median total errors in population: 6
Error averages by case: (0.796 0.795 0.071 0.071 0.794 0.482 0.794 0.795 0.481 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 37.159
Average program size in population (points): 50.977
Average percent parens in population: 0.257
Minimum age in population: 20.2442626953125
Maximum age in population: 25.06109619140625
Average age in population: 22.95966516113281
Median age in population: 22.98333740234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5928841
--- Timings ---
Current time: 1559583509398 milliseconds
Total Time:          48.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.6 seconds, 69.4%
Fitness Testing:      8.8 seconds, 18.1%
Report:               6.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 51                 
Correct output: 9                   | Program output: 96                 
Correct output: 16                  | Program output: 71                 
Correct output: 8                   | Program output: 8                  
Correct output: 27                  | Program output: 49                 
Correct output: 16                  | Program output: 42                 
Correct output: 23                  | Program output: 33                 
Correct output: 0                   | Program output: 28                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 7                   | Program output: 31                 
Correct output: 2                   | Program output: 42                 
Correct output: 8                   | Program output: 63                 
Correct output: 49                  | Program output: 91                 
Correct output: 42                  | Program output: 47                 
Correct output: 1                   | Program output: 91                 
Correct output: 21                  | Program output: 96                 
Correct output: 13                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: 63                 
Correct output: -74                 | Program output: -54                
Correct output: -72                 | Program output: -14                
Correct output: -50                 | Program output: 15                 
Correct output: -98                 | Program output: -37                
Correct output: -65                 | Program output: 65                 
Correct output: -57                 | Program output: -55                
Correct output: -91                 | Program output: 16                 
Correct output: -9                  | Program output: 18                 
Correct output: -3                  | Program output: -3                 
Correct output: -52                 | Program output: -52                
Correct output: -73                 | Program output: -20                
Correct output: -87                 | Program output: 40                 
Correct output: -49                 | Program output: 42                 
Correct output: -80                 | Program output: -75                
Correct output: -94                 | Program output: -3                 
Correct output: -19                 | Program output: 98                 
Correct output: -90                 | Program output: 6                  
Correct output: -65                 | Program output: 30                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 34                 
Correct output: -88                 | Program output: 5                  
Correct output: -29                 | Program output: -29                
Correct output: -50                 | Program output: 90                 
Correct output: -90                 | Program output: -17                
Correct output: -83                 | Program output: 78                 
Correct output: 19                  | Program output: 46                 
Correct output: -99                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -19                 | Program output: 98                 
Correct output: -80                 | Program output: 66                 
Correct output: -81                 | Program output: 57                 
Correct output: -90                 | Program output: 94                 
Correct output: -97                 | Program output: 20                 
Correct output: 3                   | Program output: 25                 
Correct output: 44                  | Program output: 95                 
Correct output: -98                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 71                 
Correct output: -20                 | Program output: -20                
Correct output: -89                 | Program output: 25                 
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: 10                 
Correct output: -83                 | Program output: -48                
Correct output: -68                 | Program output: 38                 
Correct output: -56                 | Program output: 54                 
Correct output: -84                 | Program output: -72                
Correct output: -27                 | Program output: 1                  
Correct output: -19                 | Program output: 30                 
Correct output: -81                 | Program output: 28                 
Correct output: 25                  | Program output: 88                 
Correct output: -86                 | Program output: 47                 
Correct output: -98                 | Program output: 50                 
Correct output: -67                 | Program output: -31                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -72                
Correct output: -95                 | Program output: 57                 
Correct output: 6                   | Program output: 21                 
Correct output: -62                 | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction 93} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s})
Lexicase best program: (exec_do*while (in4 exec_s (print_integer) (exec_flush exec_do*range (in2 exec_rot () (exec_while (integer_max exec_y (boolean_not exec_dup_times (exec_dup_items) integer_div exec_flush print_integer) integer_empty) exec_do*while () exec_stackdepth integer_flush integer_lt integer_dec boolean_dup exec_dup_times (boolean_invert_first_then_and in4 boolean_eq boolean_empty exec_pop (integer_div integer_add boolean_not exec_eq) exec_dup_items integer_gte integer_flush)) (exec_s (exec_while (print_integer) 93 boolean_dup_items exec_while (exec_eq) boolean_not integer_shove exec_eq integer_lt integer_lt integer_gte exec_y () exec_swap (boolean_flush exec_s () () ()) ()) () ()))) ()))
Lexicase best errors: [1 1 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 80
Percent parens: 0.325
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction 93} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s})
Zero cases best program: (exec_do*while (in4 exec_s (print_integer) (exec_flush exec_do*range (in2 exec_rot () (exec_while (integer_max exec_y (boolean_not exec_dup_times (exec_dup_items) integer_div exec_flush print_integer) integer_empty) exec_do*while () exec_stackdepth integer_flush integer_lt integer_dec boolean_dup exec_dup_times (boolean_invert_first_then_and in4 boolean_eq boolean_empty exec_pop (integer_div integer_add boolean_not exec_eq) exec_dup_items integer_gte integer_flush)) (exec_s (exec_while (print_integer) 93 boolean_dup_items exec_while (exec_eq) boolean_not integer_shove exec_eq integer_lt integer_lt integer_gte exec_y () exec_swap (boolean_flush exec_s () () ()) ()) () ()))) ()))
Zero cases best errors: [1 1 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 80
Percent parens: 0.325
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 506 289 290 290 506 138 138 1000 1000)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (138 506 289 290 290 506 138 138 0 0)
Population mean number of perfect (error zero) cases: 2.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot boolean_not integer_yankdup in3 integer_yankdup boolean_yankdup exec_while () print_integer exec_y_when_autoconstructing ())
Errors: [0 1 1 1 1 1 0 0 1 1]
Total: 7
Mean: 0.7
Genome size: 13
Size: 16
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 7.705
Median total errors in population: 8
Error averages by case: (0.862 0.494 0.711 0.71 0.71 0.494 0.862 0.862 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 34.228
Average program size in population (points): 46.638
Average percent parens in population: 0.251
Minimum age in population: 21.2442626953125
Maximum age in population: 26.62400817871094
Average age in population: 24.47232635498047
Median age in population: 24.57968902587891
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6329817
--- Timings ---
Current time: 1559583512207 milliseconds
Total Time:          51.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.8 seconds, 69.7%
Fitness Testing:      9.2 seconds, 18.0%
Report:               6.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush})
Lexicase best program: (integer_lt exec_do*range (print_boolean in4 boolean_swap boolean_yank print_integer exec_while (integer_dup_items exec_flush boolean_yankdup exec_yankdup exec_do*count (boolean_dup_items integer_empty integer_min exec_y ()) exec_do*range (print_exec (boolean_yank)) exec_rot (exec_dup_items integer_flush integer_lt) (exec_eq integer_rot print_exec () exec_s_when_autoconstructing (exec_noop integer_div) (exec_dup_items integer_add boolean_not exec_while () exec_dup_items integer_gte integer_flush) ()) ())))
Lexicase best errors: [1 0 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush})
Zero cases best program: (integer_lt exec_do*range (print_boolean in4 boolean_swap boolean_yank print_integer exec_while (integer_dup_items exec_flush boolean_yankdup exec_yankdup exec_do*count (boolean_dup_items integer_empty integer_min exec_y ()) exec_do*range (print_exec (boolean_yank)) exec_rot (exec_dup_items integer_flush integer_lt) (exec_eq integer_rot print_exec () exec_s_when_autoconstructing (exec_noop integer_div) (exec_dup_items integer_add boolean_not exec_while () exec_dup_items integer_gte integer_flush) ()) ())))
Zero cases best errors: [1 0 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (356 916 335 1000 335 1000 357 334 916 224)
Population mean number of elite cases: 5.77
Count of perfect (error zero) individuals by case: (356 916 335 0 335 0 357 334 916 224)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_rot} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_exec_243} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_shove})
Best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range (integer_lt integer_inc) in4 boolean_eq boolean_empty exec_dup_times (integer_lt in2) exec_do*range (integer_gte exec_stackdepth exec_do*while (exec_s_when_autoconstructing (boolean_dup_times exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_yankdup integer_yank boolean_and print_exec (in4 boolean_yank)) exec_rot (exec_dup_items integer_flush in1) (exec_eq integer_rot) (print_exec () exec_s_when_autoconstructing (tag_exec_243 (integer_div exec_dup_items integer_shove exec_k_when_autoconstructing () (exec_k (boolean_not) (exec_shove ())))) () ())) () ())))
Errors: [1 0 0 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 49
Size: 73
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 6.227
Median total errors in population: 6
Error averages by case: (0.644 0.084 0.665 1.0 0.665 1.0 0.643 0.666 0.084 0.776)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 32.103
Average program size in population (points): 43.845
Average percent parens in population: 0.246
Minimum age in population: 22.5096435546875
Maximum age in population: 28.03195190429688
Average age in population: 25.9130298538208
Median age in population: 25.9783935546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6624387
--- Timings ---
Current time: 1559583514767 milliseconds
Total Time:          53.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.8 seconds, 70.3%
Fitness Testing:      9.6 seconds, 17.8%
Report:               6.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 3, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y})
Lexicase best program: (exec_dup_items in4 exec_k (print_integer) (exec_flush exec_do*range (integer_shove exec_stackdepth) exec_when (integer_mod exec_yankdup) exec_while (integer_pop exec_y_when_autoconstructing (print_integer exec_swap (print_boolean) ()) in3 exec_do*while (boolean_empty boolean_pop) exec_stackdepth integer_flush integer_lt integer_lte boolean_dup exec_dup_times (exec_y ()))))
Lexicase best errors: [0 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 3, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y})
Zero cases best program: (exec_dup_items in4 exec_k (print_integer) (exec_flush exec_do*range (integer_shove exec_stackdepth) exec_when (integer_mod exec_yankdup) exec_while (integer_pop exec_y_when_autoconstructing (print_integer exec_swap (print_boolean) ()) in3 exec_do*while (boolean_empty boolean_pop) exec_stackdepth integer_flush integer_lt integer_lte boolean_dup exec_dup_times (exec_y ()))))
Zero cases best errors: [0 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (469 178 469 297 178 178 948 469 469 469)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (469 178 469 297 178 178 948 469 469 469)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items})
Best program: (integer_lt exec_do*range (print_boolean in4 boolean_swap boolean_yank print_integer exec_while (exec_flush boolean_yankdup exec_yankdup exec_do*count (boolean_dup_items integer_empty integer_shove) print_newline) integer_stackdepth boolean_dup integer_dup_items))
Errors: [0 1 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 23
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 5.876
Median total errors in population: 6
Error averages by case: (0.531 0.822 0.531 0.703 0.822 0.822 0.052 0.531 0.531 0.531)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.463
Average program size in population (points): 44.275
Average percent parens in population: 0.248
Minimum age in population: 23.740234375
Maximum age in population: 29.18782424926758
Average age in population: 27.41358577728271
Median age in population: 27.48345184326172
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6912431
--- Timings ---
Current time: 1559583517396 milliseconds
Total Time:          56.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.0 seconds, 70.8%
Fitness Testing:      9.9 seconds, 17.6%
Report:               6.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_768} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_lt exec_do*range (print_boolean in4 boolean_swap boolean_yank print_integer exec_while (boolean_or integer_max) exec_rot (exec_s (integer_swap boolean_xor) (tagged_768 boolean_yankdup integer_rot integer_lte integer_pop exec_flush) ()) () ()))
Lexicase best errors: [1 1 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_768} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_lt exec_do*range (print_boolean in4 boolean_swap boolean_yank print_integer exec_while (boolean_or integer_max) exec_rot (exec_s (integer_swap boolean_xor) (tagged_768 boolean_yankdup integer_rot integer_lte integer_pop exec_flush) ()) () ()))
Zero cases best errors: [1 1 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (96 321 1000 520 938 520 520 520 1000 321)
Population mean number of elite cases: 5.76
Count of perfect (error zero) individuals by case: (96 321 0 520 938 520 520 520 0 321)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte})
Best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range (print_exec (exec_dup () integer_flush integer_lte) in3 boolean_dup) integer_mod exec_when (integer_max exec_rot (integer_pop in3 integer_min integer_dec) (exec_k (print_integer) (exec_when (integer_lte))) ()))
Errors: [1 1 1 0 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 28
Size: 40
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.244
Median total errors in population: 5
Error averages by case: (0.904 0.679 1.0 0.48 0.062 0.48 0.48 0.48 1.0 0.679)
Error minima by case: (0 0 1 0 0 0 0 0 1 0)
Average genome size in population (length): 33.37
Average program size in population (points): 45.383
Average percent parens in population: 0.250
Minimum age in population: 25.70585632324219
Maximum age in population: 30.90305137634277
Average age in population: 28.98587766838074
Median age in population: 29.07314300537109
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7248262
--- Timings ---
Current time: 1559583520046 milliseconds
Total Time:          59.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.1 seconds, 71.2%
Fitness Testing:     10.3 seconds, 17.5%
Report:               6.6 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 51                 
Correct output: 9                   | Program output: 96                 
Correct output: 16                  | Program output: 71                 
Correct output: 8                   | Program output: 8                  
Correct output: 27                  | Program output: 49                 
Correct output: 16                  | Program output: 42                 
Correct output: 23                  | Program output: 33                 
Correct output: 0                   | Program output: 28                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 7                   | Program output: 31                 
Correct output: 2                   | Program output: 42                 
Correct output: 8                   | Program output: 63                 
Correct output: 49                  | Program output: 91                 
Correct output: 42                  | Program output: 47                 
Correct output: 1                   | Program output: 91                 
Correct output: 21                  | Program output: 96                 
Correct output: 13                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: 63                 
Correct output: -74                 | Program output: -54                
Correct output: -72                 | Program output: -14                
Correct output: -50                 | Program output: 15                 
Correct output: -98                 | Program output: -37                
Correct output: -65                 | Program output: 65                 
Correct output: -57                 | Program output: -55                
Correct output: -91                 | Program output: 16                 
Correct output: -9                  | Program output: 18                 
Correct output: -3                  | Program output: -3                 
Correct output: -52                 | Program output: -52                
Correct output: -73                 | Program output: -20                
Correct output: -87                 | Program output: 40                 
Correct output: -49                 | Program output: 42                 
Correct output: -80                 | Program output: -75                
Correct output: -94                 | Program output: -3                 
Correct output: -19                 | Program output: 98                 
Correct output: -90                 | Program output: 6                  
Correct output: -65                 | Program output: 30                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 34                 
Correct output: -88                 | Program output: 5                  
Correct output: -29                 | Program output: -29                
Correct output: -50                 | Program output: 90                 
Correct output: -90                 | Program output: -17                
Correct output: -83                 | Program output: 78                 
Correct output: 19                  | Program output: 46                 
Correct output: -99                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -19                 | Program output: 98                 
Correct output: -80                 | Program output: 66                 
Correct output: -81                 | Program output: 57                 
Correct output: -90                 | Program output: 94                 
Correct output: -97                 | Program output: 20                 
Correct output: 3                   | Program output: 25                 
Correct output: 44                  | Program output: 95                 
Correct output: -98                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 71                 
Correct output: -20                 | Program output: -20                
Correct output: -89                 | Program output: 25                 
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: 10                 
Correct output: -83                 | Program output: -48                
Correct output: -68                 | Program output: 38                 
Correct output: -56                 | Program output: 54                 
Correct output: -84                 | Program output: -72                
Correct output: -27                 | Program output: 1                  
Correct output: -19                 | Program output: 30                 
Correct output: -81                 | Program output: 28                 
Correct output: 25                  | Program output: 88                 
Correct output: -86                 | Program output: 47                 
Correct output: -98                 | Program output: 50                 
Correct output: -67                 | Program output: -31                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -72                
Correct output: -95                 | Program output: 57                 
Correct output: 6                   | Program output: 21                 
Correct output: -62                 | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_yank boolean_dup_times integer_mult boolean_eq boolean_swap boolean_not integer_yankdup in3 integer_yankdup boolean_yankdup exec_while () print_integer exec_y_when_autoconstructing ())
Lexicase best errors: [1 1 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 19
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_yank boolean_dup_times integer_mult boolean_eq boolean_swap boolean_not integer_yankdup in3 integer_yankdup boolean_yankdup exec_while () print_integer exec_y_when_autoconstructing ())
Zero cases best errors: [1 1 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 19
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 544 945 1000 945 147 1000 691 1000 147)
Population mean number of elite cases: 6.67
Count of perfect (error zero) individuals by case: (254 544 945 0 945 147 0 691 0 147)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_yank boolean_yank integer_mult boolean_yank boolean_dup_times integer_mult boolean_eq boolean_swap boolean_not integer_yankdup in3 integer_yankdup boolean_yankdup exec_while () print_integer exec_y_when_autoconstructing ())
Errors: [1 1 0 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 19
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 6.327
Median total errors in population: 6
Error averages by case: (0.746 0.456 0.055 1.0 0.055 0.853 1.0 0.309 1.0 0.853)
Error minima by case: (0 0 0 1 0 0 1 0 1 0)
Average genome size in population (length): 32.714
Average program size in population (points): 44.732
Average percent parens in population: 0.253
Minimum age in population: 27.30015563964844
Maximum age in population: 32.3543872833252
Average age in population: 30.41095274734497
Median age in population: 30.48778438568115
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7579372
--- Timings ---
Current time: 1559583522451 milliseconds
Total Time:          61.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.9 seconds, 71.4%
Fitness Testing:     10.7 seconds, 17.5%
Report:               6.7 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_pop boolean_dup in4 boolean_rot boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range () print_exec (integer_inc) in4 boolean_eq boolean_empty boolean_stackdepth integer_gte integer_fromboolean integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_yankdup integer_yank boolean_and print_exec (in4 boolean_yank)) exec_rot (exec_do*range (integer_gte exec_stackdepth exec_do*while ())) () ())
Lexicase best errors: [1 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_pop boolean_dup in4 boolean_rot boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range () print_exec (integer_inc) in4 boolean_eq boolean_empty boolean_stackdepth integer_gte integer_fromboolean integer_dec integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_yankdup integer_yank boolean_and print_exec (in4 boolean_yank)) exec_rot (exec_do*range (integer_gte exec_stackdepth exec_do*while ())) () ())
Zero cases best errors: [1 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (191 251 494 935 1 251 251 190 1 190)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (191 251 494 935 1 251 251 190 1 190)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove})
Best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap integer_lt boolean_not exec_shove (integer_swap exec_do*while (exec_yank exec_do*count (integer_shove)) in2 exec_while (boolean_rot boolean_dup integer_min integer_dec exec_eq integer_empty boolean_or exec_empty exec_stackdepth) integer_mult integer_shove))
Errors: [0 1 1 0 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 34
Size: 39
Percent parens: 0.128
--- Population Statistics ---
Average total errors in population: 7.245
Median total errors in population: 8
Error averages by case: (0.809 0.749 0.506 0.065 0.999 0.749 0.749 0.81 0.999 0.81)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.668
Average program size in population (points): 37.695
Average percent parens in population: 0.243
Minimum age in population: 28.43572998046875
Maximum age in population: 33.98363924026489
Average age in population: 31.8621803894043
Median age in population: 31.90786695480347
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7870235
--- Timings ---
Current time: 1559583524724 milliseconds
Total Time:          63.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.7 seconds, 71.6%
Fitness Testing:     11.1 seconds, 17.4%
Report:               6.9 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y})
Lexicase best program: (integer_pop boolean_or integer_yank in2 print_integer exec_y (integer_dup integer_flush) integer_lte in3 boolean_dup integer_swap exec_when (exec_do*count (exec_rot (exec_y ()) () ())))
Lexicase best errors: [1 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 24
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y})
Zero cases best program: (integer_pop boolean_or integer_yank in2 print_integer exec_y (integer_dup integer_flush) integer_lte in3 boolean_dup integer_swap exec_when (exec_do*count (exec_rot (exec_y ()) () ())))
Zero cases best errors: [1 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 24
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 943 288 288 325 287 107 287 944 947)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (223 943 288 288 325 287 107 287 944 947)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt})
Best program: (integer_lt integer_flush integer_empty integer_yank in2 print_integer integer_lte integer_dup exec_dup_items integer_lte exec_if (exec_y_when_autoconstructing () integer_swap exec_when (integer_max exec_rot (exec_y () in4 exec_yankdup boolean_swap boolean_and boolean_dup exec_y (integer_lt)) () ())) ())
Errors: [1 0 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 5.361
Median total errors in population: 6
Error averages by case: (0.777 0.057 0.712 0.712 0.675 0.713 0.893 0.713 0.056 0.053)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.567
Average program size in population (points): 38.089
Average percent parens in population: 0.230
Minimum age in population: 30.58332824707031
Maximum age in population: 35.5172746181488
Average age in population: 33.52806943368912
Median age in population: 33.53176176548004
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8165255
--- Timings ---
Current time: 1559583527487 milliseconds
Total Time:          66.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.6 seconds, 71.9%
Fitness Testing:     11.4 seconds, 17.3%
Report:               7.1 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_lt integer_stackdepth integer_empty exec_do*times (in2 print_integer) integer_lt integer_dup)
Lexicase best errors: [0 0 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 10
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_lt integer_stackdepth integer_empty exec_do*times (in2 print_integer) integer_lt integer_dup)
Zero cases best errors: [0 0 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 10
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (563 812 123 563 561 121 123 128 561 121)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (563 812 123 563 561 121 123 128 561 121)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and})
Best program: (integer_pop integer_lt integer_yank in2 print_integer exec_y (integer_dup integer_flush integer_dec boolean_flush) integer_mult boolean_and)
Errors: [0 0 1 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 12
Size: 14
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.324
Median total errors in population: 5
Error averages by case: (0.437 0.188 0.877 0.437 0.439 0.879 0.877 0.872 0.439 0.879)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.39
Average program size in population (points): 37.632
Average percent parens in population: 0.226
Minimum age in population: 32.4783616065979
Maximum age in population: 36.88105726242065
Average age in population: 34.9987346572876
Median age in population: 35.07416760921478
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 8528652
--- Timings ---
Current time: 1559583530835 milliseconds
Total Time:          69.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.9 seconds, 71.9%
Fitness Testing:     11.8 seconds, 17.1%
Report:               7.6 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range (print_exec () integer_inc) integer_max exec_rot (exec_y () exec_y_when_autoconstructing ()) () ())
Lexicase best errors: [1 0 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range (print_exec () integer_inc) integer_max exec_rot (exec_y () exec_y_when_autoconstructing ()) () ())
Zero cases best errors: [1 0 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 116 226 116 194 116 116 116 226 194)
Population mean number of elite cases: 1.61
Count of perfect (error zero) individuals by case: (194 116 226 116 194 116 116 116 226 194)
Population mean number of perfect (error zero) cases: 1.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Best program: (integer_lt integer_flush integer_empty integer_pop boolean_dup in4 print_integer integer_lt integer_dup integer_flush integer_lte in3 boolean_dup integer_swap exec_when ())
Errors: [1 0 1 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 17
Percent parens: 0.118
--- Population Statistics ---
Average total errors in population: 8.386
Median total errors in population: 8
Error averages by case: (0.806 0.884 0.774 0.884 0.806 0.884 0.884 0.884 0.774 0.806)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.895
Average program size in population (points): 34.056
Average percent parens in population: 0.219
Minimum age in population: 33.4783616065979
Maximum age in population: 38.35115766525269
Average age in population: 36.47451931768656
Median age in population: 36.56293338537216
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 8833313
--- Timings ---
Current time: 1559583533521 milliseconds
Total Time:          72.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.1 seconds, 71.7%
Fitness Testing:     12.2 seconds, 16.8%
Report:               8.2 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))))
Lexicase best errors: [1 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))))
Zero cases best errors: [1 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (475 1 1 1 935 936 275 276 474 1)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (475 1 1 1 935 936 275 276 474 1)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))))
Errors: [1 0 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 6.625
Median total errors in population: 6
Error averages by case: (0.525 0.999 0.999 0.999 0.065 0.064 0.725 0.724 0.526 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.861
Average program size in population (points): 32.868
Average percent parens in population: 0.223
Minimum age in population: 35.16826868057251
Maximum age in population: 39.84314662218094
Average age in population: 38.02288853025436
Median age in population: 38.08446551859379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.504
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 8994448
--- Timings ---
Current time: 1559583536197 milliseconds
Total Time:          74.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.1 seconds, 72.2%
Fitness Testing:     12.4 seconds, 16.6%
Report:               8.4 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))))
Lexicase best errors: [0 0 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))))
Zero cases best errors: [0 0 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (707 516 516 957 249 249 1000 516 1000 516)
Population mean number of elite cases: 6.23
Count of perfect (error zero) individuals by case: (707 516 516 957 249 249 0 516 0 516)
Population mean number of perfect (error zero) cases: 4.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_max boolean_yank) (integer_dup_times boolean_dup)))))
Errors: [0 0 0 0 1 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 5.774
Median total errors in population: 4
Error averages by case: (0.293 0.484 0.484 0.043 0.751 0.751 1.0 0.484 1.0 0.484)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 30.573
Average program size in population (points): 38.998
Average percent parens in population: 0.209
Minimum age in population: 36.72147846221924
Maximum age in population: 41.24546347558498
Average age in population: 39.38698114207387
Median age in population: 39.52749845385551
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 311
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 330
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 9474865
--- Timings ---
Current time: 1559583539302 milliseconds
Total Time:          78.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.1 seconds, 71.9%
Fitness Testing:     13.0 seconds, 16.7%
Report:               8.8 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))))
Lexicase best errors: [0 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))))
Zero cases best errors: [0 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (676 676 676 676 275 275 1000 676 676 1000)
Population mean number of elite cases: 6.61
Count of perfect (error zero) individuals by case: (676 676 676 676 275 275 0 676 676 0)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () boolean_shove exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup))))
Errors: [0 0 0 0 1 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 35
Size: 43
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 5.394
Median total errors in population: 4
Error averages by case: (0.324 0.324 0.324 0.324 0.725 0.725 1.0 0.324 0.324 1.0)
Error minima by case: (0 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 32.863
Average program size in population (points): 42.049
Average percent parens in population: 0.213
Minimum age in population: 38.88402283191681
Maximum age in population: 42.47577732056379
Average age in population: 40.83805558691174
Median age in population: 40.86068530380726
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 225
Genome diversity (% unique genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 251
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10073912
--- Timings ---
Current time: 1559583542252 milliseconds
Total Time:          81.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.9 seconds, 71.5%
Fitness Testing:     13.7 seconds, 17.0%
Report:               9.3 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))))
Lexicase best errors: [0 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))))
Zero cases best errors: [0 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (708 708 708 1000 234 234 708 708 234 708)
Population mean number of elite cases: 5.95
Count of perfect (error zero) individuals by case: (708 708 708 0 234 234 708 708 234 708)
Population mean number of perfect (error zero) cases: 4.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))))
Errors: [0 0 0 1 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 5.05
Median total errors in population: 4
Error averages by case: (0.292 0.292 0.292 1.0 0.766 0.766 0.292 0.292 0.766 0.292)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 32.681
Average program size in population (points): 41.675
Average percent parens in population: 0.211
Minimum age in population: 40.25375157594681
Maximum age in population: 44.16449989750981
Average age in population: 42.30013215912133
Median age in population: 42.34083173051476
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 10691267
--- Timings ---
Current time: 1559583545020 milliseconds
Total Time:          83.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.4 seconds, 70.9%
Fitness Testing:     14.5 seconds, 17.3%
Report:               9.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop boolean_invert_first_then_and boolean_yankdup integer_inc) (boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))))
Lexicase best errors: [0 0 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop boolean_invert_first_then_and boolean_yankdup integer_inc) (boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))))
Zero cases best errors: [0 0 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (646 646 1000 646 299 646 300 1000 945 1000)
Population mean number of elite cases: 7.13
Count of perfect (error zero) individuals by case: (646 646 0 646 299 646 300 0 945 0)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Best program: (integer_lt integer_pop boolean_dup in4 integer_max integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (exec_pop (boolean_yank exec_y () exec_dup (boolean_invert_first_then_and exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_gt boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup))))))
Errors: [0 0 1 0 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 35
Size: 45
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.872
Median total errors in population: 5
Error averages by case: (0.354 0.354 1.0 0.354 0.701 0.354 0.7 1.0 0.055 1.0)
Error minima by case: (0 0 1 0 0 0 0 1 0 1)
Average genome size in population (length): 32.476
Average program size in population (points): 41.674
Average percent parens in population: 0.217
Minimum age in population: 41.51403892040253
Maximum age in population: 45.75111303851008
Average age in population: 43.8103470429033
Median age in population: 43.8759076083079
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 11273950
--- Timings ---
Current time: 1559583547408 milliseconds
Total Time:          86.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.0 seconds, 70.5%
Fitness Testing:     15.2 seconds, 17.6%
Report:              10.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 2, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 2, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_pop boolean_dup in4 integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range () print_exec (integer_inc) in4 boolean_eq boolean_empty boolean_stackdepth print_boolean integer_fromboolean integer_rot integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_yankdup boolean_dup_items))
Lexicase best errors: [0 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 2, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 2, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_pop boolean_dup in4 integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range () print_exec (integer_inc) in4 boolean_eq boolean_empty boolean_stackdepth print_boolean integer_fromboolean integer_rot integer_mult exec_yankdup integer_lt exec_y_when_autoconstructing (boolean_yankdup boolean_dup_items))
Zero cases best errors: [0 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (312 635 635 950 1000 312 635 312 1000 312)
Population mean number of elite cases: 6.10
Count of perfect (error zero) individuals by case: (312 635 635 950 0 312 635 312 0 312)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer})
Best program: (boolean_eq exec_k (boolean_yank) () exec_yankdup in4 integer_gte print_integer)
Errors: [0 1 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 7
Size: 10
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 5.897
Median total errors in population: 6
Error averages by case: (0.688 0.365 0.365 0.05 1.0 0.688 0.365 0.688 1.0 0.688)
Error minima by case: (0 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 32.439
Average program size in population (points): 41.681
Average percent parens in population: 0.217
Minimum age in population: 42.51403892040253
Maximum age in population: 47.19172486569732
Average age in population: 45.28296697953995
Median age in population: 45.37041829759255
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 11837922
--- Timings ---
Current time: 1559583549969 milliseconds
Total Time:          89.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.7 seconds, 70.4%
Fitness Testing:     15.9 seconds, 17.8%
Report:              10.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 3, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_do*count} {:close 1, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte})
Lexicase best program: (exec_dup_items in4 exec_k (print_integer) (exec_flush exec_do*range (in1) integer_max boolean_eq) print_integer exec_flush boolean_eq exec_y () exec_do*range (print_exec () integer_fromboolean) in4 integer_swap exec_empty integer_swap boolean_xor exec_y_when_autoconstructing (print_integer exec_shove (print_boolean)) in3 exec_do*while (integer_swap integer_rot integer_sub exec_do*count ()) integer_dec in2 exec_while (boolean_rot integer_gte))
Lexicase best errors: [0 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_exec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 3, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_do*count} {:close 1, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte})
Zero cases best program: (exec_dup_items in4 exec_k (print_integer) (exec_flush exec_do*range (in1) integer_max boolean_eq) print_integer exec_flush boolean_eq exec_y () exec_do*range (print_exec () integer_fromboolean) in4 integer_swap exec_empty integer_swap boolean_xor exec_y_when_autoconstructing (print_integer exec_shove (print_boolean)) in3 exec_do*while (integer_swap integer_rot integer_sub exec_do*count ()) integer_dec in2 exec_while (boolean_rot integer_gte))
Zero cases best errors: [0 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (558 943 557 558 385 385 557 1000 384 941)
Population mean number of elite cases: 6.27
Count of perfect (error zero) individuals by case: (558 943 557 558 385 385 557 0 384 941)
Population mean number of perfect (error zero) cases: 5.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 2, :instruction integer_max} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 2, :instruction print_exec} {:close 0, :instruction exec_y} {:close 0, :instruction print_exec} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_395} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot})
Best program: (boolean_yank integer_eq in4 boolean_eq integer_rot boolean_not integer_yankdup in3 integer_yankdup boolean_yankdup exec_while () print_integer integer_max boolean_invert_second_then_and integer_max exec_flush boolean_yankdup exec_yankdup exec_do*count (boolean_dup_items integer_empty integer_min print_exec ()) exec_y (print_exec (exec_shove () in4 boolean_eq) integer_pop boolean_stackdepth tagged_395 integer_fromboolean integer_dup_times integer_mult integer_dup_items integer_lt exec_y_when_autoconstructing (boolean_and boolean_flush exec_yankdup print_exec (in4 boolean_yank)) exec_rot (exec_do*times (integer_flush integer_lt) exec_eq integer_rot) () ()))
Errors: [0 0 0 0 1 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 49
Size: 62
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 4.732
Median total errors in population: 4
Error averages by case: (0.442 0.057 0.443 0.442 0.615 0.615 0.443 1.0 0.616 0.059)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 31.515
Average program size in population (points): 41.38
Average percent parens in population: 0.233
Minimum age in population: 44.25092427432537
Maximum age in population: 48.7118679615669
Average age in population: 46.81034069068776
Median age in population: 46.91161828208715
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 12255562
--- Timings ---
Current time: 1559583552415 milliseconds
Total Time:          91.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.5 seconds, 70.5%
Fitness Testing:     16.4 seconds, 17.9%
Report:              10.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_k_when_autoconstructing () (print_exec (integer_inc) in4 boolean_eq) boolean_empty boolean_stackdepth print_boolean integer_fromboolean)
Lexicase best errors: [0 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 23
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_k_when_autoconstructing () (print_exec (integer_inc) in4 boolean_eq) boolean_empty boolean_stackdepth print_boolean integer_fromboolean)
Zero cases best errors: [0 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 23
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (543 951 543 543 406 406 543 1000 1000 543)
Population mean number of elite cases: 6.48
Count of perfect (error zero) individuals by case: (543 951 543 543 406 406 543 0 0 543)
Population mean number of perfect (error zero) cases: 4.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 1, :instruction integer_swap} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Best program: (integer_pop boolean_dup in4 integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () integer_swap print_exec (integer_inc) in4 integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup))) () ()))))
Errors: [0 0 0 0 1 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 42
Size: 58
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 5.522
Median total errors in population: 4
Error averages by case: (0.457 0.049 0.457 0.457 0.594 0.594 0.457 1.0 1.0 0.457)
Error minima by case: (0 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 31.247
Average program size in population (points): 40.992
Average percent parens in population: 0.231
Minimum age in population: 45.25092427432537
Maximum age in population: 50.35706791933626
Average age in population: 48.3266433420938
Median age in population: 48.3848404227756
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 12673471
--- Timings ---
Current time: 1559583554817 milliseconds
Total Time:          93.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.3 seconds, 70.6%
Fitness Testing:     16.9 seconds, 18.0%
Report:              10.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_yank boolean_dup in4 integer_sub boolean_yank print_integer boolean_or boolean_or exec_k () (integer_dup) exec_swap (boolean_and exec_yankdup boolean_swap boolean_and boolean_dup exec_y (exec_when (in2) integer_stackdepth exec_y_when_autoconstructing (exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))) ())
Lexicase best errors: [1 1 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_yank boolean_dup in4 integer_sub boolean_yank print_integer boolean_or boolean_or exec_k () (integer_dup) exec_swap (boolean_and exec_yankdup boolean_swap boolean_and boolean_dup exec_y (exec_when (in2) integer_stackdepth exec_y_when_autoconstructing (exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_yank) (integer_dup_times boolean_dup)))) ())
Zero cases best errors: [1 1 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (278 1000 962 1000 962 681 1000 1000 681 278)
Population mean number of elite cases: 7.84
Count of perfect (error zero) individuals by case: (278 0 962 0 962 681 0 0 681 278)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot})
Best program: (boolean_yank exec_pop (integer_mult boolean_eq integer_rot integer_yank) in2 print_integer integer_lt integer_dup integer_flush integer_lte integer_stackdepth integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () boolean_dup exec_yankdup exec_do*range (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) () (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_invert_first_then_and integer_lt integer_gte exec_y () exec_swap (exec_do*count (exec_s (exec_rot () () ()) () ())) ()))))
Errors: [0 1 0 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 40
Size: 59
Percent parens: 0.322
--- Population Statistics ---
Average total errors in population: 6.158
Median total errors in population: 6
Error averages by case: (0.722 1.0 0.038 1.0 0.038 0.319 1.0 1.0 0.319 0.722)
Error minima by case: (0 1 0 1 0 0 1 1 0 0)
Average genome size in population (length): 30.543
Average program size in population (points): 40.507
Average percent parens in population: 0.237
Minimum age in population: 46.25092427432537
Maximum age in population: 51.759039962315
Average age in population: 49.78047385317052
Median age in population: 49.88735587103292
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 13025647
--- Timings ---
Current time: 1559583557440 milliseconds
Total Time:          96.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.0 seconds, 70.7%
Fitness Testing:     17.3 seconds, 18.0%
Report:              10.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_pop boolean_dup in4 boolean_yank boolean_yank print_boolean integer_lt integer_rot boolean_not integer_yankdup in3 integer_yankdup boolean_yankdup exec_while () print_integer exec_y_when_autoconstructing ())
Lexicase best errors: [0 0 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 19
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_pop boolean_dup in4 boolean_yank boolean_yank print_boolean integer_lt integer_rot boolean_not integer_yankdup in3 integer_yankdup boolean_yankdup exec_while () print_integer exec_y_when_autoconstructing ())
Zero cases best errors: [0 0 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 19
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (475 934 1 476 456 456 456 2 476 476)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (475 934 1 476 456 456 456 2 476 476)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop})
Best program: (integer_lt integer_flush integer_empty in4 exec_k (print_integer in2) (print_integer integer_lt) integer_dup integer_flush integer_lte in3 boolean_dup integer_swap exec_when (integer_max exec_rot (integer_max) (exec_eq) (exec_rot (exec_dup_items integer_flush integer_lt) (exec_eq integer_rot boolean_dup) (exec_s_when_autoconstructing (integer_flush integer_max boolean_invert_first_then_and) (boolean_flush exec_noop) ()))))
Errors: [0 0 1 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 46
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 5.792
Median total errors in population: 6
Error averages by case: (0.525 0.066 0.999 0.524 0.544 0.544 0.544 0.998 0.524 0.524)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.171
Average program size in population (points): 39.306
Average percent parens in population: 0.222
Minimum age in population: 47.58643281459808
Maximum age in population: 53.27160698658554
Average age in population: 51.31031620040961
Median age in population: 51.35600716256886
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 13465769
--- Timings ---
Current time: 1559583559999 milliseconds
Total Time:          99.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.8 seconds, 70.5%
Fitness Testing:     17.9 seconds, 18.0%
Report:              11.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_pop (boolean_dup in4 boolean_yank boolean_yank integer_mult integer_lt integer_rot boolean_not) integer_yankdup in3 integer_yankdup exec_do*while (exec_while () print_integer) exec_y_when_autoconstructing ())
Lexicase best errors: [0 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_pop (boolean_dup in4 boolean_yank boolean_yank integer_mult integer_lt integer_rot boolean_not) integer_yankdup in3 integer_yankdup exec_do*while (exec_while () print_integer) exec_y_when_autoconstructing ())
Zero cases best errors: [0 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 490 428 292 1000 1000 199 292 919 920)
Population mean number of elite cases: 5.74
Count of perfect (error zero) individuals by case: (199 490 428 292 0 0 199 292 919 920)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 2, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte})
Best program: (exec_yankdup boolean_yankdup integer_lt exec_do*range (print_boolean in4 integer_min boolean_yank integer_yank) in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 boolean_yankdup integer_rot integer_lte)
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 21
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 6.261
Median total errors in population: 7
Error averages by case: (0.801 0.51 0.572 0.708 1.0 1.0 0.801 0.708 0.081 0.08)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 26.519
Average program size in population (points): 34.888
Average percent parens in population: 0.233
Minimum age in population: 48.58643281459808
Maximum age in population: 54.81954719606438
Average age in population: 52.8573921271227
Median age in population: 52.95503625593847
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 13800217
--- Timings ---
Current time: 1559583562705 milliseconds
Total Time:         101.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.0 seconds, 70.7%
Fitness Testing:     18.3 seconds, 18.0%
Report:              11.4 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (exec_y_when_autoconstructing (boolean_yankdup boolean_dup_items)))
Lexicase best errors: [1 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (exec_y_when_autoconstructing (boolean_yankdup boolean_dup_items)))
Zero cases best errors: [1 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (344 431 431 431 158 431 431 158 431 158)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (344 431 431 431 158 431 431 158 431 158)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_dup_times (integer_stackdepth exec_y_when_autoconstructing () exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and boolean_yankdup integer_inc boolean_rot integer_min boolean_invert_first_then_and) (integer_dup_times boolean_dup)))))
Errors: [1 0 0 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 6.596
Median total errors in population: 7
Error averages by case: (0.656 0.569 0.569 0.569 0.842 0.569 0.569 0.842 0.569 0.842)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.405
Average program size in population (points): 31.314
Average percent parens in population: 0.216
Minimum age in population: 49.58643281459808
Maximum age in population: 56.12468339038605
Average age in population: 54.32652502278503
Median age in population: 54.33734255652962
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 253
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 14173182
--- Timings ---
Current time: 1559583565608 milliseconds
Total Time:         104.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.9 seconds, 70.8%
Fitness Testing:     18.7 seconds, 18.0%
Report:              11.6 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range (print_exec (integer_inc in4 boolean_eq) boolean_empty boolean_stackdepth print_boolean integer_fromboolean))
Lexicase best errors: [1 1 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot boolean_dup in4 integer_max boolean_eq print_integer exec_flush integer_min exec_y () exec_do*range (print_exec (integer_inc in4 boolean_eq) boolean_empty boolean_stackdepth print_boolean integer_fromboolean))
Zero cases best errors: [1 1 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (572 572 94 572 267 94 267 267 932 267)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (572 572 94 572 267 94 267 267 932 267)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_pop () boolean_dup in4 boolean_yank boolean_yank integer_mult integer_lt integer_rot boolean_not integer_yankdup in3 integer_yankdup exec_do*while (exec_while () print_integer exec_y_when_autoconstructing ()))
Errors: [1 1 1 1 0 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.096
Median total errors in population: 6
Error averages by case: (0.428 0.428 0.906 0.428 0.733 0.906 0.733 0.733 0.068 0.733)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.221
Average program size in population (points): 34.747
Average percent parens in population: 0.205
Minimum age in population: 52.20644163782708
Maximum age in population: 57.60093663528824
Average age in population: 55.76365668195536
Median age in population: 55.82889639947462
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 14613251
--- Timings ---
Current time: 1559583568093 milliseconds
Total Time:         107.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.7 seconds, 70.7%
Fitness Testing:     19.3 seconds, 18.0%
Report:              12.1 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 1, :instruction tag_boolean_885} {:close 2, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush tag_boolean_885 exec_y () exec_do*range () print_exec (integer_inc) exec_noop boolean_eq boolean_empty boolean_stackdepth print_boolean integer_fromboolean integer_dec integer_mult print_exec (integer_lt exec_y_when_autoconstructing (boolean_yankdup)))
Lexicase best errors: [1 1 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 1, :instruction tag_boolean_885} {:close 2, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (integer_pop boolean_dup in4 integer_max boolean_eq print_integer exec_flush tag_boolean_885 exec_y () exec_do*range () print_exec (integer_inc) exec_noop boolean_eq boolean_empty boolean_stackdepth print_boolean integer_fromboolean integer_dec integer_mult print_exec (integer_lt exec_y_when_autoconstructing (boolean_yankdup)))
Zero cases best errors: [1 1 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 312 418 217 948 419 418 1000 419 419)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (1 312 418 217 948 419 418 0 419 419)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction tagged_733})
Best program: (in3 exec_do*range (integer_pop boolean_dup in4 integer_max boolean_eq) print_integer integer_eq integer_min print_integer exec_flush integer_swap exec_empty integer_swap boolean_xor tagged_733)
Errors: [1 1 0 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 19
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 6.429
Median total errors in population: 8
Error averages by case: (0.999 0.688 0.582 0.783 0.052 0.581 0.582 1.0 0.581 0.581)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 25.305
Average program size in population (points): 32.854
Average percent parens in population: 0.220
Minimum age in population: 53.20644163782708
Maximum age in population: 59.09300103161877
Average age in population: 57.18381350851892
Median age in population: 57.27618775457086
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 14909820
--- Timings ---
Current time: 1559583570621 milliseconds
Total Time:         109.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.8 seconds, 70.9%
Fitness Testing:     19.7 seconds, 17.9%
Report:              12.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 2, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_items in4 integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (exec_do*range (integer_stackdepth exec_y_when_autoconstructing (exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and) ()))))
Lexicase best errors: [0 1 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 2, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_items in4 integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (exec_do*range (integer_stackdepth exec_y_when_autoconstructing (exec_rot (integer_swap exec_noop) (boolean_invert_first_then_and) ()))))
Zero cases best errors: [0 1 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (128 110 944 472 8 116 700 128 477 128)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (128 110 944 472 8 116 700 128 477 128)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 integer_sub integer_swap exec_when (exec_dup_items boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_stackdepth integer_flush integer_lt integer_dec boolean_dup exec_dup_times (boolean_invert_first_then_and) in4 boolean_eq boolean_empty integer_inc boolean_rot) integer_dup_times boolean_yank) integer_dup_times boolean_dup))
Errors: [0 1 0 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 45
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 6.789
Median total errors in population: 7
Error averages by case: (0.872 0.89 0.056 0.528 0.992 0.884 0.3 0.872 0.523 0.872)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.488
Average program size in population (points): 28.513
Average percent parens in population: 0.246
Minimum age in population: 54.20644163782708
Maximum age in population: 60.5316005172208
Average age in population: 58.87442541683904
Median age in population: 58.95025929890471
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.525
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 15135586
--- Timings ---
Current time: 1559583573403 milliseconds
Total Time:         112.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.8 seconds, 71.1%
Fitness Testing:     20.0 seconds, 17.8%
Report:              12.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: 2                  
Correct output: -48                 | Program output: 50                 
Correct output: 61                  | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: 34                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 44                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 59                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 4                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 18                 
Correct output: 2                   | Program output: 56                 
Correct output: 8                   | Program output: 89                 
Correct output: 49                  | Program output: 99                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 57                 
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 86                 
Correct output: 0                   | Program output: 70                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: 70                 
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 34                 
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: 67                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -5                 
Correct output: -83                 | Program output: 82                 
Correct output: 19                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 3                  
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -25                
Correct output: 3                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 46                 
Correct output: -89                 | Program output: 70                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: 79                 
Correct output: -83                 | Program output: 48                 
Correct output: -68                 | Program output: 6                  
Correct output: -56                 | Program output: 51                 
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -48                
Correct output: -98                 | Program output: 42                 
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: 48                 
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 71                 
Correct output: -62                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_frominteger boolean_dup in4 in1 in3 in4 boolean_yank boolean_yank integer_mult integer_lt integer_rot boolean_not integer_yankdup in3 integer_yankdup exec_do*while (exec_while () print_integer) boolean_invert_second_then_and)
Lexicase best errors: [1 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_frominteger boolean_dup in4 in1 in3 in4 boolean_yank boolean_yank integer_mult integer_lt integer_rot boolean_not integer_yankdup in3 integer_yankdup exec_do*while (exec_while () print_integer) boolean_invert_second_then_and)
Zero cases best errors: [1 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (348 167 293 190 348 170 190 13 348 7)
Population mean number of elite cases: 2.07
Count of perfect (error zero) individuals by case: (348 167 293 190 348 170 190 13 348 7)
Population mean number of perfect (error zero) cases: 2.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_frominteger boolean_dup in4 in1 integer_yank integer_yankdup exec_do*while (exec_while () integer_yankdup in3) integer_yankdup exec_do*while (exec_while () print_integer) exec_y_when_autoconstructing ())
Errors: [1 0 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 15
Size: 21
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.926
Median total errors in population: 7
Error averages by case: (0.652 0.833 0.707 0.81 0.652 0.83 0.81 0.987 0.652 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.896
Average program size in population (points): 24.445
Average percent parens in population: 0.233
Minimum age in population: 57.37601664305112
Maximum age in population: 62.3543689675098
Average age in population: 60.67578647069441
Median age in population: 60.82572740910518
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.402
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.369
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 15417566
--- Timings ---
Current time: 1559583575870 milliseconds
Total Time:         115.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.8 seconds, 71.1%
Fitness Testing:     20.3 seconds, 17.7%
Report:              12.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_xor} {:close 0, :instruction tagged_768} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_711} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 print_boolean in3 integer_sub boolean_xor tagged_768 boolean_yankdup exec_dup_items tag_exec_711 (integer_swap exec_noop))
Lexicase best errors: [0 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.080
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_xor} {:close 0, :instruction tagged_768} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_711} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_dup integer_flush integer_lte in3 print_boolean in3 integer_sub boolean_xor tagged_768 boolean_yankdup exec_dup_items tag_exec_711 (integer_swap exec_noop))
Zero cases best errors: [0 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.080
--- Lexicase Population Statistics ---
Count of elite individuals by case: (302 448 298 449 448 298 186 448 298 298)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (302 448 298 449 448 298 186 448 298 298)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup})
Best program: (boolean_yank boolean_yank integer_mult exec_dup_items integer_dec integer_yank in2 print_integer integer_lt integer_dup)
Errors: [0 1 0 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 10
Size: 11
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 6.527
Median total errors in population: 6
Error averages by case: (0.698 0.552 0.702 0.551 0.552 0.702 0.814 0.552 0.702 0.702)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.257
Average program size in population (points): 23.721
Average percent parens in population: 0.235
Minimum age in population: 58.8486100253067
Maximum age in population: 64.11909960215871
Average age in population: 62.50060679660636
Median age in population: 62.64978608566071
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.414
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.38
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 15679158
--- Timings ---
Current time: 1559583578616 milliseconds
Total Time:         117.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.1 seconds, 71.4%
Fitness Testing:     20.7 seconds, 17.5%
Report:              12.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 1, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_yankdup boolean_yankdup integer_lt exec_do*range (print_boolean in4 integer_min boolean_yank integer_yank in2) print_integer integer_lt integer_dup integer_flush integer_lte in3 exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth in4 boolean_yank)) exec_rot (exec_do*range (integer_gte exec_stackdepth exec_do*while ())) () ()))
Lexicase best errors: [0 1 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 1, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_yankdup boolean_yankdup integer_lt exec_do*range (print_boolean in4 integer_min boolean_yank integer_yank in2) print_integer integer_lt integer_dup integer_flush integer_lte in3 exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth in4 boolean_yank)) exec_rot (exec_do*range (integer_gte exec_stackdepth exec_do*while ())) () ()))
Zero cases best errors: [0 1 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (475 385 474 384 474 474 474 3 385 383)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (475 385 474 384 474 474 474 3 385 383)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_xor})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_max integer_flush integer_lte in3 integer_sub integer_swap exec_when (integer_max boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (exec_flush) boolean_eq exec_y ()) exec_do*range (integer_div) integer_fromboolean) in4 integer_swap exec_empty boolean_dup_items boolean_xor)
Errors: [0 1 0 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 40
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 6.089
Median total errors in population: 6
Error averages by case: (0.525 0.615 0.526 0.616 0.526 0.526 0.526 0.997 0.615 0.617)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.8
Average program size in population (points): 25.219
Average percent parens in population: 0.217
Minimum age in population: 60.32115608823005
Maximum age in population: 65.83925948665456
Average age in population: 63.90545516199328
Median age in population: 63.97763428332939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.489
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 16009193
--- Timings ---
Current time: 1559583581327 milliseconds
Total Time:         120.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.9 seconds, 71.6%
Fitness Testing:     21.1 seconds, 17.5%
Report:              13.0 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: 51                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 93                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 87                 
Correct output: 13                  | Program output: 93                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -38                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: 59                 
Correct output: -9                  | Program output: -4                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -1                 
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: 25                 
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -31                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: 40                 
Correct output: -88                 | Program output: 21                 
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -66                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 21                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 64                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: 24                 
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -21                
Correct output: 25                  | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup})
Lexicase best program: (boolean_eq boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_swap exec_when (integer_max integer_gte integer_fromboolean integer_dec integer_mult) exec_yankdup)
Lexicase best errors: [1 0 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.118
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup})
Zero cases best program: (boolean_eq boolean_eq integer_rot integer_yank in2 print_integer integer_lt integer_swap exec_when (integer_max integer_gte integer_fromboolean integer_dec integer_mult) exec_yankdup)
Zero cases best errors: [1 0 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (336 454 5 336 931 4 454 454 5 628)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (336 454 5 336 931 4 454 454 5 628)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank in2 print_integer integer_lt boolean_yankdup integer_flush integer_lte in3 integer_sub integer_swap exec_when (exec_dup_items boolean_yank exec_y () exec_dup (exec_yankdup exec_do*range (integer_stackdepth exec_stackdepth integer_flush integer_lt integer_dec boolean_dup exec_dup_times (boolean_invert_first_then_and) in4 boolean_eq boolean_empty integer_yankdup exec_if (integer_dup_times boolean_yank) (exec_noop boolean_dup)))))
Errors: [1 0 1 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 47
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 6.393
Median total errors in population: 7
Error averages by case: (0.664 0.546 0.995 0.664 0.069 0.996 0.546 0.546 0.995 0.372)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.242
Average program size in population (points): 24.711
Average percent parens in population: 0.226
Minimum age in population: 62.18908150415973
Maximum age in population: 67.54913415926171
Average age in population: 65.55636752547295
Median age in population: 65.68039344600413
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 16336126
--- Timings ---
Current time: 1559583584202 milliseconds
Total Time:         123.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.0 seconds, 71.5%
Fitness Testing:     21.4 seconds, 17.4%
Report:              13.5 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 495
Test mean error for best: 0.49500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: 10                 
Correct output: -72                 | Program output: 75                 
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 7                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: 96                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: 59                 
Correct output: -89                 | Program output: 17                 
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 79                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: 90                 
Correct output: -94                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 integer_yankdup exec_do*while (exec_while () print_integer) boolean_invert_second_then_and)
Lexicase best errors: [0 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 23
Percent parens: 0.130
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 integer_yankdup exec_do*while (exec_while () print_integer) boolean_invert_second_then_and)
Zero cases best errors: [0 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 23
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 185 117 235 233 401 302 402 402 234)
Population mean number of elite cases: 2.75
Count of perfect (error zero) individuals by case: (235 185 117 235 233 401 302 402 402 234)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 integer_yankdup exec_do*while (exec_while () print_integer) boolean_invert_second_then_and)
Errors: [0 1 1 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 20
Size: 23
Percent parens: 0.130
--- Population Statistics ---
Average total errors in population: 7.254
Median total errors in population: 7
Error averages by case: (0.765 0.815 0.883 0.765 0.767 0.599 0.698 0.598 0.598 0.766)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.929
Average program size in population (points): 24.238
Average percent parens in population: 0.225
Minimum age in population: 63.51156043749074
Maximum age in population: 68.97908206956856
Average age in population: 67.12131062314234
Median age in population: 67.18597753092291
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.422
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 16647794
--- Timings ---
Current time: 1559583586592 milliseconds
Total Time:         125.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.8 seconds, 71.5%
Fitness Testing:     21.8 seconds, 17.4%
Report:              13.9 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 55                 
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 93                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 55                 
Correct output: 39                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 50                 
Correct output: 0                   | Program output: 50                 
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -1                 
Correct output: -52                 | Program output: -11                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: 16                 
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -35                
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 25                 
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: 40                 
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -19                 | Program output: 41                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 67                 
Correct output: -100                | Program output: -52                
Correct output: -99                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank boolean_eq in3 integer_yankdup exec_do*while (exec_while () print_integer) boolean_invert_second_then_and)
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 23
Percent parens: 0.130
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank boolean_eq in3 integer_yankdup exec_do*while (exec_while () print_integer) boolean_invert_second_then_and)
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 23
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 633 642 642 641 642 946 142 642 940)
Population mean number of elite cases: 5.89
Count of perfect (error zero) individuals by case: (15 633 642 642 641 642 946 142 642 940)
Population mean number of perfect (error zero) cases: 5.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank exec_while () print_integer exec_y_when_autoconstructing ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 4.115
Median total errors in population: 2
Error averages by case: (0.985 0.367 0.358 0.358 0.359 0.358 0.054 0.858 0.358 0.06)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.918
Average program size in population (points): 21.875
Average percent parens in population: 0.189
Minimum age in population: 65.98976947445522
Maximum age in population: 70.52223728423508
Average age in population: 68.9657900809517
Median age in population: 69.00924806551484
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 497
Genome diversity (% unique genomes):	 0.282
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 534
Syntactic diversity (% unique Push programs):	 0.24
Total error diversity:				 0.009
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 16844862
--- Timings ---
Current time: 1559583589182 milliseconds
Total Time:         128.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.1 seconds, 71.8%
Fitness Testing:     22.1 seconds, 17.2%
Report:              14.1 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 339
Test mean error for best: 0.33900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -54                
Correct output: -72                 | Program output: -14                
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -37                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -3                 
Correct output: -52                 | Program output: -52                
Correct output: -73                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -75                
Correct output: -94                 | Program output: -3                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: -29                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -17                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: -20                
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -48                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -72                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 30                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -31                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 23
Percent parens: 0.087
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 23
Percent parens: 0.087
--- Lexicase Population Statistics ---
Count of elite individuals by case: (946 454 3 454 901 433 12 919 902 919)
Population mean number of elite cases: 5.94
Count of perfect (error zero) individuals by case: (946 454 3 454 901 433 12 919 902 919)
Population mean number of perfect (error zero) cases: 5.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 23
Percent parens: 0.087
--- Population Statistics ---
Average total errors in population: 4.057
Median total errors in population: 4
Error averages by case: (0.054 0.546 0.997 0.546 0.099 0.567 0.988 0.081 0.098 0.081)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.775
Average program size in population (points): 23.011
Average percent parens in population: 0.140
Minimum age in population: 69.43730120369048
Maximum age in population: 71.69310863865638
Average age in population: 70.24167134765418
Median age in population: 70.43730120369048
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 341
Genome diversity (% unique genomes):	 0.284
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 369
Syntactic diversity (% unique Push programs):	 0.246
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 17054417
--- Timings ---
Current time: 1559583591406 milliseconds
Total Time:         130.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.9 seconds, 72.0%
Fitness Testing:     22.3 seconds, 17.1%
Report:              14.2 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 339
Test mean error for best: 0.33900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -54                
Correct output: -72                 | Program output: -14                
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -37                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -3                 
Correct output: -52                 | Program output: -52                
Correct output: -73                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -75                
Correct output: -94                 | Program output: -3                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: -29                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -17                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: -20                
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -48                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -72                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 30                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -31                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 23
Percent parens: 0.087
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 23
Percent parens: 0.087
--- Lexicase Population Statistics ---
Count of elite individuals by case: (948 335 605 640 813 641 812 639 812 797)
Population mean number of elite cases: 7.04
Count of perfect (error zero) individuals by case: (948 335 605 640 813 641 812 639 812 797)
Population mean number of perfect (error zero) cases: 7.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 21
Size: 23
Percent parens: 0.087
--- Population Statistics ---
Average total errors in population: 2.958
Median total errors in population: 2
Error averages by case: (0.052 0.665 0.395 0.36 0.187 0.359 0.188 0.361 0.188 0.203)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.303
Average program size in population (points): 21.813
Average percent parens in population: 0.118
Minimum age in population: 70.43730120369048
Maximum age in population: 73.07620014315424
Average age in population: 71.9521779791677
Median age in population: 71.93730120369048
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 375
Genome diversity (% unique genomes):	 0.31
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 418
Syntactic diversity (% unique Push programs):	 0.252
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 17253895
--- Timings ---
Current time: 1559583593605 milliseconds
Total Time:         132.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.8 seconds, 72.2%
Fitness Testing:     22.5 seconds, 17.0%
Report:              14.3 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 339
Test mean error for best: 0.33900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -54                
Correct output: -72                 | Program output: -14                
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -37                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -3                 
Correct output: -52                 | Program output: -52                
Correct output: -73                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -75                
Correct output: -94                 | Program output: -3                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: -29                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -17                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: -20                
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -48                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -72                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 30                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -31                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank integer_dup_items in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 23
Percent parens: 0.087
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank integer_dup_items in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 23
Percent parens: 0.087
--- Lexicase Population Statistics ---
Count of elite individuals by case: (453 506 450 891 450 453 897 450 946 846)
Population mean number of elite cases: 6.34
Count of perfect (error zero) individuals by case: (453 506 450 891 450 453 897 450 946 846)
Population mean number of perfect (error zero) cases: 6.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 26
Size: 28
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 3.658
Median total errors in population: 6
Error averages by case: (0.547 0.494 0.55 0.109 0.55 0.547 0.103 0.55 0.054 0.154)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.629
Average program size in population (points): 22.728
Average percent parens in population: 0.094
Minimum age in population: 71.93730120369048
Maximum age in population: 74.78322899180269
Average age in population: 73.68056664013137
Median age in population: 73.56520492117343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 320
Genome diversity (% unique genomes):	 0.314
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 342
Syntactic diversity (% unique Push programs):	 0.256
Total error diversity:				 0.011
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 17466423
--- Timings ---
Current time: 1559583595894 milliseconds
Total Time:         134.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.6 seconds, 72.4%
Fitness Testing:     22.8 seconds, 16.9%
Report:              14.5 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 49
Successful program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 28


Auto-simplifying with starting size: 28
step: 0
program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 500
program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 1000
program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 1500
program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 2000
program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 2500
program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 3000
program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 3500
program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 4000
program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 4500
program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 5000
program: (boolean_yank boolean_yank integer_mult boolean_eq integer_rot integer_yank boolean_not integer_mult boolean_eq integer_rot integer_yank boolean_not in2 print_boolean in4 integer_min boolean_yank integer_yank in2 in3 in3 integer_yankdup integer_min exec_while () print_integer boolean_invert_second_then_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 339
Test mean error for best: 0.33900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -49                 | Program output: -49                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: 61                  | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -32                 | Program output: -32                
Correct output: -9                  | Program output: -9                 
Correct output: -54                 | Program output: -54                
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 40                 
Correct output: 89                  | Program output: 89                 
Correct output: 38                  | Program output: 38                 
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 16                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 49                  | Program output: 49                 
Correct output: 42                  | Program output: 42                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 46                 
Correct output: 13                  | Program output: 13                 
Correct output: 42                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -66                
Correct output: -74                 | Program output: -54                
Correct output: -72                 | Program output: -14                
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -37                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -9                  | Program output: -9                 
Correct output: -3                  | Program output: -3                 
Correct output: -52                 | Program output: -52                
Correct output: -73                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -49                 | Program output: -49                
Correct output: -80                 | Program output: -75                
Correct output: -94                 | Program output: -3                 
Correct output: -19                 | Program output: -19                
Correct output: -90                 | Program output: -90                
Correct output: -65                 | Program output: -65                
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -29                 | Program output: -29                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -17                
Correct output: -83                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: -19                 | Program output: 5                  
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 4                  
Correct output: 44                  | Program output: 44                 
Correct output: -98                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: -20                
Correct output: -89                 | Program output: 10                 
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -50                
Correct output: -83                 | Program output: -48                
Correct output: -68                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -72                
Correct output: -27                 | Program output: -21                
Correct output: -19                 | Program output: 30                 
Correct output: -81                 | Program output: -81                
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -31                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -94                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 6                  
Correct output: -62                 | Program output: -62                
;;******************************
