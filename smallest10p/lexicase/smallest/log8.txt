Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[91 -90 91 91] -90] [[86 86 86 44] 44] [[-68 34 -68 -68] -68] [[-25 -46 -25 -25] -46] [[62 62 62 -54] -54] [[5 26 26 26] 5] [[-8 -8 -13 -8] -13] [[57 33 57 57] 33] [[31 31 -10 31] -10] [[-95 74 -95 -95] -95] [(47 47 47 47) 47] [(26 26 26 26) 26] [(50 50 50 50) 50] [(35 35 35 35) 35] [(-43 -43 -43 -43) -43] [(87 64 23 83) 23] [(29 0 6 83) 0] [(90 73 42 78) 42] [(23 88 50 60) 23] [(31 87 31 97) 31] [(20 48 30 47) 20] [(86 9 67 26) 9] [(33 59 16 78) 16] [(15 57 75 22) 15] [(43 3 2 73) 2] [(46 29 23 95) 23] [(10 16 37 16) 10] [(52 30 1 91) 1] [(34 78 97 97) 34] [(20 41 60 82) 20] [(70 15 9 100) 9] [(42 72 3 78) 3] [(39 28 76 81) 28] [(14 18 42 62) 14] [(46 51 50 47) 46] [(-96 82 50 36) -96] [(-61 -53 93 -25) -61] [(-19 86 -78 -71) -78] [(-19 0 55 -91) -91] [(55 -95 21 34) -95] [(28 -73 -84 -65) -84] [(-51 -71 -66 -50) -71] [(-74 98 40 12) -74] [(-60 10 18 42) -60] [(100 -12 20 -55) -55] [(-42 97 14 -41) -42] [(47 -75 -76 47) -76] [(27 -95 -86 -93) -95] [(87 0 85 -96) -96] [(-43 22 35 -38) -43] [(-45 97 20 98) -45] [(-56 10 16 81) -56] [(-75 -1 30 -46) -75] [(-87 -55 27 -23) -87] [(-81 44 55 41) -81] [(-82 -90 -20 79) -90] [(-64 -19 61 -33) -64] [(-41 -75 -43 -62) -75] [(35 -3 -97 -46) -97] [(59 -47 -41 -54) -54] [(56 3 -95 -10) -95] [(35 -21 -97 52) -97] [(-52 73 -85 -40) -85] [(-81 61 51 77) -81] [(10 -19 65 -19) -19] [(95 24 -58 82) -58] [(29 -46 67 -42) -46] [(-78 96 -15 -42) -78] [(-93 59 56 25) -93] [(18 -8 -35 -62) -62] [(-90 -1 -47 -82) -90] [(85 -70 74 100) -70] [(-9 61 -28 32) -28] [(-20 -82 15 -25) -82] [(74 -5 17 19) -5] [(-45 87 6 68) -45] [(83 -11 -23 -20) -23] [(92 92 -61 -30) -61] [(-26 23 -55 79) -55] [(-4 33 -95 63) -95] [(-82 88 94 -6) -82] [(-65 4 57 7) -65] [(-36 10 23 29) -36] [(60 -4 -53 41) -53] [(79 63 -34 72) -34] [(97 54 -17 86) -17] [(-82 -70 47 75) -82] [(-49 -16 90 -12) -49] [(8 -36 71 -54) -54] [(78 -71 76 -54) -71] [(18 -15 3 36) -15] [(44 55 28 -73) -73] [(-22 38 13 -83) -83] [(13 80 62 -63) -63] [(-53 -87 -9 -33) -87])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[91 -90 91 91] -90]
Train Case:   6 | Input/Output: [[86 86 86 44] 44]
Train Case:   7 | Input/Output: [[-68 34 -68 -68] -68]
Train Case:   8 | Input/Output: [[-25 -46 -25 -25] -46]
Train Case:   9 | Input/Output: [[62 62 62 -54] -54]
Train Case:  10 | Input/Output: [[5 26 26 26] 5]
Train Case:  11 | Input/Output: [[-8 -8 -13 -8] -13]
Train Case:  12 | Input/Output: [[57 33 57 57] 33]
Train Case:  13 | Input/Output: [[31 31 -10 31] -10]
Train Case:  14 | Input/Output: [[-95 74 -95 -95] -95]
Train Case:  15 | Input/Output: [(47 47 47 47) 47]
Train Case:  16 | Input/Output: [(26 26 26 26) 26]
Train Case:  17 | Input/Output: [(50 50 50 50) 50]
Train Case:  18 | Input/Output: [(35 35 35 35) 35]
Train Case:  19 | Input/Output: [(-43 -43 -43 -43) -43]
Train Case:  20 | Input/Output: [(87 64 23 83) 23]
Train Case:  21 | Input/Output: [(29 0 6 83) 0]
Train Case:  22 | Input/Output: [(90 73 42 78) 42]
Train Case:  23 | Input/Output: [(23 88 50 60) 23]
Train Case:  24 | Input/Output: [(31 87 31 97) 31]
Train Case:  25 | Input/Output: [(20 48 30 47) 20]
Train Case:  26 | Input/Output: [(86 9 67 26) 9]
Train Case:  27 | Input/Output: [(33 59 16 78) 16]
Train Case:  28 | Input/Output: [(15 57 75 22) 15]
Train Case:  29 | Input/Output: [(43 3 2 73) 2]
Train Case:  30 | Input/Output: [(46 29 23 95) 23]
Train Case:  31 | Input/Output: [(10 16 37 16) 10]
Train Case:  32 | Input/Output: [(52 30 1 91) 1]
Train Case:  33 | Input/Output: [(34 78 97 97) 34]
Train Case:  34 | Input/Output: [(20 41 60 82) 20]
Train Case:  35 | Input/Output: [(70 15 9 100) 9]
Train Case:  36 | Input/Output: [(42 72 3 78) 3]
Train Case:  37 | Input/Output: [(39 28 76 81) 28]
Train Case:  38 | Input/Output: [(14 18 42 62) 14]
Train Case:  39 | Input/Output: [(46 51 50 47) 46]
Train Case:  40 | Input/Output: [(-96 82 50 36) -96]
Train Case:  41 | Input/Output: [(-61 -53 93 -25) -61]
Train Case:  42 | Input/Output: [(-19 86 -78 -71) -78]
Train Case:  43 | Input/Output: [(-19 0 55 -91) -91]
Train Case:  44 | Input/Output: [(55 -95 21 34) -95]
Train Case:  45 | Input/Output: [(28 -73 -84 -65) -84]
Train Case:  46 | Input/Output: [(-51 -71 -66 -50) -71]
Train Case:  47 | Input/Output: [(-74 98 40 12) -74]
Train Case:  48 | Input/Output: [(-60 10 18 42) -60]
Train Case:  49 | Input/Output: [(100 -12 20 -55) -55]
Train Case:  50 | Input/Output: [(-42 97 14 -41) -42]
Train Case:  51 | Input/Output: [(47 -75 -76 47) -76]
Train Case:  52 | Input/Output: [(27 -95 -86 -93) -95]
Train Case:  53 | Input/Output: [(87 0 85 -96) -96]
Train Case:  54 | Input/Output: [(-43 22 35 -38) -43]
Train Case:  55 | Input/Output: [(-45 97 20 98) -45]
Train Case:  56 | Input/Output: [(-56 10 16 81) -56]
Train Case:  57 | Input/Output: [(-75 -1 30 -46) -75]
Train Case:  58 | Input/Output: [(-87 -55 27 -23) -87]
Train Case:  59 | Input/Output: [(-81 44 55 41) -81]
Train Case:  60 | Input/Output: [(-82 -90 -20 79) -90]
Train Case:  61 | Input/Output: [(-64 -19 61 -33) -64]
Train Case:  62 | Input/Output: [(-41 -75 -43 -62) -75]
Train Case:  63 | Input/Output: [(35 -3 -97 -46) -97]
Train Case:  64 | Input/Output: [(59 -47 -41 -54) -54]
Train Case:  65 | Input/Output: [(56 3 -95 -10) -95]
Train Case:  66 | Input/Output: [(35 -21 -97 52) -97]
Train Case:  67 | Input/Output: [(-52 73 -85 -40) -85]
Train Case:  68 | Input/Output: [(-81 61 51 77) -81]
Train Case:  69 | Input/Output: [(10 -19 65 -19) -19]
Train Case:  70 | Input/Output: [(95 24 -58 82) -58]
Train Case:  71 | Input/Output: [(29 -46 67 -42) -46]
Train Case:  72 | Input/Output: [(-78 96 -15 -42) -78]
Train Case:  73 | Input/Output: [(-93 59 56 25) -93]
Train Case:  74 | Input/Output: [(18 -8 -35 -62) -62]
Train Case:  75 | Input/Output: [(-90 -1 -47 -82) -90]
Train Case:  76 | Input/Output: [(85 -70 74 100) -70]
Train Case:  77 | Input/Output: [(-9 61 -28 32) -28]
Train Case:  78 | Input/Output: [(-20 -82 15 -25) -82]
Train Case:  79 | Input/Output: [(74 -5 17 19) -5]
Train Case:  80 | Input/Output: [(-45 87 6 68) -45]
Train Case:  81 | Input/Output: [(83 -11 -23 -20) -23]
Train Case:  82 | Input/Output: [(92 92 -61 -30) -61]
Train Case:  83 | Input/Output: [(-26 23 -55 79) -55]
Train Case:  84 | Input/Output: [(-4 33 -95 63) -95]
Train Case:  85 | Input/Output: [(-82 88 94 -6) -82]
Train Case:  86 | Input/Output: [(-65 4 57 7) -65]
Train Case:  87 | Input/Output: [(-36 10 23 29) -36]
Train Case:  88 | Input/Output: [(60 -4 -53 41) -53]
Train Case:  89 | Input/Output: [(79 63 -34 72) -34]
Train Case:  90 | Input/Output: [(97 54 -17 86) -17]
Train Case:  91 | Input/Output: [(-82 -70 47 75) -82]
Train Case:  92 | Input/Output: [(-49 -16 90 -12) -49]
Train Case:  93 | Input/Output: [(8 -36 71 -54) -54]
Train Case:  94 | Input/Output: [(78 -71 76 -54) -71]
Train Case:  95 | Input/Output: [(18 -15 3 36) -15]
Train Case:  96 | Input/Output: [(44 55 28 -73) -73]
Train Case:  97 | Input/Output: [(-22 38 13 -83) -83]
Train Case:  98 | Input/Output: [(13 80 62 -63) -63]
Train Case:  99 | Input/Output: [(-53 -87 -9 -33) -87]
Test Case:   0 | Input/Output: [[-41 -41 -41 81] -41]
Test Case:   1 | Input/Output: [[6 6 35 6] 6]
Test Case:   2 | Input/Output: [[-67 -67 4 -67] -67]
Test Case:   3 | Input/Output: [[-91 -91 -91 -1] -91]
Test Case:   4 | Input/Output: [[-22 -22 -21 -22] -22]
Test Case:   5 | Input/Output: [[-24 -48 -24 -24] -48]
Test Case:   6 | Input/Output: [[1 57 57 57] 1]
Test Case:   7 | Input/Output: [[-43 -43 -43 59] -43]
Test Case:   8 | Input/Output: [[13 -95 -95 -95] -95]
Test Case:   9 | Input/Output: [[13 69 69 69] 13]
Test Case:  10 | Input/Output: [[-83 -25 -83 -83] -83]
Test Case:  11 | Input/Output: [[-65 36 36 36] -65]
Test Case:  12 | Input/Output: [[48 48 48 -46] -46]
Test Case:  13 | Input/Output: [[58 58 -94 58] -94]
Test Case:  14 | Input/Output: [[36 -98 -98 -98] -98]
Test Case:  15 | Input/Output: [[-33 -33 -33 -77] -77]
Test Case:  16 | Input/Output: [[25 25 25 36] 25]
Test Case:  17 | Input/Output: [[19 15 19 19] 15]
Test Case:  18 | Input/Output: [[10 10 -51 10] -51]
Test Case:  19 | Input/Output: [[-91 -91 -91 9] -91]
Test Case:  20 | Input/Output: [[-6 5 -6 -6] -6]
Test Case:  21 | Input/Output: [[-21 -37 -21 -21] -37]
Test Case:  22 | Input/Output: [[-7 -7 -7 51] -7]
Test Case:  23 | Input/Output: [[-11 -24 -24 -24] -24]
Test Case:  24 | Input/Output: [[50 2 50 50] 2]
Test Case:  25 | Input/Output: [[-11 43 -11 -11] -11]
Test Case:  26 | Input/Output: [[69 87 69 69] 69]
Test Case:  27 | Input/Output: [[34 58 34 34] 34]
Test Case:  28 | Input/Output: [[71 -81 71 71] -81]
Test Case:  29 | Input/Output: [[-41 -41 -86 -41] -86]
Test Case:  30 | Input/Output: [[65 -48 65 65] -48]
Test Case:  31 | Input/Output: [[97 97 92 97] 92]
Test Case:  32 | Input/Output: [[-48 -48 -37 -48] -48]
Test Case:  33 | Input/Output: [[89 -51 89 89] -51]
Test Case:  34 | Input/Output: [[65 65 65 -66] -66]
Test Case:  35 | Input/Output: [[-15 -15 -15 -60] -60]
Test Case:  36 | Input/Output: [[-57 51 -57 -57] -57]
Test Case:  37 | Input/Output: [[19 19 -79 19] -79]
Test Case:  38 | Input/Output: [[-83 -98 -83 -83] -98]
Test Case:  39 | Input/Output: [[32 89 89 89] 32]
Test Case:  40 | Input/Output: [[-26 -26 -26 -36] -36]
Test Case:  41 | Input/Output: [[98 -18 98 98] -18]
Test Case:  42 | Input/Output: [[-9 -66 -9 -9] -66]
Test Case:  43 | Input/Output: [[-59 -59 -22 -59] -59]
Test Case:  44 | Input/Output: [[-82 -29 -82 -82] -82]
Test Case:  45 | Input/Output: [[12 -8 12 12] -8]
Test Case:  46 | Input/Output: [[-34 99 99 99] -34]
Test Case:  47 | Input/Output: [[-40 -84 -40 -40] -84]
Test Case:  48 | Input/Output: [[-49 -49 -49 30] -49]
Test Case:  49 | Input/Output: [[86 86 86 73] 73]
Test Case:  50 | Input/Output: [[-43 99 -43 -43] -43]
Test Case:  51 | Input/Output: [[-19 -25 -25 -25] -25]
Test Case:  52 | Input/Output: [[95 41 95 95] 41]
Test Case:  53 | Input/Output: [[45 45 40 45] 40]
Test Case:  54 | Input/Output: [[27 27 27 -60] -60]
Test Case:  55 | Input/Output: [[32 32 -4 32] -4]
Test Case:  56 | Input/Output: [[-80 -7 -80 -80] -80]
Test Case:  57 | Input/Output: [[-98 -98 -3 -98] -98]
Test Case:  58 | Input/Output: [[37 4 37 37] 4]
Test Case:  59 | Input/Output: [[6 6 -87 6] -87]
Test Case:  60 | Input/Output: [[-83 41 -83 -83] -83]
Test Case:  61 | Input/Output: [[59 59 96 59] 59]
Test Case:  62 | Input/Output: [[78 78 -29 78] -29]
Test Case:  63 | Input/Output: [[98 -34 -34 -34] -34]
Test Case:  64 | Input/Output: [[37 -50 37 37] -50]
Test Case:  65 | Input/Output: [[-72 -72 60 -72] -72]
Test Case:  66 | Input/Output: [[34 67 34 34] 34]
Test Case:  67 | Input/Output: [[-52 -52 -52 -36] -52]
Test Case:  68 | Input/Output: [[-45 -98 -45 -45] -98]
Test Case:  69 | Input/Output: [[-51 -71 -51 -51] -71]
Test Case:  70 | Input/Output: [[96 96 96 -51] -51]
Test Case:  71 | Input/Output: [[50 50 50 52] 50]
Test Case:  72 | Input/Output: [[-10 -10 -97 -10] -97]
Test Case:  73 | Input/Output: [[17 -45 17 17] -45]
Test Case:  74 | Input/Output: [[19 -75 19 19] -75]
Test Case:  75 | Input/Output: [[-84 -84 -84 -44] -84]
Test Case:  76 | Input/Output: [[31 31 31 23] 23]
Test Case:  77 | Input/Output: [[-17 -48 -48 -48] -48]
Test Case:  78 | Input/Output: [[42 57 42 42] 42]
Test Case:  79 | Input/Output: [[20 30 30 30] 20]
Test Case:  80 | Input/Output: [[20 20 20 -39] -39]
Test Case:  81 | Input/Output: [[45 45 8 45] 8]
Test Case:  82 | Input/Output: [[-99 -99 -99 90] -99]
Test Case:  83 | Input/Output: [[37 -38 -38 -38] -38]
Test Case:  84 | Input/Output: [[-3 -3 -95 -3] -95]
Test Case:  85 | Input/Output: [[75 31 31 31] 31]
Test Case:  86 | Input/Output: [[-9 -9 -9 40] -9]
Test Case:  87 | Input/Output: [[89 -80 89 89] -80]
Test Case:  88 | Input/Output: [[37 -57 37 37] -57]
Test Case:  89 | Input/Output: [[46 46 -73 46] -73]
Test Case:  90 | Input/Output: [[-79 -25 -79 -79] -79]
Test Case:  91 | Input/Output: [[-71 -45 -45 -45] -71]
Test Case:  92 | Input/Output: [[-80 -80 -80 59] -80]
Test Case:  93 | Input/Output: [[5 62 62 62] 5]
Test Case:  94 | Input/Output: [[-65 -65 -65 4] -65]
Test Case:  95 | Input/Output: [[75 75 75 -71] -71]
Test Case:  96 | Input/Output: [[-59 -49 -49 -49] -59]
Test Case:  97 | Input/Output: [[-52 -52 9 -52] -52]
Test Case:  98 | Input/Output: [[-100 -100 -100 -18] -100]
Test Case:  99 | Input/Output: [[88 -73 -73 -73] -73]
Test Case: 100 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 101 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 102 | Input/Output: [(49 49 49 49) 49]
Test Case: 103 | Input/Output: [(11 11 11 11) 11]
Test Case: 104 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 105 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 106 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 107 | Input/Output: [(2 2 2 2) 2]
Test Case: 108 | Input/Output: [(32 32 32 32) 32]
Test Case: 109 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 110 | Input/Output: [(2 2 2 2) 2]
Test Case: 111 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 112 | Input/Output: [(67 67 67 67) 67]
Test Case: 113 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 114 | Input/Output: [(58 58 58 58) 58]
Test Case: 115 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 116 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 117 | Input/Output: [(34 34 34 34) 34]
Test Case: 118 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 119 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 120 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 121 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 122 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 123 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 124 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 125 | Input/Output: [(19 19 19 19) 19]
Test Case: 126 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 127 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 128 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 129 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 130 | Input/Output: [(41 41 41 41) 41]
Test Case: 131 | Input/Output: [(26 26 26 26) 26]
Test Case: 132 | Input/Output: [(74 74 74 74) 74]
Test Case: 133 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 134 | Input/Output: [(69 69 69 69) 69]
Test Case: 135 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 136 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 137 | Input/Output: [(26 26 26 26) 26]
Test Case: 138 | Input/Output: [(74 74 74 74) 74]
Test Case: 139 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 140 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 141 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 142 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 143 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 144 | Input/Output: [(30 30 30 30) 30]
Test Case: 145 | Input/Output: [(67 67 67 67) 67]
Test Case: 146 | Input/Output: [(27 27 27 27) 27]
Test Case: 147 | Input/Output: [(34 34 34 34) 34]
Test Case: 148 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 149 | Input/Output: [(11 11 11 11) 11]
Test Case: 150 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 151 | Input/Output: [(43 43 43 43) 43]
Test Case: 152 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 153 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 154 | Input/Output: [(46 46 46 46) 46]
Test Case: 155 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 156 | Input/Output: [(85 85 85 85) 85]
Test Case: 157 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 158 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 159 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 160 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 161 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 162 | Input/Output: [(38 38 38 38) 38]
Test Case: 163 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 164 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 165 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 166 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 167 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 168 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 169 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 170 | Input/Output: [(21 21 21 21) 21]
Test Case: 171 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 172 | Input/Output: [(11 11 11 11) 11]
Test Case: 173 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 174 | Input/Output: [(33 33 33 33) 33]
Test Case: 175 | Input/Output: [(80 80 80 80) 80]
Test Case: 176 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 177 | Input/Output: [(18 18 18 18) 18]
Test Case: 178 | Input/Output: [(80 80 80 80) 80]
Test Case: 179 | Input/Output: [(48 48 48 48) 48]
Test Case: 180 | Input/Output: [(16 16 16 16) 16]
Test Case: 181 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 182 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 183 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 184 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 185 | Input/Output: [(86 86 86 86) 86]
Test Case: 186 | Input/Output: [(100 100 100 100) 100]
Test Case: 187 | Input/Output: [(50 50 50 50) 50]
Test Case: 188 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 189 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 190 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 191 | Input/Output: [(98 98 98 98) 98]
Test Case: 192 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 193 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 194 | Input/Output: [(6 6 6 6) 6]
Test Case: 195 | Input/Output: [(89 89 89 89) 89]
Test Case: 196 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 197 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 198 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 199 | Input/Output: [(26 26 26 26) 26]
Test Case: 200 | Input/Output: [(43 97 6 61) 6]
Test Case: 201 | Input/Output: [(87 99 52 90) 52]
Test Case: 202 | Input/Output: [(68 21 44 42) 21]
Test Case: 203 | Input/Output: [(1 56 24 99) 1]
Test Case: 204 | Input/Output: [(76 55 16 71) 16]
Test Case: 205 | Input/Output: [(81 7 23 85) 7]
Test Case: 206 | Input/Output: [(42 40 72 63) 40]
Test Case: 207 | Input/Output: [(58 22 93 44) 22]
Test Case: 208 | Input/Output: [(15 64 72 98) 15]
Test Case: 209 | Input/Output: [(84 86 52 62) 52]
Test Case: 210 | Input/Output: [(53 54 49 83) 49]
Test Case: 211 | Input/Output: [(63 43 47 8) 8]
Test Case: 212 | Input/Output: [(12 43 35 70) 12]
Test Case: 213 | Input/Output: [(53 16 45 93) 16]
Test Case: 214 | Input/Output: [(34 53 63 78) 34]
Test Case: 215 | Input/Output: [(36 94 33 16) 16]
Test Case: 216 | Input/Output: [(75 55 25 90) 25]
Test Case: 217 | Input/Output: [(50 24 49 17) 17]
Test Case: 218 | Input/Output: [(93 81 87 12) 12]
Test Case: 219 | Input/Output: [(30 26 98 22) 22]
Test Case: 220 | Input/Output: [(95 83 57 1) 1]
Test Case: 221 | Input/Output: [(30 30 97 25) 25]
Test Case: 222 | Input/Output: [(20 41 66 86) 20]
Test Case: 223 | Input/Output: [(78 62 13 14) 13]
Test Case: 224 | Input/Output: [(85 28 81 17) 17]
Test Case: 225 | Input/Output: [(74 88 95 77) 74]
Test Case: 226 | Input/Output: [(46 80 55 92) 46]
Test Case: 227 | Input/Output: [(93 12 11 13) 11]
Test Case: 228 | Input/Output: [(49 100 51 0) 0]
Test Case: 229 | Input/Output: [(90 78 6 57) 6]
Test Case: 230 | Input/Output: [(90 2 92 75) 2]
Test Case: 231 | Input/Output: [(69 96 39 21) 21]
Test Case: 232 | Input/Output: [(59 28 95 39) 28]
Test Case: 233 | Input/Output: [(64 69 36 30) 30]
Test Case: 234 | Input/Output: [(33 21 73 0) 0]
Test Case: 235 | Input/Output: [(46 84 8 94) 8]
Test Case: 236 | Input/Output: [(95 62 72 99) 62]
Test Case: 237 | Input/Output: [(83 6 86 56) 6]
Test Case: 238 | Input/Output: [(43 32 17 14) 14]
Test Case: 239 | Input/Output: [(45 41 26 72) 26]
Test Case: 240 | Input/Output: [(14 55 79 25) 14]
Test Case: 241 | Input/Output: [(45 2 68 17) 2]
Test Case: 242 | Input/Output: [(11 82 30 38) 11]
Test Case: 243 | Input/Output: [(77 8 54 41) 8]
Test Case: 244 | Input/Output: [(87 58 35 7) 7]
Test Case: 245 | Input/Output: [(39 41 69 69) 39]
Test Case: 246 | Input/Output: [(76 97 6 73) 6]
Test Case: 247 | Input/Output: [(7 0 28 39) 0]
Test Case: 248 | Input/Output: [(73 87 12 89) 12]
Test Case: 249 | Input/Output: [(84 22 25 15) 15]
Test Case: 250 | Input/Output: [(99 77 13 85) 13]
Test Case: 251 | Input/Output: [(7 19 6 82) 6]
Test Case: 252 | Input/Output: [(60 8 61 64) 8]
Test Case: 253 | Input/Output: [(42 96 8 72) 8]
Test Case: 254 | Input/Output: [(48 67 91 10) 10]
Test Case: 255 | Input/Output: [(48 100 99 43) 43]
Test Case: 256 | Input/Output: [(75 78 24 95) 24]
Test Case: 257 | Input/Output: [(52 91 16 32) 16]
Test Case: 258 | Input/Output: [(14 51 74 13) 13]
Test Case: 259 | Input/Output: [(69 14 18 8) 8]
Test Case: 260 | Input/Output: [(17 92 29 58) 17]
Test Case: 261 | Input/Output: [(79 69 49 40) 40]
Test Case: 262 | Input/Output: [(34 1 76 33) 1]
Test Case: 263 | Input/Output: [(24 54 77 33) 24]
Test Case: 264 | Input/Output: [(41 100 1 19) 1]
Test Case: 265 | Input/Output: [(63 78 48 71) 48]
Test Case: 266 | Input/Output: [(29 27 13 12) 12]
Test Case: 267 | Input/Output: [(56 45 97 50) 45]
Test Case: 268 | Input/Output: [(83 51 28 97) 28]
Test Case: 269 | Input/Output: [(49 51 62 17) 17]
Test Case: 270 | Input/Output: [(27 47 89 25) 25]
Test Case: 271 | Input/Output: [(33 37 92 35) 33]
Test Case: 272 | Input/Output: [(79 37 46 86) 37]
Test Case: 273 | Input/Output: [(11 39 60 10) 10]
Test Case: 274 | Input/Output: [(23 45 67 89) 23]
Test Case: 275 | Input/Output: [(97 41 94 50) 41]
Test Case: 276 | Input/Output: [(91 8 58 58) 8]
Test Case: 277 | Input/Output: [(45 27 92 90) 27]
Test Case: 278 | Input/Output: [(59 70 43 99) 43]
Test Case: 279 | Input/Output: [(77 50 85 1) 1]
Test Case: 280 | Input/Output: [(96 91 9 8) 8]
Test Case: 281 | Input/Output: [(94 86 78 35) 35]
Test Case: 282 | Input/Output: [(53 37 83 2) 2]
Test Case: 283 | Input/Output: [(35 10 4 69) 4]
Test Case: 284 | Input/Output: [(21 65 66 22) 21]
Test Case: 285 | Input/Output: [(73 86 0 71) 0]
Test Case: 286 | Input/Output: [(46 58 14 79) 14]
Test Case: 287 | Input/Output: [(80 97 93 4) 4]
Test Case: 288 | Input/Output: [(97 95 52 3) 3]
Test Case: 289 | Input/Output: [(77 38 87 90) 38]
Test Case: 290 | Input/Output: [(18 24 22 78) 18]
Test Case: 291 | Input/Output: [(98 74 0 86) 0]
Test Case: 292 | Input/Output: [(7 8 34 80) 7]
Test Case: 293 | Input/Output: [(60 34 82 54) 34]
Test Case: 294 | Input/Output: [(35 98 29 41) 29]
Test Case: 295 | Input/Output: [(37 38 52 79) 37]
Test Case: 296 | Input/Output: [(89 56 88 26) 26]
Test Case: 297 | Input/Output: [(22 100 69 14) 14]
Test Case: 298 | Input/Output: [(33 21 34 4) 4]
Test Case: 299 | Input/Output: [(44 32 8 67) 8]
Test Case: 300 | Input/Output: [(91 11 85 97) 11]
Test Case: 301 | Input/Output: [(87 47 98 73) 47]
Test Case: 302 | Input/Output: [(40 87 6 8) 6]
Test Case: 303 | Input/Output: [(22 69 57 85) 22]
Test Case: 304 | Input/Output: [(83 22 15 80) 15]
Test Case: 305 | Input/Output: [(59 82 21 60) 21]
Test Case: 306 | Input/Output: [(50 85 26 89) 26]
Test Case: 307 | Input/Output: [(49 80 94 38) 38]
Test Case: 308 | Input/Output: [(72 4 84 56) 4]
Test Case: 309 | Input/Output: [(64 65 13 13) 13]
Test Case: 310 | Input/Output: [(28 95 9 100) 9]
Test Case: 311 | Input/Output: [(43 2 17 8) 2]
Test Case: 312 | Input/Output: [(91 66 61 7) 7]
Test Case: 313 | Input/Output: [(32 14 24 36) 14]
Test Case: 314 | Input/Output: [(78 91 92 21) 21]
Test Case: 315 | Input/Output: [(95 9 57 85) 9]
Test Case: 316 | Input/Output: [(90 30 29 15) 15]
Test Case: 317 | Input/Output: [(83 12 49 72) 12]
Test Case: 318 | Input/Output: [(61 62 0 35) 0]
Test Case: 319 | Input/Output: [(80 56 65 58) 56]
Test Case: 320 | Input/Output: [(90 13 7 98) 7]
Test Case: 321 | Input/Output: [(88 8 82 67) 8]
Test Case: 322 | Input/Output: [(78 27 87 99) 27]
Test Case: 323 | Input/Output: [(36 53 1 70) 1]
Test Case: 324 | Input/Output: [(62 29 28 85) 28]
Test Case: 325 | Input/Output: [(75 39 3 44) 3]
Test Case: 326 | Input/Output: [(33 17 96 84) 17]
Test Case: 327 | Input/Output: [(97 83 99 40) 40]
Test Case: 328 | Input/Output: [(3 45 15 65) 3]
Test Case: 329 | Input/Output: [(90 25 0 29) 0]
Test Case: 330 | Input/Output: [(38 69 25 0) 0]
Test Case: 331 | Input/Output: [(36 3 73 94) 3]
Test Case: 332 | Input/Output: [(74 83 29 54) 29]
Test Case: 333 | Input/Output: [(29 75 67 17) 17]
Test Case: 334 | Input/Output: [(85 53 85 54) 53]
Test Case: 335 | Input/Output: [(49 52 21 55) 21]
Test Case: 336 | Input/Output: [(28 40 19 78) 19]
Test Case: 337 | Input/Output: [(93 0 13 35) 0]
Test Case: 338 | Input/Output: [(72 36 82 2) 2]
Test Case: 339 | Input/Output: [(62 16 27 80) 16]
Test Case: 340 | Input/Output: [(91 42 57 21) 21]
Test Case: 341 | Input/Output: [(39 68 15 3) 3]
Test Case: 342 | Input/Output: [(83 13 77 24) 13]
Test Case: 343 | Input/Output: [(29 100 69 11) 11]
Test Case: 344 | Input/Output: [(36 100 98 81) 36]
Test Case: 345 | Input/Output: [(38 66 78 24) 24]
Test Case: 346 | Input/Output: [(24 27 97 91) 24]
Test Case: 347 | Input/Output: [(91 96 74 52) 52]
Test Case: 348 | Input/Output: [(17 85 21 39) 17]
Test Case: 349 | Input/Output: [(89 11 41 30) 11]
Test Case: 350 | Input/Output: [(68 48 66 20) 20]
Test Case: 351 | Input/Output: [(18 36 85 91) 18]
Test Case: 352 | Input/Output: [(52 25 13 38) 13]
Test Case: 353 | Input/Output: [(95 81 64 75) 64]
Test Case: 354 | Input/Output: [(4 41 86 12) 4]
Test Case: 355 | Input/Output: [(27 31 11 90) 11]
Test Case: 356 | Input/Output: [(82 71 82 90) 71]
Test Case: 357 | Input/Output: [(58 41 77 62) 41]
Test Case: 358 | Input/Output: [(48 35 33 66) 33]
Test Case: 359 | Input/Output: [(100 93 67 47) 47]
Test Case: 360 | Input/Output: [(57 95 0 34) 0]
Test Case: 361 | Input/Output: [(8 92 76 29) 8]
Test Case: 362 | Input/Output: [(92 32 11 69) 11]
Test Case: 363 | Input/Output: [(9 40 58 82) 9]
Test Case: 364 | Input/Output: [(53 45 21 94) 21]
Test Case: 365 | Input/Output: [(29 64 85 78) 29]
Test Case: 366 | Input/Output: [(46 49 7 69) 7]
Test Case: 367 | Input/Output: [(7 61 60 87) 7]
Test Case: 368 | Input/Output: [(4 17 93 34) 4]
Test Case: 369 | Input/Output: [(46 10 37 0) 0]
Test Case: 370 | Input/Output: [(85 90 94 57) 57]
Test Case: 371 | Input/Output: [(22 35 68 21) 21]
Test Case: 372 | Input/Output: [(65 47 39 87) 39]
Test Case: 373 | Input/Output: [(79 1 60 29) 1]
Test Case: 374 | Input/Output: [(48 99 97 6) 6]
Test Case: 375 | Input/Output: [(96 17 0 5) 0]
Test Case: 376 | Input/Output: [(7 16 89 31) 7]
Test Case: 377 | Input/Output: [(35 8 49 47) 8]
Test Case: 378 | Input/Output: [(87 81 18 56) 18]
Test Case: 379 | Input/Output: [(73 100 14 93) 14]
Test Case: 380 | Input/Output: [(13 96 78 80) 13]
Test Case: 381 | Input/Output: [(79 50 54 64) 50]
Test Case: 382 | Input/Output: [(7 17 91 93) 7]
Test Case: 383 | Input/Output: [(55 61 92 80) 55]
Test Case: 384 | Input/Output: [(39 25 46 75) 25]
Test Case: 385 | Input/Output: [(32 46 80 75) 32]
Test Case: 386 | Input/Output: [(41 69 96 7) 7]
Test Case: 387 | Input/Output: [(48 64 59 24) 24]
Test Case: 388 | Input/Output: [(46 0 15 57) 0]
Test Case: 389 | Input/Output: [(30 96 93 7) 7]
Test Case: 390 | Input/Output: [(81 41 68 35) 35]
Test Case: 391 | Input/Output: [(53 86 98 44) 44]
Test Case: 392 | Input/Output: [(0 100 85 53) 0]
Test Case: 393 | Input/Output: [(85 95 29 76) 29]
Test Case: 394 | Input/Output: [(31 24 32 27) 24]
Test Case: 395 | Input/Output: [(75 70 51 31) 31]
Test Case: 396 | Input/Output: [(79 16 57 10) 10]
Test Case: 397 | Input/Output: [(27 14 9 84) 9]
Test Case: 398 | Input/Output: [(46 64 14 50) 14]
Test Case: 399 | Input/Output: [(51 63 57 94) 51]
Test Case: 400 | Input/Output: [(64 76 81 78) 64]
Test Case: 401 | Input/Output: [(-92 -16 -90 -81) -92]
Test Case: 402 | Input/Output: [(-20 26 25 -63) -63]
Test Case: 403 | Input/Output: [(21 -93 -49 -77) -93]
Test Case: 404 | Input/Output: [(30 -68 100 -45) -68]
Test Case: 405 | Input/Output: [(17 -89 86 33) -89]
Test Case: 406 | Input/Output: [(44 96 -25 -42) -42]
Test Case: 407 | Input/Output: [(-48 -42 59 49) -48]
Test Case: 408 | Input/Output: [(67 -40 -99 18) -99]
Test Case: 409 | Input/Output: [(-74 -10 1 -11) -74]
Test Case: 410 | Input/Output: [(6 -62 -24 -19) -62]
Test Case: 411 | Input/Output: [(-82 -72 -52 -82) -82]
Test Case: 412 | Input/Output: [(-10 40 58 -85) -85]
Test Case: 413 | Input/Output: [(26 9 -95 5) -95]
Test Case: 414 | Input/Output: [(-51 57 -94 -77) -94]
Test Case: 415 | Input/Output: [(-25 84 76 73) -25]
Test Case: 416 | Input/Output: [(95 -78 3 32) -78]
Test Case: 417 | Input/Output: [(-79 37 33 90) -79]
Test Case: 418 | Input/Output: [(-5 -88 66 -83) -88]
Test Case: 419 | Input/Output: [(-52 -99 78 81) -99]
Test Case: 420 | Input/Output: [(-75 -45 0 -98) -98]
Test Case: 421 | Input/Output: [(34 -20 100 -6) -20]
Test Case: 422 | Input/Output: [(15 17 87 -71) -71]
Test Case: 423 | Input/Output: [(31 -38 -74 -30) -74]
Test Case: 424 | Input/Output: [(52 -63 41 -67) -67]
Test Case: 425 | Input/Output: [(-72 13 -83 -30) -83]
Test Case: 426 | Input/Output: [(39 -73 -4 -17) -73]
Test Case: 427 | Input/Output: [(39 -38 32 -20) -38]
Test Case: 428 | Input/Output: [(-9 -9 97 -50) -50]
Test Case: 429 | Input/Output: [(-72 50 -8 -98) -98]
Test Case: 430 | Input/Output: [(39 -96 -90 100) -96]
Test Case: 431 | Input/Output: [(47 50 83 -62) -62]
Test Case: 432 | Input/Output: [(41 -36 16 90) -36]
Test Case: 433 | Input/Output: [(63 -73 45 18) -73]
Test Case: 434 | Input/Output: [(-50 21 55 79) -50]
Test Case: 435 | Input/Output: [(-94 9 -81 72) -94]
Test Case: 436 | Input/Output: [(16 -61 78 -33) -61]
Test Case: 437 | Input/Output: [(-73 -66 -40 76) -73]
Test Case: 438 | Input/Output: [(-82 41 -65 -85) -85]
Test Case: 439 | Input/Output: [(-81 -97 -33 -36) -97]
Test Case: 440 | Input/Output: [(-88 -84 -100 18) -100]
Test Case: 441 | Input/Output: [(38 -14 26 -38) -38]
Test Case: 442 | Input/Output: [(20 -30 78 -75) -75]
Test Case: 443 | Input/Output: [(31 99 -66 19) -66]
Test Case: 444 | Input/Output: [(59 60 19 -82) -82]
Test Case: 445 | Input/Output: [(74 -9 -17 -99) -99]
Test Case: 446 | Input/Output: [(-42 67 -26 76) -42]
Test Case: 447 | Input/Output: [(56 46 -64 33) -64]
Test Case: 448 | Input/Output: [(67 -3 78 -4) -4]
Test Case: 449 | Input/Output: [(-28 -75 17 47) -75]
Test Case: 450 | Input/Output: [(82 -59 -25 75) -59]
Test Case: 451 | Input/Output: [(99 41 -20 58) -20]
Test Case: 452 | Input/Output: [(-55 66 -87 18) -87]
Test Case: 453 | Input/Output: [(-69 -71 38 -26) -71]
Test Case: 454 | Input/Output: [(39 83 0 -51) -51]
Test Case: 455 | Input/Output: [(39 -2 -51 -24) -51]
Test Case: 456 | Input/Output: [(-85 -33 -84 -56) -85]
Test Case: 457 | Input/Output: [(-59 26 32 8) -59]
Test Case: 458 | Input/Output: [(26 -97 -89 -90) -97]
Test Case: 459 | Input/Output: [(-65 -73 -11 -84) -84]
Test Case: 460 | Input/Output: [(-28 70 -1 72) -28]
Test Case: 461 | Input/Output: [(-95 81 50 -40) -95]
Test Case: 462 | Input/Output: [(-80 52 42 80) -80]
Test Case: 463 | Input/Output: [(-38 -49 -50 -27) -50]
Test Case: 464 | Input/Output: [(71 -5 71 -51) -51]
Test Case: 465 | Input/Output: [(-96 -94 -53 19) -96]
Test Case: 466 | Input/Output: [(46 74 -52 48) -52]
Test Case: 467 | Input/Output: [(63 16 25 -57) -57]
Test Case: 468 | Input/Output: [(-25 -62 95 14) -62]
Test Case: 469 | Input/Output: [(21 43 39 -57) -57]
Test Case: 470 | Input/Output: [(51 -1 36 32) -1]
Test Case: 471 | Input/Output: [(-64 51 38 -82) -82]
Test Case: 472 | Input/Output: [(24 0 6 8) 0]
Test Case: 473 | Input/Output: [(-85 -98 -73 85) -98]
Test Case: 474 | Input/Output: [(-73 81 -90 -28) -90]
Test Case: 475 | Input/Output: [(-20 96 -85 44) -85]
Test Case: 476 | Input/Output: [(-95 -27 -8 -39) -95]
Test Case: 477 | Input/Output: [(-16 64 -12 72) -16]
Test Case: 478 | Input/Output: [(85 -74 1 -71) -74]
Test Case: 479 | Input/Output: [(21 -17 58 -22) -22]
Test Case: 480 | Input/Output: [(-8 0 -29 86) -29]
Test Case: 481 | Input/Output: [(-61 56 89 -99) -99]
Test Case: 482 | Input/Output: [(-44 -74 -68 -29) -74]
Test Case: 483 | Input/Output: [(79 -53 -22 51) -53]
Test Case: 484 | Input/Output: [(26 24 62 -97) -97]
Test Case: 485 | Input/Output: [(-53 81 20 -96) -96]
Test Case: 486 | Input/Output: [(95 -47 -20 -34) -47]
Test Case: 487 | Input/Output: [(-18 -73 -17 -100) -100]
Test Case: 488 | Input/Output: [(62 -8 60 47) -8]
Test Case: 489 | Input/Output: [(7 -97 -88 -61) -97]
Test Case: 490 | Input/Output: [(-29 1 -60 63) -60]
Test Case: 491 | Input/Output: [(-93 79 -60 -6) -93]
Test Case: 492 | Input/Output: [(-42 -83 46 21) -83]
Test Case: 493 | Input/Output: [(47 17 -55 43) -55]
Test Case: 494 | Input/Output: [(1 -9 -94 54) -94]
Test Case: 495 | Input/Output: [(-53 66 -8 94) -53]
Test Case: 496 | Input/Output: [(-26 -48 -37 -50) -50]
Test Case: 497 | Input/Output: [(91 18 42 -61) -61]
Test Case: 498 | Input/Output: [(74 74 20 -51) -51]
Test Case: 499 | Input/Output: [(-100 -31 -7 -81) -100]
Test Case: 500 | Input/Output: [(-3 87 -63 6) -63]
Test Case: 501 | Input/Output: [(41 81 21 -71) -71]
Test Case: 502 | Input/Output: [(-58 56 -18 -24) -58]
Test Case: 503 | Input/Output: [(-23 54 72 -68) -68]
Test Case: 504 | Input/Output: [(-53 4 -53 88) -53]
Test Case: 505 | Input/Output: [(-16 74 -71 -28) -71]
Test Case: 506 | Input/Output: [(18 -45 -24 -81) -81]
Test Case: 507 | Input/Output: [(-17 2 80 -4) -17]
Test Case: 508 | Input/Output: [(-74 -68 31 30) -74]
Test Case: 509 | Input/Output: [(76 94 -81 -17) -81]
Test Case: 510 | Input/Output: [(-85 -25 -12 -8) -85]
Test Case: 511 | Input/Output: [(96 -26 -67 57) -67]
Test Case: 512 | Input/Output: [(-32 64 -99 64) -99]
Test Case: 513 | Input/Output: [(87 13 -52 50) -52]
Test Case: 514 | Input/Output: [(-57 -67 2 46) -67]
Test Case: 515 | Input/Output: [(56 90 -83 -8) -83]
Test Case: 516 | Input/Output: [(-96 63 17 51) -96]
Test Case: 517 | Input/Output: [(-37 -38 -40 22) -40]
Test Case: 518 | Input/Output: [(98 -47 98 -54) -54]
Test Case: 519 | Input/Output: [(82 -10 1 24) -10]
Test Case: 520 | Input/Output: [(-84 -90 61 77) -90]
Test Case: 521 | Input/Output: [(83 61 20 -2) -2]
Test Case: 522 | Input/Output: [(-78 -64 -28 30) -78]
Test Case: 523 | Input/Output: [(49 -33 -87 76) -87]
Test Case: 524 | Input/Output: [(86 -89 96 -74) -89]
Test Case: 525 | Input/Output: [(-78 44 -73 61) -78]
Test Case: 526 | Input/Output: [(-82 -79 -85 50) -85]
Test Case: 527 | Input/Output: [(84 -95 78 -86) -95]
Test Case: 528 | Input/Output: [(-67 -55 -80 -65) -80]
Test Case: 529 | Input/Output: [(15 -62 -84 -34) -84]
Test Case: 530 | Input/Output: [(84 67 43 87) 43]
Test Case: 531 | Input/Output: [(-77 66 -32 -92) -92]
Test Case: 532 | Input/Output: [(29 -1 -39 -42) -42]
Test Case: 533 | Input/Output: [(96 80 -72 94) -72]
Test Case: 534 | Input/Output: [(-58 -100 79 71) -100]
Test Case: 535 | Input/Output: [(-84 71 -70 -32) -84]
Test Case: 536 | Input/Output: [(-96 64 -2 13) -96]
Test Case: 537 | Input/Output: [(-25 -71 -57 -40) -71]
Test Case: 538 | Input/Output: [(80 21 27 33) 21]
Test Case: 539 | Input/Output: [(-100 -97 7 11) -100]
Test Case: 540 | Input/Output: [(60 -38 59 25) -38]
Test Case: 541 | Input/Output: [(59 -8 6 43) -8]
Test Case: 542 | Input/Output: [(0 -16 65 91) -16]
Test Case: 543 | Input/Output: [(-60 100 42 -5) -60]
Test Case: 544 | Input/Output: [(55 70 -4 -92) -92]
Test Case: 545 | Input/Output: [(15 -85 -34 -33) -85]
Test Case: 546 | Input/Output: [(71 45 89 30) 30]
Test Case: 547 | Input/Output: [(-21 -66 47 24) -66]
Test Case: 548 | Input/Output: [(-74 69 50 -45) -74]
Test Case: 549 | Input/Output: [(74 62 -74 8) -74]
Test Case: 550 | Input/Output: [(1 29 57 -31) -31]
Test Case: 551 | Input/Output: [(37 -91 73 50) -91]
Test Case: 552 | Input/Output: [(-85 73 11 -7) -85]
Test Case: 553 | Input/Output: [(-83 -50 54 44) -83]
Test Case: 554 | Input/Output: [(-80 -79 99 -30) -80]
Test Case: 555 | Input/Output: [(-95 -55 39 8) -95]
Test Case: 556 | Input/Output: [(-21 60 -21 -14) -21]
Test Case: 557 | Input/Output: [(-11 54 83 26) -11]
Test Case: 558 | Input/Output: [(-8 39 -91 21) -91]
Test Case: 559 | Input/Output: [(79 -33 -83 -51) -83]
Test Case: 560 | Input/Output: [(-36 94 35 93) -36]
Test Case: 561 | Input/Output: [(-8 21 47 -92) -92]
Test Case: 562 | Input/Output: [(-83 38 -7 72) -83]
Test Case: 563 | Input/Output: [(91 -1 -43 20) -43]
Test Case: 564 | Input/Output: [(-46 -19 -16 -82) -82]
Test Case: 565 | Input/Output: [(-64 -46 -26 -14) -64]
Test Case: 566 | Input/Output: [(3 96 -73 44) -73]
Test Case: 567 | Input/Output: [(-76 70 -49 43) -76]
Test Case: 568 | Input/Output: [(10 -4 92 97) -4]
Test Case: 569 | Input/Output: [(-35 42 47 -35) -35]
Test Case: 570 | Input/Output: [(17 -56 -74 64) -74]
Test Case: 571 | Input/Output: [(-44 4 62 -92) -92]
Test Case: 572 | Input/Output: [(68 89 -50 -75) -75]
Test Case: 573 | Input/Output: [(-30 62 -21 -23) -30]
Test Case: 574 | Input/Output: [(-18 39 45 -78) -78]
Test Case: 575 | Input/Output: [(-46 34 -50 71) -50]
Test Case: 576 | Input/Output: [(-58 2 36 39) -58]
Test Case: 577 | Input/Output: [(71 -51 57 30) -51]
Test Case: 578 | Input/Output: [(69 12 83 38) 12]
Test Case: 579 | Input/Output: [(67 -51 38 -28) -51]
Test Case: 580 | Input/Output: [(-10 82 -66 -84) -84]
Test Case: 581 | Input/Output: [(44 -35 23 83) -35]
Test Case: 582 | Input/Output: [(21 -20 14 -10) -20]
Test Case: 583 | Input/Output: [(45 -27 32 -12) -27]
Test Case: 584 | Input/Output: [(6 96 -37 -38) -38]
Test Case: 585 | Input/Output: [(-2 5 -88 34) -88]
Test Case: 586 | Input/Output: [(-24 11 -17 -17) -24]
Test Case: 587 | Input/Output: [(70 -94 -94 74) -94]
Test Case: 588 | Input/Output: [(-32 -54 -60 38) -60]
Test Case: 589 | Input/Output: [(94 63 92 12) 12]
Test Case: 590 | Input/Output: [(-45 -65 24 37) -65]
Test Case: 591 | Input/Output: [(84 77 -57 46) -57]
Test Case: 592 | Input/Output: [(77 65 15 -9) -9]
Test Case: 593 | Input/Output: [(-39 15 4 21) -39]
Test Case: 594 | Input/Output: [(-75 63 55 -34) -75]
Test Case: 595 | Input/Output: [(7 -25 87 53) -25]
Test Case: 596 | Input/Output: [(88 -32 26 -36) -36]
Test Case: 597 | Input/Output: [(-56 -19 -27 -96) -96]
Test Case: 598 | Input/Output: [(53 -15 26 3) -15]
Test Case: 599 | Input/Output: [(51 -30 40 -64) -64]
Test Case: 600 | Input/Output: [(60 39 22 6) 6]
Test Case: 601 | Input/Output: [(-84 -98 -38 10) -98]
Test Case: 602 | Input/Output: [(-21 40 45 94) -21]
Test Case: 603 | Input/Output: [(-77 37 -54 -56) -77]
Test Case: 604 | Input/Output: [(10 -41 -12 97) -41]
Test Case: 605 | Input/Output: [(23 80 -28 -94) -94]
Test Case: 606 | Input/Output: [(-52 53 91 81) -52]
Test Case: 607 | Input/Output: [(-56 33 57 -84) -84]
Test Case: 608 | Input/Output: [(33 -33 -82 96) -82]
Test Case: 609 | Input/Output: [(-9 51 56 52) -9]
Test Case: 610 | Input/Output: [(18 -1 47 -74) -74]
Test Case: 611 | Input/Output: [(76 4 15 18) 4]
Test Case: 612 | Input/Output: [(-42 99 61 -39) -42]
Test Case: 613 | Input/Output: [(100 15 66 46) 15]
Test Case: 614 | Input/Output: [(-58 6 -69 -71) -71]
Test Case: 615 | Input/Output: [(-6 -27 26 24) -27]
Test Case: 616 | Input/Output: [(-57 87 18 26) -57]
Test Case: 617 | Input/Output: [(-25 70 74 -41) -41]
Test Case: 618 | Input/Output: [(-36 -11 94 81) -36]
Test Case: 619 | Input/Output: [(-75 59 -8 -89) -89]
Test Case: 620 | Input/Output: [(-56 -19 -100 75) -100]
Test Case: 621 | Input/Output: [(-49 -12 24 -47) -49]
Test Case: 622 | Input/Output: [(31 34 83 -51) -51]
Test Case: 623 | Input/Output: [(83 -74 -10 -19) -74]
Test Case: 624 | Input/Output: [(-33 -72 -67 -95) -95]
Test Case: 625 | Input/Output: [(15 -54 -98 29) -98]
Test Case: 626 | Input/Output: [(51 -26 66 -78) -78]
Test Case: 627 | Input/Output: [(-12 34 51 90) -12]
Test Case: 628 | Input/Output: [(62 -14 41 21) -14]
Test Case: 629 | Input/Output: [(25 -28 22 77) -28]
Test Case: 630 | Input/Output: [(40 41 -26 18) -26]
Test Case: 631 | Input/Output: [(-10 -3 -61 -24) -61]
Test Case: 632 | Input/Output: [(0 -38 42 -99) -99]
Test Case: 633 | Input/Output: [(50 -95 -54 76) -95]
Test Case: 634 | Input/Output: [(86 3 79 56) 3]
Test Case: 635 | Input/Output: [(45 -47 -16 -48) -48]
Test Case: 636 | Input/Output: [(-99 100 -65 1) -99]
Test Case: 637 | Input/Output: [(53 -9 42 -22) -22]
Test Case: 638 | Input/Output: [(-29 -11 -23 -74) -74]
Test Case: 639 | Input/Output: [(100 -24 -84 75) -84]
Test Case: 640 | Input/Output: [(-70 18 57 83) -70]
Test Case: 641 | Input/Output: [(-29 -88 71 -21) -88]
Test Case: 642 | Input/Output: [(-5 52 -13 -45) -45]
Test Case: 643 | Input/Output: [(-88 -60 -37 13) -88]
Test Case: 644 | Input/Output: [(-95 69 -84 28) -95]
Test Case: 645 | Input/Output: [(-81 91 46 -10) -81]
Test Case: 646 | Input/Output: [(-10 30 -71 -7) -71]
Test Case: 647 | Input/Output: [(-95 -21 -2 -9) -95]
Test Case: 648 | Input/Output: [(-83 74 -97 51) -97]
Test Case: 649 | Input/Output: [(16 -87 31 8) -87]
Test Case: 650 | Input/Output: [(-62 100 6 47) -62]
Test Case: 651 | Input/Output: [(77 -97 70 90) -97]
Test Case: 652 | Input/Output: [(-9 -84 7 -6) -84]
Test Case: 653 | Input/Output: [(27 45 -74 -99) -99]
Test Case: 654 | Input/Output: [(-34 -13 -88 39) -88]
Test Case: 655 | Input/Output: [(-45 29 -17 39) -45]
Test Case: 656 | Input/Output: [(77 57 -1 38) -1]
Test Case: 657 | Input/Output: [(26 -7 5 88) -7]
Test Case: 658 | Input/Output: [(-86 -18 31 7) -86]
Test Case: 659 | Input/Output: [(83 -32 -26 -1) -32]
Test Case: 660 | Input/Output: [(52 17 80 -24) -24]
Test Case: 661 | Input/Output: [(28 -50 88 -62) -62]
Test Case: 662 | Input/Output: [(-19 -49 -28 38) -49]
Test Case: 663 | Input/Output: [(-9 68 63 81) -9]
Test Case: 664 | Input/Output: [(-81 95 80 -84) -84]
Test Case: 665 | Input/Output: [(63 -19 -19 76) -19]
Test Case: 666 | Input/Output: [(18 32 89 32) 18]
Test Case: 667 | Input/Output: [(17 24 27 97) 17]
Test Case: 668 | Input/Output: [(84 51 -56 86) -56]
Test Case: 669 | Input/Output: [(0 48 13 -49) -49]
Test Case: 670 | Input/Output: [(51 16 100 -86) -86]
Test Case: 671 | Input/Output: [(-74 30 0 51) -74]
Test Case: 672 | Input/Output: [(-31 -40 -43 14) -43]
Test Case: 673 | Input/Output: [(53 66 -14 -47) -47]
Test Case: 674 | Input/Output: [(28 16 -80 -66) -80]
Test Case: 675 | Input/Output: [(-68 86 51 48) -68]
Test Case: 676 | Input/Output: [(29 75 97 -72) -72]
Test Case: 677 | Input/Output: [(-67 82 -44 93) -67]
Test Case: 678 | Input/Output: [(-26 -93 -63 52) -93]
Test Case: 679 | Input/Output: [(-19 -11 81 40) -19]
Test Case: 680 | Input/Output: [(-95 -26 -95 -17) -95]
Test Case: 681 | Input/Output: [(71 -82 3 95) -82]
Test Case: 682 | Input/Output: [(-11 51 87 70) -11]
Test Case: 683 | Input/Output: [(45 73 46 71) 45]
Test Case: 684 | Input/Output: [(-48 -88 -38 -78) -88]
Test Case: 685 | Input/Output: [(-6 -77 63 12) -77]
Test Case: 686 | Input/Output: [(20 -41 -41 9) -41]
Test Case: 687 | Input/Output: [(34 -31 31 1) -31]
Test Case: 688 | Input/Output: [(60 -94 50 -35) -94]
Test Case: 689 | Input/Output: [(67 79 34 12) 12]
Test Case: 690 | Input/Output: [(-61 -32 -43 -80) -80]
Test Case: 691 | Input/Output: [(-63 18 -41 66) -63]
Test Case: 692 | Input/Output: [(-30 -68 -38 39) -68]
Test Case: 693 | Input/Output: [(87 -4 -96 -51) -96]
Test Case: 694 | Input/Output: [(45 -42 46 24) -42]
Test Case: 695 | Input/Output: [(-40 40 -46 40) -46]
Test Case: 696 | Input/Output: [(72 35 26 -55) -55]
Test Case: 697 | Input/Output: [(-78 -56 13 -78) -78]
Test Case: 698 | Input/Output: [(-97 87 38 -4) -97]
Test Case: 699 | Input/Output: [(-72 78 32 -30) -72]
Test Case: 700 | Input/Output: [(-41 -9 25 -78) -78]
Test Case: 701 | Input/Output: [(39 -89 -6 50) -89]
Test Case: 702 | Input/Output: [(-58 34 51 -1) -58]
Test Case: 703 | Input/Output: [(94 19 -62 -48) -62]
Test Case: 704 | Input/Output: [(-84 -88 -62 -23) -88]
Test Case: 705 | Input/Output: [(93 -74 5 57) -74]
Test Case: 706 | Input/Output: [(100 30 31 58) 30]
Test Case: 707 | Input/Output: [(-7 -80 7 5) -80]
Test Case: 708 | Input/Output: [(0 59 58 -22) -22]
Test Case: 709 | Input/Output: [(-22 -64 80 -23) -64]
Test Case: 710 | Input/Output: [(-42 -35 32 -42) -42]
Test Case: 711 | Input/Output: [(21 11 56 61) 11]
Test Case: 712 | Input/Output: [(92 20 -84 -20) -84]
Test Case: 713 | Input/Output: [(-2 20 -53 51) -53]
Test Case: 714 | Input/Output: [(-24 -84 44 -7) -84]
Test Case: 715 | Input/Output: [(-20 -96 96 -42) -96]
Test Case: 716 | Input/Output: [(-93 97 -31 -62) -93]
Test Case: 717 | Input/Output: [(39 49 -3 -24) -24]
Test Case: 718 | Input/Output: [(1 -66 -19 -26) -66]
Test Case: 719 | Input/Output: [(23 17 2 -43) -43]
Test Case: 720 | Input/Output: [(36 59 28 92) 28]
Test Case: 721 | Input/Output: [(-41 -31 48 37) -41]
Test Case: 722 | Input/Output: [(58 39 74 1) 1]
Test Case: 723 | Input/Output: [(-80 -77 99 1) -80]
Test Case: 724 | Input/Output: [(-97 -24 -62 -54) -97]
Test Case: 725 | Input/Output: [(5 38 52 11) 5]
Test Case: 726 | Input/Output: [(-85 -41 71 -71) -85]
Test Case: 727 | Input/Output: [(77 89 -12 86) -12]
Test Case: 728 | Input/Output: [(41 89 35 -35) -35]
Test Case: 729 | Input/Output: [(85 -85 -89 -19) -89]
Test Case: 730 | Input/Output: [(80 -1 -13 -11) -13]
Test Case: 731 | Input/Output: [(41 -64 81 -10) -64]
Test Case: 732 | Input/Output: [(52 97 -98 99) -98]
Test Case: 733 | Input/Output: [(4 61 -59 0) -59]
Test Case: 734 | Input/Output: [(-35 22 0 -97) -97]
Test Case: 735 | Input/Output: [(-26 39 -6 -47) -47]
Test Case: 736 | Input/Output: [(-17 -12 86 -36) -36]
Test Case: 737 | Input/Output: [(-76 17 85 87) -76]
Test Case: 738 | Input/Output: [(-32 58 89 -28) -32]
Test Case: 739 | Input/Output: [(-84 87 -94 -73) -94]
Test Case: 740 | Input/Output: [(-94 -19 -84 67) -94]
Test Case: 741 | Input/Output: [(84 -8 -23 90) -23]
Test Case: 742 | Input/Output: [(-60 -10 -70 -3) -70]
Test Case: 743 | Input/Output: [(-65 53 -55 -11) -65]
Test Case: 744 | Input/Output: [(-79 -2 65 93) -79]
Test Case: 745 | Input/Output: [(-85 90 62 49) -85]
Test Case: 746 | Input/Output: [(57 -29 -17 75) -29]
Test Case: 747 | Input/Output: [(66 -27 -39 -63) -63]
Test Case: 748 | Input/Output: [(79 -65 -84 -57) -84]
Test Case: 749 | Input/Output: [(-62 89 -46 22) -62]
Test Case: 750 | Input/Output: [(31 25 19 31) 19]
Test Case: 751 | Input/Output: [(-94 51 33 40) -94]
Test Case: 752 | Input/Output: [(46 -36 59 -46) -46]
Test Case: 753 | Input/Output: [(-39 -74 10 13) -74]
Test Case: 754 | Input/Output: [(5 52 -76 -21) -76]
Test Case: 755 | Input/Output: [(-62 -68 -31 -15) -68]
Test Case: 756 | Input/Output: [(15 68 -60 66) -60]
Test Case: 757 | Input/Output: [(56 -17 -30 -80) -80]
Test Case: 758 | Input/Output: [(10 -41 55 -75) -75]
Test Case: 759 | Input/Output: [(-4 27 -65 72) -65]
Test Case: 760 | Input/Output: [(-64 97 -18 6) -64]
Test Case: 761 | Input/Output: [(-90 76 -18 -72) -90]
Test Case: 762 | Input/Output: [(25 45 96 58) 25]
Test Case: 763 | Input/Output: [(-2 -86 60 -27) -86]
Test Case: 764 | Input/Output: [(-3 25 -76 6) -76]
Test Case: 765 | Input/Output: [(-97 94 16 66) -97]
Test Case: 766 | Input/Output: [(12 58 -80 49) -80]
Test Case: 767 | Input/Output: [(12 98 77 -15) -15]
Test Case: 768 | Input/Output: [(93 3 -41 66) -41]
Test Case: 769 | Input/Output: [(-46 31 41 68) -46]
Test Case: 770 | Input/Output: [(-96 -88 -37 -98) -98]
Test Case: 771 | Input/Output: [(-60 -2 -8 59) -60]
Test Case: 772 | Input/Output: [(-28 -48 -64 23) -64]
Test Case: 773 | Input/Output: [(8 -18 87 -27) -27]
Test Case: 774 | Input/Output: [(66 -28 -65 73) -65]
Test Case: 775 | Input/Output: [(-87 -5 -50 -19) -87]
Test Case: 776 | Input/Output: [(84 51 66 60) 51]
Test Case: 777 | Input/Output: [(-61 -80 -75 36) -80]
Test Case: 778 | Input/Output: [(-33 79 -27 78) -33]
Test Case: 779 | Input/Output: [(50 -9 33 -91) -91]
Test Case: 780 | Input/Output: [(-7 -74 -78 27) -78]
Test Case: 781 | Input/Output: [(-94 96 82 27) -94]
Test Case: 782 | Input/Output: [(13 90 91 67) 13]
Test Case: 783 | Input/Output: [(-91 63 79 -39) -91]
Test Case: 784 | Input/Output: [(42 -67 89 -99) -99]
Test Case: 785 | Input/Output: [(14 -31 69 97) -31]
Test Case: 786 | Input/Output: [(95 -19 19 -71) -71]
Test Case: 787 | Input/Output: [(-84 84 86 36) -84]
Test Case: 788 | Input/Output: [(4 -77 23 -42) -77]
Test Case: 789 | Input/Output: [(44 -43 43 43) -43]
Test Case: 790 | Input/Output: [(93 53 33 47) 33]
Test Case: 791 | Input/Output: [(-31 34 69 46) -31]
Test Case: 792 | Input/Output: [(6 -7 -90 -83) -90]
Test Case: 793 | Input/Output: [(84 14 93 6) 6]
Test Case: 794 | Input/Output: [(76 -1 44 96) -1]
Test Case: 795 | Input/Output: [(-54 -58 3 99) -58]
Test Case: 796 | Input/Output: [(65 -16 -80 -27) -80]
Test Case: 797 | Input/Output: [(55 -90 53 45) -90]
Test Case: 798 | Input/Output: [(17 92 -27 -86) -86]
Test Case: 799 | Input/Output: [(-20 12 89 -69) -69]
Test Case: 800 | Input/Output: [(-17 25 11 92) -17]
Test Case: 801 | Input/Output: [(39 75 25 77) 25]
Test Case: 802 | Input/Output: [(-72 71 6 -78) -78]
Test Case: 803 | Input/Output: [(73 17 -57 68) -57]
Test Case: 804 | Input/Output: [(25 50 93 55) 25]
Test Case: 805 | Input/Output: [(-50 -16 -14 -16) -50]
Test Case: 806 | Input/Output: [(38 49 97 99) 38]
Test Case: 807 | Input/Output: [(-77 -29 -28 52) -77]
Test Case: 808 | Input/Output: [(64 62 56 62) 56]
Test Case: 809 | Input/Output: [(7 -74 -21 1) -74]
Test Case: 810 | Input/Output: [(-5 -31 -79 56) -79]
Test Case: 811 | Input/Output: [(83 80 -65 74) -65]
Test Case: 812 | Input/Output: [(-78 68 21 -87) -87]
Test Case: 813 | Input/Output: [(-25 -54 -74 100) -74]
Test Case: 814 | Input/Output: [(-14 75 -32 49) -32]
Test Case: 815 | Input/Output: [(-67 96 34 3) -67]
Test Case: 816 | Input/Output: [(46 41 87 -99) -99]
Test Case: 817 | Input/Output: [(23 -57 43 -72) -72]
Test Case: 818 | Input/Output: [(-8 -53 -34 10) -53]
Test Case: 819 | Input/Output: [(93 -70 82 17) -70]
Test Case: 820 | Input/Output: [(35 59 -27 11) -27]
Test Case: 821 | Input/Output: [(17 -14 -33 -46) -46]
Test Case: 822 | Input/Output: [(18 88 66 -41) -41]
Test Case: 823 | Input/Output: [(-14 -31 97 18) -31]
Test Case: 824 | Input/Output: [(-41 43 -52 -32) -52]
Test Case: 825 | Input/Output: [(18 4 46 -10) -10]
Test Case: 826 | Input/Output: [(94 -60 -20 75) -60]
Test Case: 827 | Input/Output: [(48 56 -36 25) -36]
Test Case: 828 | Input/Output: [(-98 8 -52 -59) -98]
Test Case: 829 | Input/Output: [(98 85 -79 91) -79]
Test Case: 830 | Input/Output: [(80 -96 58 16) -96]
Test Case: 831 | Input/Output: [(23 -56 78 -100) -100]
Test Case: 832 | Input/Output: [(87 70 15 -57) -57]
Test Case: 833 | Input/Output: [(43 47 16 -3) -3]
Test Case: 834 | Input/Output: [(96 14 -85 39) -85]
Test Case: 835 | Input/Output: [(-5 23 -11 -26) -26]
Test Case: 836 | Input/Output: [(100 -63 -35 -97) -97]
Test Case: 837 | Input/Output: [(33 61 50 -73) -73]
Test Case: 838 | Input/Output: [(-68 -27 -26 10) -68]
Test Case: 839 | Input/Output: [(28 61 52 48) 28]
Test Case: 840 | Input/Output: [(36 -79 93 -19) -79]
Test Case: 841 | Input/Output: [(65 54 23 24) 23]
Test Case: 842 | Input/Output: [(37 78 6 38) 6]
Test Case: 843 | Input/Output: [(-78 84 -83 -56) -83]
Test Case: 844 | Input/Output: [(-28 76 70 -72) -72]
Test Case: 845 | Input/Output: [(40 78 -90 -69) -90]
Test Case: 846 | Input/Output: [(-30 -37 -76 -38) -76]
Test Case: 847 | Input/Output: [(67 59 -4 -97) -97]
Test Case: 848 | Input/Output: [(3 -62 13 -44) -62]
Test Case: 849 | Input/Output: [(11 98 6 85) 6]
Test Case: 850 | Input/Output: [(-10 8 56 86) -10]
Test Case: 851 | Input/Output: [(-86 -18 12 -39) -86]
Test Case: 852 | Input/Output: [(-27 31 -10 50) -27]
Test Case: 853 | Input/Output: [(18 30 -98 -54) -98]
Test Case: 854 | Input/Output: [(-85 80 -42 92) -85]
Test Case: 855 | Input/Output: [(92 -21 8 -67) -67]
Test Case: 856 | Input/Output: [(75 81 50 -50) -50]
Test Case: 857 | Input/Output: [(63 82 29 46) 29]
Test Case: 858 | Input/Output: [(-46 -26 -90 -76) -90]
Test Case: 859 | Input/Output: [(19 -44 84 -42) -44]
Test Case: 860 | Input/Output: [(-34 100 -6 47) -34]
Test Case: 861 | Input/Output: [(-93 26 -99 -60) -99]
Test Case: 862 | Input/Output: [(36 40 8 3) 3]
Test Case: 863 | Input/Output: [(79 -78 7 -52) -78]
Test Case: 864 | Input/Output: [(-2 -6 16 45) -6]
Test Case: 865 | Input/Output: [(47 94 100 -71) -71]
Test Case: 866 | Input/Output: [(-96 -25 19 59) -96]
Test Case: 867 | Input/Output: [(-81 72 -18 15) -81]
Test Case: 868 | Input/Output: [(67 82 -35 2) -35]
Test Case: 869 | Input/Output: [(94 45 70 50) 45]
Test Case: 870 | Input/Output: [(75 37 92 29) 29]
Test Case: 871 | Input/Output: [(42 -31 -50 17) -50]
Test Case: 872 | Input/Output: [(18 17 16 81) 16]
Test Case: 873 | Input/Output: [(3 4 62 90) 3]
Test Case: 874 | Input/Output: [(-62 96 -34 49) -62]
Test Case: 875 | Input/Output: [(72 -40 54 -88) -88]
Test Case: 876 | Input/Output: [(-89 53 -71 -19) -89]
Test Case: 877 | Input/Output: [(-50 -39 40 38) -50]
Test Case: 878 | Input/Output: [(22 -93 -97 50) -97]
Test Case: 879 | Input/Output: [(-51 26 -44 32) -51]
Test Case: 880 | Input/Output: [(-83 -15 82 -29) -83]
Test Case: 881 | Input/Output: [(73 96 70 98) 70]
Test Case: 882 | Input/Output: [(-28 26 -7 -100) -100]
Test Case: 883 | Input/Output: [(-13 80 -29 -81) -81]
Test Case: 884 | Input/Output: [(49 40 54 38) 38]
Test Case: 885 | Input/Output: [(-13 17 -95 -52) -95]
Test Case: 886 | Input/Output: [(100 -76 -78 -71) -78]
Test Case: 887 | Input/Output: [(63 -13 64 17) -13]
Test Case: 888 | Input/Output: [(-77 42 -12 -20) -77]
Test Case: 889 | Input/Output: [(-93 -34 -76 -44) -93]
Test Case: 890 | Input/Output: [(-1 -63 -16 -48) -63]
Test Case: 891 | Input/Output: [(-95 24 -3 -55) -95]
Test Case: 892 | Input/Output: [(-15 7 -28 49) -28]
Test Case: 893 | Input/Output: [(39 -64 41 -29) -64]
Test Case: 894 | Input/Output: [(-53 -17 51 -45) -53]
Test Case: 895 | Input/Output: [(54 -21 -39 -71) -71]
Test Case: 896 | Input/Output: [(13 -26 47 -10) -26]
Test Case: 897 | Input/Output: [(-89 -77 -71 78) -89]
Test Case: 898 | Input/Output: [(-94 -1 -13 -8) -94]
Test Case: 899 | Input/Output: [(-79 84 -33 -2) -79]
Test Case: 900 | Input/Output: [(66 -48 -14 67) -48]
Test Case: 901 | Input/Output: [(42 -100 45 61) -100]
Test Case: 902 | Input/Output: [(6 58 -78 67) -78]
Test Case: 903 | Input/Output: [(19 31 44 -96) -96]
Test Case: 904 | Input/Output: [(37 66 -39 49) -39]
Test Case: 905 | Input/Output: [(-71 -85 57 -87) -87]
Test Case: 906 | Input/Output: [(43 -4 45 57) -4]
Test Case: 907 | Input/Output: [(-3 -4 32 44) -4]
Test Case: 908 | Input/Output: [(-17 -57 -39 40) -57]
Test Case: 909 | Input/Output: [(-52 63 94 15) -52]
Test Case: 910 | Input/Output: [(-43 -71 -69 79) -71]
Test Case: 911 | Input/Output: [(65 -68 -14 -66) -68]
Test Case: 912 | Input/Output: [(-84 -78 -73 -51) -84]
Test Case: 913 | Input/Output: [(92 -64 -65 -63) -65]
Test Case: 914 | Input/Output: [(-52 -63 94 -32) -63]
Test Case: 915 | Input/Output: [(44 75 8 -5) -5]
Test Case: 916 | Input/Output: [(-84 83 -89 -26) -89]
Test Case: 917 | Input/Output: [(-8 82 -85 -54) -85]
Test Case: 918 | Input/Output: [(82 70 77 19) 19]
Test Case: 919 | Input/Output: [(-22 58 34 28) -22]
Test Case: 920 | Input/Output: [(24 -47 -56 87) -56]
Test Case: 921 | Input/Output: [(76 -92 42 57) -92]
Test Case: 922 | Input/Output: [(94 91 -59 -35) -59]
Test Case: 923 | Input/Output: [(-31 54 11 95) -31]
Test Case: 924 | Input/Output: [(-90 -88 -29 96) -90]
Test Case: 925 | Input/Output: [(-45 -94 29 29) -94]
Test Case: 926 | Input/Output: [(67 3 -4 -41) -41]
Test Case: 927 | Input/Output: [(13 27 -1 -48) -48]
Test Case: 928 | Input/Output: [(83 -84 25 -49) -84]
Test Case: 929 | Input/Output: [(89 -82 14 97) -82]
Test Case: 930 | Input/Output: [(-90 5 26 -64) -90]
Test Case: 931 | Input/Output: [(-71 93 -95 -55) -95]
Test Case: 932 | Input/Output: [(-14 56 77 20) -14]
Test Case: 933 | Input/Output: [(-76 70 -84 -87) -87]
Test Case: 934 | Input/Output: [(-44 -94 -24 11) -94]
Test Case: 935 | Input/Output: [(-53 -93 28 19) -93]
Test Case: 936 | Input/Output: [(80 88 85 32) 32]
Test Case: 937 | Input/Output: [(77 -75 28 -75) -75]
Test Case: 938 | Input/Output: [(12 -60 -71 -46) -71]
Test Case: 939 | Input/Output: [(35 31 99 -14) -14]
Test Case: 940 | Input/Output: [(10 -42 -83 -98) -98]
Test Case: 941 | Input/Output: [(-100 -25 -60 4) -100]
Test Case: 942 | Input/Output: [(79 -51 49 -81) -81]
Test Case: 943 | Input/Output: [(-12 77 -85 -24) -85]
Test Case: 944 | Input/Output: [(47 -33 78 -91) -91]
Test Case: 945 | Input/Output: [(21 40 20 46) 20]
Test Case: 946 | Input/Output: [(18 4 -88 16) -88]
Test Case: 947 | Input/Output: [(-42 98 -46 -51) -51]
Test Case: 948 | Input/Output: [(70 -20 78 55) -20]
Test Case: 949 | Input/Output: [(-26 94 -23 -81) -81]
Test Case: 950 | Input/Output: [(83 46 -37 22) -37]
Test Case: 951 | Input/Output: [(48 58 82 61) 48]
Test Case: 952 | Input/Output: [(73 -17 -53 69) -53]
Test Case: 953 | Input/Output: [(-80 37 -5 75) -80]
Test Case: 954 | Input/Output: [(-54 -80 36 -22) -80]
Test Case: 955 | Input/Output: [(-70 18 -3 51) -70]
Test Case: 956 | Input/Output: [(-47 -36 -86 53) -86]
Test Case: 957 | Input/Output: [(-63 91 -47 22) -63]
Test Case: 958 | Input/Output: [(-85 49 -26 90) -85]
Test Case: 959 | Input/Output: [(56 100 -41 -7) -41]
Test Case: 960 | Input/Output: [(-89 -87 -30 1) -89]
Test Case: 961 | Input/Output: [(65 76 26 28) 26]
Test Case: 962 | Input/Output: [(54 80 -27 -19) -27]
Test Case: 963 | Input/Output: [(87 51 -45 22) -45]
Test Case: 964 | Input/Output: [(52 -41 -10 -55) -55]
Test Case: 965 | Input/Output: [(48 -1 -42 -83) -83]
Test Case: 966 | Input/Output: [(-52 -4 -81 42) -81]
Test Case: 967 | Input/Output: [(-73 52 -47 -30) -73]
Test Case: 968 | Input/Output: [(64 -76 -61 45) -76]
Test Case: 969 | Input/Output: [(0 56 -59 66) -59]
Test Case: 970 | Input/Output: [(-87 -4 -47 -88) -88]
Test Case: 971 | Input/Output: [(16 -1 -8 -8) -8]
Test Case: 972 | Input/Output: [(50 -85 -31 -27) -85]
Test Case: 973 | Input/Output: [(77 -63 -48 42) -63]
Test Case: 974 | Input/Output: [(-6 -22 83 -10) -22]
Test Case: 975 | Input/Output: [(-23 58 75 -43) -43]
Test Case: 976 | Input/Output: [(-71 90 47 -46) -71]
Test Case: 977 | Input/Output: [(100 -81 68 -3) -81]
Test Case: 978 | Input/Output: [(-5 -100 18 -29) -100]
Test Case: 979 | Input/Output: [(-72 3 29 3) -72]
Test Case: 980 | Input/Output: [(72 -82 -43 80) -82]
Test Case: 981 | Input/Output: [(71 -69 32 -24) -69]
Test Case: 982 | Input/Output: [(90 -48 45 85) -48]
Test Case: 983 | Input/Output: [(-1 -19 73 95) -19]
Test Case: 984 | Input/Output: [(14 -4 -64 95) -64]
Test Case: 985 | Input/Output: [(-51 58 -20 -29) -51]
Test Case: 986 | Input/Output: [(-11 -92 91 -30) -92]
Test Case: 987 | Input/Output: [(-34 -79 85 65) -79]
Test Case: 988 | Input/Output: [(-33 93 -68 58) -68]
Test Case: 989 | Input/Output: [(-86 -15 33 -21) -86]
Test Case: 990 | Input/Output: [(78 99 66 -23) -23]
Test Case: 991 | Input/Output: [(-90 -31 -47 -17) -90]
Test Case: 992 | Input/Output: [(77 63 -92 -68) -92]
Test Case: 993 | Input/Output: [(-34 -68 94 -75) -75]
Test Case: 994 | Input/Output: [(85 18 -82 22) -82]
Test Case: 995 | Input/Output: [(-66 89 15 39) -66]
Test Case: 996 | Input/Output: [(-43 2 -91 78) -91]
Test Case: 997 | Input/Output: [(-97 84 50 69) -97]
Test Case: 998 | Input/Output: [(58 77 90 -49) -49]
Test Case: 999 | Input/Output: [(-38 -80 -40 53) -80]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 104 37 91 -95 93 -49 -46 59 -121 29 -33 -65 -45 -127 62 125
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[91 -90 91 91] -90] [[86 86 86 44] 44] [[-68 34 -68 -68] -68] [[-25 -46 -25 -25] -46] [[62 62 62 -54] -54] [[5 26 26 26] 5] [[-8 -8 -13 -8] -13] [[57 33 57 57] 33] [[31 31 -10 31] -10] [[-95 74 -95 -95] -95] [(47 47 47 47) 47] [(26 26 26 26) 26] [(50 50 50 50) 50] [(35 35 35 35) 35] [(-43 -43 -43 -43) -43] [(87 64 23 83) 23] [(29 0 6 83) 0] [(90 73 42 78) 42] [(23 88 50 60) 23] [(31 87 31 97) 31] [(20 48 30 47) 20] [(86 9 67 26) 9] [(33 59 16 78) 16] [(15 57 75 22) 15] [(43 3 2 73) 2] [(46 29 23 95) 23] [(10 16 37 16) 10] [(52 30 1 91) 1] [(34 78 97 97) 34] [(20 41 60 82) 20] [(70 15 9 100) 9] [(42 72 3 78) 3] [(39 28 76 81) 28] [(14 18 42 62) 14] [(46 51 50 47) 46] [(-96 82 50 36) -96] [(-61 -53 93 -25) -61] [(-19 86 -78 -71) -78] [(-19 0 55 -91) -91] [(55 -95 21 34) -95] [(28 -73 -84 -65) -84] [(-51 -71 -66 -50) -71] [(-74 98 40 12) -74] [(-60 10 18 42) -60] [(100 -12 20 -55) -55] [(-42 97 14 -41) -42] [(47 -75 -76 47) -76] [(27 -95 -86 -93) -95] [(87 0 85 -96) -96] [(-43 22 35 -38) -43] [(-45 97 20 98) -45] [(-56 10 16 81) -56] [(-75 -1 30 -46) -75] [(-87 -55 27 -23) -87] [(-81 44 55 41) -81] [(-82 -90 -20 79) -90] [(-64 -19 61 -33) -64] [(-41 -75 -43 -62) -75] [(35 -3 -97 -46) -97] [(59 -47 -41 -54) -54] [(56 3 -95 -10) -95] [(35 -21 -97 52) -97] [(-52 73 -85 -40) -85] [(-81 61 51 77) -81] [(10 -19 65 -19) -19] [(95 24 -58 82) -58] [(29 -46 67 -42) -46] [(-78 96 -15 -42) -78] [(-93 59 56 25) -93] [(18 -8 -35 -62) -62] [(-90 -1 -47 -82) -90] [(85 -70 74 100) -70] [(-9 61 -28 32) -28] [(-20 -82 15 -25) -82] [(74 -5 17 19) -5] [(-45 87 6 68) -45] [(83 -11 -23 -20) -23] [(92 92 -61 -30) -61] [(-26 23 -55 79) -55] [(-4 33 -95 63) -95] [(-82 88 94 -6) -82] [(-65 4 57 7) -65] [(-36 10 23 29) -36] [(60 -4 -53 41) -53] [(79 63 -34 72) -34] [(97 54 -17 86) -17] [(-82 -70 47 75) -82] [(-49 -16 90 -12) -49] [(8 -36 71 -54) -54] [(78 -71 76 -54) -71] [(18 -15 3 36) -15] [(44 55 28 -73) -73] [(-22 38 13 -83) -83] [(13 80 62 -63) -63] [(-53 -87 -9 -33) -87])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_397} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction 100} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_invert_second_then_and boolean_or integer_div boolean_swap exec_do*while (exec_swap (exec_do*while ()) (exec_k_when_autoconstructing () (boolean_invert_second_then_and exec_empty integer_sub integer_dup_items) tag_boolean_397 exec_k (boolean_invert_first_then_and exec_y_when_autoconstructing (in3 in4 integer_min) print_boolean exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) exec_eq) exec_yankdup boolean_invert_second_then_and) (100) integer_dup_times) exec_do*times (integer_rot boolean_or)))
Lexicase best errors: [1 0 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 61
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_397} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction 100} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_invert_second_then_and boolean_or integer_div boolean_swap exec_do*while (exec_swap (exec_do*while ()) (exec_k_when_autoconstructing () (boolean_invert_second_then_and exec_empty integer_sub integer_dup_items) tag_boolean_397 exec_k (boolean_invert_first_then_and exec_y_when_autoconstructing (in3 in4 integer_min) print_boolean exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) exec_eq) exec_yankdup boolean_invert_second_then_and) (100) integer_dup_times) exec_do*times (integer_rot boolean_or)))
Zero cases best errors: [1 0 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 61
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 4 5 4 5 3 2 5 4 13)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (11 4 5 4 5 3 2 5 4 13)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction 18} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_759} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if})
Best program: (18 boolean_pop exec_yankdup exec_empty integer_gt integer_swap boolean_invert_first_then_and print_integer in3 integer_yank integer_div exec_do*while (print_integer print_integer) integer_min boolean_eq in3 integer_dup exec_stackdepth exec_while (boolean_not) boolean_not boolean_invert_first_then_and integer_div integer_flush exec_flush exec_y_when_autoconstructing (boolean_yankdup) integer_empty boolean_not exec_shove () in4 integer_mod integer_div exec_stackdepth tagged_759 integer_min boolean_invert_first_then_and boolean_and exec_do*times (exec_dup (boolean_frominteger exec_do*times (integer_add exec_stackdepth) exec_do*times (integer_dup boolean_and exec_shove () boolean_dup) exec_do*range (exec_do*range (exec_if () ())))))
Errors: [1 0 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 53
Size: 67
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 9.944
Median total errors in population: 10
Error averages by case: (0.989 0.996 0.995 0.996 0.995 0.997 0.998 0.995 0.996 0.987)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.617
Average program size in population (points): 66.682
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 504946
--- Timings ---
Current time: 1559582690064 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.4%
Reproduction:         0.7 seconds, 25.8%
Fitness Testing:      1.9 seconds, 70.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 376
Test mean error for best: 0.37600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 47                 
Correct output: -96                 | Program output: 36                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 12                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -41                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -38                
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 41                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -42                
Correct output: -93                 | Program output: 25                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -6                 
Correct output: -65                 | Program output: 7                  
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_397} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction 100} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_invert_second_then_and boolean_or integer_div boolean_swap exec_do*while (exec_swap (exec_do*while ()) (exec_k_when_autoconstructing () (boolean_invert_second_then_and exec_empty integer_sub integer_dup_items) tag_boolean_397 exec_k (boolean_invert_first_then_and exec_y_when_autoconstructing (in3 in4 integer_min) in2 exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) exec_eq) exec_yankdup boolean_invert_second_then_and) (100) integer_dup_times) exec_do*times (integer_rot boolean_or)))
Lexicase best errors: [0 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 61
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_397} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction 100} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_invert_second_then_and boolean_or integer_div boolean_swap exec_do*while (exec_swap (exec_do*while ()) (exec_k_when_autoconstructing () (boolean_invert_second_then_and exec_empty integer_sub integer_dup_items) tag_boolean_397 exec_k (boolean_invert_first_then_and exec_y_when_autoconstructing (in3 in4 integer_min) in2 exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) exec_eq) exec_yankdup boolean_invert_second_then_and) (100) integer_dup_times) exec_do*times (integer_rot boolean_or)))
Zero cases best errors: [0 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 61
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (267 134 103 173 103 511 103 268 134 619)
Population mean number of elite cases: 2.41
Count of perfect (error zero) individuals by case: (267 134 103 173 103 511 103 268 134 619)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_397} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction 100} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Best program: (boolean_invert_second_then_and boolean_or integer_div boolean_swap exec_do*while (exec_swap (exec_do*while ()) (exec_k_when_autoconstructing () (boolean_invert_second_then_and exec_empty integer_sub integer_dup_items) tag_boolean_397 exec_k (boolean_invert_first_then_and exec_y_when_autoconstructing (in3 in4 integer_min) in2 exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) exec_eq) exec_yankdup boolean_invert_second_then_and) (100) integer_dup_times) exec_do*times (integer_rot boolean_or)))
Errors: [0 0 1 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 42
Size: 61
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 7.585
Median total errors in population: 13/2
Error averages by case: (0.733 0.866 0.897 0.827 0.897 0.489 0.897 0.732 0.866 0.381)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.831
Average program size in population (points): 69.733
Average percent parens in population: 0.270
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.507
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 154
Genome diversity (% unique genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 954188
--- Timings ---
Current time: 1559582692722 milliseconds
Total Time:           5.4 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.4 seconds, 43.7%
Fitness Testing:      2.5 seconds, 47.0%
Report:               0.4 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 381
Test mean error for best: 0.38100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -71                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 82                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 72                 
Correct output: -17                 | Program output: 86                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction 100} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) exec_eq) exec_yankdup boolean_invert_second_then_and) (100) (integer_dup_times) exec_do*times (integer_rot boolean_or)))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 57
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction 100} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) exec_eq) exec_yankdup boolean_invert_second_then_and) (100) (integer_dup_times) exec_do*times (integer_rot boolean_or)))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 57
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 544 812 270 549 423 268 407 407 426)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (269 544 812 270 549 423 268 407 407 426)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction 100} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) exec_eq) exec_yankdup boolean_invert_second_then_and) (100) (integer_dup_times) exec_do*times (integer_rot boolean_or)))
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 40
Size: 57
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 5.625
Median total errors in population: 6
Error averages by case: (0.731 0.456 0.188 0.73 0.451 0.577 0.732 0.593 0.593 0.574)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.159
Average program size in population (points): 68.417
Average percent parens in population: 0.296
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.7365
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 248
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 248
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1555566
--- Timings ---
Current time: 1559582696339 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.6 seconds, 53.0%
Fitness Testing:      3.2 seconds, 37.1%
Report:               0.8 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 325
Test mean error for best: 0.32500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -71                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (in2 exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or)) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 52
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (in2 exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or)) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 52
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (855 4 903 529 903 865 522 527 329 520)
Population mean number of elite cases: 5.96
Count of perfect (error zero) individuals by case: (855 4 903 529 903 865 522 527 329 520)
Population mean number of perfect (error zero) cases: 5.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (in2 exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or)) ()))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 52
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 4.043
Median total errors in population: 2
Error averages by case: (0.145 0.996 0.097 0.471 0.097 0.135 0.478 0.473 0.671 0.48)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.941
Average program size in population (points): 58.851
Average percent parens in population: 0.304
Minimum age in population: 3.0
Maximum age in population: 5.5
Average age in population: 4.3225
Median age in population: 4.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 308
Genome diversity (% unique genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 309
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.01
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2644736
--- Timings ---
Current time: 1559582699833 milliseconds
Total Time:          12.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.6 seconds, 53.7%
Fitness Testing:      4.2 seconds, 33.9%
Report:               1.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -20                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 48
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 48
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (871 703 709 709 903 704 853 138 12 901)
Population mean number of elite cases: 6.50
Count of perfect (error zero) individuals by case: (871 703 709 709 903 704 853 138 12 901)
Population mean number of perfect (error zero) cases: 6.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 51
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 3.497
Median total errors in population: 2
Error averages by case: (0.129 0.297 0.291 0.291 0.097 0.296 0.147 0.862 0.988 0.099)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.062
Average program size in population (points): 53.643
Average percent parens in population: 0.309
Minimum age in population: 4.0
Maximum age in population: 6.75
Average age in population: 5.102125
Median age in population: 5.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 486
Genome diversity (% unique genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 488
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.01
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3592898
--- Timings ---
Current time: 1559582702889 milliseconds
Total Time:          15.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.5 seconds, 54.7%
Fitness Testing:      5.0 seconds, 32.2%
Report:               2.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -20                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_invert_first_then_and exec_k () (print_boolean integer_div integer_max) boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 55
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_invert_first_then_and exec_k () (print_boolean integer_div integer_max) boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 55
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (886 890 895 882 858 727 881 729 1 730)
Population mean number of elite cases: 7.48
Count of perfect (error zero) individuals by case: (886 890 895 882 858 727 881 729 1 730)
Population mean number of perfect (error zero) cases: 7.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 51
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 2.521
Median total errors in population: 1
Error averages by case: (0.114 0.11 0.105 0.118 0.142 0.273 0.119 0.271 0.999 0.27)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.478
Average program size in population (points): 51.112
Average percent parens in population: 0.306
Minimum age in population: 5.0
Maximum age in population: 8.0
Average age in population: 6.8056875
Median age in population: 6.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 194
Genome diversity (% unique genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3945182
--- Timings ---
Current time: 1559582705398 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.4 seconds, 57.3%
Fitness Testing:      5.4 seconds, 29.9%
Report:               2.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -20                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ())
Lexicase best errors: [1 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ())
Zero cases best errors: [1 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 767 769 870 99 767 906 870 99 767)
Population mean number of elite cases: 5.92
Count of perfect (error zero) individuals by case: (4 767 769 870 99 767 906 870 99 767)
Population mean number of perfect (error zero) cases: 5.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Errors: [1 0 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 49
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 4.082
Median total errors in population: 3
Error averages by case: (0.996 0.233 0.231 0.13 0.901 0.233 0.094 0.13 0.901 0.233)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.972
Average program size in population (points): 50.41
Average percent parens in population: 0.306
Minimum age in population: 6.5
Maximum age in population: 9.71875
Average age in population: 8.19275
Median age in population: 8.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4338240
--- Timings ---
Current time: 1559582708053 milliseconds
Total Time:          20.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.4 seconds, 59.5%
Fitness Testing:      5.8 seconds, 28.0%
Report:               2.5 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -20                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 exec_s (tagged_615 exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ())) () ()))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 56
Percent parens: 0.339
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 exec_s (tagged_615 exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ())) () ()))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 56
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (361 860 494 638 498 497 494 859 639 638)
Population mean number of elite cases: 5.98
Count of perfect (error zero) individuals by case: (361 860 494 638 498 497 494 859 639 638)
Population mean number of perfect (error zero) cases: 5.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (in2 integer_min boolean_empty exec_s_when_autoconstructing (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) (integer_rot boolean_or)) ()))
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 36
Size: 51
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 4.022
Median total errors in population: 3
Error averages by case: (0.639 0.14 0.506 0.362 0.502 0.503 0.506 0.141 0.361 0.362)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.073
Average program size in population (points): 57.033
Average percent parens in population: 0.326
Minimum age in population: 8.0
Maximum age in population: 11.59375
Average age in population: 9.4925
Median age in population: 9.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4735687
--- Timings ---
Current time: 1559582710568 milliseconds
Total Time:          23.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.2 seconds, 61.0%
Fitness Testing:      6.3 seconds, 26.8%
Report:               2.8 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 248
Test mean error for best: 0.24800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -41                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -38                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -46                
Correct output: -87                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -33                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -42                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -82                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -12                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div boolean_not) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (boolean_empty exec_do*range (exec_s (tagged_615 boolean_invert_first_then_and exec_y_when_autoconstructing (in3 in4 integer_min) boolean_rot exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or)))) () ())) ()))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 83
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div boolean_not) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (boolean_empty exec_do*range (exec_s (tagged_615 boolean_invert_first_then_and exec_y_when_autoconstructing (in3 in4 integer_min) boolean_rot exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or)))) () ())) ()))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 83
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (843 598 670 599 670 400 851 399 843 832)
Population mean number of elite cases: 6.70
Count of perfect (error zero) individuals by case: (843 598 670 599 670 400 851 399 843 832)
Population mean number of perfect (error zero) cases: 6.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div boolean_not) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not boolean_empty in4 integer_min) in2 integer_min) (boolean_empty exec_do*range (exec_s (tagged_615 boolean_invert_first_then_and exec_y_when_autoconstructing (in3 in4 integer_min) boolean_rot exec_do*times (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or)))) () ())) ()))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 55
Size: 83
Percent parens: 0.337
--- Population Statistics ---
Average total errors in population: 3.295
Median total errors in population: 2
Error averages by case: (0.157 0.402 0.33 0.401 0.33 0.6 0.149 0.601 0.157 0.168)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.634
Average program size in population (points): 57.639
Average percent parens in population: 0.325
Minimum age in population: 9.0
Maximum age in population: 12.875
Average age in population: 11.0403515625
Median age in population: 11.0859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.01
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5173531
--- Timings ---
Current time: 1559582713514 milliseconds
Total Time:          26.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.2 seconds, 62.3%
Fitness Testing:      6.7 seconds, 25.7%
Report:               3.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Lexicase best errors: [0 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 51
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Zero cases best errors: [0 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 51
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (609 412 612 820 850 632 611 620 212 206)
Population mean number of elite cases: 5.58
Count of perfect (error zero) individuals by case: (609 412 612 820 850 632 611 620 212 206)
Population mean number of perfect (error zero) cases: 5.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Errors: [0 1 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 36
Size: 51
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 4.416
Median total errors in population: 3
Error averages by case: (0.391 0.588 0.388 0.18 0.15 0.368 0.389 0.38 0.788 0.794)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.188
Average program size in population (points): 67.19
Average percent parens in population: 0.323
Minimum age in population: 10.0
Maximum age in population: 14.4375
Average age in population: 12.7485625
Median age in population: 12.69921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 218
Genome diversity (% unique genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 219
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.009
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5718311
--- Timings ---
Current time: 1559582716315 milliseconds
Total Time:          29.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.2 seconds, 62.5%
Fitness Testing:      7.3 seconds, 25.0%
Report:               3.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 214
Test mean error for best: 0.21400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 51
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 51
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (709 517 734 554 841 554 871 649 737 735)
Population mean number of elite cases: 6.90
Count of perfect (error zero) individuals by case: (709 517 734 554 841 554 871 649 737 735)
Population mean number of perfect (error zero) cases: 6.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or})
Best program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 36
Size: 51
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 3.099
Median total errors in population: 2
Error averages by case: (0.291 0.483 0.266 0.446 0.159 0.446 0.129 0.351 0.263 0.265)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.095
Average program size in population (points): 60.074
Average percent parens in population: 0.311
Minimum age in population: 11.1875
Maximum age in population: 16.1640625
Average age in population: 14.67453125
Median age in population: 14.890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 198
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.01
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6118201
--- Timings ---
Current time: 1559582718930 milliseconds
Total Time:          31.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.0 seconds, 63.3%
Fitness Testing:      7.7 seconds, 24.4%
Report:               3.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 10
Successful program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 51


Auto-simplifying with starting size: 51
step: 0
program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 500
program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 1000
program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 1500
program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 2000
program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 2500
program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 3000
program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 3500
program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 4000
program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 4500
program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 5000
program: (boolean_invert_first_then_and exec_k () (exec_yankdup integer_div integer_max) boolean_and integer_sub exec_do*range (exec_s (tagged_615 integer_dec exec_y_when_autoconstructing (in1 boolean_not in3 in4 integer_min) print_boolean integer_min) (in2 integer_swap boolean_empty exec_s_when_autoconstructing () (print_integer) (exec_k () (integer_flush in4 boolean_pop) boolean_rot boolean_shove exec_k_when_autoconstructing () (boolean_xor boolean_dup boolean_flush)) integer_rot boolean_or) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 214
Test mean error for best: 0.21400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -53                
;;******************************
