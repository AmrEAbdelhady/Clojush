Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-48 -48 -48 -99] -99] [[27 4 4 4] 4] [[-93 -99 -99 -99] -99] [[10 74 10 10] 10] [[-23 -50 -23 -23] -50] [[-22 -22 -22 -65] -65] [[-25 -25 -25 48] -25] [[42 -16 42 42] -16] [[-9 -68 -9 -9] -68] [[72 72 64 72] 64] [(52 52 52 52) 52] [(-67 -67 -67 -67) -67] [(44 44 44 44) 44] [(-85 -85 -85 -85) -85] [(92 92 92 92) 92] [(19 8 4 59) 4] [(14 89 54 20) 14] [(19 28 28 91) 19] [(80 68 73 17) 17] [(75 46 30 51) 30] [(35 90 42 50) 35] [(69 65 53 18) 18] [(21 92 46 96) 21] [(41 2 65 12) 2] [(52 95 89 100) 52] [(45 65 6 45) 6] [(31 84 60 45) 31] [(46 56 65 0) 0] [(31 53 29 56) 29] [(91 10 17 55) 10] [(80 65 18 55) 18] [(8 26 45 59) 8] [(65 91 67 13) 13] [(69 16 31 55) 16] [(73 65 18 95) 18] [(63 30 -86 -55) -86] [(44 -6 -100 -56) -100] [(-92 -78 99 -73) -92] [(1 98 38 -83) -83] [(-17 91 42 19) -17] [(5 81 -79 -53) -79] [(47 -60 -80 -71) -80] [(0 69 46 12) 0] [(77 -74 -48 -19) -74] [(35 -30 3 44) -30] [(9 30 75 79) 9] [(47 38 18 18) 18] [(-60 -9 95 17) -60] [(30 40 40 38) 30] [(-76 -54 -27 33) -76] [(-94 0 -74 -28) -94] [(5 -65 77 -91) -91] [(49 31 29 55) 29] [(-94 -84 37 -35) -94] [(96 -42 -22 -20) -42] [(-92 77 -88 73) -92] [(71 84 -16 -22) -22] [(55 -51 45 -24) -51] [(59 -62 18 4) -62] [(38 -66 76 -48) -66] [(-37 31 7 -17) -37] [(70 75 -86 5) -86] [(87 -94 -33 -26) -94] [(-76 36 6 -18) -76] [(19 82 42 29) 19] [(71 21 -2 -18) -18] [(57 -51 97 93) -51] [(-88 -13 47 -18) -88] [(-30 -92 -90 -46) -92] [(52 50 -55 -82) -82] [(-65 4 -62 -24) -65] [(14 63 -98 -43) -98] [(-87 12 43 -58) -87] [(-6 87 -52 42) -52] [(-88 -62 -56 -75) -88] [(1 30 32 -56) -56] [(-72 -41 71 3) -72] [(-23 33 95 -9) -23] [(28 99 -75 87) -75] [(22 -29 19 8) -29] [(-54 -61 -83 -62) -83] [(-98 -26 62 -80) -98] [(26 -78 -35 -14) -78] [(2 61 14 -42) -42] [(28 39 36 19) 19] [(92 -54 100 44) -54] [(40 42 -99 16) -99] [(18 28 88 2) 2] [(-11 37 48 -63) -63] [(-19 -98 -16 85) -98] [(-3 -68 3 26) -68] [(61 -61 -59 32) -61] [(-9 -65 -32 -49) -65] [(68 -37 -65 53) -65] [(94 2 -91 82) -91])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-48 -48 -48 -99] -99]
Train Case:   6 | Input/Output: [[27 4 4 4] 4]
Train Case:   7 | Input/Output: [[-93 -99 -99 -99] -99]
Train Case:   8 | Input/Output: [[10 74 10 10] 10]
Train Case:   9 | Input/Output: [[-23 -50 -23 -23] -50]
Train Case:  10 | Input/Output: [[-22 -22 -22 -65] -65]
Train Case:  11 | Input/Output: [[-25 -25 -25 48] -25]
Train Case:  12 | Input/Output: [[42 -16 42 42] -16]
Train Case:  13 | Input/Output: [[-9 -68 -9 -9] -68]
Train Case:  14 | Input/Output: [[72 72 64 72] 64]
Train Case:  15 | Input/Output: [(52 52 52 52) 52]
Train Case:  16 | Input/Output: [(-67 -67 -67 -67) -67]
Train Case:  17 | Input/Output: [(44 44 44 44) 44]
Train Case:  18 | Input/Output: [(-85 -85 -85 -85) -85]
Train Case:  19 | Input/Output: [(92 92 92 92) 92]
Train Case:  20 | Input/Output: [(19 8 4 59) 4]
Train Case:  21 | Input/Output: [(14 89 54 20) 14]
Train Case:  22 | Input/Output: [(19 28 28 91) 19]
Train Case:  23 | Input/Output: [(80 68 73 17) 17]
Train Case:  24 | Input/Output: [(75 46 30 51) 30]
Train Case:  25 | Input/Output: [(35 90 42 50) 35]
Train Case:  26 | Input/Output: [(69 65 53 18) 18]
Train Case:  27 | Input/Output: [(21 92 46 96) 21]
Train Case:  28 | Input/Output: [(41 2 65 12) 2]
Train Case:  29 | Input/Output: [(52 95 89 100) 52]
Train Case:  30 | Input/Output: [(45 65 6 45) 6]
Train Case:  31 | Input/Output: [(31 84 60 45) 31]
Train Case:  32 | Input/Output: [(46 56 65 0) 0]
Train Case:  33 | Input/Output: [(31 53 29 56) 29]
Train Case:  34 | Input/Output: [(91 10 17 55) 10]
Train Case:  35 | Input/Output: [(80 65 18 55) 18]
Train Case:  36 | Input/Output: [(8 26 45 59) 8]
Train Case:  37 | Input/Output: [(65 91 67 13) 13]
Train Case:  38 | Input/Output: [(69 16 31 55) 16]
Train Case:  39 | Input/Output: [(73 65 18 95) 18]
Train Case:  40 | Input/Output: [(63 30 -86 -55) -86]
Train Case:  41 | Input/Output: [(44 -6 -100 -56) -100]
Train Case:  42 | Input/Output: [(-92 -78 99 -73) -92]
Train Case:  43 | Input/Output: [(1 98 38 -83) -83]
Train Case:  44 | Input/Output: [(-17 91 42 19) -17]
Train Case:  45 | Input/Output: [(5 81 -79 -53) -79]
Train Case:  46 | Input/Output: [(47 -60 -80 -71) -80]
Train Case:  47 | Input/Output: [(0 69 46 12) 0]
Train Case:  48 | Input/Output: [(77 -74 -48 -19) -74]
Train Case:  49 | Input/Output: [(35 -30 3 44) -30]
Train Case:  50 | Input/Output: [(9 30 75 79) 9]
Train Case:  51 | Input/Output: [(47 38 18 18) 18]
Train Case:  52 | Input/Output: [(-60 -9 95 17) -60]
Train Case:  53 | Input/Output: [(30 40 40 38) 30]
Train Case:  54 | Input/Output: [(-76 -54 -27 33) -76]
Train Case:  55 | Input/Output: [(-94 0 -74 -28) -94]
Train Case:  56 | Input/Output: [(5 -65 77 -91) -91]
Train Case:  57 | Input/Output: [(49 31 29 55) 29]
Train Case:  58 | Input/Output: [(-94 -84 37 -35) -94]
Train Case:  59 | Input/Output: [(96 -42 -22 -20) -42]
Train Case:  60 | Input/Output: [(-92 77 -88 73) -92]
Train Case:  61 | Input/Output: [(71 84 -16 -22) -22]
Train Case:  62 | Input/Output: [(55 -51 45 -24) -51]
Train Case:  63 | Input/Output: [(59 -62 18 4) -62]
Train Case:  64 | Input/Output: [(38 -66 76 -48) -66]
Train Case:  65 | Input/Output: [(-37 31 7 -17) -37]
Train Case:  66 | Input/Output: [(70 75 -86 5) -86]
Train Case:  67 | Input/Output: [(87 -94 -33 -26) -94]
Train Case:  68 | Input/Output: [(-76 36 6 -18) -76]
Train Case:  69 | Input/Output: [(19 82 42 29) 19]
Train Case:  70 | Input/Output: [(71 21 -2 -18) -18]
Train Case:  71 | Input/Output: [(57 -51 97 93) -51]
Train Case:  72 | Input/Output: [(-88 -13 47 -18) -88]
Train Case:  73 | Input/Output: [(-30 -92 -90 -46) -92]
Train Case:  74 | Input/Output: [(52 50 -55 -82) -82]
Train Case:  75 | Input/Output: [(-65 4 -62 -24) -65]
Train Case:  76 | Input/Output: [(14 63 -98 -43) -98]
Train Case:  77 | Input/Output: [(-87 12 43 -58) -87]
Train Case:  78 | Input/Output: [(-6 87 -52 42) -52]
Train Case:  79 | Input/Output: [(-88 -62 -56 -75) -88]
Train Case:  80 | Input/Output: [(1 30 32 -56) -56]
Train Case:  81 | Input/Output: [(-72 -41 71 3) -72]
Train Case:  82 | Input/Output: [(-23 33 95 -9) -23]
Train Case:  83 | Input/Output: [(28 99 -75 87) -75]
Train Case:  84 | Input/Output: [(22 -29 19 8) -29]
Train Case:  85 | Input/Output: [(-54 -61 -83 -62) -83]
Train Case:  86 | Input/Output: [(-98 -26 62 -80) -98]
Train Case:  87 | Input/Output: [(26 -78 -35 -14) -78]
Train Case:  88 | Input/Output: [(2 61 14 -42) -42]
Train Case:  89 | Input/Output: [(28 39 36 19) 19]
Train Case:  90 | Input/Output: [(92 -54 100 44) -54]
Train Case:  91 | Input/Output: [(40 42 -99 16) -99]
Train Case:  92 | Input/Output: [(18 28 88 2) 2]
Train Case:  93 | Input/Output: [(-11 37 48 -63) -63]
Train Case:  94 | Input/Output: [(-19 -98 -16 85) -98]
Train Case:  95 | Input/Output: [(-3 -68 3 26) -68]
Train Case:  96 | Input/Output: [(61 -61 -59 32) -61]
Train Case:  97 | Input/Output: [(-9 -65 -32 -49) -65]
Train Case:  98 | Input/Output: [(68 -37 -65 53) -65]
Train Case:  99 | Input/Output: [(94 2 -91 82) -91]
Test Case:   0 | Input/Output: [[-92 -92 -92 -49] -92]
Test Case:   1 | Input/Output: [[-36 -15 -36 -36] -36]
Test Case:   2 | Input/Output: [[85 85 85 -85] -85]
Test Case:   3 | Input/Output: [[49 49 49 22] 22]
Test Case:   4 | Input/Output: [[-34 87 -34 -34] -34]
Test Case:   5 | Input/Output: [[81 35 35 35] 35]
Test Case:   6 | Input/Output: [[-86 -86 0 -86] -86]
Test Case:   7 | Input/Output: [[-31 -31 -31 100] -31]
Test Case:   8 | Input/Output: [[33 33 33 50] 33]
Test Case:   9 | Input/Output: [[-32 81 81 81] -32]
Test Case:  10 | Input/Output: [[-51 -31 -31 -31] -51]
Test Case:  11 | Input/Output: [[-32 62 -32 -32] -32]
Test Case:  12 | Input/Output: [[64 -100 64 64] -100]
Test Case:  13 | Input/Output: [[-37 -75 -75 -75] -75]
Test Case:  14 | Input/Output: [[52 31 31 31] 31]
Test Case:  15 | Input/Output: [[-40 -94 -94 -94] -94]
Test Case:  16 | Input/Output: [[80 80 80 36] 36]
Test Case:  17 | Input/Output: [[3 3 3 -95] -95]
Test Case:  18 | Input/Output: [[-43 -43 3 -43] -43]
Test Case:  19 | Input/Output: [[-32 -62 -62 -62] -62]
Test Case:  20 | Input/Output: [[94 94 94 -48] -48]
Test Case:  21 | Input/Output: [[-69 68 -69 -69] -69]
Test Case:  22 | Input/Output: [[7 -59 -59 -59] -59]
Test Case:  23 | Input/Output: [[-44 -44 57 -44] -44]
Test Case:  24 | Input/Output: [[-72 90 -72 -72] -72]
Test Case:  25 | Input/Output: [[-25 91 91 91] -25]
Test Case:  26 | Input/Output: [[51 51 51 -60] -60]
Test Case:  27 | Input/Output: [[-84 -13 -13 -13] -84]
Test Case:  28 | Input/Output: [[-35 -56 -35 -35] -56]
Test Case:  29 | Input/Output: [[64 64 64 64] 64]
Test Case:  30 | Input/Output: [[59 -29 59 59] -29]
Test Case:  31 | Input/Output: [[5 60 5 5] 5]
Test Case:  32 | Input/Output: [[-20 -20 -81 -20] -81]
Test Case:  33 | Input/Output: [[-71 -71 -71 -14] -71]
Test Case:  34 | Input/Output: [[77 77 60 77] 60]
Test Case:  35 | Input/Output: [[73 73 73 -99] -99]
Test Case:  36 | Input/Output: [[31 31 31 53] 31]
Test Case:  37 | Input/Output: [[-2 -35 -35 -35] -35]
Test Case:  38 | Input/Output: [[-9 4 -9 -9] -9]
Test Case:  39 | Input/Output: [[-40 34 -40 -40] -40]
Test Case:  40 | Input/Output: [[-84 6 -84 -84] -84]
Test Case:  41 | Input/Output: [[-55 -4 -4 -4] -55]
Test Case:  42 | Input/Output: [[-76 44 44 44] -76]
Test Case:  43 | Input/Output: [[16 16 16 39] 16]
Test Case:  44 | Input/Output: [[59 -27 -27 -27] -27]
Test Case:  45 | Input/Output: [[97 73 73 73] 73]
Test Case:  46 | Input/Output: [[-100 -100 -100 11] -100]
Test Case:  47 | Input/Output: [[76 40 40 40] 40]
Test Case:  48 | Input/Output: [[-98 -98 -1 -98] -98]
Test Case:  49 | Input/Output: [[13 13 13 -87] -87]
Test Case:  50 | Input/Output: [[-59 24 24 24] -59]
Test Case:  51 | Input/Output: [[-29 -29 34 -29] -29]
Test Case:  52 | Input/Output: [[-77 -77 -77 -17] -77]
Test Case:  53 | Input/Output: [[-95 11 -95 -95] -95]
Test Case:  54 | Input/Output: [[-11 65 65 65] -11]
Test Case:  55 | Input/Output: [[4 -11 -11 -11] -11]
Test Case:  56 | Input/Output: [[39 39 73 39] 39]
Test Case:  57 | Input/Output: [[-88 -88 -62 -88] -88]
Test Case:  58 | Input/Output: [[26 44 26 26] 26]
Test Case:  59 | Input/Output: [[-86 10 -86 -86] -86]
Test Case:  60 | Input/Output: [[9 77 77 77] 9]
Test Case:  61 | Input/Output: [[-30 -30 -30 -25] -30]
Test Case:  62 | Input/Output: [[14 13 13 13] 13]
Test Case:  63 | Input/Output: [[-2 -2 -2 64] -2]
Test Case:  64 | Input/Output: [[-38 -38 -38 -89] -89]
Test Case:  65 | Input/Output: [[-68 -68 -68 60] -68]
Test Case:  66 | Input/Output: [[-82 -82 -82 -39] -82]
Test Case:  67 | Input/Output: [[-15 1 1 1] -15]
Test Case:  68 | Input/Output: [[-53 -53 -64 -53] -64]
Test Case:  69 | Input/Output: [[-86 -86 -86 -37] -86]
Test Case:  70 | Input/Output: [[92 92 -86 92] -86]
Test Case:  71 | Input/Output: [[90 94 90 90] 90]
Test Case:  72 | Input/Output: [[36 58 36 36] 36]
Test Case:  73 | Input/Output: [[-14 -14 -14 54] -14]
Test Case:  74 | Input/Output: [[55 55 55 54] 54]
Test Case:  75 | Input/Output: [[59 59 59 -39] -39]
Test Case:  76 | Input/Output: [[7 -14 -14 -14] -14]
Test Case:  77 | Input/Output: [[1 46 1 1] 1]
Test Case:  78 | Input/Output: [[-7 -63 -7 -7] -63]
Test Case:  79 | Input/Output: [[25 25 25 -10] -10]
Test Case:  80 | Input/Output: [[94 -20 94 94] -20]
Test Case:  81 | Input/Output: [[-19 -19 -19 -39] -39]
Test Case:  82 | Input/Output: [[-26 -72 -26 -26] -72]
Test Case:  83 | Input/Output: [[-26 45 45 45] -26]
Test Case:  84 | Input/Output: [[-18 -18 -18 68] -18]
Test Case:  85 | Input/Output: [[9 9 -35 9] -35]
Test Case:  86 | Input/Output: [[-37 -37 99 -37] -37]
Test Case:  87 | Input/Output: [[-92 -92 -92 -5] -92]
Test Case:  88 | Input/Output: [[46 46 -83 46] -83]
Test Case:  89 | Input/Output: [[-84 -84 -54 -84] -84]
Test Case:  90 | Input/Output: [[-10 20 -10 -10] -10]
Test Case:  91 | Input/Output: [[-49 93 -49 -49] -49]
Test Case:  92 | Input/Output: [[22 87 87 87] 22]
Test Case:  93 | Input/Output: [[-42 -37 -37 -37] -42]
Test Case:  94 | Input/Output: [[39 39 -96 39] -96]
Test Case:  95 | Input/Output: [[-54 -9 -9 -9] -54]
Test Case:  96 | Input/Output: [[-26 -90 -90 -90] -90]
Test Case:  97 | Input/Output: [[-46 -46 -46 -51] -51]
Test Case:  98 | Input/Output: [[-89 -73 -89 -89] -89]
Test Case:  99 | Input/Output: [[-78 -28 -28 -28] -78]
Test Case: 100 | Input/Output: [(51 51 51 51) 51]
Test Case: 101 | Input/Output: [(58 58 58 58) 58]
Test Case: 102 | Input/Output: [(52 52 52 52) 52]
Test Case: 103 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 104 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 105 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 106 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 107 | Input/Output: [(55 55 55 55) 55]
Test Case: 108 | Input/Output: [(10 10 10 10) 10]
Test Case: 109 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 110 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 111 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 112 | Input/Output: [(17 17 17 17) 17]
Test Case: 113 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 114 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 115 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 116 | Input/Output: [(24 24 24 24) 24]
Test Case: 117 | Input/Output: [(89 89 89 89) 89]
Test Case: 118 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 119 | Input/Output: [(71 71 71 71) 71]
Test Case: 120 | Input/Output: [(18 18 18 18) 18]
Test Case: 121 | Input/Output: [(71 71 71 71) 71]
Test Case: 122 | Input/Output: [(31 31 31 31) 31]
Test Case: 123 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 124 | Input/Output: [(48 48 48 48) 48]
Test Case: 125 | Input/Output: [(57 57 57 57) 57]
Test Case: 126 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 127 | Input/Output: [(74 74 74 74) 74]
Test Case: 128 | Input/Output: [(90 90 90 90) 90]
Test Case: 129 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 130 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 131 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 132 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 133 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 134 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 135 | Input/Output: [(44 44 44 44) 44]
Test Case: 136 | Input/Output: [(86 86 86 86) 86]
Test Case: 137 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 138 | Input/Output: [(54 54 54 54) 54]
Test Case: 139 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 140 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 141 | Input/Output: [(65 65 65 65) 65]
Test Case: 142 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 143 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 144 | Input/Output: [(25 25 25 25) 25]
Test Case: 145 | Input/Output: [(12 12 12 12) 12]
Test Case: 146 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 147 | Input/Output: [(99 99 99 99) 99]
Test Case: 148 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 149 | Input/Output: [(0 0 0 0) 0]
Test Case: 150 | Input/Output: [(29 29 29 29) 29]
Test Case: 151 | Input/Output: [(41 41 41 41) 41]
Test Case: 152 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 153 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 154 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 155 | Input/Output: [(95 95 95 95) 95]
Test Case: 156 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 157 | Input/Output: [(82 82 82 82) 82]
Test Case: 158 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 159 | Input/Output: [(61 61 61 61) 61]
Test Case: 160 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 161 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 162 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 163 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 164 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 165 | Input/Output: [(82 82 82 82) 82]
Test Case: 166 | Input/Output: [(62 62 62 62) 62]
Test Case: 167 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 168 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 169 | Input/Output: [(45 45 45 45) 45]
Test Case: 170 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 171 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 172 | Input/Output: [(8 8 8 8) 8]
Test Case: 173 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 174 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 175 | Input/Output: [(48 48 48 48) 48]
Test Case: 176 | Input/Output: [(68 68 68 68) 68]
Test Case: 177 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 178 | Input/Output: [(54 54 54 54) 54]
Test Case: 179 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 180 | Input/Output: [(99 99 99 99) 99]
Test Case: 181 | Input/Output: [(54 54 54 54) 54]
Test Case: 182 | Input/Output: [(17 17 17 17) 17]
Test Case: 183 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 184 | Input/Output: [(47 47 47 47) 47]
Test Case: 185 | Input/Output: [(67 67 67 67) 67]
Test Case: 186 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 187 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 188 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 189 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 190 | Input/Output: [(18 18 18 18) 18]
Test Case: 191 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 192 | Input/Output: [(55 55 55 55) 55]
Test Case: 193 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 194 | Input/Output: [(48 48 48 48) 48]
Test Case: 195 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 196 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 197 | Input/Output: [(27 27 27 27) 27]
Test Case: 198 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 199 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 200 | Input/Output: [(57 83 11 84) 11]
Test Case: 201 | Input/Output: [(74 26 94 83) 26]
Test Case: 202 | Input/Output: [(41 87 68 47) 41]
Test Case: 203 | Input/Output: [(73 31 43 42) 31]
Test Case: 204 | Input/Output: [(13 52 8 17) 8]
Test Case: 205 | Input/Output: [(8 54 68 25) 8]
Test Case: 206 | Input/Output: [(7 73 93 40) 7]
Test Case: 207 | Input/Output: [(71 74 92 95) 71]
Test Case: 208 | Input/Output: [(9 59 86 74) 9]
Test Case: 209 | Input/Output: [(49 69 2 46) 2]
Test Case: 210 | Input/Output: [(32 80 69 55) 32]
Test Case: 211 | Input/Output: [(62 23 93 84) 23]
Test Case: 212 | Input/Output: [(81 43 25 65) 25]
Test Case: 213 | Input/Output: [(100 58 8 33) 8]
Test Case: 214 | Input/Output: [(62 7 31 63) 7]
Test Case: 215 | Input/Output: [(69 53 7 72) 7]
Test Case: 216 | Input/Output: [(40 15 76 16) 15]
Test Case: 217 | Input/Output: [(40 97 35 44) 35]
Test Case: 218 | Input/Output: [(13 94 48 59) 13]
Test Case: 219 | Input/Output: [(74 68 56 35) 35]
Test Case: 220 | Input/Output: [(42 91 25 94) 25]
Test Case: 221 | Input/Output: [(38 1 3 58) 1]
Test Case: 222 | Input/Output: [(57 36 43 21) 21]
Test Case: 223 | Input/Output: [(6 7 66 95) 6]
Test Case: 224 | Input/Output: [(51 67 53 17) 17]
Test Case: 225 | Input/Output: [(99 48 70 90) 48]
Test Case: 226 | Input/Output: [(71 31 43 94) 31]
Test Case: 227 | Input/Output: [(87 46 33 78) 33]
Test Case: 228 | Input/Output: [(6 43 86 52) 6]
Test Case: 229 | Input/Output: [(67 28 26 92) 26]
Test Case: 230 | Input/Output: [(73 56 70 64) 56]
Test Case: 231 | Input/Output: [(93 50 50 50) 50]
Test Case: 232 | Input/Output: [(50 0 33 88) 0]
Test Case: 233 | Input/Output: [(71 98 98 9) 9]
Test Case: 234 | Input/Output: [(6 79 78 92) 6]
Test Case: 235 | Input/Output: [(25 12 51 68) 12]
Test Case: 236 | Input/Output: [(66 94 25 49) 25]
Test Case: 237 | Input/Output: [(64 68 32 26) 26]
Test Case: 238 | Input/Output: [(23 69 60 95) 23]
Test Case: 239 | Input/Output: [(95 30 91 24) 24]
Test Case: 240 | Input/Output: [(91 33 89 100) 33]
Test Case: 241 | Input/Output: [(100 26 9 32) 9]
Test Case: 242 | Input/Output: [(57 44 99 60) 44]
Test Case: 243 | Input/Output: [(65 56 79 95) 56]
Test Case: 244 | Input/Output: [(77 87 43 98) 43]
Test Case: 245 | Input/Output: [(38 94 26 97) 26]
Test Case: 246 | Input/Output: [(5 52 94 79) 5]
Test Case: 247 | Input/Output: [(17 28 6 82) 6]
Test Case: 248 | Input/Output: [(91 81 15 27) 15]
Test Case: 249 | Input/Output: [(56 71 94 36) 36]
Test Case: 250 | Input/Output: [(29 41 86 0) 0]
Test Case: 251 | Input/Output: [(10 77 31 0) 0]
Test Case: 252 | Input/Output: [(42 32 77 17) 17]
Test Case: 253 | Input/Output: [(93 61 25 90) 25]
Test Case: 254 | Input/Output: [(70 44 96 65) 44]
Test Case: 255 | Input/Output: [(17 73 88 7) 7]
Test Case: 256 | Input/Output: [(59 99 69 93) 59]
Test Case: 257 | Input/Output: [(77 57 94 31) 31]
Test Case: 258 | Input/Output: [(70 7 55 56) 7]
Test Case: 259 | Input/Output: [(33 78 90 11) 11]
Test Case: 260 | Input/Output: [(24 67 2 31) 2]
Test Case: 261 | Input/Output: [(48 1 62 33) 1]
Test Case: 262 | Input/Output: [(72 6 57 31) 6]
Test Case: 263 | Input/Output: [(20 51 39 57) 20]
Test Case: 264 | Input/Output: [(68 78 62 88) 62]
Test Case: 265 | Input/Output: [(73 25 85 59) 25]
Test Case: 266 | Input/Output: [(76 97 80 97) 76]
Test Case: 267 | Input/Output: [(33 3 8 15) 3]
Test Case: 268 | Input/Output: [(25 93 93 77) 25]
Test Case: 269 | Input/Output: [(24 78 24 32) 24]
Test Case: 270 | Input/Output: [(17 79 73 100) 17]
Test Case: 271 | Input/Output: [(93 60 56 98) 56]
Test Case: 272 | Input/Output: [(55 29 29 31) 29]
Test Case: 273 | Input/Output: [(54 88 82 89) 54]
Test Case: 274 | Input/Output: [(77 4 55 7) 4]
Test Case: 275 | Input/Output: [(4 33 43 21) 4]
Test Case: 276 | Input/Output: [(3 28 49 97) 3]
Test Case: 277 | Input/Output: [(40 86 14 45) 14]
Test Case: 278 | Input/Output: [(50 79 78 41) 41]
Test Case: 279 | Input/Output: [(75 51 34 55) 34]
Test Case: 280 | Input/Output: [(21 57 10 1) 1]
Test Case: 281 | Input/Output: [(70 70 18 27) 18]
Test Case: 282 | Input/Output: [(39 22 22 24) 22]
Test Case: 283 | Input/Output: [(83 86 62 27) 27]
Test Case: 284 | Input/Output: [(61 87 65 16) 16]
Test Case: 285 | Input/Output: [(50 40 45 37) 37]
Test Case: 286 | Input/Output: [(45 9 24 11) 9]
Test Case: 287 | Input/Output: [(88 30 23 71) 23]
Test Case: 288 | Input/Output: [(31 28 41 7) 7]
Test Case: 289 | Input/Output: [(96 64 40 98) 40]
Test Case: 290 | Input/Output: [(26 35 73 18) 18]
Test Case: 291 | Input/Output: [(80 64 100 80) 64]
Test Case: 292 | Input/Output: [(47 57 11 58) 11]
Test Case: 293 | Input/Output: [(71 82 53 83) 53]
Test Case: 294 | Input/Output: [(75 68 51 16) 16]
Test Case: 295 | Input/Output: [(15 19 78 90) 15]
Test Case: 296 | Input/Output: [(30 58 15 73) 15]
Test Case: 297 | Input/Output: [(70 51 6 80) 6]
Test Case: 298 | Input/Output: [(71 37 52 95) 37]
Test Case: 299 | Input/Output: [(74 13 17 44) 13]
Test Case: 300 | Input/Output: [(31 28 81 92) 28]
Test Case: 301 | Input/Output: [(76 87 75 11) 11]
Test Case: 302 | Input/Output: [(16 93 9 51) 9]
Test Case: 303 | Input/Output: [(89 15 46 79) 15]
Test Case: 304 | Input/Output: [(3 32 99 30) 3]
Test Case: 305 | Input/Output: [(26 16 53 14) 14]
Test Case: 306 | Input/Output: [(30 73 87 3) 3]
Test Case: 307 | Input/Output: [(85 58 82 11) 11]
Test Case: 308 | Input/Output: [(59 47 89 80) 47]
Test Case: 309 | Input/Output: [(57 68 94 31) 31]
Test Case: 310 | Input/Output: [(74 40 87 37) 37]
Test Case: 311 | Input/Output: [(16 15 45 3) 3]
Test Case: 312 | Input/Output: [(70 17 8 16) 8]
Test Case: 313 | Input/Output: [(48 71 83 45) 45]
Test Case: 314 | Input/Output: [(81 3 46 42) 3]
Test Case: 315 | Input/Output: [(96 95 41 68) 41]
Test Case: 316 | Input/Output: [(90 9 23 6) 6]
Test Case: 317 | Input/Output: [(2 27 47 88) 2]
Test Case: 318 | Input/Output: [(9 65 24 85) 9]
Test Case: 319 | Input/Output: [(15 69 14 89) 14]
Test Case: 320 | Input/Output: [(20 18 80 27) 18]
Test Case: 321 | Input/Output: [(77 32 15 57) 15]
Test Case: 322 | Input/Output: [(78 21 45 93) 21]
Test Case: 323 | Input/Output: [(60 32 61 91) 32]
Test Case: 324 | Input/Output: [(8 60 65 81) 8]
Test Case: 325 | Input/Output: [(89 10 52 20) 10]
Test Case: 326 | Input/Output: [(5 18 85 52) 5]
Test Case: 327 | Input/Output: [(30 29 80 20) 20]
Test Case: 328 | Input/Output: [(40 15 7 65) 7]
Test Case: 329 | Input/Output: [(88 97 66 52) 52]
Test Case: 330 | Input/Output: [(85 47 59 73) 47]
Test Case: 331 | Input/Output: [(12 38 21 64) 12]
Test Case: 332 | Input/Output: [(1 36 93 94) 1]
Test Case: 333 | Input/Output: [(94 100 32 62) 32]
Test Case: 334 | Input/Output: [(32 47 60 61) 32]
Test Case: 335 | Input/Output: [(49 11 94 49) 11]
Test Case: 336 | Input/Output: [(53 83 43 78) 43]
Test Case: 337 | Input/Output: [(35 13 0 37) 0]
Test Case: 338 | Input/Output: [(76 58 70 25) 25]
Test Case: 339 | Input/Output: [(13 7 16 71) 7]
Test Case: 340 | Input/Output: [(79 34 27 47) 27]
Test Case: 341 | Input/Output: [(48 88 53 5) 5]
Test Case: 342 | Input/Output: [(20 3 17 6) 3]
Test Case: 343 | Input/Output: [(44 20 45 94) 20]
Test Case: 344 | Input/Output: [(18 10 69 89) 10]
Test Case: 345 | Input/Output: [(36 31 43 99) 31]
Test Case: 346 | Input/Output: [(88 97 31 30) 30]
Test Case: 347 | Input/Output: [(29 78 71 22) 22]
Test Case: 348 | Input/Output: [(95 66 39 61) 39]
Test Case: 349 | Input/Output: [(72 30 7 61) 7]
Test Case: 350 | Input/Output: [(51 40 82 15) 15]
Test Case: 351 | Input/Output: [(15 20 67 83) 15]
Test Case: 352 | Input/Output: [(84 8 0 89) 0]
Test Case: 353 | Input/Output: [(14 85 27 42) 14]
Test Case: 354 | Input/Output: [(99 53 80 58) 53]
Test Case: 355 | Input/Output: [(75 66 92 12) 12]
Test Case: 356 | Input/Output: [(55 87 38 74) 38]
Test Case: 357 | Input/Output: [(61 64 31 26) 26]
Test Case: 358 | Input/Output: [(9 1 67 67) 1]
Test Case: 359 | Input/Output: [(54 32 9 33) 9]
Test Case: 360 | Input/Output: [(26 12 89 24) 12]
Test Case: 361 | Input/Output: [(90 47 55 9) 9]
Test Case: 362 | Input/Output: [(76 29 69 52) 29]
Test Case: 363 | Input/Output: [(51 64 41 65) 41]
Test Case: 364 | Input/Output: [(35 100 77 26) 26]
Test Case: 365 | Input/Output: [(29 40 26 69) 26]
Test Case: 366 | Input/Output: [(67 77 82 68) 67]
Test Case: 367 | Input/Output: [(14 2 2 98) 2]
Test Case: 368 | Input/Output: [(23 96 74 43) 23]
Test Case: 369 | Input/Output: [(48 36 60 55) 36]
Test Case: 370 | Input/Output: [(94 47 74 13) 13]
Test Case: 371 | Input/Output: [(32 26 91 63) 26]
Test Case: 372 | Input/Output: [(90 57 41 14) 14]
Test Case: 373 | Input/Output: [(46 94 85 79) 46]
Test Case: 374 | Input/Output: [(28 46 20 42) 20]
Test Case: 375 | Input/Output: [(40 79 31 73) 31]
Test Case: 376 | Input/Output: [(60 52 96 85) 52]
Test Case: 377 | Input/Output: [(96 78 84 20) 20]
Test Case: 378 | Input/Output: [(26 52 68 55) 26]
Test Case: 379 | Input/Output: [(71 87 41 77) 41]
Test Case: 380 | Input/Output: [(13 12 88 42) 12]
Test Case: 381 | Input/Output: [(47 90 53 1) 1]
Test Case: 382 | Input/Output: [(53 13 78 7) 7]
Test Case: 383 | Input/Output: [(16 15 25 29) 15]
Test Case: 384 | Input/Output: [(33 93 100 69) 33]
Test Case: 385 | Input/Output: [(10 29 86 22) 10]
Test Case: 386 | Input/Output: [(74 95 97 53) 53]
Test Case: 387 | Input/Output: [(60 62 10 72) 10]
Test Case: 388 | Input/Output: [(20 88 33 41) 20]
Test Case: 389 | Input/Output: [(90 11 18 30) 11]
Test Case: 390 | Input/Output: [(5 67 15 86) 5]
Test Case: 391 | Input/Output: [(98 69 56 27) 27]
Test Case: 392 | Input/Output: [(48 3 95 47) 3]
Test Case: 393 | Input/Output: [(96 11 60 83) 11]
Test Case: 394 | Input/Output: [(29 67 46 31) 29]
Test Case: 395 | Input/Output: [(13 81 74 5) 5]
Test Case: 396 | Input/Output: [(76 23 55 84) 23]
Test Case: 397 | Input/Output: [(97 23 83 28) 23]
Test Case: 398 | Input/Output: [(20 73 55 13) 13]
Test Case: 399 | Input/Output: [(9 21 71 15) 9]
Test Case: 400 | Input/Output: [(100 26 -46 -62) -62]
Test Case: 401 | Input/Output: [(-22 91 16 -8) -22]
Test Case: 402 | Input/Output: [(94 -65 70 25) -65]
Test Case: 403 | Input/Output: [(73 60 64 98) 60]
Test Case: 404 | Input/Output: [(52 39 -69 -78) -78]
Test Case: 405 | Input/Output: [(19 -40 -8 13) -40]
Test Case: 406 | Input/Output: [(88 -29 -70 92) -70]
Test Case: 407 | Input/Output: [(-62 4 -12 -100) -100]
Test Case: 408 | Input/Output: [(95 -53 -48 -27) -53]
Test Case: 409 | Input/Output: [(13 -30 73 81) -30]
Test Case: 410 | Input/Output: [(-35 41 26 54) -35]
Test Case: 411 | Input/Output: [(-57 92 -4 -8) -57]
Test Case: 412 | Input/Output: [(53 -28 20 25) -28]
Test Case: 413 | Input/Output: [(29 -6 14 65) -6]
Test Case: 414 | Input/Output: [(58 -16 53 52) -16]
Test Case: 415 | Input/Output: [(-29 44 58 83) -29]
Test Case: 416 | Input/Output: [(27 -33 23 -21) -33]
Test Case: 417 | Input/Output: [(100 69 0 -45) -45]
Test Case: 418 | Input/Output: [(9 94 27 -16) -16]
Test Case: 419 | Input/Output: [(55 -99 -3 -38) -99]
Test Case: 420 | Input/Output: [(82 -52 -52 -57) -57]
Test Case: 421 | Input/Output: [(70 27 12 -50) -50]
Test Case: 422 | Input/Output: [(1 -65 25 -32) -65]
Test Case: 423 | Input/Output: [(74 33 60 68) 33]
Test Case: 424 | Input/Output: [(-31 4 -69 -3) -69]
Test Case: 425 | Input/Output: [(-72 -75 -18 -84) -84]
Test Case: 426 | Input/Output: [(70 95 39 -72) -72]
Test Case: 427 | Input/Output: [(-5 5 -70 -18) -70]
Test Case: 428 | Input/Output: [(-71 -36 -20 28) -71]
Test Case: 429 | Input/Output: [(32 97 5 -89) -89]
Test Case: 430 | Input/Output: [(-35 74 -60 -9) -60]
Test Case: 431 | Input/Output: [(35 -52 -17 -30) -52]
Test Case: 432 | Input/Output: [(46 49 -89 -56) -89]
Test Case: 433 | Input/Output: [(45 87 -25 20) -25]
Test Case: 434 | Input/Output: [(94 -22 34 27) -22]
Test Case: 435 | Input/Output: [(81 -16 9 -94) -94]
Test Case: 436 | Input/Output: [(-65 80 -39 -7) -65]
Test Case: 437 | Input/Output: [(33 -60 45 -89) -89]
Test Case: 438 | Input/Output: [(87 0 -48 -59) -59]
Test Case: 439 | Input/Output: [(89 71 50 -29) -29]
Test Case: 440 | Input/Output: [(41 88 65 -57) -57]
Test Case: 441 | Input/Output: [(-22 -60 36 71) -60]
Test Case: 442 | Input/Output: [(-85 71 30 -74) -85]
Test Case: 443 | Input/Output: [(33 69 -74 79) -74]
Test Case: 444 | Input/Output: [(-7 -62 86 -32) -62]
Test Case: 445 | Input/Output: [(23 89 44 -48) -48]
Test Case: 446 | Input/Output: [(27 2 -88 3) -88]
Test Case: 447 | Input/Output: [(34 56 -87 -83) -87]
Test Case: 448 | Input/Output: [(81 68 46 73) 46]
Test Case: 449 | Input/Output: [(32 47 1 50) 1]
Test Case: 450 | Input/Output: [(-7 -64 -78 -6) -78]
Test Case: 451 | Input/Output: [(-78 26 -99 71) -99]
Test Case: 452 | Input/Output: [(-49 49 -29 76) -49]
Test Case: 453 | Input/Output: [(-31 42 82 77) -31]
Test Case: 454 | Input/Output: [(42 -45 -53 -96) -96]
Test Case: 455 | Input/Output: [(-58 -45 -49 -89) -89]
Test Case: 456 | Input/Output: [(17 -59 50 -92) -92]
Test Case: 457 | Input/Output: [(-96 -36 71 -64) -96]
Test Case: 458 | Input/Output: [(-40 -16 13 -59) -59]
Test Case: 459 | Input/Output: [(93 45 90 -48) -48]
Test Case: 460 | Input/Output: [(96 38 67 35) 35]
Test Case: 461 | Input/Output: [(-40 -62 -72 60) -72]
Test Case: 462 | Input/Output: [(42 -96 72 -69) -96]
Test Case: 463 | Input/Output: [(14 8 60 67) 8]
Test Case: 464 | Input/Output: [(36 -42 22 31) -42]
Test Case: 465 | Input/Output: [(-33 98 -4 57) -33]
Test Case: 466 | Input/Output: [(9 -99 -54 -11) -99]
Test Case: 467 | Input/Output: [(-2 -50 9 -38) -50]
Test Case: 468 | Input/Output: [(28 -15 66 81) -15]
Test Case: 469 | Input/Output: [(-54 81 -62 -36) -62]
Test Case: 470 | Input/Output: [(-27 31 -4 68) -27]
Test Case: 471 | Input/Output: [(100 36 -46 92) -46]
Test Case: 472 | Input/Output: [(39 85 27 41) 27]
Test Case: 473 | Input/Output: [(38 76 45 96) 38]
Test Case: 474 | Input/Output: [(-84 91 -51 -10) -84]
Test Case: 475 | Input/Output: [(9 31 -39 -71) -71]
Test Case: 476 | Input/Output: [(-91 66 -39 22) -91]
Test Case: 477 | Input/Output: [(100 -6 53 10) -6]
Test Case: 478 | Input/Output: [(-51 -48 -3 34) -51]
Test Case: 479 | Input/Output: [(-43 51 80 -66) -66]
Test Case: 480 | Input/Output: [(20 -82 -49 7) -82]
Test Case: 481 | Input/Output: [(48 57 -11 -73) -73]
Test Case: 482 | Input/Output: [(26 4 -45 -66) -66]
Test Case: 483 | Input/Output: [(-50 10 30 21) -50]
Test Case: 484 | Input/Output: [(11 -38 29 80) -38]
Test Case: 485 | Input/Output: [(-22 67 -18 76) -22]
Test Case: 486 | Input/Output: [(53 -83 43 -51) -83]
Test Case: 487 | Input/Output: [(-63 -77 -77 7) -77]
Test Case: 488 | Input/Output: [(-55 20 11 31) -55]
Test Case: 489 | Input/Output: [(8 -88 -16 -6) -88]
Test Case: 490 | Input/Output: [(-78 -18 7 39) -78]
Test Case: 491 | Input/Output: [(-27 51 16 12) -27]
Test Case: 492 | Input/Output: [(8 9 67 54) 8]
Test Case: 493 | Input/Output: [(97 -85 -49 -34) -85]
Test Case: 494 | Input/Output: [(-9 -35 -49 93) -49]
Test Case: 495 | Input/Output: [(84 10 96 26) 10]
Test Case: 496 | Input/Output: [(58 91 -47 -98) -98]
Test Case: 497 | Input/Output: [(-95 -62 -47 75) -95]
Test Case: 498 | Input/Output: [(-36 -57 -82 5) -82]
Test Case: 499 | Input/Output: [(64 -66 77 -36) -66]
Test Case: 500 | Input/Output: [(79 -26 -9 79) -26]
Test Case: 501 | Input/Output: [(-81 -85 63 17) -85]
Test Case: 502 | Input/Output: [(9 -91 72 -24) -91]
Test Case: 503 | Input/Output: [(62 69 -9 -5) -9]
Test Case: 504 | Input/Output: [(-30 -77 78 -13) -77]
Test Case: 505 | Input/Output: [(50 54 18 -90) -90]
Test Case: 506 | Input/Output: [(-46 -10 78 -61) -61]
Test Case: 507 | Input/Output: [(-83 68 55 89) -83]
Test Case: 508 | Input/Output: [(43 -35 -15 -48) -48]
Test Case: 509 | Input/Output: [(6 -97 2 32) -97]
Test Case: 510 | Input/Output: [(68 100 13 -55) -55]
Test Case: 511 | Input/Output: [(-70 26 18 20) -70]
Test Case: 512 | Input/Output: [(57 17 -8 91) -8]
Test Case: 513 | Input/Output: [(-49 20 30 100) -49]
Test Case: 514 | Input/Output: [(20 26 74 -19) -19]
Test Case: 515 | Input/Output: [(64 -84 100 -38) -84]
Test Case: 516 | Input/Output: [(-87 49 -74 69) -87]
Test Case: 517 | Input/Output: [(50 -52 48 -66) -66]
Test Case: 518 | Input/Output: [(-82 74 -57 15) -82]
Test Case: 519 | Input/Output: [(-57 78 -34 -63) -63]
Test Case: 520 | Input/Output: [(-56 -29 21 -4) -56]
Test Case: 521 | Input/Output: [(-5 -87 -45 70) -87]
Test Case: 522 | Input/Output: [(-55 82 -77 88) -77]
Test Case: 523 | Input/Output: [(-92 -68 -81 99) -92]
Test Case: 524 | Input/Output: [(-48 -35 81 -53) -53]
Test Case: 525 | Input/Output: [(-69 72 -42 64) -69]
Test Case: 526 | Input/Output: [(63 -30 -2 44) -30]
Test Case: 527 | Input/Output: [(-69 -5 18 77) -69]
Test Case: 528 | Input/Output: [(-59 -97 -32 31) -97]
Test Case: 529 | Input/Output: [(-61 -13 16 -2) -61]
Test Case: 530 | Input/Output: [(12 -63 97 -67) -67]
Test Case: 531 | Input/Output: [(61 90 -35 15) -35]
Test Case: 532 | Input/Output: [(51 -85 38 13) -85]
Test Case: 533 | Input/Output: [(73 87 41 -49) -49]
Test Case: 534 | Input/Output: [(-77 25 -68 81) -77]
Test Case: 535 | Input/Output: [(81 62 49 85) 49]
Test Case: 536 | Input/Output: [(-26 -96 15 8) -96]
Test Case: 537 | Input/Output: [(94 -86 24 -63) -86]
Test Case: 538 | Input/Output: [(64 -49 -31 91) -49]
Test Case: 539 | Input/Output: [(-46 99 42 -76) -76]
Test Case: 540 | Input/Output: [(-95 16 30 58) -95]
Test Case: 541 | Input/Output: [(-19 11 -23 -39) -39]
Test Case: 542 | Input/Output: [(90 75 -3 -59) -59]
Test Case: 543 | Input/Output: [(-43 -67 67 -76) -76]
Test Case: 544 | Input/Output: [(29 -83 84 -29) -83]
Test Case: 545 | Input/Output: [(12 -52 -13 -5) -52]
Test Case: 546 | Input/Output: [(-38 27 -55 -88) -88]
Test Case: 547 | Input/Output: [(-6 84 85 68) -6]
Test Case: 548 | Input/Output: [(-62 73 76 26) -62]
Test Case: 549 | Input/Output: [(99 50 -80 4) -80]
Test Case: 550 | Input/Output: [(95 75 20 73) 20]
Test Case: 551 | Input/Output: [(-3 5 -89 -90) -90]
Test Case: 552 | Input/Output: [(96 -54 80 -10) -54]
Test Case: 553 | Input/Output: [(-90 -23 -58 -39) -90]
Test Case: 554 | Input/Output: [(-62 92 83 76) -62]
Test Case: 555 | Input/Output: [(-8 -10 60 96) -10]
Test Case: 556 | Input/Output: [(-97 86 -70 -50) -97]
Test Case: 557 | Input/Output: [(88 77 -22 91) -22]
Test Case: 558 | Input/Output: [(4 -39 76 62) -39]
Test Case: 559 | Input/Output: [(34 -99 -9 -54) -99]
Test Case: 560 | Input/Output: [(-59 7 21 -96) -96]
Test Case: 561 | Input/Output: [(-16 27 -39 -78) -78]
Test Case: 562 | Input/Output: [(69 74 35 -56) -56]
Test Case: 563 | Input/Output: [(22 -68 14 55) -68]
Test Case: 564 | Input/Output: [(-91 79 84 -29) -91]
Test Case: 565 | Input/Output: [(-76 -7 -34 -64) -76]
Test Case: 566 | Input/Output: [(16 -41 60 23) -41]
Test Case: 567 | Input/Output: [(-46 -99 25 -70) -99]
Test Case: 568 | Input/Output: [(65 -70 23 -47) -70]
Test Case: 569 | Input/Output: [(24 71 12 73) 12]
Test Case: 570 | Input/Output: [(59 -85 71 86) -85]
Test Case: 571 | Input/Output: [(60 100 -87 18) -87]
Test Case: 572 | Input/Output: [(-73 91 -86 -44) -86]
Test Case: 573 | Input/Output: [(-7 46 -29 -13) -29]
Test Case: 574 | Input/Output: [(-50 8 29 -32) -50]
Test Case: 575 | Input/Output: [(-47 -83 -25 8) -83]
Test Case: 576 | Input/Output: [(-21 -68 78 -56) -68]
Test Case: 577 | Input/Output: [(27 -13 -17 -1) -17]
Test Case: 578 | Input/Output: [(54 -41 -73 60) -73]
Test Case: 579 | Input/Output: [(-90 96 98 31) -90]
Test Case: 580 | Input/Output: [(21 20 -72 56) -72]
Test Case: 581 | Input/Output: [(-79 91 -56 -13) -79]
Test Case: 582 | Input/Output: [(-55 -27 77 -70) -70]
Test Case: 583 | Input/Output: [(-33 -22 8 44) -33]
Test Case: 584 | Input/Output: [(-9 95 27 100) -9]
Test Case: 585 | Input/Output: [(-66 7 -94 -51) -94]
Test Case: 586 | Input/Output: [(12 -3 -84 -50) -84]
Test Case: 587 | Input/Output: [(92 -25 -24 20) -25]
Test Case: 588 | Input/Output: [(-3 26 -3 -44) -44]
Test Case: 589 | Input/Output: [(-1 -69 -23 -3) -69]
Test Case: 590 | Input/Output: [(-59 -57 -63 -30) -63]
Test Case: 591 | Input/Output: [(-98 51 36 -46) -98]
Test Case: 592 | Input/Output: [(56 82 1 98) 1]
Test Case: 593 | Input/Output: [(32 -77 17 -95) -95]
Test Case: 594 | Input/Output: [(-95 56 -22 -89) -95]
Test Case: 595 | Input/Output: [(66 -13 65 46) -13]
Test Case: 596 | Input/Output: [(-28 -52 -53 66) -53]
Test Case: 597 | Input/Output: [(-30 -83 -86 -61) -86]
Test Case: 598 | Input/Output: [(88 4 87 95) 4]
Test Case: 599 | Input/Output: [(6 14 -20 -94) -94]
Test Case: 600 | Input/Output: [(-47 -96 -42 -47) -96]
Test Case: 601 | Input/Output: [(56 -26 96 -22) -26]
Test Case: 602 | Input/Output: [(-70 -66 -3 -23) -70]
Test Case: 603 | Input/Output: [(83 91 -84 4) -84]
Test Case: 604 | Input/Output: [(0 70 -57 24) -57]
Test Case: 605 | Input/Output: [(-99 -92 -87 -72) -99]
Test Case: 606 | Input/Output: [(68 -81 -31 -22) -81]
Test Case: 607 | Input/Output: [(-99 52 0 -4) -99]
Test Case: 608 | Input/Output: [(-41 -58 -24 60) -58]
Test Case: 609 | Input/Output: [(80 55 69 -25) -25]
Test Case: 610 | Input/Output: [(43 -10 34 -49) -49]
Test Case: 611 | Input/Output: [(69 -16 -67 -13) -67]
Test Case: 612 | Input/Output: [(-16 -57 -49 5) -57]
Test Case: 613 | Input/Output: [(38 -22 -64 -81) -81]
Test Case: 614 | Input/Output: [(60 55 19 -50) -50]
Test Case: 615 | Input/Output: [(28 -37 -44 53) -44]
Test Case: 616 | Input/Output: [(-36 -98 27 -48) -98]
Test Case: 617 | Input/Output: [(-36 95 23 69) -36]
Test Case: 618 | Input/Output: [(-73 -16 68 -34) -73]
Test Case: 619 | Input/Output: [(-28 -18 58 5) -28]
Test Case: 620 | Input/Output: [(15 -23 26 -48) -48]
Test Case: 621 | Input/Output: [(65 -15 98 -47) -47]
Test Case: 622 | Input/Output: [(72 75 -49 -96) -96]
Test Case: 623 | Input/Output: [(-57 -32 72 78) -57]
Test Case: 624 | Input/Output: [(-23 -78 -8 -27) -78]
Test Case: 625 | Input/Output: [(-68 32 24 -11) -68]
Test Case: 626 | Input/Output: [(-63 -58 -91 16) -91]
Test Case: 627 | Input/Output: [(61 39 60 -42) -42]
Test Case: 628 | Input/Output: [(34 44 61 63) 34]
Test Case: 629 | Input/Output: [(5 -55 -77 75) -77]
Test Case: 630 | Input/Output: [(-82 34 -34 -34) -82]
Test Case: 631 | Input/Output: [(71 -74 -83 -48) -83]
Test Case: 632 | Input/Output: [(-61 -25 89 88) -61]
Test Case: 633 | Input/Output: [(-78 -64 43 -3) -78]
Test Case: 634 | Input/Output: [(-24 -2 10 -44) -44]
Test Case: 635 | Input/Output: [(-66 88 51 68) -66]
Test Case: 636 | Input/Output: [(-97 52 -44 13) -97]
Test Case: 637 | Input/Output: [(-52 13 -34 -87) -87]
Test Case: 638 | Input/Output: [(41 -44 98 -33) -44]
Test Case: 639 | Input/Output: [(-92 16 -31 32) -92]
Test Case: 640 | Input/Output: [(95 75 18 62) 18]
Test Case: 641 | Input/Output: [(-90 -23 35 35) -90]
Test Case: 642 | Input/Output: [(-97 84 -79 -93) -97]
Test Case: 643 | Input/Output: [(-73 -72 -88 24) -88]
Test Case: 644 | Input/Output: [(68 -13 30 -54) -54]
Test Case: 645 | Input/Output: [(-33 -63 -76 -7) -76]
Test Case: 646 | Input/Output: [(51 22 -86 -88) -88]
Test Case: 647 | Input/Output: [(-80 94 69 -45) -80]
Test Case: 648 | Input/Output: [(80 49 5 -69) -69]
Test Case: 649 | Input/Output: [(-69 -100 48 84) -100]
Test Case: 650 | Input/Output: [(4 -64 14 -3) -64]
Test Case: 651 | Input/Output: [(-35 -47 -87 6) -87]
Test Case: 652 | Input/Output: [(-85 -40 -43 80) -85]
Test Case: 653 | Input/Output: [(75 -35 -70 -51) -70]
Test Case: 654 | Input/Output: [(-88 19 48 -80) -88]
Test Case: 655 | Input/Output: [(-28 -96 -62 -60) -96]
Test Case: 656 | Input/Output: [(35 100 -98 53) -98]
Test Case: 657 | Input/Output: [(47 -12 -33 -60) -60]
Test Case: 658 | Input/Output: [(27 -71 88 22) -71]
Test Case: 659 | Input/Output: [(-76 -87 2 70) -87]
Test Case: 660 | Input/Output: [(-37 87 4 -41) -41]
Test Case: 661 | Input/Output: [(46 76 11 -29) -29]
Test Case: 662 | Input/Output: [(-63 29 53 -74) -74]
Test Case: 663 | Input/Output: [(50 -51 -23 -62) -62]
Test Case: 664 | Input/Output: [(1 34 99 -65) -65]
Test Case: 665 | Input/Output: [(-39 -21 -25 -91) -91]
Test Case: 666 | Input/Output: [(3 -65 41 64) -65]
Test Case: 667 | Input/Output: [(35 -19 -22 -15) -22]
Test Case: 668 | Input/Output: [(-15 1 -8 85) -15]
Test Case: 669 | Input/Output: [(-68 -9 -81 -72) -81]
Test Case: 670 | Input/Output: [(-14 24 -18 68) -18]
Test Case: 671 | Input/Output: [(-20 -9 37 -15) -20]
Test Case: 672 | Input/Output: [(-8 31 26 92) -8]
Test Case: 673 | Input/Output: [(-76 -18 68 93) -76]
Test Case: 674 | Input/Output: [(62 -31 -21 97) -31]
Test Case: 675 | Input/Output: [(-24 -91 27 -36) -91]
Test Case: 676 | Input/Output: [(-74 -78 26 -78) -78]
Test Case: 677 | Input/Output: [(80 -65 84 54) -65]
Test Case: 678 | Input/Output: [(-70 -14 67 32) -70]
Test Case: 679 | Input/Output: [(-65 -37 74 -89) -89]
Test Case: 680 | Input/Output: [(-28 79 13 -32) -32]
Test Case: 681 | Input/Output: [(82 23 -80 27) -80]
Test Case: 682 | Input/Output: [(-5 -26 -61 -98) -98]
Test Case: 683 | Input/Output: [(-81 -62 -78 90) -81]
Test Case: 684 | Input/Output: [(-2 -4 -40 79) -40]
Test Case: 685 | Input/Output: [(-93 40 79 46) -93]
Test Case: 686 | Input/Output: [(-94 -99 -62 -48) -99]
Test Case: 687 | Input/Output: [(-93 57 -35 67) -93]
Test Case: 688 | Input/Output: [(7 88 -89 -16) -89]
Test Case: 689 | Input/Output: [(44 -20 -67 -55) -67]
Test Case: 690 | Input/Output: [(79 22 -49 32) -49]
Test Case: 691 | Input/Output: [(62 68 64 56) 56]
Test Case: 692 | Input/Output: [(55 38 -23 -89) -89]
Test Case: 693 | Input/Output: [(27 -68 -31 -34) -68]
Test Case: 694 | Input/Output: [(43 67 83 54) 43]
Test Case: 695 | Input/Output: [(-33 -56 79 -62) -62]
Test Case: 696 | Input/Output: [(-39 -67 -72 -67) -72]
Test Case: 697 | Input/Output: [(2 -94 -55 89) -94]
Test Case: 698 | Input/Output: [(41 60 -49 53) -49]
Test Case: 699 | Input/Output: [(51 -16 23 -15) -16]
Test Case: 700 | Input/Output: [(73 19 40 -43) -43]
Test Case: 701 | Input/Output: [(77 84 7 -34) -34]
Test Case: 702 | Input/Output: [(76 -12 69 -49) -49]
Test Case: 703 | Input/Output: [(-63 -51 -82 -38) -82]
Test Case: 704 | Input/Output: [(99 -87 -13 92) -87]
Test Case: 705 | Input/Output: [(86 -67 47 -48) -67]
Test Case: 706 | Input/Output: [(-31 -85 -69 51) -85]
Test Case: 707 | Input/Output: [(-32 46 57 -34) -34]
Test Case: 708 | Input/Output: [(35 78 92 -8) -8]
Test Case: 709 | Input/Output: [(32 61 14 64) 14]
Test Case: 710 | Input/Output: [(68 -14 -38 95) -38]
Test Case: 711 | Input/Output: [(39 64 100 72) 39]
Test Case: 712 | Input/Output: [(61 -9 8 45) -9]
Test Case: 713 | Input/Output: [(-2 97 -7 81) -7]
Test Case: 714 | Input/Output: [(-66 19 16 100) -66]
Test Case: 715 | Input/Output: [(94 -57 73 -42) -57]
Test Case: 716 | Input/Output: [(-83 -3 5 -18) -83]
Test Case: 717 | Input/Output: [(-11 60 59 95) -11]
Test Case: 718 | Input/Output: [(-15 -54 -6 69) -54]
Test Case: 719 | Input/Output: [(-74 13 20 84) -74]
Test Case: 720 | Input/Output: [(69 42 47 -24) -24]
Test Case: 721 | Input/Output: [(-5 96 94 -97) -97]
Test Case: 722 | Input/Output: [(-30 -14 36 -47) -47]
Test Case: 723 | Input/Output: [(16 56 29 67) 16]
Test Case: 724 | Input/Output: [(10 17 -30 26) -30]
Test Case: 725 | Input/Output: [(-94 53 59 85) -94]
Test Case: 726 | Input/Output: [(-41 13 57 -7) -41]
Test Case: 727 | Input/Output: [(75 39 40 -9) -9]
Test Case: 728 | Input/Output: [(18 -52 96 30) -52]
Test Case: 729 | Input/Output: [(-9 -25 61 -94) -94]
Test Case: 730 | Input/Output: [(52 -55 -28 45) -55]
Test Case: 731 | Input/Output: [(38 2 81 44) 2]
Test Case: 732 | Input/Output: [(-58 -56 -20 90) -58]
Test Case: 733 | Input/Output: [(-66 59 -36 -96) -96]
Test Case: 734 | Input/Output: [(-37 27 28 47) -37]
Test Case: 735 | Input/Output: [(97 -18 -72 40) -72]
Test Case: 736 | Input/Output: [(83 18 -17 98) -17]
Test Case: 737 | Input/Output: [(-96 65 33 -45) -96]
Test Case: 738 | Input/Output: [(-35 76 32 -61) -61]
Test Case: 739 | Input/Output: [(7 -80 -88 -41) -88]
Test Case: 740 | Input/Output: [(-59 -80 41 -99) -99]
Test Case: 741 | Input/Output: [(58 -36 59 38) -36]
Test Case: 742 | Input/Output: [(-55 72 1 97) -55]
Test Case: 743 | Input/Output: [(-2 99 17 -30) -30]
Test Case: 744 | Input/Output: [(14 -61 24 -20) -61]
Test Case: 745 | Input/Output: [(73 98 99 -12) -12]
Test Case: 746 | Input/Output: [(-52 21 10 -17) -52]
Test Case: 747 | Input/Output: [(-27 9 54 -49) -49]
Test Case: 748 | Input/Output: [(72 44 -3 -57) -57]
Test Case: 749 | Input/Output: [(-40 -59 22 43) -59]
Test Case: 750 | Input/Output: [(26 -26 -68 -51) -68]
Test Case: 751 | Input/Output: [(23 84 84 -96) -96]
Test Case: 752 | Input/Output: [(-19 -39 55 0) -39]
Test Case: 753 | Input/Output: [(-30 91 -3 -70) -70]
Test Case: 754 | Input/Output: [(-4 87 79 -10) -10]
Test Case: 755 | Input/Output: [(41 95 20 -46) -46]
Test Case: 756 | Input/Output: [(1 -74 -10 59) -74]
Test Case: 757 | Input/Output: [(91 3 7 -95) -95]
Test Case: 758 | Input/Output: [(-49 63 30 52) -49]
Test Case: 759 | Input/Output: [(20 17 -48 -49) -49]
Test Case: 760 | Input/Output: [(-15 -58 -71 84) -71]
Test Case: 761 | Input/Output: [(-93 -87 -86 43) -93]
Test Case: 762 | Input/Output: [(-93 -98 20 84) -98]
Test Case: 763 | Input/Output: [(89 62 83 99) 62]
Test Case: 764 | Input/Output: [(90 -1 27 -98) -98]
Test Case: 765 | Input/Output: [(-39 -19 96 32) -39]
Test Case: 766 | Input/Output: [(38 -93 39 39) -93]
Test Case: 767 | Input/Output: [(-58 -2 -89 -95) -95]
Test Case: 768 | Input/Output: [(-49 -65 -57 88) -65]
Test Case: 769 | Input/Output: [(-49 -78 -67 -47) -78]
Test Case: 770 | Input/Output: [(-5 -86 4 62) -86]
Test Case: 771 | Input/Output: [(-17 29 10 -91) -91]
Test Case: 772 | Input/Output: [(40 -35 -15 47) -35]
Test Case: 773 | Input/Output: [(36 -31 -19 90) -31]
Test Case: 774 | Input/Output: [(-1 -64 -61 -3) -64]
Test Case: 775 | Input/Output: [(-58 38 -25 -30) -58]
Test Case: 776 | Input/Output: [(73 44 44 84) 44]
Test Case: 777 | Input/Output: [(-19 -59 -1 -23) -59]
Test Case: 778 | Input/Output: [(-29 -10 -51 100) -51]
Test Case: 779 | Input/Output: [(-40 -81 -1 36) -81]
Test Case: 780 | Input/Output: [(-48 97 23 94) -48]
Test Case: 781 | Input/Output: [(-30 -12 11 17) -30]
Test Case: 782 | Input/Output: [(-4 64 -58 -97) -97]
Test Case: 783 | Input/Output: [(3 -87 32 10) -87]
Test Case: 784 | Input/Output: [(6 91 -74 -68) -74]
Test Case: 785 | Input/Output: [(-84 31 10 30) -84]
Test Case: 786 | Input/Output: [(40 -64 15 78) -64]
Test Case: 787 | Input/Output: [(16 86 49 -79) -79]
Test Case: 788 | Input/Output: [(-18 92 -44 58) -44]
Test Case: 789 | Input/Output: [(-4 57 -75 86) -75]
Test Case: 790 | Input/Output: [(37 -89 -55 -42) -89]
Test Case: 791 | Input/Output: [(-45 -54 -19 67) -54]
Test Case: 792 | Input/Output: [(79 19 0 84) 0]
Test Case: 793 | Input/Output: [(86 12 32 -20) -20]
Test Case: 794 | Input/Output: [(-43 92 97 34) -43]
Test Case: 795 | Input/Output: [(51 -59 -40 11) -59]
Test Case: 796 | Input/Output: [(-91 -18 48 -98) -98]
Test Case: 797 | Input/Output: [(-26 49 -38 49) -38]
Test Case: 798 | Input/Output: [(78 -92 -91 -7) -92]
Test Case: 799 | Input/Output: [(72 -73 -5 -74) -74]
Test Case: 800 | Input/Output: [(-37 -5 33 -59) -59]
Test Case: 801 | Input/Output: [(-47 26 -36 -45) -47]
Test Case: 802 | Input/Output: [(-54 -98 -49 -20) -98]
Test Case: 803 | Input/Output: [(30 -21 10 -32) -32]
Test Case: 804 | Input/Output: [(-24 -51 -52 52) -52]
Test Case: 805 | Input/Output: [(-30 1 -75 -9) -75]
Test Case: 806 | Input/Output: [(-55 -28 -6 -98) -98]
Test Case: 807 | Input/Output: [(55 95 -20 -90) -90]
Test Case: 808 | Input/Output: [(-24 69 28 -7) -24]
Test Case: 809 | Input/Output: [(-69 -93 31 -83) -93]
Test Case: 810 | Input/Output: [(88 31 7 5) 5]
Test Case: 811 | Input/Output: [(57 -1 80 35) -1]
Test Case: 812 | Input/Output: [(-3 -68 93 -55) -68]
Test Case: 813 | Input/Output: [(-57 62 13 -21) -57]
Test Case: 814 | Input/Output: [(15 -2 -62 22) -62]
Test Case: 815 | Input/Output: [(35 57 31 66) 31]
Test Case: 816 | Input/Output: [(39 57 -50 -26) -50]
Test Case: 817 | Input/Output: [(-70 14 51 -22) -70]
Test Case: 818 | Input/Output: [(-21 -65 -58 44) -65]
Test Case: 819 | Input/Output: [(-11 19 -68 34) -68]
Test Case: 820 | Input/Output: [(-62 13 37 -93) -93]
Test Case: 821 | Input/Output: [(86 86 -3 -45) -45]
Test Case: 822 | Input/Output: [(58 -31 -79 -31) -79]
Test Case: 823 | Input/Output: [(24 -69 -81 74) -81]
Test Case: 824 | Input/Output: [(-24 81 -1 82) -24]
Test Case: 825 | Input/Output: [(-58 -34 37 91) -58]
Test Case: 826 | Input/Output: [(-65 26 -15 92) -65]
Test Case: 827 | Input/Output: [(52 30 -81 74) -81]
Test Case: 828 | Input/Output: [(-96 2 90 -12) -96]
Test Case: 829 | Input/Output: [(2 31 30 -56) -56]
Test Case: 830 | Input/Output: [(-6 -83 66 58) -83]
Test Case: 831 | Input/Output: [(-89 33 98 6) -89]
Test Case: 832 | Input/Output: [(-26 -79 98 -7) -79]
Test Case: 833 | Input/Output: [(-17 7 -67 -8) -67]
Test Case: 834 | Input/Output: [(-46 6 86 -63) -63]
Test Case: 835 | Input/Output: [(81 91 -12 -75) -75]
Test Case: 836 | Input/Output: [(95 22 -78 -66) -78]
Test Case: 837 | Input/Output: [(-31 -57 -88 -69) -88]
Test Case: 838 | Input/Output: [(-96 -97 40 -51) -97]
Test Case: 839 | Input/Output: [(45 13 89 91) 13]
Test Case: 840 | Input/Output: [(-4 -25 -48 98) -48]
Test Case: 841 | Input/Output: [(-90 -34 -77 92) -90]
Test Case: 842 | Input/Output: [(-80 -9 -57 -50) -80]
Test Case: 843 | Input/Output: [(28 -25 94 61) -25]
Test Case: 844 | Input/Output: [(5 -40 25 97) -40]
Test Case: 845 | Input/Output: [(22 36 -78 59) -78]
Test Case: 846 | Input/Output: [(-76 -81 -97 -51) -97]
Test Case: 847 | Input/Output: [(-37 52 -2 -86) -86]
Test Case: 848 | Input/Output: [(24 -6 7 -49) -49]
Test Case: 849 | Input/Output: [(33 -32 80 74) -32]
Test Case: 850 | Input/Output: [(78 59 -91 70) -91]
Test Case: 851 | Input/Output: [(-69 -93 -49 2) -93]
Test Case: 852 | Input/Output: [(-7 70 -88 5) -88]
Test Case: 853 | Input/Output: [(-74 21 -91 -69) -91]
Test Case: 854 | Input/Output: [(62 -46 22 38) -46]
Test Case: 855 | Input/Output: [(0 11 94 37) 0]
Test Case: 856 | Input/Output: [(-30 1 -84 48) -84]
Test Case: 857 | Input/Output: [(83 77 -93 -58) -93]
Test Case: 858 | Input/Output: [(-46 41 68 74) -46]
Test Case: 859 | Input/Output: [(58 37 -11 96) -11]
Test Case: 860 | Input/Output: [(46 -39 -5 96) -39]
Test Case: 861 | Input/Output: [(-1 -69 89 41) -69]
Test Case: 862 | Input/Output: [(-71 -73 50 -8) -73]
Test Case: 863 | Input/Output: [(-75 72 95 -38) -75]
Test Case: 864 | Input/Output: [(-12 28 -88 21) -88]
Test Case: 865 | Input/Output: [(85 -31 69 -66) -66]
Test Case: 866 | Input/Output: [(87 54 40 -24) -24]
Test Case: 867 | Input/Output: [(73 66 -50 -5) -50]
Test Case: 868 | Input/Output: [(-46 -23 -6 -66) -66]
Test Case: 869 | Input/Output: [(-50 71 2 71) -50]
Test Case: 870 | Input/Output: [(42 87 -5 -66) -66]
Test Case: 871 | Input/Output: [(80 -72 -26 48) -72]
Test Case: 872 | Input/Output: [(-67 51 -24 27) -67]
Test Case: 873 | Input/Output: [(-70 -29 -85 91) -85]
Test Case: 874 | Input/Output: [(35 -63 72 51) -63]
Test Case: 875 | Input/Output: [(62 -18 48 21) -18]
Test Case: 876 | Input/Output: [(-98 97 -19 -72) -98]
Test Case: 877 | Input/Output: [(-17 -7 72 -61) -61]
Test Case: 878 | Input/Output: [(-57 21 -27 82) -57]
Test Case: 879 | Input/Output: [(33 -34 38 40) -34]
Test Case: 880 | Input/Output: [(100 94 45 -7) -7]
Test Case: 881 | Input/Output: [(-84 -45 59 49) -84]
Test Case: 882 | Input/Output: [(-39 -53 87 59) -53]
Test Case: 883 | Input/Output: [(20 87 13 19) 13]
Test Case: 884 | Input/Output: [(-10 -84 -17 15) -84]
Test Case: 885 | Input/Output: [(59 -20 80 -67) -67]
Test Case: 886 | Input/Output: [(-53 -97 -79 -8) -97]
Test Case: 887 | Input/Output: [(-84 -88 -98 23) -98]
Test Case: 888 | Input/Output: [(57 -37 51 88) -37]
Test Case: 889 | Input/Output: [(-86 50 18 -56) -86]
Test Case: 890 | Input/Output: [(-61 44 70 -48) -61]
Test Case: 891 | Input/Output: [(-91 71 30 68) -91]
Test Case: 892 | Input/Output: [(68 55 75 -62) -62]
Test Case: 893 | Input/Output: [(42 80 84 -51) -51]
Test Case: 894 | Input/Output: [(50 46 93 77) 46]
Test Case: 895 | Input/Output: [(-95 63 -42 -21) -95]
Test Case: 896 | Input/Output: [(25 -74 10 -7) -74]
Test Case: 897 | Input/Output: [(-64 -79 0 -22) -79]
Test Case: 898 | Input/Output: [(10 -67 -86 88) -86]
Test Case: 899 | Input/Output: [(-76 9 -61 27) -76]
Test Case: 900 | Input/Output: [(7 -69 47 14) -69]
Test Case: 901 | Input/Output: [(-94 98 -84 -57) -94]
Test Case: 902 | Input/Output: [(-22 -32 -77 79) -77]
Test Case: 903 | Input/Output: [(85 -5 -71 24) -71]
Test Case: 904 | Input/Output: [(-76 36 -23 69) -76]
Test Case: 905 | Input/Output: [(16 50 -28 -64) -64]
Test Case: 906 | Input/Output: [(-92 2 72 48) -92]
Test Case: 907 | Input/Output: [(43 -60 -93 53) -93]
Test Case: 908 | Input/Output: [(-55 -80 -63 -91) -91]
Test Case: 909 | Input/Output: [(-14 -26 79 -37) -37]
Test Case: 910 | Input/Output: [(-30 -21 53 50) -30]
Test Case: 911 | Input/Output: [(63 0 23 -69) -69]
Test Case: 912 | Input/Output: [(-59 -74 -57 10) -74]
Test Case: 913 | Input/Output: [(91 79 -35 20) -35]
Test Case: 914 | Input/Output: [(-63 93 -44 -29) -63]
Test Case: 915 | Input/Output: [(88 -37 -56 90) -56]
Test Case: 916 | Input/Output: [(86 33 79 14) 14]
Test Case: 917 | Input/Output: [(-99 14 37 -67) -99]
Test Case: 918 | Input/Output: [(-41 87 -61 -51) -61]
Test Case: 919 | Input/Output: [(49 -71 39 -95) -95]
Test Case: 920 | Input/Output: [(29 -59 45 -71) -71]
Test Case: 921 | Input/Output: [(-3 69 -98 63) -98]
Test Case: 922 | Input/Output: [(-10 -8 93 49) -10]
Test Case: 923 | Input/Output: [(93 -15 -31 94) -31]
Test Case: 924 | Input/Output: [(-94 20 -6 -80) -94]
Test Case: 925 | Input/Output: [(-98 86 -48 -32) -98]
Test Case: 926 | Input/Output: [(-1 -38 -11 60) -38]
Test Case: 927 | Input/Output: [(-31 -79 -24 -23) -79]
Test Case: 928 | Input/Output: [(97 -88 -14 -96) -96]
Test Case: 929 | Input/Output: [(-5 -20 48 -15) -20]
Test Case: 930 | Input/Output: [(23 -54 -79 -80) -80]
Test Case: 931 | Input/Output: [(-23 81 -75 31) -75]
Test Case: 932 | Input/Output: [(40 4 -100 -26) -100]
Test Case: 933 | Input/Output: [(51 -58 -12 78) -58]
Test Case: 934 | Input/Output: [(-23 -71 -45 18) -71]
Test Case: 935 | Input/Output: [(59 56 52 96) 52]
Test Case: 936 | Input/Output: [(-50 -79 -63 74) -79]
Test Case: 937 | Input/Output: [(1 21 -61 -62) -62]
Test Case: 938 | Input/Output: [(35 -5 -92 -20) -92]
Test Case: 939 | Input/Output: [(-34 -83 53 3) -83]
Test Case: 940 | Input/Output: [(-70 -59 -62 -63) -70]
Test Case: 941 | Input/Output: [(41 -88 -1 -75) -88]
Test Case: 942 | Input/Output: [(78 -72 -85 -70) -85]
Test Case: 943 | Input/Output: [(61 -89 -3 -84) -89]
Test Case: 944 | Input/Output: [(-40 -32 82 36) -40]
Test Case: 945 | Input/Output: [(-62 -21 40 -63) -63]
Test Case: 946 | Input/Output: [(92 -52 -80 -64) -80]
Test Case: 947 | Input/Output: [(82 -31 -19 -56) -56]
Test Case: 948 | Input/Output: [(-10 73 -84 -68) -84]
Test Case: 949 | Input/Output: [(-10 46 5 -48) -48]
Test Case: 950 | Input/Output: [(56 77 97 73) 56]
Test Case: 951 | Input/Output: [(38 63 92 -31) -31]
Test Case: 952 | Input/Output: [(99 -44 26 -33) -44]
Test Case: 953 | Input/Output: [(-51 65 -78 34) -78]
Test Case: 954 | Input/Output: [(-79 -6 -7 -38) -79]
Test Case: 955 | Input/Output: [(18 76 83 -21) -21]
Test Case: 956 | Input/Output: [(40 -3 26 -57) -57]
Test Case: 957 | Input/Output: [(-80 -50 -82 -71) -82]
Test Case: 958 | Input/Output: [(18 36 -38 39) -38]
Test Case: 959 | Input/Output: [(74 -61 -46 -43) -61]
Test Case: 960 | Input/Output: [(0 71 -54 36) -54]
Test Case: 961 | Input/Output: [(69 -84 -50 58) -84]
Test Case: 962 | Input/Output: [(79 -48 15 -97) -97]
Test Case: 963 | Input/Output: [(-57 -22 -52 88) -57]
Test Case: 964 | Input/Output: [(44 31 -87 -35) -87]
Test Case: 965 | Input/Output: [(69 -35 96 -64) -64]
Test Case: 966 | Input/Output: [(53 -54 63 -18) -54]
Test Case: 967 | Input/Output: [(49 -12 13 -78) -78]
Test Case: 968 | Input/Output: [(8 62 51 -8) -8]
Test Case: 969 | Input/Output: [(65 -84 35 -6) -84]
Test Case: 970 | Input/Output: [(85 -68 83 85) -68]
Test Case: 971 | Input/Output: [(24 72 16 -4) -4]
Test Case: 972 | Input/Output: [(-63 34 61 79) -63]
Test Case: 973 | Input/Output: [(47 -89 64 22) -89]
Test Case: 974 | Input/Output: [(83 12 -78 71) -78]
Test Case: 975 | Input/Output: [(57 28 -100 97) -100]
Test Case: 976 | Input/Output: [(-21 -7 -61 25) -61]
Test Case: 977 | Input/Output: [(-91 48 45 9) -91]
Test Case: 978 | Input/Output: [(-11 -53 77 -27) -53]
Test Case: 979 | Input/Output: [(58 75 -51 25) -51]
Test Case: 980 | Input/Output: [(-92 43 -36 71) -92]
Test Case: 981 | Input/Output: [(-6 -18 -38 -20) -38]
Test Case: 982 | Input/Output: [(-9 47 -36 94) -36]
Test Case: 983 | Input/Output: [(58 -1 -96 13) -96]
Test Case: 984 | Input/Output: [(-25 11 93 -31) -31]
Test Case: 985 | Input/Output: [(-43 2 -14 -38) -43]
Test Case: 986 | Input/Output: [(61 -51 -12 -26) -51]
Test Case: 987 | Input/Output: [(-98 56 -32 96) -98]
Test Case: 988 | Input/Output: [(85 -69 -50 58) -69]
Test Case: 989 | Input/Output: [(98 55 42 -32) -32]
Test Case: 990 | Input/Output: [(-69 -75 76 -36) -75]
Test Case: 991 | Input/Output: [(-48 12 63 32) -48]
Test Case: 992 | Input/Output: [(58 -98 42 -18) -98]
Test Case: 993 | Input/Output: [(-24 -41 9 -6) -41]
Test Case: 994 | Input/Output: [(24 53 -4 -37) -37]
Test Case: 995 | Input/Output: [(-13 -46 94 39) -46]
Test Case: 996 | Input/Output: [(-58 -22 -77 31) -77]
Test Case: 997 | Input/Output: [(-53 -28 62 89) -53]
Test Case: 998 | Input/Output: [(-69 -84 -71 7) -84]
Test Case: 999 | Input/Output: [(43 -62 -56 2) -62]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 85 82 -28 112 -102 -105 -16 60 70 75 -119 -50 6 -2 -82 35
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-48 -48 -48 -99] -99] [[27 4 4 4] 4] [[-93 -99 -99 -99] -99] [[10 74 10 10] 10] [[-23 -50 -23 -23] -50] [[-22 -22 -22 -65] -65] [[-25 -25 -25 48] -25] [[42 -16 42 42] -16] [[-9 -68 -9 -9] -68] [[72 72 64 72] 64] [(52 52 52 52) 52] [(-67 -67 -67 -67) -67] [(44 44 44 44) 44] [(-85 -85 -85 -85) -85] [(92 92 92 92) 92] [(19 8 4 59) 4] [(14 89 54 20) 14] [(19 28 28 91) 19] [(80 68 73 17) 17] [(75 46 30 51) 30] [(35 90 42 50) 35] [(69 65 53 18) 18] [(21 92 46 96) 21] [(41 2 65 12) 2] [(52 95 89 100) 52] [(45 65 6 45) 6] [(31 84 60 45) 31] [(46 56 65 0) 0] [(31 53 29 56) 29] [(91 10 17 55) 10] [(80 65 18 55) 18] [(8 26 45 59) 8] [(65 91 67 13) 13] [(69 16 31 55) 16] [(73 65 18 95) 18] [(63 30 -86 -55) -86] [(44 -6 -100 -56) -100] [(-92 -78 99 -73) -92] [(1 98 38 -83) -83] [(-17 91 42 19) -17] [(5 81 -79 -53) -79] [(47 -60 -80 -71) -80] [(0 69 46 12) 0] [(77 -74 -48 -19) -74] [(35 -30 3 44) -30] [(9 30 75 79) 9] [(47 38 18 18) 18] [(-60 -9 95 17) -60] [(30 40 40 38) 30] [(-76 -54 -27 33) -76] [(-94 0 -74 -28) -94] [(5 -65 77 -91) -91] [(49 31 29 55) 29] [(-94 -84 37 -35) -94] [(96 -42 -22 -20) -42] [(-92 77 -88 73) -92] [(71 84 -16 -22) -22] [(55 -51 45 -24) -51] [(59 -62 18 4) -62] [(38 -66 76 -48) -66] [(-37 31 7 -17) -37] [(70 75 -86 5) -86] [(87 -94 -33 -26) -94] [(-76 36 6 -18) -76] [(19 82 42 29) 19] [(71 21 -2 -18) -18] [(57 -51 97 93) -51] [(-88 -13 47 -18) -88] [(-30 -92 -90 -46) -92] [(52 50 -55 -82) -82] [(-65 4 -62 -24) -65] [(14 63 -98 -43) -98] [(-87 12 43 -58) -87] [(-6 87 -52 42) -52] [(-88 -62 -56 -75) -88] [(1 30 32 -56) -56] [(-72 -41 71 3) -72] [(-23 33 95 -9) -23] [(28 99 -75 87) -75] [(22 -29 19 8) -29] [(-54 -61 -83 -62) -83] [(-98 -26 62 -80) -98] [(26 -78 -35 -14) -78] [(2 61 14 -42) -42] [(28 39 36 19) 19] [(92 -54 100 44) -54] [(40 42 -99 16) -99] [(18 28 88 2) 2] [(-11 37 48 -63) -63] [(-19 -98 -16 85) -98] [(-3 -68 3 26) -68] [(61 -61 -59 32) -61] [(-9 -65 -32 -49) -65] [(68 -37 -65 53) -65] [(94 2 -91 82) -91])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -48                
Correct output: 4                   | Program output: 27                 
Correct output: -99                 | Program output: -93                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -23                
Correct output: -65                 | Program output: -22                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: 42                 
Correct output: -68                 | Program output: -9                 
Correct output: 64                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 80                 
Correct output: 30                  | Program output: 75                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 41                 
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 46                 
Correct output: 29                  | Program output: 31                 
Correct output: 10                  | Program output: 91                 
Correct output: 18                  | Program output: 80                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 65                 
Correct output: 16                  | Program output: 69                 
Correct output: 18                  | Program output: 73                 
Correct output: -86                 | Program output: 63                 
Correct output: -100                | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: 1                  
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: 5                  
Correct output: -80                 | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: 77                 
Correct output: -30                 | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: 5                  
Correct output: 29                  | Program output: 49                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: 96                 
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: 71                 
Correct output: -51                 | Program output: 55                 
Correct output: -62                 | Program output: 59                 
Correct output: -66                 | Program output: 38                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: 70                 
Correct output: -94                 | Program output: 87                 
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: 71                 
Correct output: -51                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -30                
Correct output: -82                 | Program output: 52                 
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: 14                 
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: 1                  
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: -23                
Correct output: -75                 | Program output: 28                 
Correct output: -29                 | Program output: 22                 
Correct output: -83                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 26                 
Correct output: -42                 | Program output: 2                  
Correct output: 19                  | Program output: 28                 
Correct output: -54                 | Program output: 92                 
Correct output: -99                 | Program output: 40                 
Correct output: 2                   | Program output: 18                 
Correct output: -63                 | Program output: -11                
Correct output: -98                 | Program output: -19                
Correct output: -68                 | Program output: -3                 
Correct output: -61                 | Program output: 61                 
Correct output: -65                 | Program output: -9                 
Correct output: -65                 | Program output: 68                 
Correct output: -91                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min})
Lexicase best program: (exec_do*range (exec_shove (68) integer_fromboolean exec_dup_times () exec_do*count (boolean_yank) integer_dup_times in1) integer_gte boolean_xor exec_rot (integer_div exec_dup () print_integer boolean_empty) (integer_min integer_min) ())
Lexicase best errors: [1 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min})
Zero cases best program: (exec_do*range (exec_shove (68) integer_fromboolean exec_dup_times () exec_do*count (boolean_yank) integer_dup_times in1) integer_gte boolean_xor exec_rot (integer_div exec_dup () print_integer boolean_empty) (integer_min integer_min) ())
Zero cases best errors: [1 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 7 1 2 6 1 8 6 11 6)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (1 7 1 2 6 1 8 6 11 6)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_max} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush})
Best program: (integer_max boolean_xor exec_rot (integer_dec integer_gt in1) (print_integer exec_while () integer_mod exec_k (exec_swap (integer_add) (boolean_shove) exec_k (boolean_yankdup integer_dup) (boolean_dup_times integer_fromboolean exec_shove (exec_yankdup print_boolean exec_do*while (integer_lt integer_inc boolean_shove boolean_empty exec_dup_times (exec_pop (integer_dup_times integer_inc boolean_rot) integer_swap exec_if () (integer_lt print_boolean boolean_frominteger print_exec ()) in2 integer_flush in3 integer_flush boolean_dup_times) print_integer boolean_shove print_newline boolean_eq) boolean_eq integer_dec integer_fromboolean) exec_eq boolean_swap) boolean_shove boolean_flush) ()) ())
Errors: [1 0 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 53
Size: 71
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 9.951
Median total errors in population: 10
Error averages by case: (0.999 0.993 0.999 0.998 0.994 0.999 0.992 0.994 0.989 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.435
Average program size in population (points): 68.106
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 466694
--- Timings ---
Current time: 1559583308753 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.7 seconds, 27.4%
Fitness Testing:      1.8 seconds, 68.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -48                
Correct output: 4                   | Program output: 27                 
Correct output: -99                 | Program output: -93                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -23                
Correct output: -65                 | Program output: -22                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: 42                 
Correct output: -68                 | Program output: -9                 
Correct output: 64                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 80                 
Correct output: 30                  | Program output: 75                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 41                 
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 46                 
Correct output: 29                  | Program output: 31                 
Correct output: 10                  | Program output: 91                 
Correct output: 18                  | Program output: 80                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 65                 
Correct output: 16                  | Program output: 69                 
Correct output: 18                  | Program output: 73                 
Correct output: -86                 | Program output: 63                 
Correct output: -100                | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: 1                  
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: 5                  
Correct output: -80                 | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: 77                 
Correct output: -30                 | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: 5                  
Correct output: 29                  | Program output: 49                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: 96                 
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: 71                 
Correct output: -51                 | Program output: 55                 
Correct output: -62                 | Program output: 59                 
Correct output: -66                 | Program output: 38                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: 70                 
Correct output: -94                 | Program output: 87                 
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: 71                 
Correct output: -51                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -30                
Correct output: -82                 | Program output: 52                 
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: 14                 
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: 1                  
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: -23                
Correct output: -75                 | Program output: 28                 
Correct output: -29                 | Program output: 22                 
Correct output: -83                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 26                 
Correct output: -42                 | Program output: 2                  
Correct output: 19                  | Program output: 28                 
Correct output: -54                 | Program output: 92                 
Correct output: -99                 | Program output: 40                 
Correct output: 2                   | Program output: 18                 
Correct output: -63                 | Program output: -11                
Correct output: -98                 | Program output: -19                
Correct output: -68                 | Program output: -3                 
Correct output: -61                 | Program output: 61                 
Correct output: -65                 | Program output: -9                 
Correct output: -65                 | Program output: 68                 
Correct output: -91                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_996} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_dup_items boolean_invert_second_then_and in1 print_integer exec_do*times (in3 integer_eq exec_dup (boolean_and) exec_yankdup boolean_swap exec_do*while (boolean_xor boolean_flush exec_do*count (integer_eq) boolean_invert_second_then_and boolean_dup_times exec_shove (exec_dup (integer_dec exec_empty) integer_empty) exec_pop (tag_integer_996 integer_yank exec_dup_items) integer_empty boolean_flush exec_dup (integer_yank exec_rot (boolean_or) (exec_rot (integer_mult in3 boolean_and) (integer_mult integer_sub exec_k (integer_inc integer_dup integer_gte integer_dup_times exec_yank integer_inc boolean_xor) () exec_y () boolean_stackdepth boolean_dup) (exec_stackdepth exec_yankdup integer_add print_exec (integer_gte boolean_yank exec_yankdup exec_k (exec_when (print_integer) boolean_eq exec_yankdup) () exec_eq integer_eq) exec_y_when_autoconstructing (exec_while (exec_s_when_autoconstructing (boolean_and boolean_swap) () ())))) ()))))
Lexicase best errors: [1 0 0 1 1 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 96
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_996} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_dup_items boolean_invert_second_then_and in1 print_integer exec_do*times (in3 integer_eq exec_dup (boolean_and) exec_yankdup boolean_swap exec_do*while (boolean_xor boolean_flush exec_do*count (integer_eq) boolean_invert_second_then_and boolean_dup_times exec_shove (exec_dup (integer_dec exec_empty) integer_empty) exec_pop (tag_integer_996 integer_yank exec_dup_items) integer_empty boolean_flush exec_dup (integer_yank exec_rot (boolean_or) (exec_rot (integer_mult in3 boolean_and) (integer_mult integer_sub exec_k (integer_inc integer_dup integer_gte integer_dup_times exec_yank integer_inc boolean_xor) () exec_y () boolean_stackdepth boolean_dup) (exec_stackdepth exec_yankdup integer_add print_exec (integer_gte boolean_yank exec_yankdup exec_k (exec_when (print_integer) boolean_eq exec_yankdup) () exec_eq integer_eq) exec_y_when_autoconstructing (exec_while (exec_s_when_autoconstructing (boolean_and boolean_swap) () ())))) ()))))
Zero cases best errors: [1 0 0 1 1 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 96
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 410 501 1000 110 50 1000 498 110 1000)
Population mean number of elite cases: 5.68
Count of perfect (error zero) individuals by case: (0 410 501 0 110 50 0 498 110 0)
Population mean number of perfect (error zero) cases: 1.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction tag_boolean_537} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_996} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_integer_850} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_462} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tagged_700} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap})
Best program: (integer_fromboolean exec_dup_items exec_s (integer_max) (exec_noop in1 integer_yankdup) (print_integer exec_yankdup) exec_swap (exec_dup_items integer_min) (exec_do*count (exec_empty) tag_boolean_537 exec_rot (exec_s_when_autoconstructing (exec_while (boolean_stackdepth)) (exec_k (boolean_yank integer_max exec_y (integer_max integer_lte exec_k (print_boolean boolean_flush) (integer_empty) exec_pop (tag_integer_996 integer_yank exec_dup_items) integer_empty boolean_flush exec_dup (integer_yank exec_rot (boolean_or) (exec_rot (integer_mult in3 boolean_and) (integer_mult integer_sub exec_k (integer_inc integer_dup integer_gte integer_dup_times exec_yank integer_inc boolean_rot exec_do*while (boolean_shove integer_inc) integer_lt boolean_dup_items integer_sub) (boolean_frominteger boolean_shove boolean_not integer_inc tag_integer_850 boolean_empty exec_noop exec_do*times (tag_boolean_462 boolean_swap) exec_swap (exec_dup_times () boolean_or in4 exec_dup_items tagged_700) (exec_s (exec_k (exec_dup_times () integer_div in3 boolean_frominteger integer_rot print_exec (boolean_and integer_sub boolean_stackdepth in4 exec_when () integer_mod boolean_or) boolean_dup_items integer_inc integer_yankdup integer_inc) (integer_add integer_swap boolean_swap)) () ()))) ()) ()))) ()) ()) () ()))
Errors: [1 0 0 1 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 97
Size: 139
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 8.321
Median total errors in population: 8
Error averages by case: (1.0 0.59 0.499 1.0 0.89 0.95 1.0 0.502 0.89 1.0)
Error minima by case: (1 0 0 1 0 0 1 0 0 1)
Average genome size in population (length): 42.79
Average program size in population (points): 59.285
Average percent parens in population: 0.276
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.493
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 222
Genome diversity (% unique genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 978344
--- Timings ---
Current time: 1559583311966 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.3 seconds, 44.3%
Fitness Testing:      2.5 seconds, 47.2%
Report:               0.3 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -48                
Correct output: 4                   | Program output: 27                 
Correct output: -99                 | Program output: -93                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -23                
Correct output: -65                 | Program output: -22                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: 42                 
Correct output: -68                 | Program output: -9                 
Correct output: 64                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 80                 
Correct output: 30                  | Program output: 75                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 41                 
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 46                 
Correct output: 29                  | Program output: 31                 
Correct output: 10                  | Program output: 91                 
Correct output: 18                  | Program output: 80                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 65                 
Correct output: 16                  | Program output: 69                 
Correct output: 18                  | Program output: 73                 
Correct output: -86                 | Program output: 63                 
Correct output: -100                | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: 1                  
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: 5                  
Correct output: -80                 | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: 77                 
Correct output: -30                 | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: 5                  
Correct output: 29                  | Program output: 49                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: 96                 
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: 71                 
Correct output: -51                 | Program output: 55                 
Correct output: -62                 | Program output: 59                 
Correct output: -66                 | Program output: 38                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: 70                 
Correct output: -94                 | Program output: 87                 
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: 71                 
Correct output: -51                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -30                
Correct output: -82                 | Program output: 52                 
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: 14                 
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: 1                  
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: -23                
Correct output: -75                 | Program output: 28                 
Correct output: -29                 | Program output: 22                 
Correct output: -83                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 26                 
Correct output: -42                 | Program output: 2                  
Correct output: 19                  | Program output: 28                 
Correct output: -54                 | Program output: 92                 
Correct output: -99                 | Program output: 40                 
Correct output: 2                   | Program output: 18                 
Correct output: -63                 | Program output: -11                
Correct output: -98                 | Program output: -19                
Correct output: -68                 | Program output: -3                 
Correct output: -61                 | Program output: 61                 
Correct output: -65                 | Program output: -9                 
Correct output: -65                 | Program output: 68                 
Correct output: -91                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_div})
Lexicase best program: (boolean_flush in1 tagged_410 in4 exec_when (exec_yank integer_shove) print_integer integer_dec integer_yankdup integer_inc boolean_dup_times boolean_empty integer_dup_times in3 integer_div)
Lexicase best errors: [1 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_div})
Zero cases best program: (boolean_flush in1 tagged_410 in4 exec_when (exec_yank integer_shove) print_integer integer_dec integer_yankdup integer_inc boolean_dup_times boolean_empty integer_dup_times in3 integer_div)
Zero cases best errors: [1 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (417 445 445 1 445 1 445 445 443 417)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (417 445 445 1 445 1 445 445 443 417)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction tag_boolean_537} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_996} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc})
Best program: (integer_fromboolean exec_dup_items exec_s (integer_max) (exec_noop in1 integer_yankdup) (print_integer exec_yankdup) exec_swap (exec_dup_items integer_min) (exec_do*count (exec_empty) tag_boolean_537 exec_rot (exec_s_when_autoconstructing (exec_while (boolean_stackdepth)) (exec_k (boolean_yank integer_max exec_y (integer_max integer_lte exec_k (print_boolean boolean_flush) (integer_empty) exec_pop (tag_integer_996 integer_yank exec_dup_items) integer_empty boolean_flush exec_dup (integer_yank exec_rot (boolean_or) (exec_rot (integer_mult in3 boolean_and) (integer_mult integer_sub exec_k (integer_inc integer_dup integer_gte integer_dup_times exec_yank integer_inc boolean_rot exec_do*while (boolean_shove integer_inc)) ()) ()) ()))) ()) ()) () ()))
Errors: [1 0 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 56
Size: 86
Percent parens: 0.349
--- Population Statistics ---
Average total errors in population: 6.496
Median total errors in population: 8
Error averages by case: (0.583 0.555 0.555 0.999 0.555 0.999 0.555 0.555 0.557 0.583)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.978
Average program size in population (points): 47.898
Average percent parens in population: 0.286
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.963
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 268
Genome diversity (% unique genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 289
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1900531
--- Timings ---
Current time: 1559583316101 milliseconds
Total Time:           9.5 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.8 seconds, 49.9%
Fitness Testing:      3.5 seconds, 36.3%
Report:               1.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: 42                 
Correct output: -68                 | Program output: -9                 
Correct output: 64                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 51                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 12                 
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 31                 
Correct output: 10                  | Program output: 55                 
Correct output: 18                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 55                 
Correct output: 18                  | Program output: 73                 
Correct output: -86                 | Program output: -55                
Correct output: -100                | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -53                
Correct output: -80                 | Program output: -71                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -19                
Correct output: -30                 | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 49                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -20                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -24                
Correct output: -62                 | Program output: 4                  
Correct output: -66                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: 5                  
Correct output: -94                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: -23                
Correct output: -75                 | Program output: 28                 
Correct output: -29                 | Program output: 8                  
Correct output: -83                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 44                 
Correct output: -99                 | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -19                
Correct output: -68                 | Program output: -3                 
Correct output: -61                 | Program output: 32                 
Correct output: -65                 | Program output: -49                
Correct output: -65                 | Program output: 53                 
Correct output: -91                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Lexicase best errors: [0 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.393
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Zero cases best errors: [0 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.393
--- Lexicase Population Statistics ---
Count of elite individuals by case: (897 111 115 111 555 115 118 226 666 555)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (897 111 115 111 555 115 118 226 666 555)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Errors: [0 1 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 17
Size: 28
Percent parens: 0.393
--- Population Statistics ---
Average total errors in population: 6.531
Median total errors in population: 6
Error averages by case: (0.103 0.889 0.885 0.889 0.445 0.885 0.882 0.774 0.334 0.445)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.942
Average program size in population (points): 50.608
Average percent parens in population: 0.249
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.489
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2606241
--- Timings ---
Current time: 1559583319475 milliseconds
Total Time:          13.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.7 seconds, 51.5%
Fitness Testing:      4.3 seconds, 32.7%
Report:               2.0 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: 42                 
Correct output: -68                 | Program output: -9                 
Correct output: 64                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 51                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 12                 
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 31                 
Correct output: 10                  | Program output: 55                 
Correct output: 18                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 55                 
Correct output: 18                  | Program output: 73                 
Correct output: -86                 | Program output: -55                
Correct output: -100                | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -53                
Correct output: -80                 | Program output: -71                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -19                
Correct output: -30                 | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 49                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -20                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -24                
Correct output: -62                 | Program output: 4                  
Correct output: -66                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: 5                  
Correct output: -94                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: -23                
Correct output: -75                 | Program output: 28                 
Correct output: -29                 | Program output: 8                  
Correct output: -83                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 44                 
Correct output: -99                 | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -19                
Correct output: -68                 | Program output: -3                 
Correct output: -61                 | Program output: 32                 
Correct output: -65                 | Program output: -49                
Correct output: -65                 | Program output: 53                 
Correct output: -91                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Lexicase best errors: [0 0 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.393
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Zero cases best errors: [0 0 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.393
--- Lexicase Population Statistics ---
Count of elite individuals by case: (809 526 103 103 552 524 524 249 1000 1000)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (809 526 103 103 552 524 524 249 0 0)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Errors: [0 0 1 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 28
Percent parens: 0.393
--- Population Statistics ---
Average total errors in population: 6.61
Median total errors in population: 5
Error averages by case: (0.191 0.474 0.897 0.897 0.448 0.476 0.476 0.751 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 17.488
Average program size in population (points): 25.845
Average percent parens in population: 0.303
Minimum age in population: 4.0
Maximum age in population: 7.25
Average age in population: 5.770875
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 440
Genome diversity (% unique genomes):	 0.282
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 457
Syntactic diversity (% unique Push programs):	 0.248
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3582961
--- Timings ---
Current time: 1559583323006 milliseconds
Total Time:          16.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.8 seconds, 52.8%
Fitness Testing:      5.1 seconds, 31.0%
Report:               2.6 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: 42                 
Correct output: -68                 | Program output: -9                 
Correct output: 64                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 51                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 12                 
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 31                 
Correct output: 10                  | Program output: 55                 
Correct output: 18                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 55                 
Correct output: 18                  | Program output: 73                 
Correct output: -86                 | Program output: -55                
Correct output: -100                | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -53                
Correct output: -80                 | Program output: -71                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -19                
Correct output: -30                 | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 49                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -20                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -24                
Correct output: -62                 | Program output: 4                  
Correct output: -66                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: 5                  
Correct output: -94                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: -23                
Correct output: -75                 | Program output: 28                 
Correct output: -29                 | Program output: 8                  
Correct output: -83                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 44                 
Correct output: -99                 | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -19                
Correct output: -68                 | Program output: -3                 
Correct output: -61                 | Program output: 32                 
Correct output: -65                 | Program output: -49                
Correct output: -65                 | Program output: 53                 
Correct output: -91                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Lexicase best errors: [1 1 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.393
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Zero cases best errors: [1 1 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.393
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 125 668 221 537 543 897 125 221 537)
Population mean number of elite cases: 4.09
Count of perfect (error zero) individuals by case: (220 125 668 221 537 543 897 125 221 537)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup () exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ())
Errors: [1 1 0 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 17
Size: 28
Percent parens: 0.393
--- Population Statistics ---
Average total errors in population: 5.906
Median total errors in population: 5
Error averages by case: (0.78 0.875 0.332 0.779 0.463 0.457 0.103 0.875 0.779 0.463)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.222
Average program size in population (points): 27.709
Average percent parens in population: 0.332
Minimum age in population: 5.0
Maximum age in population: 8.8125
Average age in population: 7.2766875
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 389
Genome diversity (% unique genomes):	 0.332
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 414
Syntactic diversity (% unique Push programs):	 0.3
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4700258
--- Timings ---
Current time: 1559583326680 milliseconds
Total Time:          20.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.8 seconds, 53.5%
Fitness Testing:      6.1 seconds, 30.3%
Report:               3.2 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: 64                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 8                  
Correct output: 14                  | Program output: 20                 
Correct output: 19                  | Program output: 28                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 46                 
Correct output: 35                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 52                  | Program output: 95                 
Correct output: 6                   | Program output: 45                 
Correct output: 31                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 55                 
Correct output: 8                   | Program output: 26                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 65                 
Correct output: -86                 | Program output: -55                
Correct output: -100                | Program output: -56                
Correct output: -92                 | Program output: -78                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: 19                 
Correct output: -79                 | Program output: -53                
Correct output: -80                 | Program output: -71                
Correct output: 0                   | Program output: 12                 
Correct output: -74                 | Program output: -74                
Correct output: -30                 | Program output: -30                
Correct output: 9                   | Program output: 30                 
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -9                 
Correct output: 30                  | Program output: 38                 
Correct output: -76                 | Program output: -54                
Correct output: -94                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -84                
Correct output: -42                 | Program output: -42                
Correct output: -92                 | Program output: 73                 
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: -66                
Correct output: -37                 | Program output: -17                
Correct output: -86                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: -18                
Correct output: 19                  | Program output: 29                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -18                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -24                
Correct output: -98                 | Program output: -43                
Correct output: -87                 | Program output: -58                
Correct output: -52                 | Program output: 42                 
Correct output: -88                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -41                
Correct output: -23                 | Program output: -9                 
Correct output: -75                 | Program output: 87                 
Correct output: -29                 | Program output: -29                
Correct output: -83                 | Program output: -62                
Correct output: -98                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: -54                
Correct output: -99                 | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -37                
Correct output: -91                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_or integer_fromboolean integer_dup integer_dup_times in2 integer_yank integer_yank in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_or integer_fromboolean integer_dup integer_dup_times in2 integer_yank integer_yank in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (307 305 258 303 307 375 307 306 599 341)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (307 305 258 303 307 375 307 306 599 341)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_or integer_fromboolean integer_dup integer_dup_times in2 integer_yank integer_yank in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 6.592
Median total errors in population: 7
Error averages by case: (0.693 0.695 0.742 0.697 0.693 0.625 0.693 0.694 0.401 0.659)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.606
Average program size in population (points): 26.008
Average percent parens in population: 0.263
Minimum age in population: 6.0
Maximum age in population: 10.625
Average age in population: 8.9541875
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.369
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.33
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5553041
--- Timings ---
Current time: 1559583330048 milliseconds
Total Time:          23.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.8 seconds, 54.3%
Fitness Testing:      6.9 seconds, 29.3%
Report:               3.8 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: 64                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 8                  
Correct output: 14                  | Program output: 20                 
Correct output: 19                  | Program output: 28                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 46                 
Correct output: 35                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 52                  | Program output: 95                 
Correct output: 6                   | Program output: 45                 
Correct output: 31                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 55                 
Correct output: 8                   | Program output: 26                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 65                 
Correct output: -86                 | Program output: -55                
Correct output: -100                | Program output: -56                
Correct output: -92                 | Program output: -78                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: 19                 
Correct output: -79                 | Program output: -53                
Correct output: -80                 | Program output: -71                
Correct output: 0                   | Program output: 12                 
Correct output: -74                 | Program output: -74                
Correct output: -30                 | Program output: -30                
Correct output: 9                   | Program output: 30                 
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -9                 
Correct output: 30                  | Program output: 38                 
Correct output: -76                 | Program output: -54                
Correct output: -94                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -84                
Correct output: -42                 | Program output: -42                
Correct output: -92                 | Program output: 73                 
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: -66                
Correct output: -37                 | Program output: -17                
Correct output: -86                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: -18                
Correct output: 19                  | Program output: 29                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -18                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -24                
Correct output: -98                 | Program output: -43                
Correct output: -87                 | Program output: -58                
Correct output: -52                 | Program output: 42                 
Correct output: -88                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -41                
Correct output: -23                 | Program output: -9                 
Correct output: -75                 | Program output: 87                 
Correct output: -29                 | Program output: -29                
Correct output: -83                 | Program output: -62                
Correct output: -98                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: -54                
Correct output: -99                 | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -37                
Correct output: -91                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_or integer_fromboolean integer_dup integer_dup_times in2 integer_yank integer_yank in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Lexicase best errors: [1 0 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_or integer_fromboolean integer_dup integer_dup_times in2 integer_yank integer_yank in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Zero cases best errors: [1 0 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (225 657 655 1 149 890 726 2 736 80)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (225 657 655 1 149 890 726 2 736 80)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_or integer_fromboolean integer_dup integer_dup_times boolean_or integer_fromboolean integer_dup integer_dup_times in2 integer_yank integer_yank in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Errors: [1 0 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 25
Size: 36
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 5.879
Median total errors in population: 5
Error averages by case: (0.775 0.343 0.345 0.999 0.851 0.11 0.274 0.998 0.264 0.92)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.945
Average program size in population (points): 29.447
Average percent parens in population: 0.308
Minimum age in population: 7.0
Maximum age in population: 11.546875
Average age in population: 10.072484375
Median age in population: 10.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 531
Genome diversity (% unique genomes):	 0.296
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 545
Syntactic diversity (% unique Push programs):	 0.263
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6657364
--- Timings ---
Current time: 1559583333510 milliseconds
Total Time:          27.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.7 seconds, 54.3%
Fitness Testing:      7.9 seconds, 29.2%
Report:               4.4 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: 42                 
Correct output: -68                 | Program output: -9                 
Correct output: 64                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 51                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 12                 
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 31                 
Correct output: 10                  | Program output: 55                 
Correct output: 18                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 55                 
Correct output: 18                  | Program output: 73                 
Correct output: -86                 | Program output: -55                
Correct output: -100                | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -53                
Correct output: -80                 | Program output: -71                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -19                
Correct output: -30                 | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 49                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -20                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -24                
Correct output: -62                 | Program output: 4                  
Correct output: -66                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: 5                  
Correct output: -94                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: -23                
Correct output: -75                 | Program output: 28                 
Correct output: -29                 | Program output: 8                  
Correct output: -83                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 44                 
Correct output: -99                 | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -19                
Correct output: -68                 | Program output: -3                 
Correct output: -61                 | Program output: 32                 
Correct output: -65                 | Program output: -49                
Correct output: -65                 | Program output: 53                 
Correct output: -91                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 28
Percent parens: 0.393
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 28
Percent parens: 0.393
--- Lexicase Population Statistics ---
Count of elite individuals by case: (925 320 874 925 256 913 293 551 546 321)
Population mean number of elite cases: 5.92
Count of perfect (error zero) individuals by case: (925 320 874 925 256 913 293 551 546 321)
Population mean number of perfect (error zero) cases: 5.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_rot (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) () ()) ()) () ())
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 17
Size: 30
Percent parens: 0.433
--- Population Statistics ---
Average total errors in population: 4.076
Median total errors in population: 4
Error averages by case: (0.075 0.68 0.126 0.075 0.744 0.087 0.707 0.449 0.454 0.679)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.381
Average program size in population (points): 27.964
Average percent parens in population: 0.337
Minimum age in population: 9.25
Maximum age in population: 13.046875
Average age in population: 11.7333203125
Median age in population: 11.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 254
Genome diversity (% unique genomes):	 0.325
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 266
Syntactic diversity (% unique Push programs):	 0.288
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7520992
--- Timings ---
Current time: 1559583336809 milliseconds
Total Time:          30.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.6 seconds, 54.7%
Fitness Testing:      8.7 seconds, 28.6%
Report:               5.0 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -48                
Correct output: 4                   | Program output: 27                 
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -23                
Correct output: -65                 | Program output: -22                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: 42                 
Correct output: -68                 | Program output: -9                 
Correct output: 64                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 80                 
Correct output: 30                  | Program output: 75                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 41                 
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 65                 
Correct output: 29                  | Program output: 31                 
Correct output: 10                  | Program output: 91                 
Correct output: 18                  | Program output: 80                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 65                 
Correct output: 16                  | Program output: 69                 
Correct output: 18                  | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: 99                 
Correct output: -83                 | Program output: 38                 
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -30                 | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -74                
Correct output: -91                 | Program output: 77                 
Correct output: 29                  | Program output: 49                 
Correct output: -94                 | Program output: 37                 
Correct output: -42                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -16                
Correct output: -51                 | Program output: 45                 
Correct output: -62                 | Program output: 59                 
Correct output: -66                 | Program output: 76                 
Correct output: -37                 | Program output: 7                  
Correct output: -86                 | Program output: 70                 
Correct output: -94                 | Program output: -33                
Correct output: -76                 | Program output: 6                  
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: -2                 
Correct output: -51                 | Program output: 57                 
Correct output: -88                 | Program output: 47                 
Correct output: -92                 | Program output: -90                
Correct output: -82                 | Program output: -55                
Correct output: -65                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -87                 | Program output: 43                 
Correct output: -52                 | Program output: -6                 
Correct output: -88                 | Program output: -56                
Correct output: -56                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: 95                 
Correct output: -75                 | Program output: 28                 
Correct output: -29                 | Program output: 22                 
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: 62                 
Correct output: -78                 | Program output: -35                
Correct output: -42                 | Program output: 14                 
Correct output: 19                  | Program output: 28                 
Correct output: -54                 | Program output: 92                 
Correct output: -99                 | Program output: 40                 
Correct output: 2                   | Program output: 88                 
Correct output: -63                 | Program output: 48                 
Correct output: -98                 | Program output: -19                
Correct output: -68                 | Program output: -3                 
Correct output: -61                 | Program output: 61                 
Correct output: -65                 | Program output: -32                
Correct output: -65                 | Program output: 68                 
Correct output: -91                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_do*while (exec_yank) in3 print_integer)
Lexicase best errors: [0 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 12
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_do*while (exec_yank) in3 print_integer)
Zero cases best errors: [0 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 12
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 314 902 6 6 899 574 902 900 574)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (313 314 902 6 6 899 574 902 900 574)
Population mean number of perfect (error zero) cases: 5.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer})
Best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_do*while (exec_yank) in3 print_integer)
Errors: [0 0 0 1 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 9
Size: 12
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.61
Median total errors in population: 4
Error averages by case: (0.687 0.686 0.098 0.994 0.994 0.101 0.426 0.098 0.1 0.426)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.07
Average program size in population (points): 26.911
Average percent parens in population: 0.363
Minimum age in population: 10.40625
Maximum age in population: 14.7734375
Average age in population: 13.17639453125
Median age in population: 13.26171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 224
Genome diversity (% unique genomes):	 0.349
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 278
Syntactic diversity (% unique Push programs):	 0.309
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8394811
--- Timings ---
Current time: 1559583339581 milliseconds
Total Time:          33.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.5 seconds, 54.9%
Fitness Testing:      9.5 seconds, 28.2%
Report:               5.6 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: 64                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 8                  
Correct output: 14                  | Program output: 20                 
Correct output: 19                  | Program output: 28                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 46                 
Correct output: 35                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 52                  | Program output: 95                 
Correct output: 6                   | Program output: 45                 
Correct output: 31                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 55                 
Correct output: 8                   | Program output: 26                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 65                 
Correct output: -86                 | Program output: -55                
Correct output: -100                | Program output: -56                
Correct output: -92                 | Program output: -78                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: 19                 
Correct output: -79                 | Program output: -53                
Correct output: -80                 | Program output: -71                
Correct output: 0                   | Program output: 12                 
Correct output: -74                 | Program output: -74                
Correct output: -30                 | Program output: -30                
Correct output: 9                   | Program output: 30                 
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -9                 
Correct output: 30                  | Program output: 38                 
Correct output: -76                 | Program output: -54                
Correct output: -94                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -84                
Correct output: -42                 | Program output: -42                
Correct output: -92                 | Program output: 73                 
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: -66                
Correct output: -37                 | Program output: -17                
Correct output: -86                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: -18                
Correct output: 19                  | Program output: 29                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -18                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -24                
Correct output: -98                 | Program output: -43                
Correct output: -87                 | Program output: -58                
Correct output: -52                 | Program output: 42                 
Correct output: -88                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -41                
Correct output: -23                 | Program output: -9                 
Correct output: -75                 | Program output: 87                 
Correct output: -29                 | Program output: -29                
Correct output: -83                 | Program output: -62                
Correct output: -98                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: -54                
Correct output: -99                 | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -37                
Correct output: -91                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_flush boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_do*while (exec_yank) in3 print_integer)
Lexicase best errors: [0 1 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_flush boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_do*while (exec_yank) in3 print_integer)
Zero cases best errors: [0 1 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (421 301 421 480 18 916 596 301 301 614)
Population mean number of elite cases: 4.37
Count of perfect (error zero) individuals by case: (421 301 421 480 18 916 596 301 301 614)
Population mean number of perfect (error zero) cases: 4.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_or integer_fromboolean integer_dup integer_dup_times in2 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Errors: [1 0 1 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 20
Size: 31
Percent parens: 0.355
--- Population Statistics ---
Average total errors in population: 5.631
Median total errors in population: 5
Error averages by case: (0.579 0.699 0.579 0.52 0.982 0.084 0.404 0.699 0.699 0.386)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.184
Average program size in population (points): 20.86
Average percent parens in population: 0.300
Minimum age in population: 12.953125
Maximum age in population: 16.337890625
Average age in population: 15.152439453125
Median age in population: 15.078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 369
Genome diversity (% unique genomes):	 0.264
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 388
Syntactic diversity (% unique Push programs):	 0.232
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 9127614
--- Timings ---
Current time: 1559583342666 milliseconds
Total Time:          36.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.3 seconds, 56.0%
Fitness Testing:     10.1 seconds, 28.0%
Report:               5.7 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: 64                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 8                  
Correct output: 14                  | Program output: 20                 
Correct output: 19                  | Program output: 28                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 46                 
Correct output: 35                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 52                  | Program output: 95                 
Correct output: 6                   | Program output: 45                 
Correct output: 31                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 55                 
Correct output: 8                   | Program output: 26                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 65                 
Correct output: -86                 | Program output: -55                
Correct output: -100                | Program output: -56                
Correct output: -92                 | Program output: -78                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: 19                 
Correct output: -79                 | Program output: -53                
Correct output: -80                 | Program output: -71                
Correct output: 0                   | Program output: 12                 
Correct output: -74                 | Program output: -74                
Correct output: -30                 | Program output: -30                
Correct output: 9                   | Program output: 30                 
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -9                 
Correct output: 30                  | Program output: 38                 
Correct output: -76                 | Program output: -54                
Correct output: -94                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -84                
Correct output: -42                 | Program output: -42                
Correct output: -92                 | Program output: 73                 
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: -66                
Correct output: -37                 | Program output: -17                
Correct output: -86                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: -18                
Correct output: 19                  | Program output: 29                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -18                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -24                
Correct output: -98                 | Program output: -43                
Correct output: -87                 | Program output: -58                
Correct output: -52                 | Program output: 42                 
Correct output: -88                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -41                
Correct output: -23                 | Program output: -9                 
Correct output: -75                 | Program output: 87                 
Correct output: -29                 | Program output: -29                
Correct output: -83                 | Program output: -62                
Correct output: -98                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: -54                
Correct output: -99                 | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -37                
Correct output: -91                 | Program output: 2                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_or integer_fromboolean integer_dup integer_dup_times in2 integer_yank integer_yank in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Lexicase best errors: [0 0 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_or integer_fromboolean integer_dup integer_dup_times in2 integer_yank integer_yank in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Zero cases best errors: [0 0 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (358 924 927 357 273 467 454 282 466 934)
Population mean number of elite cases: 5.44
Count of perfect (error zero) individuals by case: (358 924 927 357 273 467 454 282 466 934)
Population mean number of perfect (error zero) cases: 5.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_or integer_fromboolean integer_dup integer_dup_times in2 integer_yank integer_yank in4 integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ())
Errors: [0 0 0 0 1 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 4.558
Median total errors in population: 5
Error averages by case: (0.642 0.076 0.073 0.643 0.727 0.533 0.546 0.718 0.534 0.066)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.038
Average program size in population (points): 20.536
Average percent parens in population: 0.300
Minimum age in population: 14.0625
Maximum age in population: 18.263671875
Average age in population: 16.6578515625
Median age in population: 16.74609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.285
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 164
Syntactic diversity (% unique Push programs):	 0.248
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 9838510
--- Timings ---
Current time: 1559583345728 milliseconds
Total Time:          39.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.2 seconds, 56.3%
Fitness Testing:     10.8 seconds, 27.5%
Report:               6.3 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: 42                 
Correct output: -68                 | Program output: -9                 
Correct output: 64                  | Program output: 64                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 20                 
Correct output: 19                  | Program output: 28                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 35                  | Program output: 42                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 46                 
Correct output: 2                   | Program output: 12                 
Correct output: 52                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 31                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 45                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 31                 
Correct output: 18                  | Program output: 18                 
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 12                 
Correct output: -74                 | Program output: -48                
Correct output: -30                 | Program output: 3                  
Correct output: 9                   | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: 17                 
Correct output: 30                  | Program output: 38                 
Correct output: -76                 | Program output: -27                
Correct output: -94                 | Program output: -74                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -35                
Correct output: -42                 | Program output: -22                
Correct output: -92                 | Program output: -88                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -24                
Correct output: -62                 | Program output: 4                  
Correct output: -66                 | Program output: -48                
Correct output: -37                 | Program output: -17                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -33                
Correct output: -76                 | Program output: -18                
Correct output: 19                  | Program output: 29                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: 93                 
Correct output: -88                 | Program output: -18                
Correct output: -92                 | Program output: -90                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -87                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: 3                  
Correct output: -23                 | Program output: -9                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: 8                  
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -80                
Correct output: -78                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 44                 
Correct output: -99                 | Program output: -99                
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -16                
Correct output: -68                 | Program output: 3                  
Correct output: -61                 | Program output: -59                
Correct output: -65                 | Program output: -49                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_or integer_fromboolean in3 integer_dup_times in2 integer_yank integer_yank in4 tag_exec_810 () exec_s_when_autoconstructing (exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Lexicase best errors: [0 0 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 31
Percent parens: 0.355
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_or integer_fromboolean in3 integer_dup_times in2 integer_yank integer_yank in4 tag_exec_810 () exec_s_when_autoconstructing (exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Zero cases best errors: [0 0 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 31
Percent parens: 0.355
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 386 485 489 472 158 158 486 164 164)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (164 386 485 489 472 158 158 486 164 164)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_or integer_fromboolean in3 integer_dup_times in2 integer_yank integer_yank in4 tag_exec_810 () exec_s_when_autoconstructing (exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Errors: [0 0 0 0 1 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 20
Size: 31
Percent parens: 0.355
--- Population Statistics ---
Average total errors in population: 6.874
Median total errors in population: 6
Error averages by case: (0.836 0.614 0.515 0.511 0.528 0.842 0.842 0.514 0.836 0.836)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.926
Average program size in population (points): 21.576
Average percent parens in population: 0.286
Minimum age in population: 15.0625
Maximum age in population: 20.04150390625
Average age in population: 17.97178662109375
Median age in population: 18.03515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.325
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.281
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 10581569
--- Timings ---
Current time: 1559583348854 milliseconds
Total Time:          42.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.0 seconds, 56.6%
Fitness Testing:     11.5 seconds, 27.0%
Report:               6.8 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: 42                 
Correct output: -68                 | Program output: -9                 
Correct output: 64                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 19                 
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 51                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 12                 
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 45                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 31                 
Correct output: 10                  | Program output: 55                 
Correct output: 18                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 55                 
Correct output: 18                  | Program output: 73                 
Correct output: -86                 | Program output: -55                
Correct output: -100                | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -53                
Correct output: -80                 | Program output: -71                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -19                
Correct output: -30                 | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 49                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -20                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -24                
Correct output: -62                 | Program output: 4                  
Correct output: -66                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: 5                  
Correct output: -94                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: -23                
Correct output: -75                 | Program output: 28                 
Correct output: -29                 | Program output: 8                  
Correct output: -83                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 44                 
Correct output: -99                 | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -19                
Correct output: -68                 | Program output: -3                 
Correct output: -61                 | Program output: 32                 
Correct output: -65                 | Program output: -49                
Correct output: -65                 | Program output: 53                 
Correct output: -91                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Lexicase best errors: [1 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.393
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Zero cases best errors: [1 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.393
--- Lexicase Population Statistics ---
Count of elite individuals by case: (467 469 312 779 314 312 225 761 900 312)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (467 469 312 779 314 312 225 761 900 312)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup () print_integer))) ()) () ())
Errors: [1 1 0 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 17
Size: 28
Percent parens: 0.393
--- Population Statistics ---
Average total errors in population: 5.149
Median total errors in population: 5
Error averages by case: (0.533 0.531 0.688 0.221 0.686 0.688 0.775 0.239 0.1 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.777
Average program size in population (points): 28.906
Average percent parens in population: 0.346
Minimum age in population: 16.0625
Maximum age in population: 21.294189453125
Average age in population: 19.68915966796875
Median age in population: 19.613525390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 279
Genome diversity (% unique genomes):	 0.35
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 288
Syntactic diversity (% unique Push programs):	 0.307
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 11856321
--- Timings ---
Current time: 1559583352535 milliseconds
Total Time:          46.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.0 seconds, 56.4%
Fitness Testing:     12.6 seconds, 27.3%
Report:               7.4 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 200
Test mean error for best: 0.20000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: 64                  | Program output: 64                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 20                 
Correct output: 19                  | Program output: 28                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 35                  | Program output: 42                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 52                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 31                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 26                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -78                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 12                 
Correct output: -74                 | Program output: -74                
Correct output: -30                 | Program output: -30                
Correct output: 9                   | Program output: 30                 
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -9                 
Correct output: 30                  | Program output: 38                 
Correct output: -76                 | Program output: -54                
Correct output: -94                 | Program output: -74                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -84                
Correct output: -42                 | Program output: -42                
Correct output: -92                 | Program output: -88                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: -66                
Correct output: -37                 | Program output: -17                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: -18                
Correct output: 19                  | Program output: 29                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -18                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -87                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -41                
Correct output: -23                 | Program output: -9                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -29                
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_or integer_fromboolean integer_dup integer_dup_times in2 integer_yank integer_yank in4 tag_exec_810 () exec_dup (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ()))
Lexicase best errors: [1 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_or integer_fromboolean integer_dup integer_dup_times in2 integer_yank integer_yank in4 tag_exec_810 () exec_dup (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ()))
Zero cases best errors: [1 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (502 356 356 871 502 501 353 363 364 861)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (502 356 356 871 502 501 353 363 364 861)
Population mean number of perfect (error zero) cases: 5.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in3} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_or integer_fromboolean integer_dup integer_dup_times in2 integer_yank integer_yank in3 tag_exec_810 () exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (in2 integer_yank integer_yank in4)) tag_exec_810 () exec_s_when_autoconstructing (exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer)))) ()) () ())
Errors: [1 0 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 45
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.971
Median total errors in population: 5
Error averages by case: (0.498 0.644 0.644 0.129 0.498 0.499 0.647 0.637 0.636 0.139)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.061
Average program size in population (points): 34.611
Average percent parens in population: 0.365
Minimum age in population: 17.0625
Maximum age in population: 22.6884765625
Average age in population: 21.28664611816406
Median age in population: 21.29736328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.385
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.343
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 13139831
--- Timings ---
Current time: 1559583356249 milliseconds
Total Time:          49.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.0 seconds, 56.2%
Fitness Testing:     13.7 seconds, 27.5%
Report:               8.0 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 227
Test mean error for best: 0.22700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: 42                 
Correct output: -68                 | Program output: -9                 
Correct output: 64                  | Program output: 64                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 12                 
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 6                  
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 31                 
Correct output: 18                  | Program output: 18                 
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -30                 | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -24                
Correct output: -62                 | Program output: 4                  
Correct output: -66                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -33                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -90                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -98                
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: -23                
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: 8                  
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 44                 
Correct output: -99                 | Program output: -99                
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -19                
Correct output: -68                 | Program output: -3                 
Correct output: -61                 | Program output: -59                
Correct output: -65                 | Program output: -49                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot integer_gt print_integer))) ()) () ()) ()) () ())
Lexicase best errors: [0 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 45
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot integer_gt print_integer))) ()) () ()) ()) () ())
Zero cases best errors: [0 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 45
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (692 426 862 691 854 439 438 426 260 425)
Population mean number of elite cases: 5.51
Count of perfect (error zero) individuals by case: (692 426 862 691 854 439 438 426 260 425)
Population mean number of perfect (error zero) cases: 5.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or boolean_invert_second_then_and boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ())
Errors: [0 0 0 0 0 1 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 24
Size: 41
Percent parens: 0.415
--- Population Statistics ---
Average total errors in population: 4.487
Median total errors in population: 4
Error averages by case: (0.308 0.574 0.138 0.309 0.146 0.561 0.562 0.574 0.74 0.575)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.748
Average program size in population (points): 41.047
Average percent parens in population: 0.372
Minimum age in population: 20.902587890625
Maximum age in population: 24.4256591796875
Average age in population: 23.21416186523438
Median age in population: 23.24346923828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.383
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.364
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 14342504
--- Timings ---
Current time: 1559583359514 milliseconds
Total Time:          53.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.9 seconds, 56.0%
Fitness Testing:     14.8 seconds, 27.7%
Report:               8.6 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 227
Test mean error for best: 0.22700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: 42                 
Correct output: -68                 | Program output: -9                 
Correct output: 64                  | Program output: 64                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 12                 
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 6                  
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 31                 
Correct output: 18                  | Program output: 18                 
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -30                 | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -24                
Correct output: -62                 | Program output: 4                  
Correct output: -66                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -33                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -90                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -98                
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: -23                
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: 8                  
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 44                 
Correct output: -99                 | Program output: -99                
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -19                
Correct output: -68                 | Program output: -3                 
Correct output: -61                 | Program output: -59                
Correct output: -65                 | Program output: -49                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (exec_dup (exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) exec_dup (exec_do*while (boolean_empty boolean_rot integer_gt print_integer)))) ()) () ())) ())) () ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 43
Percent parens: 0.442
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (exec_dup (exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) exec_dup (exec_do*while (boolean_empty boolean_rot integer_gt print_integer)))) ()) () ())) ())) () ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 43
Percent parens: 0.442
--- Lexicase Population Statistics ---
Count of elite individuals by case: (589 832 588 829 867 256 829 842 860 834)
Population mean number of elite cases: 7.33
Count of perfect (error zero) individuals by case: (589 832 588 829 867 256 829 842 860 834)
Population mean number of perfect (error zero) cases: 7.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or boolean_invert_second_then_and boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 41
Percent parens: 0.415
--- Population Statistics ---
Average total errors in population: 2.674
Median total errors in population: 1
Error averages by case: (0.411 0.168 0.412 0.171 0.133 0.744 0.171 0.158 0.14 0.166)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.394
Average program size in population (points): 41.962
Average percent parens in population: 0.394
Minimum age in population: 22.71728515625
Maximum age in population: 26.1104736328125
Average age in population: 24.63224786376953
Median age in population: 24.709228515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.434
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 207
Syntactic diversity (% unique Push programs):	 0.401
Total error diversity:				 0.01
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 15427316
--- Timings ---
Current time: 1559583362659 milliseconds
Total Time:          56.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.8 seconds, 56.3%
Fitness Testing:     15.7 seconds, 27.8%
Report:               8.9 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 227
Test mean error for best: 0.22700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: 42                 
Correct output: -68                 | Program output: -9                 
Correct output: 64                  | Program output: 64                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 12                 
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 6                  
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 31                 
Correct output: 18                  | Program output: 18                 
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -30                 | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -24                
Correct output: -62                 | Program output: 4                  
Correct output: -66                 | Program output: -48                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -33                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -90                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -98                
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: -23                
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: 8                  
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 44                 
Correct output: -99                 | Program output: -99                
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -19                
Correct output: -68                 | Program output: -3                 
Correct output: -61                 | Program output: -59                
Correct output: -65                 | Program output: -49                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or boolean_invert_second_then_and boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 41
Percent parens: 0.415
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or boolean_invert_second_then_and boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 41
Percent parens: 0.415
--- Lexicase Population Statistics ---
Count of elite individuals by case: (605 606 606 738 608 831 737 331 837 606)
Population mean number of elite cases: 6.51
Count of perfect (error zero) individuals by case: (605 606 606 738 608 831 737 331 837 606)
Population mean number of perfect (error zero) cases: 6.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer})
Best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (exec_dup (exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (boolean_empty boolean_rot integer_gt print_integer))) ()) () ())) ())) () ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 42
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 3.495
Median total errors in population: 2
Error averages by case: (0.395 0.394 0.394 0.262 0.392 0.169 0.263 0.669 0.163 0.394)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.471
Average program size in population (points): 42.297
Average percent parens in population: 0.397
Minimum age in population: 23.71728515625
Maximum age in population: 27.8604736328125
Average age in population: 25.88199629211426
Median age in population: 25.9849853515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 168
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.436
Total error diversity:				 0.01
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 16432185
--- Timings ---
Current time: 1559583366137 milliseconds
Total Time:          59.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.7 seconds, 56.5%
Fitness Testing:     16.6 seconds, 27.9%
Report:               9.2 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: 64                  | Program output: 64                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 6                  
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -30                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: -66                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -98                
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: -23                
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -29                
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -78                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in2} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 2, :instruction in3} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_flush in1 tagged_410 in2 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) in3) () tag_exec_810 () exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (in2 integer_yank integer_yank in4)) tag_exec_810 () exec_s_when_autoconstructing (exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while () boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 55
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in2} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 2, :instruction in3} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_flush in1 tagged_410 in2 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) in3) () tag_exec_810 () exec_dup (exec_do*while (integer_min) boolean_or exec_do*while (in2 integer_yank integer_yank in4)) tag_exec_810 () exec_s_when_autoconstructing (exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) boolean_or exec_do*while () boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 55
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (592 870 765 844 329 870 764 590 588 330)
Population mean number of elite cases: 6.54
Count of perfect (error zero) individuals by case: (592 870 765 844 329 870 764 590 588 330)
Population mean number of perfect (error zero) cases: 6.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction tagged_410} {:close 2, :instruction in4} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tagged_410} {:close 2, :instruction in2} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_exec_810} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (tagged_410) (in2)) (tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 31
Size: 55
Percent parens: 0.436
--- Population Statistics ---
Average total errors in population: 3.458
Median total errors in population: 2
Error averages by case: (0.408 0.13 0.235 0.156 0.671 0.13 0.236 0.41 0.412 0.67)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.883
Average program size in population (points): 42.233
Average percent parens in population: 0.410
Minimum age in population: 24.71728515625
Maximum age in population: 29.47966003417969
Average age in population: 27.26301406860352
Median age in population: 27.33886337280273
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.456
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.01
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 17276412
--- Timings ---
Current time: 1559583369436 milliseconds
Total Time:          63.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.6 seconds, 56.5%
Fitness Testing:     17.4 seconds, 27.6%
Report:               9.9 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 18
Successful program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (tagged_410) (in2)) (tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 55


Auto-simplifying with starting size: 55
step: 0
program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (tagged_410) (in2)) (tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 500
program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (tagged_410) (in2)) (tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 1000
program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (tagged_410) (in2)) (tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 1500
program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (tagged_410) (in2)) (tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 2000
program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (tagged_410) (in2)) (tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 2500
program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (tagged_410) (in2)) (tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 3000
program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (tagged_410) (in2)) (tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 3500
program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (tagged_410) (in2)) (tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 4000
program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (tagged_410) (in2)) (tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 4500
program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (tagged_410) (in2)) (tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 5000
program: (boolean_flush in1 tagged_410 in4 tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (tagged_410) (in2)) (tag_exec_810 () exec_s_when_autoconstructing (integer_swap exec_k_when_autoconstructing (exec_do*while (integer_min) boolean_or tag_exec_810 () exec_s_when_autoconstructing (in3 exec_k_when_autoconstructing (exec_dup (exec_do*while (integer_min) integer_min) boolean_or exec_do*while (boolean_empty boolean_rot exec_dup (print_integer))) ()) () ()) ()) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 4                   | Program output: 4                  
Correct output: -99                 | Program output: -99                
Correct output: 10                  | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: 64                  | Program output: 64                 
Correct output: 52                  | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: 44                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: 92                  | Program output: 92                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 35                  | Program output: 35                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 52                  | Program output: 52                 
Correct output: 6                   | Program output: 6                  
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: -86                 | Program output: -86                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -30                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -60                 | Program output: -60                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: -66                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -98                
Correct output: -87                 | Program output: -87                
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -23                 | Program output: -23                
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -29                
Correct output: -83                 | Program output: -83                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -78                
Correct output: -42                 | Program output: -42                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: 2                   | Program output: 2                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
;;******************************
