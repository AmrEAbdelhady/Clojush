Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[30 30 30 -65] -65] [[35 35 35 -43] -43] [[-45 41 41 41] -45] [[63 64 63 63] 63] [[-85 -85 0 -85] -85] [[81 42 81 81] 42] [[-50 -50 60 -50] -50] [[-68 -68 -3 -68] -68] [[-60 -60 -60 -68] -68] [[86 45 45 45] 45] [(8 8 8 8) 8] [(86 86 86 86) 86] [(-81 -81 -81 -81) -81] [(-100 -100 -100 -100) -100] [(-10 -10 -10 -10) -10] [(18 73 52 78) 18] [(67 97 49 8) 8] [(89 91 75 2) 2] [(99 98 96 27) 27] [(97 4 86 37) 4] [(32 4 62 26) 4] [(53 0 16 96) 0] [(49 96 95 4) 4] [(27 21 38 16) 16] [(53 40 88 7) 7] [(0 18 54 67) 0] [(24 100 4 100) 4] [(7 6 63 47) 6] [(59 18 92 35) 18] [(22 38 16 46) 16] [(55 34 62 99) 34] [(69 3 66 90) 3] [(48 21 31 87) 21] [(38 79 6 33) 6] [(34 7 62 37) 7] [(-55 -54 58 62) -55] [(-16 50 -84 -9) -84] [(32 -35 -96 -87) -96] [(95 -87 -28 -36) -87] [(-70 -64 76 34) -70] [(78 -11 73 -88) -88] [(-51 -58 -5 66) -58] [(-25 38 24 2) -25] [(-32 91 -27 -62) -62] [(100 33 66 -96) -96] [(86 -88 20 91) -88] [(67 52 -71 35) -71] [(70 51 -88 32) -88] [(4 -74 95 95) -74] [(36 87 -57 60) -57] [(48 -7 8 -58) -58] [(-63 -29 -93 70) -93] [(-70 -11 95 35) -70] [(76 34 48 72) 34] [(70 12 -31 87) -31] [(-47 53 -79 23) -79] [(-55 -45 -73 -24) -73] [(2 -40 -15 -61) -61] [(-2 26 47 99) -2] [(31 -61 -90 -35) -90] [(53 -25 -71 8) -71] [(23 -74 -71 -46) -74] [(58 -26 -58 39) -58] [(-19 -74 -68 25) -74] [(-52 -24 -75 86) -75] [(-11 92 -12 3) -12] [(34 53 56 79) 34] [(59 55 -17 34) -17] [(-19 -99 -73 -46) -99] [(-88 -88 -74 -53) -88] [(-49 -19 66 43) -49] [(-33 -42 21 11) -42] [(-61 14 -5 -29) -61] [(81 33 -26 -23) -26] [(-66 -90 3 -92) -92] [(60 -40 -25 -34) -40] [(-60 -54 10 -33) -60] [(31 8 59 73) 8] [(16 -3 -79 -85) -85] [(89 -83 -98 -58) -98] [(70 61 68 71) 61] [(-67 61 62 5) -67] [(9 25 21 -48) -48] [(27 -27 -78 66) -78] [(-76 -17 59 58) -76] [(-37 -83 99 98) -83] [(34 -12 60 55) -12] [(74 -92 82 42) -92] [(-23 92 13 22) -23] [(-70 13 -47 36) -70] [(-47 14 -67 -39) -67] [(98 60 34 -18) -18] [(41 1 -81 -39) -81] [(86 16 -92 -10) -92] [(-81 50 82 29) -81])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[30 30 30 -65] -65]
Train Case:   6 | Input/Output: [[35 35 35 -43] -43]
Train Case:   7 | Input/Output: [[-45 41 41 41] -45]
Train Case:   8 | Input/Output: [[63 64 63 63] 63]
Train Case:   9 | Input/Output: [[-85 -85 0 -85] -85]
Train Case:  10 | Input/Output: [[81 42 81 81] 42]
Train Case:  11 | Input/Output: [[-50 -50 60 -50] -50]
Train Case:  12 | Input/Output: [[-68 -68 -3 -68] -68]
Train Case:  13 | Input/Output: [[-60 -60 -60 -68] -68]
Train Case:  14 | Input/Output: [[86 45 45 45] 45]
Train Case:  15 | Input/Output: [(8 8 8 8) 8]
Train Case:  16 | Input/Output: [(86 86 86 86) 86]
Train Case:  17 | Input/Output: [(-81 -81 -81 -81) -81]
Train Case:  18 | Input/Output: [(-100 -100 -100 -100) -100]
Train Case:  19 | Input/Output: [(-10 -10 -10 -10) -10]
Train Case:  20 | Input/Output: [(18 73 52 78) 18]
Train Case:  21 | Input/Output: [(67 97 49 8) 8]
Train Case:  22 | Input/Output: [(89 91 75 2) 2]
Train Case:  23 | Input/Output: [(99 98 96 27) 27]
Train Case:  24 | Input/Output: [(97 4 86 37) 4]
Train Case:  25 | Input/Output: [(32 4 62 26) 4]
Train Case:  26 | Input/Output: [(53 0 16 96) 0]
Train Case:  27 | Input/Output: [(49 96 95 4) 4]
Train Case:  28 | Input/Output: [(27 21 38 16) 16]
Train Case:  29 | Input/Output: [(53 40 88 7) 7]
Train Case:  30 | Input/Output: [(0 18 54 67) 0]
Train Case:  31 | Input/Output: [(24 100 4 100) 4]
Train Case:  32 | Input/Output: [(7 6 63 47) 6]
Train Case:  33 | Input/Output: [(59 18 92 35) 18]
Train Case:  34 | Input/Output: [(22 38 16 46) 16]
Train Case:  35 | Input/Output: [(55 34 62 99) 34]
Train Case:  36 | Input/Output: [(69 3 66 90) 3]
Train Case:  37 | Input/Output: [(48 21 31 87) 21]
Train Case:  38 | Input/Output: [(38 79 6 33) 6]
Train Case:  39 | Input/Output: [(34 7 62 37) 7]
Train Case:  40 | Input/Output: [(-55 -54 58 62) -55]
Train Case:  41 | Input/Output: [(-16 50 -84 -9) -84]
Train Case:  42 | Input/Output: [(32 -35 -96 -87) -96]
Train Case:  43 | Input/Output: [(95 -87 -28 -36) -87]
Train Case:  44 | Input/Output: [(-70 -64 76 34) -70]
Train Case:  45 | Input/Output: [(78 -11 73 -88) -88]
Train Case:  46 | Input/Output: [(-51 -58 -5 66) -58]
Train Case:  47 | Input/Output: [(-25 38 24 2) -25]
Train Case:  48 | Input/Output: [(-32 91 -27 -62) -62]
Train Case:  49 | Input/Output: [(100 33 66 -96) -96]
Train Case:  50 | Input/Output: [(86 -88 20 91) -88]
Train Case:  51 | Input/Output: [(67 52 -71 35) -71]
Train Case:  52 | Input/Output: [(70 51 -88 32) -88]
Train Case:  53 | Input/Output: [(4 -74 95 95) -74]
Train Case:  54 | Input/Output: [(36 87 -57 60) -57]
Train Case:  55 | Input/Output: [(48 -7 8 -58) -58]
Train Case:  56 | Input/Output: [(-63 -29 -93 70) -93]
Train Case:  57 | Input/Output: [(-70 -11 95 35) -70]
Train Case:  58 | Input/Output: [(76 34 48 72) 34]
Train Case:  59 | Input/Output: [(70 12 -31 87) -31]
Train Case:  60 | Input/Output: [(-47 53 -79 23) -79]
Train Case:  61 | Input/Output: [(-55 -45 -73 -24) -73]
Train Case:  62 | Input/Output: [(2 -40 -15 -61) -61]
Train Case:  63 | Input/Output: [(-2 26 47 99) -2]
Train Case:  64 | Input/Output: [(31 -61 -90 -35) -90]
Train Case:  65 | Input/Output: [(53 -25 -71 8) -71]
Train Case:  66 | Input/Output: [(23 -74 -71 -46) -74]
Train Case:  67 | Input/Output: [(58 -26 -58 39) -58]
Train Case:  68 | Input/Output: [(-19 -74 -68 25) -74]
Train Case:  69 | Input/Output: [(-52 -24 -75 86) -75]
Train Case:  70 | Input/Output: [(-11 92 -12 3) -12]
Train Case:  71 | Input/Output: [(34 53 56 79) 34]
Train Case:  72 | Input/Output: [(59 55 -17 34) -17]
Train Case:  73 | Input/Output: [(-19 -99 -73 -46) -99]
Train Case:  74 | Input/Output: [(-88 -88 -74 -53) -88]
Train Case:  75 | Input/Output: [(-49 -19 66 43) -49]
Train Case:  76 | Input/Output: [(-33 -42 21 11) -42]
Train Case:  77 | Input/Output: [(-61 14 -5 -29) -61]
Train Case:  78 | Input/Output: [(81 33 -26 -23) -26]
Train Case:  79 | Input/Output: [(-66 -90 3 -92) -92]
Train Case:  80 | Input/Output: [(60 -40 -25 -34) -40]
Train Case:  81 | Input/Output: [(-60 -54 10 -33) -60]
Train Case:  82 | Input/Output: [(31 8 59 73) 8]
Train Case:  83 | Input/Output: [(16 -3 -79 -85) -85]
Train Case:  84 | Input/Output: [(89 -83 -98 -58) -98]
Train Case:  85 | Input/Output: [(70 61 68 71) 61]
Train Case:  86 | Input/Output: [(-67 61 62 5) -67]
Train Case:  87 | Input/Output: [(9 25 21 -48) -48]
Train Case:  88 | Input/Output: [(27 -27 -78 66) -78]
Train Case:  89 | Input/Output: [(-76 -17 59 58) -76]
Train Case:  90 | Input/Output: [(-37 -83 99 98) -83]
Train Case:  91 | Input/Output: [(34 -12 60 55) -12]
Train Case:  92 | Input/Output: [(74 -92 82 42) -92]
Train Case:  93 | Input/Output: [(-23 92 13 22) -23]
Train Case:  94 | Input/Output: [(-70 13 -47 36) -70]
Train Case:  95 | Input/Output: [(-47 14 -67 -39) -67]
Train Case:  96 | Input/Output: [(98 60 34 -18) -18]
Train Case:  97 | Input/Output: [(41 1 -81 -39) -81]
Train Case:  98 | Input/Output: [(86 16 -92 -10) -92]
Train Case:  99 | Input/Output: [(-81 50 82 29) -81]
Test Case:   0 | Input/Output: [[-83 -48 -48 -48] -83]
Test Case:   1 | Input/Output: [[-81 -81 -81 73] -81]
Test Case:   2 | Input/Output: [[84 84 84 64] 64]
Test Case:   3 | Input/Output: [[67 -27 67 67] -27]
Test Case:   4 | Input/Output: [[-29 46 46 46] -29]
Test Case:   5 | Input/Output: [[14 62 62 62] 14]
Test Case:   6 | Input/Output: [[43 -5 -5 -5] -5]
Test Case:   7 | Input/Output: [[-91 -80 -80 -80] -91]
Test Case:   8 | Input/Output: [[95 43 43 43] 43]
Test Case:   9 | Input/Output: [[87 87 87 -12] -12]
Test Case:  10 | Input/Output: [[-32 -32 -32 11] -32]
Test Case:  11 | Input/Output: [[12 11 11 11] 11]
Test Case:  12 | Input/Output: [[83 -27 -27 -27] -27]
Test Case:  13 | Input/Output: [[-97 -71 -71 -71] -97]
Test Case:  14 | Input/Output: [[-96 -96 -96 -81] -96]
Test Case:  15 | Input/Output: [[-85 -85 -28 -85] -85]
Test Case:  16 | Input/Output: [[-30 -7 -30 -30] -30]
Test Case:  17 | Input/Output: [[-2 32 32 32] -2]
Test Case:  18 | Input/Output: [[26 26 26 4] 4]
Test Case:  19 | Input/Output: [[-41 -75 -41 -41] -75]
Test Case:  20 | Input/Output: [[69 -17 69 69] -17]
Test Case:  21 | Input/Output: [[-4 -95 -4 -4] -95]
Test Case:  22 | Input/Output: [[-13 65 -13 -13] -13]
Test Case:  23 | Input/Output: [[-93 -93 -93 22] -93]
Test Case:  24 | Input/Output: [[-19 -19 -19 42] -19]
Test Case:  25 | Input/Output: [[-7 -7 -7 13] -7]
Test Case:  26 | Input/Output: [[-41 -20 -41 -41] -41]
Test Case:  27 | Input/Output: [[31 31 31 -9] -9]
Test Case:  28 | Input/Output: [[62 52 62 62] 52]
Test Case:  29 | Input/Output: [[-62 -45 -45 -45] -62]
Test Case:  30 | Input/Output: [[-20 -20 -20 -28] -28]
Test Case:  31 | Input/Output: [[-81 -81 -81 -97] -97]
Test Case:  32 | Input/Output: [[-97 -97 -5 -97] -97]
Test Case:  33 | Input/Output: [[74 -28 -28 -28] -28]
Test Case:  34 | Input/Output: [[-93 33 -93 -93] -93]
Test Case:  35 | Input/Output: [[-18 -35 -18 -18] -35]
Test Case:  36 | Input/Output: [[-27 8 8 8] -27]
Test Case:  37 | Input/Output: [[87 87 38 87] 38]
Test Case:  38 | Input/Output: [[-28 -28 -28 6] -28]
Test Case:  39 | Input/Output: [[47 47 47 59] 47]
Test Case:  40 | Input/Output: [[70 70 60 70] 60]
Test Case:  41 | Input/Output: [[-76 -76 -76 40] -76]
Test Case:  42 | Input/Output: [[57 57 57 38] 38]
Test Case:  43 | Input/Output: [[-76 -22 -76 -76] -76]
Test Case:  44 | Input/Output: [[42 -50 42 42] -50]
Test Case:  45 | Input/Output: [[85 85 -11 85] -11]
Test Case:  46 | Input/Output: [[38 38 38 -22] -22]
Test Case:  47 | Input/Output: [[-99 20 -99 -99] -99]
Test Case:  48 | Input/Output: [[83 -29 83 83] -29]
Test Case:  49 | Input/Output: [[19 19 5 19] 5]
Test Case:  50 | Input/Output: [[-62 -62 -62 -36] -62]
Test Case:  51 | Input/Output: [[53 -91 -91 -91] -91]
Test Case:  52 | Input/Output: [[-15 -83 -83 -83] -83]
Test Case:  53 | Input/Output: [[-54 -49 -49 -49] -54]
Test Case:  54 | Input/Output: [[10 -35 10 10] -35]
Test Case:  55 | Input/Output: [[-53 0 -53 -53] -53]
Test Case:  56 | Input/Output: [[7 65 7 7] 7]
Test Case:  57 | Input/Output: [[-100 77 77 77] -100]
Test Case:  58 | Input/Output: [[3 -12 3 3] -12]
Test Case:  59 | Input/Output: [[19 19 43 19] 19]
Test Case:  60 | Input/Output: [[-60 -60 -10 -60] -60]
Test Case:  61 | Input/Output: [[39 -6 39 39] -6]
Test Case:  62 | Input/Output: [[35 -67 35 35] -67]
Test Case:  63 | Input/Output: [[-82 -82 93 -82] -82]
Test Case:  64 | Input/Output: [[-55 -27 -55 -55] -55]
Test Case:  65 | Input/Output: [[-90 74 74 74] -90]
Test Case:  66 | Input/Output: [[-93 -93 -76 -93] -93]
Test Case:  67 | Input/Output: [[-27 23 -27 -27] -27]
Test Case:  68 | Input/Output: [[-91 -61 -61 -61] -91]
Test Case:  69 | Input/Output: [[71 -7 71 71] -7]
Test Case:  70 | Input/Output: [[-33 -33 -67 -33] -67]
Test Case:  71 | Input/Output: [[73 73 -42 73] -42]
Test Case:  72 | Input/Output: [[26 91 26 26] 26]
Test Case:  73 | Input/Output: [[-43 -15 -43 -43] -43]
Test Case:  74 | Input/Output: [[27 27 -4 27] -4]
Test Case:  75 | Input/Output: [[-21 -21 -21 -75] -75]
Test Case:  76 | Input/Output: [[-58 -58 -58 79] -58]
Test Case:  77 | Input/Output: [[10 -58 10 10] -58]
Test Case:  78 | Input/Output: [[-82 -53 -82 -82] -82]
Test Case:  79 | Input/Output: [[32 88 32 32] 32]
Test Case:  80 | Input/Output: [[29 29 33 29] 29]
Test Case:  81 | Input/Output: [[17 68 17 17] 17]
Test Case:  82 | Input/Output: [[-53 -53 70 -53] -53]
Test Case:  83 | Input/Output: [[-14 -14 26 -14] -14]
Test Case:  84 | Input/Output: [[-26 -86 -86 -86] -86]
Test Case:  85 | Input/Output: [[-97 -97 -19 -97] -97]
Test Case:  86 | Input/Output: [[-18 -76 -18 -18] -76]
Test Case:  87 | Input/Output: [[78 -53 -53 -53] -53]
Test Case:  88 | Input/Output: [[-43 -43 -43 60] -43]
Test Case:  89 | Input/Output: [[-41 -41 44 -41] -41]
Test Case:  90 | Input/Output: [[100 100 -59 100] -59]
Test Case:  91 | Input/Output: [[-74 -74 -74 16] -74]
Test Case:  92 | Input/Output: [[-50 -50 -44 -50] -50]
Test Case:  93 | Input/Output: [[-13 74 -13 -13] -13]
Test Case:  94 | Input/Output: [[5 59 5 5] 5]
Test Case:  95 | Input/Output: [[-53 -53 -53 -90] -90]
Test Case:  96 | Input/Output: [[45 45 -67 45] -67]
Test Case:  97 | Input/Output: [[-18 95 -18 -18] -18]
Test Case:  98 | Input/Output: [[-4 -14 -14 -14] -14]
Test Case:  99 | Input/Output: [[-18 85 -18 -18] -18]
Test Case: 100 | Input/Output: [(70 70 70 70) 70]
Test Case: 101 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 102 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 103 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 104 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 105 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 106 | Input/Output: [(44 44 44 44) 44]
Test Case: 107 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 108 | Input/Output: [(89 89 89 89) 89]
Test Case: 109 | Input/Output: [(9 9 9 9) 9]
Test Case: 110 | Input/Output: [(24 24 24 24) 24]
Test Case: 111 | Input/Output: [(73 73 73 73) 73]
Test Case: 112 | Input/Output: [(94 94 94 94) 94]
Test Case: 113 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 114 | Input/Output: [(9 9 9 9) 9]
Test Case: 115 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 116 | Input/Output: [(26 26 26 26) 26]
Test Case: 117 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 118 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 119 | Input/Output: [(31 31 31 31) 31]
Test Case: 120 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 121 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 122 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 123 | Input/Output: [(44 44 44 44) 44]
Test Case: 124 | Input/Output: [(91 91 91 91) 91]
Test Case: 125 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 126 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 127 | Input/Output: [(88 88 88 88) 88]
Test Case: 128 | Input/Output: [(22 22 22 22) 22]
Test Case: 129 | Input/Output: [(74 74 74 74) 74]
Test Case: 130 | Input/Output: [(26 26 26 26) 26]
Test Case: 131 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 132 | Input/Output: [(51 51 51 51) 51]
Test Case: 133 | Input/Output: [(40 40 40 40) 40]
Test Case: 134 | Input/Output: [(94 94 94 94) 94]
Test Case: 135 | Input/Output: [(42 42 42 42) 42]
Test Case: 136 | Input/Output: [(55 55 55 55) 55]
Test Case: 137 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 138 | Input/Output: [(63 63 63 63) 63]
Test Case: 139 | Input/Output: [(75 75 75 75) 75]
Test Case: 140 | Input/Output: [(34 34 34 34) 34]
Test Case: 141 | Input/Output: [(95 95 95 95) 95]
Test Case: 142 | Input/Output: [(53 53 53 53) 53]
Test Case: 143 | Input/Output: [(90 90 90 90) 90]
Test Case: 144 | Input/Output: [(61 61 61 61) 61]
Test Case: 145 | Input/Output: [(58 58 58 58) 58]
Test Case: 146 | Input/Output: [(53 53 53 53) 53]
Test Case: 147 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 148 | Input/Output: [(93 93 93 93) 93]
Test Case: 149 | Input/Output: [(24 24 24 24) 24]
Test Case: 150 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 151 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 152 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 153 | Input/Output: [(37 37 37 37) 37]
Test Case: 154 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 155 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 156 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 157 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 158 | Input/Output: [(23 23 23 23) 23]
Test Case: 159 | Input/Output: [(8 8 8 8) 8]
Test Case: 160 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 161 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 162 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 163 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 164 | Input/Output: [(94 94 94 94) 94]
Test Case: 165 | Input/Output: [(33 33 33 33) 33]
Test Case: 166 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 167 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 168 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 169 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 170 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 171 | Input/Output: [(96 96 96 96) 96]
Test Case: 172 | Input/Output: [(75 75 75 75) 75]
Test Case: 173 | Input/Output: [(19 19 19 19) 19]
Test Case: 174 | Input/Output: [(84 84 84 84) 84]
Test Case: 175 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 176 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 177 | Input/Output: [(27 27 27 27) 27]
Test Case: 178 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 179 | Input/Output: [(99 99 99 99) 99]
Test Case: 180 | Input/Output: [(7 7 7 7) 7]
Test Case: 181 | Input/Output: [(22 22 22 22) 22]
Test Case: 182 | Input/Output: [(45 45 45 45) 45]
Test Case: 183 | Input/Output: [(69 69 69 69) 69]
Test Case: 184 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 185 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 186 | Input/Output: [(90 90 90 90) 90]
Test Case: 187 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 188 | Input/Output: [(30 30 30 30) 30]
Test Case: 189 | Input/Output: [(92 92 92 92) 92]
Test Case: 190 | Input/Output: [(24 24 24 24) 24]
Test Case: 191 | Input/Output: [(98 98 98 98) 98]
Test Case: 192 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 193 | Input/Output: [(33 33 33 33) 33]
Test Case: 194 | Input/Output: [(18 18 18 18) 18]
Test Case: 195 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 196 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 197 | Input/Output: [(23 23 23 23) 23]
Test Case: 198 | Input/Output: [(80 80 80 80) 80]
Test Case: 199 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 200 | Input/Output: [(10 78 79 40) 10]
Test Case: 201 | Input/Output: [(65 58 3 57) 3]
Test Case: 202 | Input/Output: [(14 37 80 18) 14]
Test Case: 203 | Input/Output: [(32 47 70 42) 32]
Test Case: 204 | Input/Output: [(54 45 57 89) 45]
Test Case: 205 | Input/Output: [(42 47 0 38) 0]
Test Case: 206 | Input/Output: [(82 42 46 66) 42]
Test Case: 207 | Input/Output: [(11 69 72 33) 11]
Test Case: 208 | Input/Output: [(76 27 61 62) 27]
Test Case: 209 | Input/Output: [(78 48 68 41) 41]
Test Case: 210 | Input/Output: [(3 25 38 19) 3]
Test Case: 211 | Input/Output: [(14 3 55 96) 3]
Test Case: 212 | Input/Output: [(97 70 78 59) 59]
Test Case: 213 | Input/Output: [(35 93 99 55) 35]
Test Case: 214 | Input/Output: [(86 86 53 55) 53]
Test Case: 215 | Input/Output: [(87 74 50 95) 50]
Test Case: 216 | Input/Output: [(45 41 9 38) 9]
Test Case: 217 | Input/Output: [(94 94 83 39) 39]
Test Case: 218 | Input/Output: [(97 3 2 72) 2]
Test Case: 219 | Input/Output: [(81 46 94 10) 10]
Test Case: 220 | Input/Output: [(32 69 32 31) 31]
Test Case: 221 | Input/Output: [(94 3 19 89) 3]
Test Case: 222 | Input/Output: [(60 39 26 27) 26]
Test Case: 223 | Input/Output: [(72 6 37 95) 6]
Test Case: 224 | Input/Output: [(96 66 25 52) 25]
Test Case: 225 | Input/Output: [(69 9 12 63) 9]
Test Case: 226 | Input/Output: [(50 58 56 24) 24]
Test Case: 227 | Input/Output: [(52 85 100 2) 2]
Test Case: 228 | Input/Output: [(30 77 66 89) 30]
Test Case: 229 | Input/Output: [(45 22 42 11) 11]
Test Case: 230 | Input/Output: [(60 31 43 19) 19]
Test Case: 231 | Input/Output: [(40 35 42 12) 12]
Test Case: 232 | Input/Output: [(78 36 99 88) 36]
Test Case: 233 | Input/Output: [(92 58 52 40) 40]
Test Case: 234 | Input/Output: [(47 65 11 8) 8]
Test Case: 235 | Input/Output: [(64 10 53 5) 5]
Test Case: 236 | Input/Output: [(33 74 83 74) 33]
Test Case: 237 | Input/Output: [(73 69 27 32) 27]
Test Case: 238 | Input/Output: [(65 29 14 1) 1]
Test Case: 239 | Input/Output: [(79 68 12 98) 12]
Test Case: 240 | Input/Output: [(82 52 84 67) 52]
Test Case: 241 | Input/Output: [(92 59 8 57) 8]
Test Case: 242 | Input/Output: [(92 10 33 86) 10]
Test Case: 243 | Input/Output: [(71 56 29 29) 29]
Test Case: 244 | Input/Output: [(25 24 99 61) 24]
Test Case: 245 | Input/Output: [(43 78 60 43) 43]
Test Case: 246 | Input/Output: [(63 56 75 62) 56]
Test Case: 247 | Input/Output: [(60 88 61 5) 5]
Test Case: 248 | Input/Output: [(21 30 1 75) 1]
Test Case: 249 | Input/Output: [(59 3 8 55) 3]
Test Case: 250 | Input/Output: [(13 23 69 62) 13]
Test Case: 251 | Input/Output: [(100 39 53 77) 39]
Test Case: 252 | Input/Output: [(14 99 6 30) 6]
Test Case: 253 | Input/Output: [(14 58 8 68) 8]
Test Case: 254 | Input/Output: [(8 5 47 2) 2]
Test Case: 255 | Input/Output: [(53 51 74 16) 16]
Test Case: 256 | Input/Output: [(76 59 100 57) 57]
Test Case: 257 | Input/Output: [(70 79 40 11) 11]
Test Case: 258 | Input/Output: [(63 71 27 5) 5]
Test Case: 259 | Input/Output: [(18 93 95 26) 18]
Test Case: 260 | Input/Output: [(82 43 33 54) 33]
Test Case: 261 | Input/Output: [(2 48 82 84) 2]
Test Case: 262 | Input/Output: [(26 83 9 95) 9]
Test Case: 263 | Input/Output: [(35 69 16 69) 16]
Test Case: 264 | Input/Output: [(1 21 68 89) 1]
Test Case: 265 | Input/Output: [(51 98 83 62) 51]
Test Case: 266 | Input/Output: [(16 15 62 78) 15]
Test Case: 267 | Input/Output: [(47 84 52 87) 47]
Test Case: 268 | Input/Output: [(30 60 93 56) 30]
Test Case: 269 | Input/Output: [(53 12 23 16) 12]
Test Case: 270 | Input/Output: [(18 81 27 33) 18]
Test Case: 271 | Input/Output: [(60 23 38 62) 23]
Test Case: 272 | Input/Output: [(85 25 88 38) 25]
Test Case: 273 | Input/Output: [(49 88 46 95) 46]
Test Case: 274 | Input/Output: [(12 17 87 84) 12]
Test Case: 275 | Input/Output: [(67 74 77 95) 67]
Test Case: 276 | Input/Output: [(71 39 52 81) 39]
Test Case: 277 | Input/Output: [(12 42 88 72) 12]
Test Case: 278 | Input/Output: [(39 9 8 52) 8]
Test Case: 279 | Input/Output: [(72 13 36 3) 3]
Test Case: 280 | Input/Output: [(46 96 29 6) 6]
Test Case: 281 | Input/Output: [(80 14 31 60) 14]
Test Case: 282 | Input/Output: [(97 11 1 59) 1]
Test Case: 283 | Input/Output: [(86 2 73 80) 2]
Test Case: 284 | Input/Output: [(30 12 32 78) 12]
Test Case: 285 | Input/Output: [(16 5 1 42) 1]
Test Case: 286 | Input/Output: [(97 20 32 60) 20]
Test Case: 287 | Input/Output: [(84 58 44 87) 44]
Test Case: 288 | Input/Output: [(17 82 86 31) 17]
Test Case: 289 | Input/Output: [(54 22 13 22) 13]
Test Case: 290 | Input/Output: [(51 3 4 64) 3]
Test Case: 291 | Input/Output: [(55 99 41 10) 10]
Test Case: 292 | Input/Output: [(85 94 88 31) 31]
Test Case: 293 | Input/Output: [(79 28 98 38) 28]
Test Case: 294 | Input/Output: [(4 96 100 38) 4]
Test Case: 295 | Input/Output: [(33 15 30 100) 15]
Test Case: 296 | Input/Output: [(54 13 35 80) 13]
Test Case: 297 | Input/Output: [(47 63 62 83) 47]
Test Case: 298 | Input/Output: [(63 38 20 42) 20]
Test Case: 299 | Input/Output: [(56 60 78 17) 17]
Test Case: 300 | Input/Output: [(18 9 93 26) 9]
Test Case: 301 | Input/Output: [(18 29 69 68) 18]
Test Case: 302 | Input/Output: [(76 32 51 36) 32]
Test Case: 303 | Input/Output: [(38 4 19 38) 4]
Test Case: 304 | Input/Output: [(33 20 23 24) 20]
Test Case: 305 | Input/Output: [(4 80 46 84) 4]
Test Case: 306 | Input/Output: [(82 90 13 48) 13]
Test Case: 307 | Input/Output: [(34 15 40 14) 14]
Test Case: 308 | Input/Output: [(88 23 75 88) 23]
Test Case: 309 | Input/Output: [(80 90 15 78) 15]
Test Case: 310 | Input/Output: [(69 19 36 13) 13]
Test Case: 311 | Input/Output: [(76 44 73 25) 25]
Test Case: 312 | Input/Output: [(65 0 90 24) 0]
Test Case: 313 | Input/Output: [(14 82 79 99) 14]
Test Case: 314 | Input/Output: [(55 71 78 5) 5]
Test Case: 315 | Input/Output: [(77 37 70 29) 29]
Test Case: 316 | Input/Output: [(37 23 43 10) 10]
Test Case: 317 | Input/Output: [(80 49 91 48) 48]
Test Case: 318 | Input/Output: [(14 42 79 62) 14]
Test Case: 319 | Input/Output: [(6 83 98 56) 6]
Test Case: 320 | Input/Output: [(93 36 98 97) 36]
Test Case: 321 | Input/Output: [(52 3 41 0) 0]
Test Case: 322 | Input/Output: [(0 21 74 39) 0]
Test Case: 323 | Input/Output: [(23 1 51 17) 1]
Test Case: 324 | Input/Output: [(59 18 91 89) 18]
Test Case: 325 | Input/Output: [(7 27 95 10) 7]
Test Case: 326 | Input/Output: [(27 18 67 7) 7]
Test Case: 327 | Input/Output: [(45 52 22 46) 22]
Test Case: 328 | Input/Output: [(58 32 39 24) 24]
Test Case: 329 | Input/Output: [(76 89 50 1) 1]
Test Case: 330 | Input/Output: [(21 9 38 21) 9]
Test Case: 331 | Input/Output: [(86 21 56 45) 21]
Test Case: 332 | Input/Output: [(72 18 63 40) 18]
Test Case: 333 | Input/Output: [(52 42 77 48) 42]
Test Case: 334 | Input/Output: [(29 35 80 44) 29]
Test Case: 335 | Input/Output: [(78 47 24 89) 24]
Test Case: 336 | Input/Output: [(33 73 34 91) 33]
Test Case: 337 | Input/Output: [(82 60 2 94) 2]
Test Case: 338 | Input/Output: [(19 88 43 81) 19]
Test Case: 339 | Input/Output: [(41 51 71 58) 41]
Test Case: 340 | Input/Output: [(58 40 87 64) 40]
Test Case: 341 | Input/Output: [(78 56 78 44) 44]
Test Case: 342 | Input/Output: [(4 57 25 7) 4]
Test Case: 343 | Input/Output: [(2 95 100 27) 2]
Test Case: 344 | Input/Output: [(64 10 53 0) 0]
Test Case: 345 | Input/Output: [(47 5 74 89) 5]
Test Case: 346 | Input/Output: [(6 94 40 20) 6]
Test Case: 347 | Input/Output: [(79 24 56 71) 24]
Test Case: 348 | Input/Output: [(13 63 58 14) 13]
Test Case: 349 | Input/Output: [(52 90 25 59) 25]
Test Case: 350 | Input/Output: [(5 3 11 3) 3]
Test Case: 351 | Input/Output: [(87 16 25 8) 8]
Test Case: 352 | Input/Output: [(78 85 58 8) 8]
Test Case: 353 | Input/Output: [(81 2 31 63) 2]
Test Case: 354 | Input/Output: [(98 43 11 100) 11]
Test Case: 355 | Input/Output: [(20 57 13 26) 13]
Test Case: 356 | Input/Output: [(1 99 74 74) 1]
Test Case: 357 | Input/Output: [(78 90 2 19) 2]
Test Case: 358 | Input/Output: [(64 52 13 18) 13]
Test Case: 359 | Input/Output: [(31 33 86 69) 31]
Test Case: 360 | Input/Output: [(11 62 79 96) 11]
Test Case: 361 | Input/Output: [(70 77 89 37) 37]
Test Case: 362 | Input/Output: [(15 84 91 73) 15]
Test Case: 363 | Input/Output: [(46 49 56 50) 46]
Test Case: 364 | Input/Output: [(98 76 28 60) 28]
Test Case: 365 | Input/Output: [(96 11 51 64) 11]
Test Case: 366 | Input/Output: [(92 49 0 77) 0]
Test Case: 367 | Input/Output: [(88 78 12 59) 12]
Test Case: 368 | Input/Output: [(96 55 25 38) 25]
Test Case: 369 | Input/Output: [(15 30 9 19) 9]
Test Case: 370 | Input/Output: [(3 55 100 81) 3]
Test Case: 371 | Input/Output: [(88 73 44 46) 44]
Test Case: 372 | Input/Output: [(42 71 62 74) 42]
Test Case: 373 | Input/Output: [(29 45 90 42) 29]
Test Case: 374 | Input/Output: [(27 80 65 88) 27]
Test Case: 375 | Input/Output: [(81 94 23 93) 23]
Test Case: 376 | Input/Output: [(68 84 18 42) 18]
Test Case: 377 | Input/Output: [(11 61 53 81) 11]
Test Case: 378 | Input/Output: [(100 72 36 52) 36]
Test Case: 379 | Input/Output: [(75 10 57 75) 10]
Test Case: 380 | Input/Output: [(45 62 61 31) 31]
Test Case: 381 | Input/Output: [(86 68 89 47) 47]
Test Case: 382 | Input/Output: [(43 44 86 60) 43]
Test Case: 383 | Input/Output: [(92 85 11 72) 11]
Test Case: 384 | Input/Output: [(20 95 36 80) 20]
Test Case: 385 | Input/Output: [(96 67 17 92) 17]
Test Case: 386 | Input/Output: [(44 33 50 49) 33]
Test Case: 387 | Input/Output: [(87 64 19 25) 19]
Test Case: 388 | Input/Output: [(78 42 41 81) 41]
Test Case: 389 | Input/Output: [(5 36 83 14) 5]
Test Case: 390 | Input/Output: [(76 85 98 29) 29]
Test Case: 391 | Input/Output: [(100 52 10 34) 10]
Test Case: 392 | Input/Output: [(50 66 12 41) 12]
Test Case: 393 | Input/Output: [(4 12 41 20) 4]
Test Case: 394 | Input/Output: [(41 20 54 100) 20]
Test Case: 395 | Input/Output: [(30 75 53 80) 30]
Test Case: 396 | Input/Output: [(74 10 51 69) 10]
Test Case: 397 | Input/Output: [(65 58 26 63) 26]
Test Case: 398 | Input/Output: [(8 96 75 15) 8]
Test Case: 399 | Input/Output: [(96 11 21 43) 11]
Test Case: 400 | Input/Output: [(32 -90 29 35) -90]
Test Case: 401 | Input/Output: [(88 -8 -84 36) -84]
Test Case: 402 | Input/Output: [(59 -2 -43 -12) -43]
Test Case: 403 | Input/Output: [(81 81 -36 -79) -79]
Test Case: 404 | Input/Output: [(56 -39 -66 -17) -66]
Test Case: 405 | Input/Output: [(74 26 -3 37) -3]
Test Case: 406 | Input/Output: [(-33 -97 -88 58) -97]
Test Case: 407 | Input/Output: [(23 44 -64 93) -64]
Test Case: 408 | Input/Output: [(12 -73 7 -54) -73]
Test Case: 409 | Input/Output: [(18 75 -32 -23) -32]
Test Case: 410 | Input/Output: [(-4 -35 57 -42) -42]
Test Case: 411 | Input/Output: [(-42 11 99 43) -42]
Test Case: 412 | Input/Output: [(-1 5 0 -68) -68]
Test Case: 413 | Input/Output: [(-37 29 40 82) -37]
Test Case: 414 | Input/Output: [(8 61 -100 71) -100]
Test Case: 415 | Input/Output: [(76 -62 55 48) -62]
Test Case: 416 | Input/Output: [(-32 -50 41 99) -50]
Test Case: 417 | Input/Output: [(5 84 -97 90) -97]
Test Case: 418 | Input/Output: [(16 37 -72 -92) -92]
Test Case: 419 | Input/Output: [(-31 -51 3 99) -51]
Test Case: 420 | Input/Output: [(-83 10 -25 20) -83]
Test Case: 421 | Input/Output: [(88 -32 -6 -22) -32]
Test Case: 422 | Input/Output: [(35 18 69 69) 18]
Test Case: 423 | Input/Output: [(14 19 31 80) 14]
Test Case: 424 | Input/Output: [(63 -72 -49 48) -72]
Test Case: 425 | Input/Output: [(-55 -76 6 22) -76]
Test Case: 426 | Input/Output: [(84 -63 74 -60) -63]
Test Case: 427 | Input/Output: [(-45 52 34 -34) -45]
Test Case: 428 | Input/Output: [(92 34 -29 24) -29]
Test Case: 429 | Input/Output: [(-80 81 -65 33) -80]
Test Case: 430 | Input/Output: [(68 -91 -49 -89) -91]
Test Case: 431 | Input/Output: [(-22 77 -24 -94) -94]
Test Case: 432 | Input/Output: [(87 -40 -49 35) -49]
Test Case: 433 | Input/Output: [(9 0 -15 -95) -95]
Test Case: 434 | Input/Output: [(24 88 53 -82) -82]
Test Case: 435 | Input/Output: [(-81 -91 59 -45) -91]
Test Case: 436 | Input/Output: [(12 51 97 100) 12]
Test Case: 437 | Input/Output: [(-15 23 35 -3) -15]
Test Case: 438 | Input/Output: [(5 1 13 -36) -36]
Test Case: 439 | Input/Output: [(51 1 -56 96) -56]
Test Case: 440 | Input/Output: [(-7 -1 68 -39) -39]
Test Case: 441 | Input/Output: [(-86 -54 -60 -74) -86]
Test Case: 442 | Input/Output: [(-13 99 -80 -10) -80]
Test Case: 443 | Input/Output: [(38 80 53 -32) -32]
Test Case: 444 | Input/Output: [(89 96 92 4) 4]
Test Case: 445 | Input/Output: [(-4 -96 -33 16) -96]
Test Case: 446 | Input/Output: [(44 -95 -54 76) -95]
Test Case: 447 | Input/Output: [(100 -60 38 -92) -92]
Test Case: 448 | Input/Output: [(96 77 59 4) 4]
Test Case: 449 | Input/Output: [(-29 -82 -68 -81) -82]
Test Case: 450 | Input/Output: [(97 -68 -26 -26) -68]
Test Case: 451 | Input/Output: [(-36 86 32 53) -36]
Test Case: 452 | Input/Output: [(-81 -71 -93 9) -93]
Test Case: 453 | Input/Output: [(39 -79 -93 -68) -93]
Test Case: 454 | Input/Output: [(26 -9 -69 -51) -69]
Test Case: 455 | Input/Output: [(96 -56 39 32) -56]
Test Case: 456 | Input/Output: [(5 47 -15 -15) -15]
Test Case: 457 | Input/Output: [(46 -37 9 -30) -37]
Test Case: 458 | Input/Output: [(-32 40 45 56) -32]
Test Case: 459 | Input/Output: [(24 37 56 -10) -10]
Test Case: 460 | Input/Output: [(-67 -3 37 -6) -67]
Test Case: 461 | Input/Output: [(-9 46 36 4) -9]
Test Case: 462 | Input/Output: [(3 98 -94 -26) -94]
Test Case: 463 | Input/Output: [(62 -53 -5 -22) -53]
Test Case: 464 | Input/Output: [(-49 -17 39 -69) -69]
Test Case: 465 | Input/Output: [(43 50 78 -35) -35]
Test Case: 466 | Input/Output: [(-66 -20 56 -6) -66]
Test Case: 467 | Input/Output: [(-95 -28 -11 -82) -95]
Test Case: 468 | Input/Output: [(78 45 -58 85) -58]
Test Case: 469 | Input/Output: [(-27 -31 51 -91) -91]
Test Case: 470 | Input/Output: [(-30 88 93 86) -30]
Test Case: 471 | Input/Output: [(9 -65 -85 -98) -98]
Test Case: 472 | Input/Output: [(-61 84 66 -82) -82]
Test Case: 473 | Input/Output: [(-26 -16 -26 92) -26]
Test Case: 474 | Input/Output: [(86 13 53 -80) -80]
Test Case: 475 | Input/Output: [(-71 5 91 -24) -71]
Test Case: 476 | Input/Output: [(0 -97 53 -62) -97]
Test Case: 477 | Input/Output: [(-62 -58 51 -9) -62]
Test Case: 478 | Input/Output: [(73 -89 63 74) -89]
Test Case: 479 | Input/Output: [(-90 81 -18 82) -90]
Test Case: 480 | Input/Output: [(30 74 -78 -2) -78]
Test Case: 481 | Input/Output: [(44 61 -4 -7) -7]
Test Case: 482 | Input/Output: [(98 35 -36 95) -36]
Test Case: 483 | Input/Output: [(-13 -20 50 -79) -79]
Test Case: 484 | Input/Output: [(-73 -51 -8 -44) -73]
Test Case: 485 | Input/Output: [(36 47 -44 22) -44]
Test Case: 486 | Input/Output: [(-20 -87 -9 98) -87]
Test Case: 487 | Input/Output: [(86 -28 -17 -17) -28]
Test Case: 488 | Input/Output: [(57 -86 -3 53) -86]
Test Case: 489 | Input/Output: [(-60 -82 -58 -88) -88]
Test Case: 490 | Input/Output: [(77 -70 -90 -46) -90]
Test Case: 491 | Input/Output: [(61 63 79 -24) -24]
Test Case: 492 | Input/Output: [(-13 -99 -17 -42) -99]
Test Case: 493 | Input/Output: [(-96 33 -45 89) -96]
Test Case: 494 | Input/Output: [(-75 -50 -45 5) -75]
Test Case: 495 | Input/Output: [(-87 -64 -31 90) -87]
Test Case: 496 | Input/Output: [(71 -70 37 -82) -82]
Test Case: 497 | Input/Output: [(-19 -14 6 3) -19]
Test Case: 498 | Input/Output: [(-41 -38 -35 -9) -41]
Test Case: 499 | Input/Output: [(-52 -30 -9 -14) -52]
Test Case: 500 | Input/Output: [(-97 -99 24 71) -99]
Test Case: 501 | Input/Output: [(3 48 92 53) 3]
Test Case: 502 | Input/Output: [(10 -52 88 -23) -52]
Test Case: 503 | Input/Output: [(-68 5 -33 -64) -68]
Test Case: 504 | Input/Output: [(32 25 74 -17) -17]
Test Case: 505 | Input/Output: [(15 71 -25 98) -25]
Test Case: 506 | Input/Output: [(21 -82 35 15) -82]
Test Case: 507 | Input/Output: [(4 42 16 6) 4]
Test Case: 508 | Input/Output: [(-86 -32 75 -48) -86]
Test Case: 509 | Input/Output: [(-57 16 -78 -64) -78]
Test Case: 510 | Input/Output: [(36 17 -16 -21) -21]
Test Case: 511 | Input/Output: [(-75 34 -31 -82) -82]
Test Case: 512 | Input/Output: [(40 58 -30 24) -30]
Test Case: 513 | Input/Output: [(-54 -38 85 -89) -89]
Test Case: 514 | Input/Output: [(71 100 94 39) 39]
Test Case: 515 | Input/Output: [(7 30 -25 -21) -25]
Test Case: 516 | Input/Output: [(8 -18 22 -79) -79]
Test Case: 517 | Input/Output: [(56 -1 84 -94) -94]
Test Case: 518 | Input/Output: [(-11 70 -54 -23) -54]
Test Case: 519 | Input/Output: [(-6 1 95 -14) -14]
Test Case: 520 | Input/Output: [(49 -9 71 -65) -65]
Test Case: 521 | Input/Output: [(58 -90 -65 85) -90]
Test Case: 522 | Input/Output: [(-76 -56 -7 -50) -76]
Test Case: 523 | Input/Output: [(81 -3 53 -41) -41]
Test Case: 524 | Input/Output: [(52 64 -70 -54) -70]
Test Case: 525 | Input/Output: [(-62 90 33 -29) -62]
Test Case: 526 | Input/Output: [(-20 -48 18 -74) -74]
Test Case: 527 | Input/Output: [(2 78 -15 23) -15]
Test Case: 528 | Input/Output: [(-53 -5 84 32) -53]
Test Case: 529 | Input/Output: [(-37 3 85 57) -37]
Test Case: 530 | Input/Output: [(-94 75 21 16) -94]
Test Case: 531 | Input/Output: [(-92 -19 50 45) -92]
Test Case: 532 | Input/Output: [(-40 79 70 -100) -100]
Test Case: 533 | Input/Output: [(7 40 92 -40) -40]
Test Case: 534 | Input/Output: [(-92 -65 -21 32) -92]
Test Case: 535 | Input/Output: [(-10 27 -89 91) -89]
Test Case: 536 | Input/Output: [(17 -95 22 -99) -99]
Test Case: 537 | Input/Output: [(-47 99 77 56) -47]
Test Case: 538 | Input/Output: [(60 26 62 88) 26]
Test Case: 539 | Input/Output: [(18 -39 -97 53) -97]
Test Case: 540 | Input/Output: [(43 45 99 26) 26]
Test Case: 541 | Input/Output: [(3 8 24 74) 3]
Test Case: 542 | Input/Output: [(-71 42 22 45) -71]
Test Case: 543 | Input/Output: [(50 80 -61 8) -61]
Test Case: 544 | Input/Output: [(88 15 95 -69) -69]
Test Case: 545 | Input/Output: [(89 3 82 67) 3]
Test Case: 546 | Input/Output: [(56 91 -9 -95) -95]
Test Case: 547 | Input/Output: [(77 -7 -58 2) -58]
Test Case: 548 | Input/Output: [(91 -2 -87 100) -87]
Test Case: 549 | Input/Output: [(99 -28 22 72) -28]
Test Case: 550 | Input/Output: [(92 62 -16 67) -16]
Test Case: 551 | Input/Output: [(-64 -30 -86 -4) -86]
Test Case: 552 | Input/Output: [(-71 20 -9 -20) -71]
Test Case: 553 | Input/Output: [(32 5 -53 23) -53]
Test Case: 554 | Input/Output: [(-11 -55 86 -88) -88]
Test Case: 555 | Input/Output: [(26 60 -95 51) -95]
Test Case: 556 | Input/Output: [(72 -18 73 49) -18]
Test Case: 557 | Input/Output: [(50 0 44 15) 0]
Test Case: 558 | Input/Output: [(-3 74 56 -98) -98]
Test Case: 559 | Input/Output: [(-52 -78 -81 -46) -81]
Test Case: 560 | Input/Output: [(68 -47 -77 79) -77]
Test Case: 561 | Input/Output: [(-49 -22 90 -7) -49]
Test Case: 562 | Input/Output: [(-94 -99 -80 -23) -99]
Test Case: 563 | Input/Output: [(73 24 -81 -37) -81]
Test Case: 564 | Input/Output: [(24 33 -16 -44) -44]
Test Case: 565 | Input/Output: [(-1 92 56 -67) -67]
Test Case: 566 | Input/Output: [(-77 7 -19 -14) -77]
Test Case: 567 | Input/Output: [(35 94 54 10) 10]
Test Case: 568 | Input/Output: [(-62 92 -57 -55) -62]
Test Case: 569 | Input/Output: [(26 -36 -72 -10) -72]
Test Case: 570 | Input/Output: [(88 49 20 9) 9]
Test Case: 571 | Input/Output: [(41 29 -79 54) -79]
Test Case: 572 | Input/Output: [(-13 24 -52 54) -52]
Test Case: 573 | Input/Output: [(-95 36 -5 -91) -95]
Test Case: 574 | Input/Output: [(-10 88 -78 9) -78]
Test Case: 575 | Input/Output: [(-86 -83 24 -40) -86]
Test Case: 576 | Input/Output: [(19 31 -71 66) -71]
Test Case: 577 | Input/Output: [(49 -65 -17 -15) -65]
Test Case: 578 | Input/Output: [(8 -39 49 -83) -83]
Test Case: 579 | Input/Output: [(-83 54 0 -2) -83]
Test Case: 580 | Input/Output: [(-64 -4 38 89) -64]
Test Case: 581 | Input/Output: [(60 -73 -89 -54) -89]
Test Case: 582 | Input/Output: [(62 -45 77 -8) -45]
Test Case: 583 | Input/Output: [(-92 -52 -5 -92) -92]
Test Case: 584 | Input/Output: [(-46 86 11 -98) -98]
Test Case: 585 | Input/Output: [(-81 21 -64 46) -81]
Test Case: 586 | Input/Output: [(72 -53 -36 0) -53]
Test Case: 587 | Input/Output: [(40 -29 -79 -81) -81]
Test Case: 588 | Input/Output: [(-68 -56 52 -88) -88]
Test Case: 589 | Input/Output: [(-84 51 69 -46) -84]
Test Case: 590 | Input/Output: [(-89 3 9 42) -89]
Test Case: 591 | Input/Output: [(25 56 98 -90) -90]
Test Case: 592 | Input/Output: [(99 59 -1 47) -1]
Test Case: 593 | Input/Output: [(45 36 2 -89) -89]
Test Case: 594 | Input/Output: [(5 82 15 -55) -55]
Test Case: 595 | Input/Output: [(-34 45 -14 15) -34]
Test Case: 596 | Input/Output: [(69 16 4 54) 4]
Test Case: 597 | Input/Output: [(62 -91 22 -14) -91]
Test Case: 598 | Input/Output: [(81 -78 47 -58) -78]
Test Case: 599 | Input/Output: [(51 36 63 31) 31]
Test Case: 600 | Input/Output: [(27 -33 -16 13) -33]
Test Case: 601 | Input/Output: [(67 -10 17 -71) -71]
Test Case: 602 | Input/Output: [(-59 -4 -55 59) -59]
Test Case: 603 | Input/Output: [(-6 -60 45 -40) -60]
Test Case: 604 | Input/Output: [(-10 55 3 4) -10]
Test Case: 605 | Input/Output: [(75 61 27 -63) -63]
Test Case: 606 | Input/Output: [(-9 -51 89 -85) -85]
Test Case: 607 | Input/Output: [(-26 -34 -47 66) -47]
Test Case: 608 | Input/Output: [(46 -17 17 92) -17]
Test Case: 609 | Input/Output: [(-36 -33 56 33) -36]
Test Case: 610 | Input/Output: [(-1 90 -16 -17) -17]
Test Case: 611 | Input/Output: [(35 85 12 -70) -70]
Test Case: 612 | Input/Output: [(-58 71 65 -72) -72]
Test Case: 613 | Input/Output: [(46 -6 -10 88) -10]
Test Case: 614 | Input/Output: [(-6 -59 27 -42) -59]
Test Case: 615 | Input/Output: [(-89 -28 -12 14) -89]
Test Case: 616 | Input/Output: [(22 39 46 54) 22]
Test Case: 617 | Input/Output: [(84 6 76 -57) -57]
Test Case: 618 | Input/Output: [(4 88 -100 30) -100]
Test Case: 619 | Input/Output: [(-13 2 38 76) -13]
Test Case: 620 | Input/Output: [(7 92 -74 -50) -74]
Test Case: 621 | Input/Output: [(71 -48 -12 -54) -54]
Test Case: 622 | Input/Output: [(-47 92 -25 -27) -47]
Test Case: 623 | Input/Output: [(-69 70 54 -42) -69]
Test Case: 624 | Input/Output: [(-3 -67 41 63) -67]
Test Case: 625 | Input/Output: [(98 -68 -69 17) -69]
Test Case: 626 | Input/Output: [(94 -22 8 -10) -22]
Test Case: 627 | Input/Output: [(-30 24 19 -100) -100]
Test Case: 628 | Input/Output: [(-39 15 89 -34) -39]
Test Case: 629 | Input/Output: [(-97 28 82 96) -97]
Test Case: 630 | Input/Output: [(68 -84 -7 12) -84]
Test Case: 631 | Input/Output: [(7 39 59 -42) -42]
Test Case: 632 | Input/Output: [(-7 -43 89 65) -43]
Test Case: 633 | Input/Output: [(7 -6 88 96) -6]
Test Case: 634 | Input/Output: [(79 53 51 87) 51]
Test Case: 635 | Input/Output: [(56 13 30 -80) -80]
Test Case: 636 | Input/Output: [(-79 15 67 -36) -79]
Test Case: 637 | Input/Output: [(-86 21 27 -15) -86]
Test Case: 638 | Input/Output: [(1 -47 46 -69) -69]
Test Case: 639 | Input/Output: [(-84 20 30 40) -84]
Test Case: 640 | Input/Output: [(-6 98 44 80) -6]
Test Case: 641 | Input/Output: [(88 -96 -96 -44) -96]
Test Case: 642 | Input/Output: [(58 -49 -47 2) -49]
Test Case: 643 | Input/Output: [(-16 -40 91 -78) -78]
Test Case: 644 | Input/Output: [(80 40 87 -13) -13]
Test Case: 645 | Input/Output: [(-74 36 17 98) -74]
Test Case: 646 | Input/Output: [(13 96 88 37) 13]
Test Case: 647 | Input/Output: [(32 -1 3 -45) -45]
Test Case: 648 | Input/Output: [(17 -98 -64 -41) -98]
Test Case: 649 | Input/Output: [(-66 -77 -24 10) -77]
Test Case: 650 | Input/Output: [(-23 22 -54 66) -54]
Test Case: 651 | Input/Output: [(-26 -25 -2 -46) -46]
Test Case: 652 | Input/Output: [(3 49 -90 -4) -90]
Test Case: 653 | Input/Output: [(30 14 25 46) 14]
Test Case: 654 | Input/Output: [(-11 91 -36 98) -36]
Test Case: 655 | Input/Output: [(-20 31 81 -56) -56]
Test Case: 656 | Input/Output: [(8 28 23 40) 8]
Test Case: 657 | Input/Output: [(2 -68 25 41) -68]
Test Case: 658 | Input/Output: [(-8 -76 -35 51) -76]
Test Case: 659 | Input/Output: [(-78 56 -58 64) -78]
Test Case: 660 | Input/Output: [(-59 7 96 -34) -59]
Test Case: 661 | Input/Output: [(7 -79 -3 79) -79]
Test Case: 662 | Input/Output: [(-7 70 29 12) -7]
Test Case: 663 | Input/Output: [(-52 32 -13 -22) -52]
Test Case: 664 | Input/Output: [(41 19 -24 -78) -78]
Test Case: 665 | Input/Output: [(-48 88 7 -5) -48]
Test Case: 666 | Input/Output: [(21 -71 79 -62) -71]
Test Case: 667 | Input/Output: [(-51 -98 -76 48) -98]
Test Case: 668 | Input/Output: [(8 64 28 41) 8]
Test Case: 669 | Input/Output: [(-75 77 14 68) -75]
Test Case: 670 | Input/Output: [(-1 82 58 24) -1]
Test Case: 671 | Input/Output: [(72 -11 -19 -44) -44]
Test Case: 672 | Input/Output: [(11 77 -2 13) -2]
Test Case: 673 | Input/Output: [(-1 -89 -47 -52) -89]
Test Case: 674 | Input/Output: [(-100 16 41 59) -100]
Test Case: 675 | Input/Output: [(-76 -14 61 -47) -76]
Test Case: 676 | Input/Output: [(18 89 -8 88) -8]
Test Case: 677 | Input/Output: [(-40 3 0 89) -40]
Test Case: 678 | Input/Output: [(51 -9 67 99) -9]
Test Case: 679 | Input/Output: [(-19 -99 74 7) -99]
Test Case: 680 | Input/Output: [(-31 98 -26 94) -31]
Test Case: 681 | Input/Output: [(93 17 86 65) 17]
Test Case: 682 | Input/Output: [(69 -53 -9 -31) -53]
Test Case: 683 | Input/Output: [(-52 -80 -75 75) -80]
Test Case: 684 | Input/Output: [(-57 -23 -86 91) -86]
Test Case: 685 | Input/Output: [(-87 -30 36 -16) -87]
Test Case: 686 | Input/Output: [(-13 -14 1 61) -14]
Test Case: 687 | Input/Output: [(-63 -75 -13 2) -75]
Test Case: 688 | Input/Output: [(-54 -83 -8 -50) -83]
Test Case: 689 | Input/Output: [(-54 -59 -34 3) -59]
Test Case: 690 | Input/Output: [(61 93 -38 -68) -68]
Test Case: 691 | Input/Output: [(-48 2 -17 -79) -79]
Test Case: 692 | Input/Output: [(-52 -27 -17 -1) -52]
Test Case: 693 | Input/Output: [(-86 -45 1 53) -86]
Test Case: 694 | Input/Output: [(91 49 -46 -89) -89]
Test Case: 695 | Input/Output: [(-42 3 86 -66) -66]
Test Case: 696 | Input/Output: [(81 28 -30 43) -30]
Test Case: 697 | Input/Output: [(64 -64 -96 -94) -96]
Test Case: 698 | Input/Output: [(80 31 35 45) 31]
Test Case: 699 | Input/Output: [(-80 -70 -8 25) -80]
Test Case: 700 | Input/Output: [(-55 90 -93 55) -93]
Test Case: 701 | Input/Output: [(30 14 52 -15) -15]
Test Case: 702 | Input/Output: [(37 -21 -58 54) -58]
Test Case: 703 | Input/Output: [(21 45 -73 -74) -74]
Test Case: 704 | Input/Output: [(90 -14 -55 40) -55]
Test Case: 705 | Input/Output: [(-16 -22 -94 -21) -94]
Test Case: 706 | Input/Output: [(-28 -42 -98 -32) -98]
Test Case: 707 | Input/Output: [(-42 -66 -61 24) -66]
Test Case: 708 | Input/Output: [(-8 -73 -57 16) -73]
Test Case: 709 | Input/Output: [(-9 -40 83 25) -40]
Test Case: 710 | Input/Output: [(-90 38 -53 -94) -94]
Test Case: 711 | Input/Output: [(-66 -49 -27 -17) -66]
Test Case: 712 | Input/Output: [(-4 -74 53 65) -74]
Test Case: 713 | Input/Output: [(46 53 -59 -1) -59]
Test Case: 714 | Input/Output: [(66 25 60 -43) -43]
Test Case: 715 | Input/Output: [(-40 80 67 -73) -73]
Test Case: 716 | Input/Output: [(-60 93 -56 77) -60]
Test Case: 717 | Input/Output: [(-95 72 27 12) -95]
Test Case: 718 | Input/Output: [(-15 -93 63 94) -93]
Test Case: 719 | Input/Output: [(-67 -90 -49 0) -90]
Test Case: 720 | Input/Output: [(-92 -4 -46 62) -92]
Test Case: 721 | Input/Output: [(-33 98 -49 96) -49]
Test Case: 722 | Input/Output: [(-59 24 -55 -95) -95]
Test Case: 723 | Input/Output: [(24 1 -59 12) -59]
Test Case: 724 | Input/Output: [(38 45 -28 -99) -99]
Test Case: 725 | Input/Output: [(43 98 43 3) 3]
Test Case: 726 | Input/Output: [(-30 24 -6 41) -30]
Test Case: 727 | Input/Output: [(-75 55 -95 -8) -95]
Test Case: 728 | Input/Output: [(62 48 -100 55) -100]
Test Case: 729 | Input/Output: [(-20 -73 -76 8) -76]
Test Case: 730 | Input/Output: [(-33 81 99 -1) -33]
Test Case: 731 | Input/Output: [(81 -7 67 -74) -74]
Test Case: 732 | Input/Output: [(-11 29 24 61) -11]
Test Case: 733 | Input/Output: [(-44 -60 2 -55) -60]
Test Case: 734 | Input/Output: [(22 -38 27 -47) -47]
Test Case: 735 | Input/Output: [(-10 -17 74 55) -17]
Test Case: 736 | Input/Output: [(72 14 -80 -77) -80]
Test Case: 737 | Input/Output: [(-68 -94 74 -59) -94]
Test Case: 738 | Input/Output: [(-93 -40 -62 -2) -93]
Test Case: 739 | Input/Output: [(-38 12 -88 -36) -88]
Test Case: 740 | Input/Output: [(-29 -95 79 -100) -100]
Test Case: 741 | Input/Output: [(64 -26 -93 92) -93]
Test Case: 742 | Input/Output: [(61 -63 19 80) -63]
Test Case: 743 | Input/Output: [(-88 -84 7 -13) -88]
Test Case: 744 | Input/Output: [(99 -62 5 6) -62]
Test Case: 745 | Input/Output: [(-36 68 25 -13) -36]
Test Case: 746 | Input/Output: [(72 -100 -69 97) -100]
Test Case: 747 | Input/Output: [(-31 -88 -26 -13) -88]
Test Case: 748 | Input/Output: [(-24 -75 -79 -29) -79]
Test Case: 749 | Input/Output: [(30 -19 -1 56) -19]
Test Case: 750 | Input/Output: [(-3 -35 95 50) -35]
Test Case: 751 | Input/Output: [(5 -96 53 -76) -96]
Test Case: 752 | Input/Output: [(27 94 56 53) 27]
Test Case: 753 | Input/Output: [(60 88 71 -23) -23]
Test Case: 754 | Input/Output: [(68 -53 74 -4) -53]
Test Case: 755 | Input/Output: [(-19 -56 -73 67) -73]
Test Case: 756 | Input/Output: [(97 96 -35 89) -35]
Test Case: 757 | Input/Output: [(-3 -47 -35 -61) -61]
Test Case: 758 | Input/Output: [(-63 -29 14 -68) -68]
Test Case: 759 | Input/Output: [(72 -76 -60 74) -76]
Test Case: 760 | Input/Output: [(-2 -32 9 -44) -44]
Test Case: 761 | Input/Output: [(82 -42 -69 -38) -69]
Test Case: 762 | Input/Output: [(-28 -40 31 37) -40]
Test Case: 763 | Input/Output: [(-4 55 -7 70) -7]
Test Case: 764 | Input/Output: [(-71 25 -15 30) -71]
Test Case: 765 | Input/Output: [(82 -83 86 79) -83]
Test Case: 766 | Input/Output: [(-19 61 19 74) -19]
Test Case: 767 | Input/Output: [(-18 -1 -93 -65) -93]
Test Case: 768 | Input/Output: [(-5 -10 -17 -3) -17]
Test Case: 769 | Input/Output: [(-48 -81 17 17) -81]
Test Case: 770 | Input/Output: [(-98 -68 95 -12) -98]
Test Case: 771 | Input/Output: [(-68 -55 52 -15) -68]
Test Case: 772 | Input/Output: [(60 -98 73 -66) -98]
Test Case: 773 | Input/Output: [(-4 -28 24 9) -28]
Test Case: 774 | Input/Output: [(55 -99 23 -59) -99]
Test Case: 775 | Input/Output: [(-88 6 75 -13) -88]
Test Case: 776 | Input/Output: [(0 24 -28 76) -28]
Test Case: 777 | Input/Output: [(-74 -19 -72 -98) -98]
Test Case: 778 | Input/Output: [(-35 -84 55 28) -84]
Test Case: 779 | Input/Output: [(-74 -56 -48 -47) -74]
Test Case: 780 | Input/Output: [(34 -69 95 27) -69]
Test Case: 781 | Input/Output: [(-94 -6 95 -1) -94]
Test Case: 782 | Input/Output: [(96 -60 37 35) -60]
Test Case: 783 | Input/Output: [(-11 -17 -11 -43) -43]
Test Case: 784 | Input/Output: [(-49 21 -27 -57) -57]
Test Case: 785 | Input/Output: [(-56 29 96 22) -56]
Test Case: 786 | Input/Output: [(25 97 0 -65) -65]
Test Case: 787 | Input/Output: [(-25 -67 -73 32) -73]
Test Case: 788 | Input/Output: [(12 95 10 -10) -10]
Test Case: 789 | Input/Output: [(42 64 36 -41) -41]
Test Case: 790 | Input/Output: [(53 90 74 61) 53]
Test Case: 791 | Input/Output: [(-26 -77 71 55) -77]
Test Case: 792 | Input/Output: [(50 -71 -6 -99) -99]
Test Case: 793 | Input/Output: [(59 37 -25 80) -25]
Test Case: 794 | Input/Output: [(88 36 14 67) 14]
Test Case: 795 | Input/Output: [(-30 29 91 77) -30]
Test Case: 796 | Input/Output: [(-40 -20 99 7) -40]
Test Case: 797 | Input/Output: [(-14 53 -38 2) -38]
Test Case: 798 | Input/Output: [(-6 -88 -43 -67) -88]
Test Case: 799 | Input/Output: [(-57 89 57 43) -57]
Test Case: 800 | Input/Output: [(46 -72 38 88) -72]
Test Case: 801 | Input/Output: [(-10 -99 -78 24) -99]
Test Case: 802 | Input/Output: [(4 7 88 67) 4]
Test Case: 803 | Input/Output: [(-11 88 84 52) -11]
Test Case: 804 | Input/Output: [(-6 -95 52 14) -95]
Test Case: 805 | Input/Output: [(78 80 23 90) 23]
Test Case: 806 | Input/Output: [(69 26 -86 -70) -86]
Test Case: 807 | Input/Output: [(-70 28 57 -25) -70]
Test Case: 808 | Input/Output: [(-33 -84 -43 -45) -84]
Test Case: 809 | Input/Output: [(-90 -9 1 0) -90]
Test Case: 810 | Input/Output: [(-89 58 -30 -16) -89]
Test Case: 811 | Input/Output: [(-16 13 38 -39) -39]
Test Case: 812 | Input/Output: [(-87 18 -91 11) -91]
Test Case: 813 | Input/Output: [(-27 98 34 90) -27]
Test Case: 814 | Input/Output: [(-31 84 75 42) -31]
Test Case: 815 | Input/Output: [(7 -66 73 43) -66]
Test Case: 816 | Input/Output: [(41 -80 -10 -91) -91]
Test Case: 817 | Input/Output: [(-59 39 74 -54) -59]
Test Case: 818 | Input/Output: [(82 76 90 66) 66]
Test Case: 819 | Input/Output: [(47 -18 -6 11) -18]
Test Case: 820 | Input/Output: [(-28 86 11 47) -28]
Test Case: 821 | Input/Output: [(-53 87 74 -59) -59]
Test Case: 822 | Input/Output: [(-94 1 65 -28) -94]
Test Case: 823 | Input/Output: [(46 -89 -33 19) -89]
Test Case: 824 | Input/Output: [(-11 23 62 -22) -22]
Test Case: 825 | Input/Output: [(96 53 -16 -34) -34]
Test Case: 826 | Input/Output: [(-45 -53 14 94) -53]
Test Case: 827 | Input/Output: [(71 -33 38 -58) -58]
Test Case: 828 | Input/Output: [(45 -81 51 22) -81]
Test Case: 829 | Input/Output: [(-63 -25 -33 -56) -63]
Test Case: 830 | Input/Output: [(-90 90 -88 -10) -90]
Test Case: 831 | Input/Output: [(49 62 -73 -72) -73]
Test Case: 832 | Input/Output: [(35 50 -79 1) -79]
Test Case: 833 | Input/Output: [(-33 67 9 -26) -33]
Test Case: 834 | Input/Output: [(12 52 100 63) 12]
Test Case: 835 | Input/Output: [(77 -14 68 28) -14]
Test Case: 836 | Input/Output: [(-50 -62 -7 -90) -90]
Test Case: 837 | Input/Output: [(79 23 17 7) 7]
Test Case: 838 | Input/Output: [(77 -70 25 -9) -70]
Test Case: 839 | Input/Output: [(69 -61 -51 84) -61]
Test Case: 840 | Input/Output: [(66 57 -13 40) -13]
Test Case: 841 | Input/Output: [(7 -53 89 3) -53]
Test Case: 842 | Input/Output: [(-77 97 60 100) -77]
Test Case: 843 | Input/Output: [(93 72 27 -30) -30]
Test Case: 844 | Input/Output: [(-59 -32 -68 8) -68]
Test Case: 845 | Input/Output: [(-90 -65 27 82) -90]
Test Case: 846 | Input/Output: [(58 59 -25 33) -25]
Test Case: 847 | Input/Output: [(46 40 -56 -40) -56]
Test Case: 848 | Input/Output: [(80 -50 -43 -100) -100]
Test Case: 849 | Input/Output: [(-60 -83 77 -55) -83]
Test Case: 850 | Input/Output: [(31 -94 -9 -56) -94]
Test Case: 851 | Input/Output: [(-39 -39 -23 74) -39]
Test Case: 852 | Input/Output: [(-75 90 -44 62) -75]
Test Case: 853 | Input/Output: [(27 91 2 93) 2]
Test Case: 854 | Input/Output: [(80 70 -7 -22) -22]
Test Case: 855 | Input/Output: [(19 -76 85 -96) -96]
Test Case: 856 | Input/Output: [(-23 10 -54 -34) -54]
Test Case: 857 | Input/Output: [(-48 -67 72 -29) -67]
Test Case: 858 | Input/Output: [(-9 -86 -80 34) -86]
Test Case: 859 | Input/Output: [(18 -36 -17 -40) -40]
Test Case: 860 | Input/Output: [(66 -6 -5 71) -6]
Test Case: 861 | Input/Output: [(-75 51 -100 56) -100]
Test Case: 862 | Input/Output: [(-66 -74 -82 -91) -91]
Test Case: 863 | Input/Output: [(49 -56 99 -66) -66]
Test Case: 864 | Input/Output: [(-47 -55 -49 81) -55]
Test Case: 865 | Input/Output: [(99 68 33 -25) -25]
Test Case: 866 | Input/Output: [(90 86 94 7) 7]
Test Case: 867 | Input/Output: [(-31 -19 -49 66) -49]
Test Case: 868 | Input/Output: [(21 95 44 2) 2]
Test Case: 869 | Input/Output: [(59 75 -1 -50) -50]
Test Case: 870 | Input/Output: [(84 -50 32 -9) -50]
Test Case: 871 | Input/Output: [(-7 -71 99 -42) -71]
Test Case: 872 | Input/Output: [(-29 96 -61 -38) -61]
Test Case: 873 | Input/Output: [(-16 56 -51 45) -51]
Test Case: 874 | Input/Output: [(-53 16 12 -16) -53]
Test Case: 875 | Input/Output: [(-47 64 -46 34) -47]
Test Case: 876 | Input/Output: [(68 54 31 -74) -74]
Test Case: 877 | Input/Output: [(100 -54 -6 31) -54]
Test Case: 878 | Input/Output: [(-80 -44 -89 -86) -89]
Test Case: 879 | Input/Output: [(-57 94 -94 -16) -94]
Test Case: 880 | Input/Output: [(-61 15 83 48) -61]
Test Case: 881 | Input/Output: [(-72 15 87 -33) -72]
Test Case: 882 | Input/Output: [(99 84 15 82) 15]
Test Case: 883 | Input/Output: [(-72 -14 5 -41) -72]
Test Case: 884 | Input/Output: [(-82 -73 -35 -56) -82]
Test Case: 885 | Input/Output: [(27 98 -15 -61) -61]
Test Case: 886 | Input/Output: [(6 -16 -7 -34) -34]
Test Case: 887 | Input/Output: [(-88 85 -35 -55) -88]
Test Case: 888 | Input/Output: [(82 -26 -24 -50) -50]
Test Case: 889 | Input/Output: [(9 24 -9 69) -9]
Test Case: 890 | Input/Output: [(-42 62 49 46) -42]
Test Case: 891 | Input/Output: [(-37 2 -14 -76) -76]
Test Case: 892 | Input/Output: [(39 -94 76 89) -94]
Test Case: 893 | Input/Output: [(94 -25 98 -34) -34]
Test Case: 894 | Input/Output: [(-54 20 -97 72) -97]
Test Case: 895 | Input/Output: [(-13 80 57 20) -13]
Test Case: 896 | Input/Output: [(-81 -72 77 93) -81]
Test Case: 897 | Input/Output: [(-58 -81 42 -84) -84]
Test Case: 898 | Input/Output: [(-91 69 65 -20) -91]
Test Case: 899 | Input/Output: [(-66 29 -32 2) -66]
Test Case: 900 | Input/Output: [(66 -69 -55 -66) -69]
Test Case: 901 | Input/Output: [(-13 -32 -41 -66) -66]
Test Case: 902 | Input/Output: [(-56 7 -96 -70) -96]
Test Case: 903 | Input/Output: [(-45 9 27 -22) -45]
Test Case: 904 | Input/Output: [(-76 -98 93 -53) -98]
Test Case: 905 | Input/Output: [(-39 -37 -41 -53) -53]
Test Case: 906 | Input/Output: [(-7 -21 -82 75) -82]
Test Case: 907 | Input/Output: [(70 -23 -59 -60) -60]
Test Case: 908 | Input/Output: [(27 35 0 -73) -73]
Test Case: 909 | Input/Output: [(-52 0 -70 -32) -70]
Test Case: 910 | Input/Output: [(-60 -81 -92 -6) -92]
Test Case: 911 | Input/Output: [(12 -47 18 -96) -96]
Test Case: 912 | Input/Output: [(86 -27 -71 -6) -71]
Test Case: 913 | Input/Output: [(-13 -88 -73 -9) -88]
Test Case: 914 | Input/Output: [(-71 8 92 99) -71]
Test Case: 915 | Input/Output: [(-92 -88 51 12) -92]
Test Case: 916 | Input/Output: [(78 -66 84 -77) -77]
Test Case: 917 | Input/Output: [(50 50 70 -52) -52]
Test Case: 918 | Input/Output: [(44 33 -79 43) -79]
Test Case: 919 | Input/Output: [(21 89 -11 50) -11]
Test Case: 920 | Input/Output: [(-51 -86 24 37) -86]
Test Case: 921 | Input/Output: [(-38 -96 70 31) -96]
Test Case: 922 | Input/Output: [(-62 10 -67 -70) -70]
Test Case: 923 | Input/Output: [(13 -19 38 -100) -100]
Test Case: 924 | Input/Output: [(-88 88 -11 -79) -88]
Test Case: 925 | Input/Output: [(94 -3 28 97) -3]
Test Case: 926 | Input/Output: [(26 7 -90 -10) -90]
Test Case: 927 | Input/Output: [(-86 65 61 4) -86]
Test Case: 928 | Input/Output: [(-91 -11 -46 30) -91]
Test Case: 929 | Input/Output: [(78 -82 -77 77) -82]
Test Case: 930 | Input/Output: [(31 -61 -44 -48) -61]
Test Case: 931 | Input/Output: [(-37 -91 -23 35) -91]
Test Case: 932 | Input/Output: [(-83 -48 63 -95) -95]
Test Case: 933 | Input/Output: [(2 -22 -10 1) -22]
Test Case: 934 | Input/Output: [(-97 50 -14 44) -97]
Test Case: 935 | Input/Output: [(-60 71 -47 2) -60]
Test Case: 936 | Input/Output: [(-77 -100 -2 26) -100]
Test Case: 937 | Input/Output: [(56 98 -29 27) -29]
Test Case: 938 | Input/Output: [(-55 18 -9 16) -55]
Test Case: 939 | Input/Output: [(1 -25 41 -13) -25]
Test Case: 940 | Input/Output: [(-44 93 -37 -71) -71]
Test Case: 941 | Input/Output: [(32 -4 -76 18) -76]
Test Case: 942 | Input/Output: [(-89 29 37 49) -89]
Test Case: 943 | Input/Output: [(-25 -78 -5 -36) -78]
Test Case: 944 | Input/Output: [(-60 35 -47 -2) -60]
Test Case: 945 | Input/Output: [(-43 -43 46 47) -43]
Test Case: 946 | Input/Output: [(-7 -96 88 -56) -96]
Test Case: 947 | Input/Output: [(40 -8 64 -41) -41]
Test Case: 948 | Input/Output: [(81 -87 59 -19) -87]
Test Case: 949 | Input/Output: [(24 -46 37 44) -46]
Test Case: 950 | Input/Output: [(96 -33 -97 15) -97]
Test Case: 951 | Input/Output: [(27 -44 -71 -72) -72]
Test Case: 952 | Input/Output: [(89 28 -44 -97) -97]
Test Case: 953 | Input/Output: [(-46 -21 -71 -54) -71]
Test Case: 954 | Input/Output: [(-31 -99 78 -87) -99]
Test Case: 955 | Input/Output: [(6 -49 96 -2) -49]
Test Case: 956 | Input/Output: [(51 69 23 -16) -16]
Test Case: 957 | Input/Output: [(-54 -72 -15 58) -72]
Test Case: 958 | Input/Output: [(55 34 -49 -78) -78]
Test Case: 959 | Input/Output: [(-96 70 79 -17) -96]
Test Case: 960 | Input/Output: [(-71 -70 -84 -65) -84]
Test Case: 961 | Input/Output: [(69 -29 88 8) -29]
Test Case: 962 | Input/Output: [(1 26 55 28) 1]
Test Case: 963 | Input/Output: [(46 64 72 48) 46]
Test Case: 964 | Input/Output: [(38 49 -76 80) -76]
Test Case: 965 | Input/Output: [(-84 97 12 -33) -84]
Test Case: 966 | Input/Output: [(72 82 46 71) 46]
Test Case: 967 | Input/Output: [(-10 -52 4 52) -52]
Test Case: 968 | Input/Output: [(75 96 -50 -96) -96]
Test Case: 969 | Input/Output: [(59 -12 -67 -25) -67]
Test Case: 970 | Input/Output: [(-52 97 36 84) -52]
Test Case: 971 | Input/Output: [(-7 79 -48 -84) -84]
Test Case: 972 | Input/Output: [(-16 66 -38 -91) -91]
Test Case: 973 | Input/Output: [(40 8 4 -7) -7]
Test Case: 974 | Input/Output: [(-29 -65 42 -81) -81]
Test Case: 975 | Input/Output: [(-55 -68 -95 -91) -95]
Test Case: 976 | Input/Output: [(-30 90 -52 -74) -74]
Test Case: 977 | Input/Output: [(87 69 -25 -87) -87]
Test Case: 978 | Input/Output: [(-82 -100 96 29) -100]
Test Case: 979 | Input/Output: [(83 -8 -54 -11) -54]
Test Case: 980 | Input/Output: [(-71 48 -16 87) -71]
Test Case: 981 | Input/Output: [(42 -60 58 32) -60]
Test Case: 982 | Input/Output: [(71 93 -98 -97) -98]
Test Case: 983 | Input/Output: [(-26 -37 -87 -8) -87]
Test Case: 984 | Input/Output: [(-36 -9 -96 -35) -96]
Test Case: 985 | Input/Output: [(18 -50 -31 82) -50]
Test Case: 986 | Input/Output: [(-91 89 41 37) -91]
Test Case: 987 | Input/Output: [(28 96 -54 -3) -54]
Test Case: 988 | Input/Output: [(25 83 65 -29) -29]
Test Case: 989 | Input/Output: [(95 81 79 98) 79]
Test Case: 990 | Input/Output: [(93 -4 -77 -59) -77]
Test Case: 991 | Input/Output: [(-56 55 -43 87) -56]
Test Case: 992 | Input/Output: [(28 -52 -51 29) -52]
Test Case: 993 | Input/Output: [(4 96 -81 -15) -81]
Test Case: 994 | Input/Output: [(75 19 52 -51) -51]
Test Case: 995 | Input/Output: [(-35 -41 -25 -2) -41]
Test Case: 996 | Input/Output: [(26 -61 -59 52) -61]
Test Case: 997 | Input/Output: [(59 -67 94 -24) -67]
Test Case: 998 | Input/Output: [(-51 39 -15 -65) -65]
Test Case: 999 | Input/Output: [(-87 29 -23 -82) -87]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -113 -123 -73 117 -87 -19 19 82 -98 -77 16 35 121 -21 32 -88
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[30 30 30 -65] -65] [[35 35 35 -43] -43] [[-45 41 41 41] -45] [[63 64 63 63] 63] [[-85 -85 0 -85] -85] [[81 42 81 81] 42] [[-50 -50 60 -50] -50] [[-68 -68 -3 -68] -68] [[-60 -60 -60 -68] -68] [[86 45 45 45] 45] [(8 8 8 8) 8] [(86 86 86 86) 86] [(-81 -81 -81 -81) -81] [(-100 -100 -100 -100) -100] [(-10 -10 -10 -10) -10] [(18 73 52 78) 18] [(67 97 49 8) 8] [(89 91 75 2) 2] [(99 98 96 27) 27] [(97 4 86 37) 4] [(32 4 62 26) 4] [(53 0 16 96) 0] [(49 96 95 4) 4] [(27 21 38 16) 16] [(53 40 88 7) 7] [(0 18 54 67) 0] [(24 100 4 100) 4] [(7 6 63 47) 6] [(59 18 92 35) 18] [(22 38 16 46) 16] [(55 34 62 99) 34] [(69 3 66 90) 3] [(48 21 31 87) 21] [(38 79 6 33) 6] [(34 7 62 37) 7] [(-55 -54 58 62) -55] [(-16 50 -84 -9) -84] [(32 -35 -96 -87) -96] [(95 -87 -28 -36) -87] [(-70 -64 76 34) -70] [(78 -11 73 -88) -88] [(-51 -58 -5 66) -58] [(-25 38 24 2) -25] [(-32 91 -27 -62) -62] [(100 33 66 -96) -96] [(86 -88 20 91) -88] [(67 52 -71 35) -71] [(70 51 -88 32) -88] [(4 -74 95 95) -74] [(36 87 -57 60) -57] [(48 -7 8 -58) -58] [(-63 -29 -93 70) -93] [(-70 -11 95 35) -70] [(76 34 48 72) 34] [(70 12 -31 87) -31] [(-47 53 -79 23) -79] [(-55 -45 -73 -24) -73] [(2 -40 -15 -61) -61] [(-2 26 47 99) -2] [(31 -61 -90 -35) -90] [(53 -25 -71 8) -71] [(23 -74 -71 -46) -74] [(58 -26 -58 39) -58] [(-19 -74 -68 25) -74] [(-52 -24 -75 86) -75] [(-11 92 -12 3) -12] [(34 53 56 79) 34] [(59 55 -17 34) -17] [(-19 -99 -73 -46) -99] [(-88 -88 -74 -53) -88] [(-49 -19 66 43) -49] [(-33 -42 21 11) -42] [(-61 14 -5 -29) -61] [(81 33 -26 -23) -26] [(-66 -90 3 -92) -92] [(60 -40 -25 -34) -40] [(-60 -54 10 -33) -60] [(31 8 59 73) 8] [(16 -3 -79 -85) -85] [(89 -83 -98 -58) -98] [(70 61 68 71) 61] [(-67 61 62 5) -67] [(9 25 21 -48) -48] [(27 -27 -78 66) -78] [(-76 -17 59 58) -76] [(-37 -83 99 98) -83] [(34 -12 60 55) -12] [(74 -92 82 42) -92] [(-23 92 13 22) -23] [(-70 13 -47 36) -70] [(-47 14 -67 -39) -67] [(98 60 34 -18) -18] [(41 1 -81 -39) -81] [(86 16 -92 -10) -92] [(-81 50 82 29) -81])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: -45                
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 67                 
Correct output: 2                   | Program output: 89                 
Correct output: 27                  | Program output: 99                 
Correct output: 4                   | Program output: 97                 
Correct output: 4                   | Program output: 32                 
Correct output: 0                   | Program output: 53                 
Correct output: 4                   | Program output: 49                 
Correct output: 16                  | Program output: 27                 
Correct output: 7                   | Program output: 53                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 24                 
Correct output: 6                   | Program output: 7                  
Correct output: 18                  | Program output: 59                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 55                 
Correct output: 3                   | Program output: 69                 
Correct output: 21                  | Program output: 48                 
Correct output: 6                   | Program output: 38                 
Correct output: 7                   | Program output: 34                 
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -16                
Correct output: -96                 | Program output: 32                 
Correct output: -87                 | Program output: 95                 
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: 78                 
Correct output: -58                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -32                
Correct output: -96                 | Program output: 100                
Correct output: -88                 | Program output: 86                 
Correct output: -71                 | Program output: 67                 
Correct output: -88                 | Program output: 70                 
Correct output: -74                 | Program output: 4                  
Correct output: -57                 | Program output: 36                 
Correct output: -58                 | Program output: 48                 
Correct output: -93                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 76                 
Correct output: -31                 | Program output: 70                 
Correct output: -79                 | Program output: -47                
Correct output: -73                 | Program output: -55                
Correct output: -61                 | Program output: 2                  
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: 31                 
Correct output: -71                 | Program output: 53                 
Correct output: -74                 | Program output: 23                 
Correct output: -58                 | Program output: 58                 
Correct output: -74                 | Program output: -19                
Correct output: -75                 | Program output: -52                
Correct output: -12                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: 59                 
Correct output: -99                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -33                
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: 81                 
Correct output: -92                 | Program output: -66                
Correct output: -40                 | Program output: 60                 
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 31                 
Correct output: -85                 | Program output: 16                 
Correct output: -98                 | Program output: 89                 
Correct output: 61                  | Program output: 70                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: 9                  
Correct output: -78                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -37                
Correct output: -12                 | Program output: 34                 
Correct output: -92                 | Program output: 74                 
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -47                
Correct output: -18                 | Program output: 98                 
Correct output: -81                 | Program output: 41                 
Correct output: -92                 | Program output: 86                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction tag_boolean_703} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 1, :instruction tagged_411} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_494} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_661} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 1, :instruction -66} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_eq integer_gt integer_sub integer_div exec_rot (exec_dup_items) (exec_do*while (exec_yankdup integer_dup_items boolean_not exec_do*times () integer_inc boolean_invert_second_then_and tag_boolean_703)) (integer_empty) in3 boolean_empty tagged_411 integer_dec integer_eq integer_fromboolean integer_inc boolean_yankdup integer_lt boolean_empty integer_lte in1 boolean_empty print_integer integer_pop exec_eq exec_when (integer_dec boolean_eq exec_k_when_autoconstructing () (integer_div integer_dup_items exec_shove () integer_min boolean_not boolean_flush tagged_494) exec_do*while (boolean_yankdup exec_flush integer_yank) tagged_661 integer_dup_items boolean_empty print_boolean integer_mult boolean_dup integer_fromboolean boolean_eq boolean_shove exec_s (exec_y () boolean_dup_items boolean_dup -66) (print_exec (exec_dup_items boolean_empty exec_empty) boolean_yank) (exec_s (integer_add boolean_yank integer_pop exec_when (exec_s_when_autoconstructing () () (boolean_rot boolean_dup_items print_newline exec_y_when_autoconstructing (exec_yank boolean_xor)))) () ())))
Lexicase best errors: [1 0 1 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 101
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction tag_boolean_703} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 1, :instruction tagged_411} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_494} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_661} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 1, :instruction -66} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_eq integer_gt integer_sub integer_div exec_rot (exec_dup_items) (exec_do*while (exec_yankdup integer_dup_items boolean_not exec_do*times () integer_inc boolean_invert_second_then_and tag_boolean_703)) (integer_empty) in3 boolean_empty tagged_411 integer_dec integer_eq integer_fromboolean integer_inc boolean_yankdup integer_lt boolean_empty integer_lte in1 boolean_empty print_integer integer_pop exec_eq exec_when (integer_dec boolean_eq exec_k_when_autoconstructing () (integer_div integer_dup_items exec_shove () integer_min boolean_not boolean_flush tagged_494) exec_do*while (boolean_yankdup exec_flush integer_yank) tagged_661 integer_dup_items boolean_empty print_boolean integer_mult boolean_dup integer_fromboolean boolean_eq boolean_shove exec_s (exec_y () boolean_dup_items boolean_dup -66) (print_exec (exec_dup_items boolean_empty exec_empty) boolean_yank) (exec_s (integer_add boolean_yank integer_pop exec_when (exec_s_when_autoconstructing () () (boolean_rot boolean_dup_items print_newline exec_y_when_autoconstructing (exec_yank boolean_xor)))) () ())))
Zero cases best errors: [1 0 1 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 101
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 6 2 3 2 6 5 2 2 1)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (1 6 2 3 2 6 5 2 2 1)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction print_newline} {:close 2, :instruction exec_noop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_233} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc})
Best program: (integer_inc exec_do*while (integer_max boolean_not boolean_invert_second_then_and in1 in1 print_integer exec_y () print_boolean) integer_shove integer_dup_items integer_rot in4 exec_stackdepth exec_when (exec_s (integer_swap in2 print_newline exec_noop) () (integer_pop) integer_min print_boolean integer_dup_times) integer_gt exec_do*while (exec_do*range (boolean_not integer_empty boolean_dup_items exec_when () boolean_empty in3 integer_dup_items boolean_and) integer_lt integer_flush integer_inc exec_shove (integer_yankdup exec_do*count (exec_while (exec_when () boolean_rot integer_sub) integer_sub integer_yankdup exec_do*while () exec_stackdepth integer_div exec_do*times (integer_mod exec_do*times (exec_flush integer_lt boolean_invert_second_then_and exec_eq exec_dup_times (integer_lte integer_lte boolean_and exec_pop (tagged_233 exec_yank exec_s () (exec_y () integer_yank integer_inc integer_fromboolean exec_empty exec_while (boolean_xor boolean_yankdup exec_yankdup integer_eq integer_mult tag_exec_1 (exec_y (exec_stackdepth boolean_or integer_swap exec_s_when_autoconstructing (integer_inc) () ())))) ()))))))))
Errors: [1 0 1 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 84
Size: 113
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 9.97
Median total errors in population: 10
Error averages by case: (0.999 0.994 0.998 0.997 0.998 0.994 0.995 0.998 0.998 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.783
Average program size in population (points): 72.564
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 502060
--- Timings ---
Current time: 1559582692279 milliseconds
Total Time:           2.9 seconds
Initialization:       0.1 seconds,  3.5%
Reproduction:         0.8 seconds, 28.9%
Fitness Testing:      2.0 seconds, 67.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: 60                 
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 52                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 62                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 95                 
Correct output: 16                  | Program output: 38                 
Correct output: 7                   | Program output: 88                 
Correct output: 0                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 63                 
Correct output: 18                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 66                 
Correct output: 21                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 62                 
Correct output: -55                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 76                 
Correct output: -88                 | Program output: 73                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 24                 
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 66                 
Correct output: -88                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 95                 
Correct output: 34                  | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 56                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 66                 
Correct output: -42                 | Program output: 21                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 3                  
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: 10                 
Correct output: 8                   | Program output: 59                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 68                 
Correct output: -67                 | Program output: 62                 
Correct output: -48                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 59                 
Correct output: -83                 | Program output: 99                 
Correct output: -12                 | Program output: 60                 
Correct output: -92                 | Program output: 82                 
Correct output: -23                 | Program output: 13                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_438} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_shove (integer_inc exec_do*while (integer_min) print_integer integer_stackdepth in3 print_integer boolean_shove exec_s_when_autoconstructing (tagged_438) (exec_empty exec_pop ()) ()))
Lexicase best errors: [1 1 0 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_438} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_shove (integer_inc exec_do*while (integer_min) print_integer integer_stackdepth in3 print_integer boolean_shove exec_s_when_autoconstructing (tagged_438) (exec_empty exec_pop ()) ()))
Zero cases best errors: [1 1 0 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (273 257 195 257 195 257 195 195 162 162)
Population mean number of elite cases: 2.15
Count of perfect (error zero) individuals by case: (273 257 195 257 195 257 195 195 162 162)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_438} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop})
Best program: (exec_shove (integer_inc exec_do*while (integer_min) print_integer integer_stackdepth in3 print_integer boolean_shove exec_s_when_autoconstructing (tagged_438) (exec_empty exec_pop ()) ()))
Errors: [1 1 0 1 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 13
Size: 20
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 7.852
Median total errors in population: 8
Error averages by case: (0.727 0.743 0.805 0.743 0.805 0.743 0.805 0.805 0.838 0.838)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.367
Average program size in population (points): 78.967
Average percent parens in population: 0.274
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.503
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 788748
--- Timings ---
Current time: 1559582694680 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.5 seconds, 43.8%
Fitness Testing:      2.4 seconds, 42.6%
Report:               0.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_284} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_96} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 2, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_xor exec_dup_times (boolean_xor in2) print_integer boolean_swap integer_stackdepth integer_shove exec_stackdepth exec_s (in4 exec_y_when_autoconstructing (exec_shove () boolean_frominteger boolean_not) in4 exec_empty boolean_pop tagged_284 integer_lt) () (integer_pop boolean_empty integer_gt exec_do*while (exec_yank exec_k_when_autoconstructing (exec_do*count (exec_k_when_autoconstructing () (print_integer) boolean_rot tag_boolean_96 integer_lt exec_if (in1 exec_dup ()) (boolean_flush integer_min)) boolean_invert_first_then_and boolean_xor integer_lt) ())))
Lexicase best errors: [0 1 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_284} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_96} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 2, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_xor exec_dup_times (boolean_xor in2) print_integer boolean_swap integer_stackdepth integer_shove exec_stackdepth exec_s (in4 exec_y_when_autoconstructing (exec_shove () boolean_frominteger boolean_not) in4 exec_empty boolean_pop tagged_284 integer_lt) () (integer_pop boolean_empty integer_gt exec_do*while (exec_yank exec_k_when_autoconstructing (exec_do*count (exec_k_when_autoconstructing () (print_integer) boolean_rot tag_boolean_96 integer_lt exec_if (in1 exec_dup ()) (boolean_flush integer_min)) boolean_invert_first_then_and boolean_xor integer_lt) ())))
Zero cases best errors: [0 1 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (299 382 299 381 298 917 372 381 163 299)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (299 382 299 381 298 917 372 381 163 299)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_284} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_96} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 2, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt})
Best program: (boolean_xor exec_dup_times (boolean_xor in2) print_integer boolean_swap integer_stackdepth integer_shove exec_stackdepth exec_s (in4 exec_y_when_autoconstructing (exec_shove () boolean_frominteger boolean_not) in4 exec_empty integer_lte tagged_284 integer_lt) () (integer_pop boolean_empty integer_gt exec_do*while (exec_yank exec_k_when_autoconstructing (exec_do*count (exec_k_when_autoconstructing () (print_integer) boolean_rot tag_boolean_96 integer_lt exec_if (in1 exec_dup ()) (boolean_flush integer_min)) boolean_invert_first_then_and boolean_xor integer_lt) ())))
Errors: [0 1 0 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 40
Size: 56
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.209
Median total errors in population: 6
Error averages by case: (0.701 0.618 0.701 0.619 0.702 0.083 0.628 0.619 0.837 0.701)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.98
Average program size in population (points): 62.353
Average percent parens in population: 0.299
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0075
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 254
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 254
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1012494
--- Timings ---
Current time: 1559582698014 milliseconds
Total Time:           8.8 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         5.1 seconds, 57.3%
Fitness Testing:      2.8 seconds, 31.1%
Report:               0.9 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: 60                 
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 52                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 62                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 95                 
Correct output: 16                  | Program output: 38                 
Correct output: 7                   | Program output: 88                 
Correct output: 0                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 63                 
Correct output: 18                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 66                 
Correct output: 21                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 62                 
Correct output: -55                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 76                 
Correct output: -88                 | Program output: 73                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 24                 
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 66                 
Correct output: -88                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 95                 
Correct output: 34                  | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 56                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 66                 
Correct output: -42                 | Program output: 21                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 3                  
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: 10                 
Correct output: 8                   | Program output: 59                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 68                 
Correct output: -67                 | Program output: 62                 
Correct output: -48                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 59                 
Correct output: -83                 | Program output: 99                 
Correct output: -12                 | Program output: 60                 
Correct output: -92                 | Program output: 82                 
Correct output: -23                 | Program output: 13                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_368} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_shove (integer_inc exec_do*while (integer_min) print_integer integer_stackdepth in3 print_integer boolean_shove exec_s_when_autoconstructing (tagged_368) (exec_empty exec_pop ()) ()))
Lexicase best errors: [0 0 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_368} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_shove (integer_inc exec_do*while (integer_min) print_integer integer_stackdepth in3 print_integer boolean_shove exec_s_when_autoconstructing (tagged_368) (exec_empty exec_pop ()) ()))
Zero cases best errors: [0 0 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (937 287 1000 1000 287 99 1000 99 287 287)
Population mean number of elite cases: 5.28
Count of perfect (error zero) individuals by case: (937 287 0 0 287 99 0 99 287 287)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_438} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop})
Best program: (exec_shove (integer_inc exec_do*while (integer_min) print_integer integer_stackdepth in3 print_integer boolean_shove exec_s_when_autoconstructing (tagged_438) (exec_empty exec_pop ()) ()))
Errors: [0 0 1 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 20
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 7.717
Median total errors in population: 9
Error averages by case: (0.063 0.713 1.0 1.0 0.713 0.901 1.0 0.901 0.713 0.713)
Error minima by case: (0 0 1 1 0 0 1 0 0 0)
Average genome size in population (length): 44.599
Average program size in population (points): 62.606
Average percent parens in population: 0.298
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.47675
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1229206
--- Timings ---
Current time: 1559582700655 milliseconds
Total Time:          11.7 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.2 seconds, 61.4%
Fitness Testing:      3.1 seconds, 26.0%
Report:               1.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 66                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: 35                 
Correct output: -88                 | Program output: 32                 
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: 87                 
Correct output: -79                 | Program output: 23                 
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: 8                  
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: 39                 
Correct output: -74                 | Program output: 25                 
Correct output: -75                 | Program output: 86                 
Correct output: -12                 | Program output: 3                  
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: 34                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 66                 
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: 36                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank})
Lexicase best program: (exec_stackdepth integer_add boolean_xor exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2 exec_s_when_autoconstructing () (print_integer integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty integer_stackdepth boolean_pop) integer_flush) boolean_dup_times print_boolean exec_do*while (exec_yank) print_newline)) boolean_invert_second_then_and exec_swap (boolean_and boolean_eq exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty) in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 () integer_swap exec_empty exec_pop () boolean_empty) boolean_not print_boolean exec_dup_times (integer_inc) integer_swap) (print_newline in4) exec_empty integer_mult integer_lt boolean_pop integer_pop in2 integer_mult) (integer_div integer_inc exec_do*times (boolean_invert_second_then_and integer_dup print_integer)) (integer_gt) integer_lt integer_dup_times exec_dup (exec_shove () integer_swap integer_mod exec_stackdepth boolean_pop integer_mod exec_flush in1 exec_while (exec_y () integer_mod integer_yank))) ()))) ())
Lexicase best errors: [1 1 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 127
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank})
Zero cases best program: (exec_stackdepth integer_add boolean_xor exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2 exec_s_when_autoconstructing () (print_integer integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty integer_stackdepth boolean_pop) integer_flush) boolean_dup_times print_boolean exec_do*while (exec_yank) print_newline)) boolean_invert_second_then_and exec_swap (boolean_and boolean_eq exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty) in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 () integer_swap exec_empty exec_pop () boolean_empty) boolean_not print_boolean exec_dup_times (integer_inc) integer_swap) (print_newline in4) exec_empty integer_mult integer_lt boolean_pop integer_pop in2 integer_mult) (integer_div integer_inc exec_do*times (boolean_invert_second_then_and integer_dup print_integer)) (integer_gt) integer_lt integer_dup_times exec_dup (exec_shove () integer_swap integer_mod exec_stackdepth boolean_pop integer_mod exec_flush in1 exec_while (exec_y () integer_mod integer_yank))) ()))) ())
Zero cases best errors: [1 1 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 127
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (629 629 304 1000 1000 304 5 933 1000 1000)
Population mean number of elite cases: 6.80
Count of perfect (error zero) individuals by case: (629 629 304 0 0 304 5 933 0 0)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2 exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty integer_stackdepth boolean_pop) integer_flush) boolean_dup_times print_boolean exec_do*while (exec_yank) in3 boolean_yank exec_k_when_autoconstructing (integer_dec tag_exec_814 () integer_swap exec_empty exec_pop () boolean_empty) (boolean_not print_boolean exec_dup_times (integer_inc) integer_swap) print_newline in4) exec_empty integer_mult integer_lt boolean_pop integer_pop in2 integer_mult) integer_div integer_inc exec_do*times (boolean_invert_second_then_and integer_dup boolean_or)) integer_gt) integer_lt integer_dup_times exec_dup (exec_shove ())) ())
Errors: [1 1 0 1 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 74
Size: 96
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 7.196
Median total errors in population: 7
Error averages by case: (0.371 0.371 0.696 1.0 1.0 0.696 0.995 0.067 1.0 1.0)
Error minima by case: (0 0 0 1 1 0 0 0 1 1)
Average genome size in population (length): 32.018
Average program size in population (points): 44.787
Average percent parens in population: 0.310
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.93275
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 275
Genome diversity (% unique genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 275
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1384094
--- Timings ---
Current time: 1559582702903 milliseconds
Total Time:          14.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.0 seconds, 64.7%
Fitness Testing:      3.3 seconds, 23.2%
Report:               1.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 66                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: 35                 
Correct output: -88                 | Program output: 32                 
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: 87                 
Correct output: -79                 | Program output: 23                 
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: 8                  
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: 39                 
Correct output: -74                 | Program output: 25                 
Correct output: -75                 | Program output: 86                 
Correct output: -12                 | Program output: 3                  
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: 34                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 66                 
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: 36                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (exec_dup (in2 integer_sub exec_do*count (print_exec (in2 exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty integer_stackdepth boolean_pop) integer_flush) boolean_dup_times print_boolean exec_do*while (exec_yank) print_newline)) boolean_invert_second_then_and exec_swap (boolean_and boolean_eq exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty) in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 () integer_swap exec_empty exec_pop ())) ()) () ()) ())))) ())
Lexicase best errors: [1 1 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 85
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (exec_dup (in2 integer_sub exec_do*count (print_exec (in2 exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty integer_stackdepth boolean_pop) integer_flush) boolean_dup_times print_boolean exec_do*while (exec_yank) print_newline)) boolean_invert_second_then_and exec_swap (boolean_and boolean_eq exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty) in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 () integer_swap exec_empty exec_pop ())) ()) () ()) ())))) ())
Zero cases best errors: [1 1 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 85
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 395 1000 752 358 753 1000 1000)
Population mean number of elite cases: 8.26
Count of perfect (error zero) individuals by case: (0 0 0 395 0 752 358 753 0 0)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_add} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq})
Best program: (exec_shove (integer_inc exec_do*while (integer_min) integer_add exec_eq) exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2) integer_sub exec_do*count (print_exec (in2 exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty integer_stackdepth boolean_pop) integer_flush) boolean_dup_times print_boolean exec_do*while (exec_yank) print_newline)) boolean_invert_second_then_and exec_swap (boolean_and boolean_eq) ())) ())
Errors: [1 1 1 1 1 0 0 0 1 1]
Total: 7
Mean: 0.7
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.742
Median total errors in population: 7
Error averages by case: (1.0 1.0 1.0 0.605 1.0 0.248 0.642 0.247 1.0 1.0)
Error minima by case: (1 1 1 0 1 0 0 0 1 1)
Average genome size in population (length): 34.034
Average program size in population (points): 47.571
Average percent parens in population: 0.302
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.3993125
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1540942
--- Timings ---
Current time: 1559582705114 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.9 seconds, 67.1%
Fitness Testing:      3.4 seconds, 21.2%
Report:               1.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 66                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: 35                 
Correct output: -88                 | Program output: 32                 
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: 87                 
Correct output: -79                 | Program output: 23                 
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: 8                  
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: 39                 
Correct output: -74                 | Program output: 25                 
Correct output: -75                 | Program output: 86                 
Correct output: -12                 | Program output: 3                  
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: 34                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 66                 
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: 36                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_765} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2 exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty integer_stackdepth boolean_pop) integer_flush boolean_dup_times print_boolean exec_do*while (exec_yank) print_newline)) boolean_invert_second_then_and exec_swap (boolean_and boolean_eq exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty)) (in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_765 () integer_swap exec_empty exec_pop (boolean_empty) boolean_not print_boolean exec_dup_times (integer_inc) integer_swap) print_newline in4) (exec_empty integer_mult integer_lt boolean_pop integer_pop in2 integer_mult) integer_div integer_inc exec_do*times (boolean_invert_second_then_and integer_dup boolean_or)) (integer_gt) integer_lt integer_dup_times exec_do*range ()) ())))) ())
Lexicase best errors: [1 0 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 112
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_765} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2 exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty integer_stackdepth boolean_pop) integer_flush boolean_dup_times print_boolean exec_do*while (exec_yank) print_newline)) boolean_invert_second_then_and exec_swap (boolean_and boolean_eq exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty)) (in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_765 () integer_swap exec_empty exec_pop (boolean_empty) boolean_not print_boolean exec_dup_times (integer_inc) integer_swap) print_newline in4) (exec_empty integer_mult integer_lt boolean_pop integer_pop in2 integer_mult) integer_div integer_inc exec_do*times (boolean_invert_second_then_and integer_dup boolean_or)) (integer_gt) integer_lt integer_dup_times exec_do*range ()) ())))) ())
Zero cases best errors: [1 0 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 112
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (474 461 461 1000 935 461 461 1000 935 1000)
Population mean number of elite cases: 7.19
Count of perfect (error zero) individuals by case: (474 461 461 0 935 461 461 0 935 0)
Population mean number of perfect (error zero) cases: 4.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop})
Best program: (exec_stackdepth integer_add print_boolean exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2 exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop ())))))) ())
Errors: [1 0 0 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 32
Size: 45
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 5.812
Median total errors in population: 7
Error averages by case: (0.526 0.539 0.539 1.0 0.065 0.539 0.539 1.0 0.065 1.0)
Error minima by case: (0 0 0 1 0 0 0 1 0 1)
Average genome size in population (length): 34.125
Average program size in population (points): 47.48
Average percent parens in population: 0.295
Minimum age in population: 6.0
Maximum age in population: 11.21875
Average age in population: 8.84215625
Median age in population: 8.90625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 1695298
--- Timings ---
Current time: 1559582707445 milliseconds
Total Time:          18.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.9 seconds, 69.2%
Fitness Testing:      3.6 seconds, 19.5%
Report:               2.0 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 66                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: 35                 
Correct output: -88                 | Program output: 32                 
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: 87                 
Correct output: -79                 | Program output: 23                 
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: 8                  
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: 39                 
Correct output: -74                 | Program output: 25                 
Correct output: -75                 | Program output: 86                 
Correct output: -12                 | Program output: 3                  
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: 34                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 66                 
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: 36                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_stackdepth integer_add exec_dup_times (exec_empty) boolean_dup_times integer_pop in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (exec_when (integer_yank in2 integer_sub))) ())
Lexicase best errors: [1 1 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 29
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_stackdepth integer_add exec_dup_times (exec_empty) boolean_dup_times integer_pop in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (exec_when (integer_yank in2 integer_sub))) ())
Zero cases best errors: [1 1 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 29
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 205 724 1 1 724 1 3 205 724)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (205 205 724 1 1 724 1 3 205 724)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_pop (exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when ()) ()))
Errors: [1 1 0 1 1 0 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.207
Median total errors in population: 7
Error averages by case: (0.795 0.795 0.276 0.999 0.999 0.276 0.999 0.997 0.795 0.276)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.754
Average program size in population (points): 57.405
Average percent parens in population: 0.272
Minimum age in population: 7.0
Maximum age in population: 12.21875
Average age in population: 10.268640625
Median age in population: 10.3203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 1854621
--- Timings ---
Current time: 1559582709571 milliseconds
Total Time:          20.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.6 seconds, 70.5%
Fitness Testing:      3.8 seconds, 18.5%
Report:               2.2 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty exec_y_when_autoconstructing (boolean_dup_times print_boolean exec_yank) print_newline)) boolean_invert_second_then_and exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty) in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 () integer_swap exec_empty exec_pop () boolean_empty) boolean_not print_boolean exec_dup_times (integer_inc) integer_swap) (print_newline in4) exec_empty integer_mult boolean_or boolean_pop integer_pop in2 integer_mult) (integer_div integer_inc exec_do*times (boolean_invert_second_then_and integer_dup boolean_or)) (integer_gt) integer_lt integer_dup_times exec_dup (exec_shove () integer_swap integer_mod exec_stackdepth))))))) ())
Lexicase best errors: [0 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 112
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty exec_y_when_autoconstructing (boolean_dup_times print_boolean exec_yank) print_newline)) boolean_invert_second_then_and exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty) in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 () integer_swap exec_empty exec_pop () boolean_empty) boolean_not print_boolean exec_dup_times (integer_inc) integer_swap) (print_newline in4) exec_empty integer_mult boolean_or boolean_pop integer_pop in2 integer_mult) (integer_div integer_inc exec_do*times (boolean_invert_second_then_and integer_dup boolean_or)) (integer_gt) integer_lt integer_dup_times exec_dup (exec_shove () integer_swap integer_mod exec_stackdepth))))))) ())
Zero cases best errors: [0 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 112
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (282 282 291 291 283 291 368 277 1000 282)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (282 282 291 291 283 291 368 277 0 282)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty exec_y_when_autoconstructing (boolean_dup_times print_boolean exec_yank) print_newline)) boolean_invert_second_then_and exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty) in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 () integer_swap exec_empty exec_pop () boolean_empty) boolean_not print_boolean exec_dup_times (integer_inc) integer_swap) (print_newline in4) exec_empty integer_mult boolean_or boolean_pop integer_pop in2 integer_mult) (integer_div integer_inc exec_do*times (boolean_invert_second_then_and integer_dup boolean_or)) (integer_gt) integer_lt integer_dup_times exec_dup (exec_shove () integer_swap integer_mod exec_stackdepth))))))) ())
Errors: [0 0 1 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 82
Size: 110
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.353
Median total errors in population: 7
Error averages by case: (0.718 0.718 0.709 0.709 0.717 0.709 0.632 0.723 1.0 0.718)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 46.855
Average program size in population (points): 64.422
Average percent parens in population: 0.284
Minimum age in population: 8.5
Maximum age in population: 13.9140625
Average age in population: 12.262234375
Median age in population: 12.390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2019734
--- Timings ---
Current time: 1559582711592 milliseconds
Total Time:          22.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.2 seconds, 71.4%
Fitness Testing:      4.1 seconds, 17.9%
Report:               2.3 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 66                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: 35                 
Correct output: -88                 | Program output: 32                 
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: 87                 
Correct output: -79                 | Program output: 23                 
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: 8                  
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: 39                 
Correct output: -74                 | Program output: 25                 
Correct output: -75                 | Program output: 86                 
Correct output: -12                 | Program output: 3                  
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: 34                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 66                 
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: 36                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec ())))) ())
Lexicase best errors: [1 1 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec ())))) ())
Zero cases best errors: [1 1 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (515 515 1000 99 330 99 99 99 944 1000)
Population mean number of elite cases: 4.70
Count of perfect (error zero) individuals by case: (515 515 0 99 330 99 99 99 944 0)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub})
Best program: (exec_pop (integer_inc exec_do*while (integer_add exec_eq in4) exec_eq) integer_lt exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (exec_shove () exec_pop (print_exec (integer_yank in2 integer_sub)))) ())
Errors: [1 1 1 0 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.3
Median total errors in population: 7
Error averages by case: (0.485 0.485 1.0 0.901 0.67 0.901 0.901 0.901 0.056 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 51.633
Average program size in population (points): 70.783
Average percent parens in population: 0.283
Minimum age in population: 10.125
Maximum age in population: 15.890625
Average age in population: 14.0029609375
Median age in population: 13.984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 2172004
--- Timings ---
Current time: 1559582714422 milliseconds
Total Time:          25.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.6 seconds, 73.0%
Fitness Testing:      4.2 seconds, 16.7%
Report:               2.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: 60                 
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 52                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 62                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 95                 
Correct output: 16                  | Program output: 38                 
Correct output: 7                   | Program output: 88                 
Correct output: 0                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 63                 
Correct output: 18                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 66                 
Correct output: 21                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 62                 
Correct output: -55                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 76                 
Correct output: -88                 | Program output: 73                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 24                 
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 66                 
Correct output: -88                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 95                 
Correct output: 34                  | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 56                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 66                 
Correct output: -42                 | Program output: 21                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 3                  
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: 10                 
Correct output: 8                   | Program output: 59                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 68                 
Correct output: -67                 | Program output: 62                 
Correct output: -48                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 59                 
Correct output: -83                 | Program output: 99                 
Correct output: -12                 | Program output: 60                 
Correct output: -92                 | Program output: 82                 
Correct output: -23                 | Program output: 13                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop ()) ()))
Lexicase best errors: [1 1 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 24
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop ()) ()))
Zero cases best errors: [1 1 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 24
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 126 1000 1000 126 1000 659 787 255 533)
Population mean number of elite cases: 6.49
Count of perfect (error zero) individuals by case: (0 126 0 0 126 0 659 787 255 533)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop})
Best program: (exec_shove (integer_inc exec_do*while (exec_stackdepth) integer_add exec_eq integer_add exec_eq exec_empty) integer_lte integer_mod in4 integer_min integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop ()) ())
Errors: [1 0 1 1 0 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.514
Median total errors in population: 7
Error averages by case: (1.0 0.874 1.0 1.0 0.874 1.0 0.341 0.213 0.745 0.467)
Error minima by case: (1 0 1 1 0 1 0 0 0 0)
Average genome size in population (length): 48.791
Average program size in population (points): 66.548
Average percent parens in population: 0.270
Minimum age in population: 11.5625
Maximum age in population: 17.607421875
Average age in population: 15.37751171875
Median age in population: 15.4482421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 2340128
--- Timings ---
Current time: 1559582716789 milliseconds
Total Time:          27.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.5 seconds, 73.8%
Fitness Testing:      4.5 seconds, 16.0%
Report:               2.8 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: 60                 
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 52                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 62                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 95                 
Correct output: 16                  | Program output: 38                 
Correct output: 7                   | Program output: 88                 
Correct output: 0                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 63                 
Correct output: 18                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 66                 
Correct output: 21                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 62                 
Correct output: -55                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 76                 
Correct output: -88                 | Program output: 73                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 24                 
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 66                 
Correct output: -88                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 95                 
Correct output: 34                  | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 56                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 66                 
Correct output: -42                 | Program output: 21                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 3                  
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: 10                 
Correct output: 8                   | Program output: 59                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 68                 
Correct output: -67                 | Program output: 62                 
Correct output: -48                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 59                 
Correct output: -83                 | Program output: 99                 
Correct output: -12                 | Program output: 60                 
Correct output: -92                 | Program output: 82                 
Correct output: -23                 | Program output: 13                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_438} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_shove (integer_inc exec_do*while (integer_min) print_integer integer_stackdepth in3 print_integer boolean_shove exec_s_when_autoconstructing (tagged_438) (exec_empty exec_pop ()) ()))
Lexicase best errors: [0 0 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_438} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_shove (integer_inc exec_do*while (integer_min) print_integer integer_stackdepth in3 print_integer boolean_shove exec_s_when_autoconstructing (tagged_438) (exec_empty exec_pop ()) ()))
Zero cases best errors: [0 0 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (404 404 202 202 202 315 315 921 404 404)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (404 404 202 202 202 315 315 921 404 404)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 2, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction print_boolean})
Best program: (exec_stackdepth integer_add in4 boolean_pop integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank print_exec (integer_yank exec_y_when_autoconstructing (integer_sub exec_do*count (print_exec () in2 exec_s_when_autoconstructing () (print_integer integer_gt integer_add) () integer_div) exec_dup (exec_pop () exec_empty integer_stackdepth boolean_pop) integer_flush boolean_dup_times print_boolean exec_do*while (exec_yank) print_newline)) integer_mod exec_swap (boolean_and boolean_eq exec_s (integer_lt boolean_xor boolean_not boolean_frominteger exec_empty) (in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 () integer_swap exec_empty exec_pop () boolean_empty) boolean_not) (print_boolean)) ()) ()))) ())
Errors: [0 0 1 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 61
Size: 87
Percent parens: 0.299
--- Population Statistics ---
Average total errors in population: 6.227
Median total errors in population: 6
Error averages by case: (0.596 0.596 0.798 0.798 0.798 0.685 0.685 0.079 0.596 0.596)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.127
Average program size in population (points): 51.277
Average percent parens in population: 0.286
Minimum age in population: 13.125
Maximum age in population: 18.744140625
Average age in population: 16.83464453125
Median age in population: 16.91748046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 2495689
--- Timings ---
Current time: 1559582719433 milliseconds
Total Time:          30.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.8 seconds, 74.7%
Fitness Testing:      4.6 seconds, 15.2%
Report:               3.0 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 3, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer exec_swap (exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 exec_noop exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty exec_y_when_autoconstructing (boolean_dup_times print_boolean exec_yank) print_newline)) boolean_invert_second_then_and exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 () integer_swap exec_empty exec_pop () boolean_empty) boolean_not print_boolean exec_dup_times (integer_inc) integer_swap) (print_newline in4 exec_empty integer_mult boolean_or boolean_pop exec_if (in2 integer_mult) (integer_div integer_inc exec_do*times (boolean_invert_second_then_and integer_dup boolean_and)) integer_gt) boolean_dup_times integer_dup_times exec_dup (exec_shove () integer_swap integer_mod exec_stackdepth))) () ())))))) ()) ())
Lexicase best errors: [1 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 114
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 3, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer exec_swap (exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 exec_noop exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty exec_y_when_autoconstructing (boolean_dup_times print_boolean exec_yank) print_newline)) boolean_invert_second_then_and exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 () integer_swap exec_empty exec_pop () boolean_empty) boolean_not print_boolean exec_dup_times (integer_inc) integer_swap) (print_newline in4 exec_empty integer_mult boolean_or boolean_pop exec_if (in2 integer_mult) (integer_div integer_inc exec_do*times (boolean_invert_second_then_and integer_dup boolean_and)) integer_gt) boolean_dup_times integer_dup_times exec_dup (exec_shove () integer_swap integer_mod exec_stackdepth))) () ())))))) ()) ())
Zero cases best errors: [1 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 114
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 423 315 313 314 424 194 929 1000 1000)
Population mean number of elite cases: 5.91
Count of perfect (error zero) individuals by case: (0 423 315 313 314 424 194 929 0 0)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (exec_empty exec_y_when_autoconstructing (boolean_dup_times print_boolean exec_yank) print_newline)) boolean_invert_second_then_and exec_s () () ())))))) ())
Errors: [1 1 0 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 40
Size: 58
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.088
Median total errors in population: 7
Error averages by case: (1.0 0.577 0.685 0.687 0.686 0.576 0.806 0.071 1.0 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 35.955
Average program size in population (points): 49.938
Average percent parens in population: 0.291
Minimum age in population: 15.640625
Maximum age in population: 20.34814453125
Average age in population: 18.3697412109375
Median age in population: 18.45556640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 2655695
--- Timings ---
Current time: 1559582721902 milliseconds
Total Time:          33.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.9 seconds, 75.5%
Fitness Testing:      4.8 seconds, 14.6%
Report:               3.2 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 66                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: 35                 
Correct output: -88                 | Program output: 32                 
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: 87                 
Correct output: -79                 | Program output: 23                 
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: 8                  
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: 39                 
Correct output: -74                 | Program output: 25                 
Correct output: -75                 | Program output: 86                 
Correct output: -12                 | Program output: 3                  
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: 34                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 66                 
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: 36                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod integer_swap in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing () ())
Lexicase best errors: [1 0 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 19
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod integer_swap in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing () ())
Zero cases best errors: [1 0 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 19
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (306 160 465 159 1000 477 476 160 1000 306)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (306 160 465 159 0 477 476 160 0 306)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub})
Best program: (exec_pop (integer_inc exec_do*while (integer_add exec_eq in4) exec_eq) integer_lt exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (exec_shove () exec_k (print_exec (integer_yank in2 integer_sub)) ())) ())
Errors: [1 0 0 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 27
Size: 37
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 7.491
Median total errors in population: 8
Error averages by case: (0.694 0.84 0.535 0.841 1.0 0.523 0.524 0.84 1.0 0.694)
Error minima by case: (0 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 39.094
Average program size in population (points): 54.106
Average percent parens in population: 0.283
Minimum age in population: 16.9765625
Maximum age in population: 21.93310546875
Average age in population: 19.92093017578125
Median age in population: 20.014892578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 2809282
--- Timings ---
Current time: 1559582724266 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.9 seconds, 76.1%
Fitness Testing:      5.0 seconds, 14.2%
Report:               3.3 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte in4 exec_eq integer_lt exec_yankdup in2 print_integer integer_rot exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) ())))))) ())
Lexicase best errors: [0 0 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte in4 exec_eq integer_lt exec_yankdup in2 print_integer integer_rot exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) ())))))) ())
Zero cases best errors: [0 0 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (925 924 229 229 1000 279 229 416 646 279)
Population mean number of elite cases: 5.16
Count of perfect (error zero) individuals by case: (925 924 229 229 0 279 229 416 646 279)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) integer_lt) (exec_eq exec_noop print_integer exec_while (exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2 exec_empty) boolean_frominteger integer_gt exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_dup) () integer_div exec_dup (integer_div exec_empty integer_stackdepth boolean_pop) integer_flush) boolean_dup_times print_boolean exec_do*while (exec_yank) print_newline)) in4 exec_swap (boolean_and boolean_eq exec_s () () ()) ()) ())))
Errors: [0 0 0 0 1 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 59
Size: 81
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 5.844
Median total errors in population: 6
Error averages by case: (0.075 0.076 0.771 0.771 1.0 0.721 0.771 0.584 0.354 0.721)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 34.274
Average program size in population (points): 47.377
Average percent parens in population: 0.277
Minimum age in population: 18.009765625
Maximum age in population: 23.205810546875
Average age in population: 21.38271130371094
Median age in population: 21.45904541015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 2968881
--- Timings ---
Current time: 1559582726704 milliseconds
Total Time:          37.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.0 seconds, 76.6%
Fitness Testing:      5.2 seconds, 13.8%
Report:               3.5 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not)) ())
Lexicase best errors: [1 1 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not)) ())
Zero cases best errors: [1 1 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 1000 523 244 162 525 524 244 162 524)
Population mean number of elite cases: 4.07
Count of perfect (error zero) individuals by case: (162 0 523 244 162 525 524 244 162 524)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) integer_lt) (exec_eq exec_noop print_integer exec_while (exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2 exec_empty) boolean_frominteger integer_gt exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_dup) () integer_div exec_dup (integer_div exec_empty integer_stackdepth boolean_pop) integer_flush) boolean_dup_times print_boolean exec_do*while (exec_yank) print_newline)) in4 exec_swap (boolean_and boolean_eq exec_s () () ()) ()) ())))
Errors: [1 1 0 1 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 59
Size: 81
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 6.93
Median total errors in population: 6
Error averages by case: (0.838 1.0 0.477 0.756 0.838 0.475 0.476 0.756 0.838 0.476)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.721
Average program size in population (points): 50.798
Average percent parens in population: 0.277
Minimum age in population: 20.16796875
Maximum age in population: 24.81439208984375
Average age in population: 22.86458190917969
Median age in population: 22.94610595703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 3125385
--- Timings ---
Current time: 1559582729393 milliseconds
Total Time:          40.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.3 seconds, 77.3%
Fitness Testing:      5.4 seconds, 13.4%
Report:               3.7 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: -45                
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 67                 
Correct output: 2                   | Program output: 89                 
Correct output: 27                  | Program output: 99                 
Correct output: 4                   | Program output: 97                 
Correct output: 4                   | Program output: 32                 
Correct output: 0                   | Program output: 53                 
Correct output: 4                   | Program output: 49                 
Correct output: 16                  | Program output: 27                 
Correct output: 7                   | Program output: 53                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 24                 
Correct output: 6                   | Program output: 7                  
Correct output: 18                  | Program output: 59                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 55                 
Correct output: 3                   | Program output: 69                 
Correct output: 21                  | Program output: 48                 
Correct output: 6                   | Program output: 38                 
Correct output: 7                   | Program output: 34                 
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -16                
Correct output: -96                 | Program output: 32                 
Correct output: -87                 | Program output: 95                 
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: 78                 
Correct output: -58                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -32                
Correct output: -96                 | Program output: 100                
Correct output: -88                 | Program output: 86                 
Correct output: -71                 | Program output: 67                 
Correct output: -88                 | Program output: 70                 
Correct output: -74                 | Program output: 4                  
Correct output: -57                 | Program output: 36                 
Correct output: -58                 | Program output: 48                 
Correct output: -93                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 76                 
Correct output: -31                 | Program output: 70                 
Correct output: -79                 | Program output: -47                
Correct output: -73                 | Program output: -55                
Correct output: -61                 | Program output: 2                  
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: 31                 
Correct output: -71                 | Program output: 53                 
Correct output: -74                 | Program output: 23                 
Correct output: -58                 | Program output: 58                 
Correct output: -74                 | Program output: -19                
Correct output: -75                 | Program output: -52                
Correct output: -12                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: 59                 
Correct output: -99                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -33                
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: 81                 
Correct output: -92                 | Program output: -66                
Correct output: -40                 | Program output: 60                 
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 31                 
Correct output: -85                 | Program output: 16                 
Correct output: -98                 | Program output: 89                 
Correct output: 61                  | Program output: 70                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: 9                  
Correct output: -78                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -37                
Correct output: -12                 | Program output: 34                 
Correct output: -92                 | Program output: 74                 
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -47                
Correct output: -18                 | Program output: 98                 
Correct output: -81                 | Program output: 41                 
Correct output: -92                 | Program output: 86                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction 45} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_stackdepth 45 exec_eq exec_empty integer_lte integer_mod in1 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (print_exec (in2 exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_pop (exec_pop (exec_empty integer_stackdepth)))))) ())
Lexicase best errors: [0 0 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 38
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction 45} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_stackdepth 45 exec_eq exec_empty integer_lte integer_mod in1 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (print_exec (in2 exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_pop (exec_pop (exec_empty integer_stackdepth)))))) ())
Zero cases best errors: [0 0 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 38
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (379 1 3 545 329 1 330 708 1 378)
Population mean number of elite cases: 2.67
Count of perfect (error zero) individuals by case: (379 1 3 545 329 1 330 708 1 378)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction 45} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth})
Best program: (exec_stackdepth 45 exec_eq exec_empty integer_lte integer_mod in1 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (print_exec (in2 exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_pop (exec_pop (exec_empty integer_stackdepth)))))) ())
Errors: [0 0 0 0 1 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 7.325
Median total errors in population: 7
Error averages by case: (0.621 0.999 0.997 0.455 0.671 0.999 0.67 0.292 0.999 0.622)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.691
Average program size in population (points): 47.87
Average percent parens in population: 0.271
Minimum age in population: 21.3642578125
Maximum age in population: 26.40576171875
Average age in population: 24.31520892333984
Median age in population: 24.40455627441406
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 3287909
--- Timings ---
Current time: 1559582731843 milliseconds
Total Time:          43.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.4 seconds, 77.7%
Fitness Testing:      5.6 seconds, 13.0%
Report:               3.9 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 3, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tag_exec_814})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_newline integer_sub exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) ()) integer_div exec_dup (exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty) in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 ())) ()) () ()))))) ())
Lexicase best errors: [0 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 61
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 3, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tag_exec_814})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_newline integer_sub exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) ()) integer_div exec_dup (exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty) in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 ())) ()) () ()))))) ())
Zero cases best errors: [0 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 61
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (936 3 114 114 238 581 114 3 357 114)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (936 3 114 114 238 581 114 3 357 114)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 3, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 2, :instruction integer_gte})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup_times exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) ()) integer_div exec_dup (exec_pop (exec_empty exec_y_when_autoconstructing (boolean_dup_times print_boolean exec_yank) integer_gte))))))) ())
Errors: [0 1 0 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 7.426
Median total errors in population: 8
Error averages by case: (0.064 0.997 0.886 0.886 0.762 0.419 0.886 0.997 0.643 0.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.932
Average program size in population (points): 40.985
Average percent parens in population: 0.290
Minimum age in population: 22.943603515625
Maximum age in population: 27.66035461425781
Average age in population: 25.76400120544434
Median age in population: 25.74943542480469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 391
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 406
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 3413983
--- Timings ---
Current time: 1559582734146 milliseconds
Total Time:          45.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.4 seconds, 78.1%
Fitness Testing:      5.8 seconds, 12.7%
Report:               4.0 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: 60                 
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 52                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 62                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 95                 
Correct output: 16                  | Program output: 38                 
Correct output: 7                   | Program output: 88                 
Correct output: 0                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 63                 
Correct output: 18                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 66                 
Correct output: 21                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 62                 
Correct output: -55                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 76                 
Correct output: -88                 | Program output: 73                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 24                 
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 66                 
Correct output: -88                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 95                 
Correct output: 34                  | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 56                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 66                 
Correct output: -42                 | Program output: 21                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 3                  
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: 10                 
Correct output: 8                   | Program output: 59                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 68                 
Correct output: -67                 | Program output: 62                 
Correct output: -48                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 59                 
Correct output: -83                 | Program output: 99                 
Correct output: -12                 | Program output: 60                 
Correct output: -92                 | Program output: 82                 
Correct output: -23                 | Program output: 13                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_stackdepth integer_add boolean_swap exec_empty integer_lte integer_mod in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub boolean_shove integer_eq integer_yank exec_eq))) ())
Lexicase best errors: [1 0 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_stackdepth integer_add boolean_swap exec_empty integer_lte integer_mod in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub boolean_shove integer_eq integer_yank exec_eq))) ())
Zero cases best errors: [1 0 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (119 229 119 481 576 480 119 324 229 229)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (119 229 119 481 576 480 119 324 229 229)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_s} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup})
Best program: (exec_stackdepth exec_swap (exec_eq exec_empty) (exec_y_when_autoconstructing (integer_mod in4) exec_s () () (integer_lt) in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2 exec_s_when_autoconstructing () (boolean_frominteger boolean_flush integer_add) () print_exec (exec_dup ())))))) ()))
Errors: [1 0 1 1 1 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 31
Size: 50
Percent parens: 0.380
--- Population Statistics ---
Average total errors in population: 7.095
Median total errors in population: 7
Error averages by case: (0.881 0.771 0.881 0.519 0.424 0.52 0.881 0.676 0.771 0.771)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.08
Average program size in population (points): 44.078
Average percent parens in population: 0.257
Minimum age in population: 25.2100830078125
Maximum age in population: 29.03446197509766
Average age in population: 27.36264588928223
Median age in population: 27.42702102661133
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 3561328
--- Timings ---
Current time: 1559582736450 milliseconds
Total Time:          47.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.3 seconds, 78.4%
Fitness Testing:      6.0 seconds, 12.5%
Report:               4.2 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 66                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: 35                 
Correct output: -88                 | Program output: 32                 
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: 87                 
Correct output: -79                 | Program output: 23                 
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: 8                  
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: 39                 
Correct output: -74                 | Program output: 25                 
Correct output: -75                 | Program output: 86                 
Correct output: -12                 | Program output: 3                  
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: 34                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 66                 
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: 36                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not})
Lexicase best program: (exec_shove (integer_inc integer_dec integer_min) print_integer integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not)) ())
Lexicase best errors: [1 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 19
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not})
Zero cases best program: (exec_shove (integer_inc integer_dec integer_min) print_integer integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not)) ())
Zero cases best errors: [1 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 19
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 296 593 253 296 44 44 343 253 253)
Population mean number of elite cases: 2.67
Count of perfect (error zero) individuals by case: (296 296 593 253 296 44 44 343 253 253)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing})
Best program: (exec_stackdepth integer_add exec_eq exec_empty exec_do*while (integer_mod in4) exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2 exec_s_when_autoconstructing () () ()))))) ())
Errors: [0 0 0 1 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 7.329
Median total errors in population: 6
Error averages by case: (0.704 0.704 0.407 0.747 0.704 0.956 0.956 0.657 0.747 0.747)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.864
Average program size in population (points): 39.436
Average percent parens in population: 0.250
Minimum age in population: 26.29949951171875
Maximum age in population: 30.60598373413086
Average age in population: 28.89075130844116
Median age in population: 28.95164680480957
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 3715886
--- Timings ---
Current time: 1559582738881 milliseconds
Total Time:          50.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.4 seconds, 78.7%
Fitness Testing:      6.1 seconds, 12.3%
Report:               4.4 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 66                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: 35                 
Correct output: -88                 | Program output: 32                 
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: 87                 
Correct output: -79                 | Program output: 23                 
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: 8                  
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: 39                 
Correct output: -74                 | Program output: 25                 
Correct output: -75                 | Program output: 86                 
Correct output: -12                 | Program output: 3                  
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: 34                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 66                 
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: 36                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec})
Lexicase best program: (exec_shove (integer_inc exec_do*while (integer_min) print_integer integer_stackdepth in3 integer_lte integer_mod in4) exec_eq integer_lt in3 exec_noop print_integer exec_empty exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank exec_s (integer_sub exec_do*count (print_exec ())) () ()))) ()))) ())
Lexicase best errors: [1 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec})
Zero cases best program: (exec_shove (integer_inc exec_do*while (integer_min) print_integer integer_stackdepth in3 integer_lte integer_mod in4) exec_eq integer_lt in3 exec_noop print_integer exec_empty exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank exec_s (integer_sub exec_do*count (print_exec ())) () ()))) ()))) ())
Zero cases best errors: [1 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (90 328 313 328 90 328 734 314 90 329)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (90 328 313 328 90 328 734 314 90 329)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.056
Median total errors in population: 7
Error averages by case: (0.91 0.672 0.687 0.672 0.91 0.672 0.266 0.686 0.91 0.671)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.276
Average program size in population (points): 41.663
Average percent parens in population: 0.258
Minimum age in population: 27.29949951171875
Maximum age in population: 32.14057922363281
Average age in population: 30.32296393013
Median age in population: 30.40212059020996
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 3866690
--- Timings ---
Current time: 1559582741394 milliseconds
Total Time:          52.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.4 seconds, 79.0%
Fitness Testing:      6.3 seconds, 12.1%
Report:               4.6 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not)) (exec_pop (print_exec (integer_yank in2 integer_sub boolean_shove integer_eq exec_stackdepth exec_eq))))
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 37
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not)) (exec_pop (print_exec (integer_yank in2 integer_sub boolean_shove integer_eq exec_stackdepth exec_eq))))
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 37
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (395 929 206 206 206 600 929 206 1000 206)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (395 929 206 206 206 600 929 206 0 206)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt boolean_dup_times in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (boolean_not boolean_not) (exec_pop (print_exec (integer_yank boolean_not) exec_pop (print_exec (integer_yank in2)))))
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 25
Size: 32
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 6.117
Median total errors in population: 6
Error averages by case: (0.605 0.071 0.794 0.794 0.794 0.4 0.071 0.794 1.0 0.794)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 26.638
Average program size in population (points): 36.05
Average percent parens in population: 0.241
Minimum age in population: 28.29949951171875
Maximum age in population: 34.02302837371826
Average age in population: 31.87104252719879
Median age in population: 31.97357940673828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 4022734
--- Timings ---
Current time: 1559582743879 milliseconds
Total Time:          55.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.6 seconds, 79.2%
Fitness Testing:      6.5 seconds, 11.9%
Report:               4.8 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: 60                 
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 52                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 62                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 95                 
Correct output: 16                  | Program output: 38                 
Correct output: 7                   | Program output: 88                 
Correct output: 0                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 63                 
Correct output: 18                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 66                 
Correct output: 21                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 62                 
Correct output: -55                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 76                 
Correct output: -88                 | Program output: 73                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 24                 
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 66                 
Correct output: -88                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 95                 
Correct output: 34                  | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 56                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 66                 
Correct output: -42                 | Program output: 21                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 3                  
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: 10                 
Correct output: 8                   | Program output: 59                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 68                 
Correct output: -67                 | Program output: 62                 
Correct output: -48                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 59                 
Correct output: -83                 | Program output: 99                 
Correct output: -12                 | Program output: 60                 
Correct output: -92                 | Program output: 82                 
Correct output: -23                 | Program output: 13                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte exec_eq in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Lexicase best errors: [0 1 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte exec_eq in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Zero cases best errors: [0 1 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (948 1000 3 180 1000 3 3 1000 178 768)
Population mean number of elite cases: 5.08
Count of perfect (error zero) individuals by case: (948 0 3 180 0 3 3 0 178 768)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_do*count})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 boolean_dup integer_gte in3 boolean_pop print_integer boolean_dup boolean_not exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2) exec_s_when_autoconstructing (integer_yank in2 exec_do*count ()) () ()))))
Errors: [0 1 0 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 35
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 7.917
Median total errors in population: 8
Error averages by case: (0.052 1.0 0.997 0.82 1.0 0.997 0.997 1.0 0.822 0.232)
Error minima by case: (0 1 0 0 1 0 0 1 0 0)
Average genome size in population (length): 33.306
Average program size in population (points): 45.498
Average percent parens in population: 0.253
Minimum age in population: 29.96945190429688
Maximum age in population: 35.72796821594238
Average age in population: 33.2317856464386
Median age in population: 33.33122801780701
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 4195401
--- Timings ---
Current time: 1559582746389 milliseconds
Total Time:          57.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.7 seconds, 79.4%
Fitness Testing:      6.7 seconds, 11.7%
Report:               5.0 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 66                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: 35                 
Correct output: -88                 | Program output: 32                 
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: 87                 
Correct output: -79                 | Program output: 23                 
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: 8                  
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: 39                 
Correct output: -74                 | Program output: 25                 
Correct output: -75                 | Program output: 86                 
Correct output: -12                 | Program output: 3                  
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: 34                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 66                 
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: 36                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup boolean_empty print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_do*times (boolean_not)) (exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing (boolean_frominteger integer_shove integer_add) () (integer_div exec_dup (exec_pop (exec_empty exec_y_when_autoconstructing (boolean_dup_times print_boolean exec_yank print_newline)) boolean_invert_second_then_and exec_empty exec_y_when_autoconstructing (boolean_dup_times print_boolean exec_s_when_autoconstructing (print_newline) () (exec_do*times (exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty) in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 (integer_swap exec_empty exec_pop () boolean_empty) boolean_not print_boolean exec_dup_times (integer_inc integer_swap) print_newline in4) boolean_stackdepth integer_mult exec_if (boolean_pop integer_pop exec_do*times (boolean_invert_second_then_and)) ()) ()) () ()))))))))))))
Lexicase best errors: [0 1 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 108
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup boolean_empty print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_do*times (boolean_not)) (exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing (boolean_frominteger integer_shove integer_add) () (integer_div exec_dup (exec_pop (exec_empty exec_y_when_autoconstructing (boolean_dup_times print_boolean exec_yank print_newline)) boolean_invert_second_then_and exec_empty exec_y_when_autoconstructing (boolean_dup_times print_boolean exec_s_when_autoconstructing (print_newline) () (exec_do*times (exec_s (integer_lt boolean_xor exec_do*count (boolean_frominteger exec_empty) in3 boolean_yank exec_k_when_autoconstructing (exec_dup_times (tag_exec_814 (integer_swap exec_empty exec_pop () boolean_empty) boolean_not print_boolean exec_dup_times (integer_inc integer_swap) print_newline in4) boolean_stackdepth integer_mult exec_if (boolean_pop integer_pop exec_do*times (boolean_invert_second_then_and)) ()) ()) () ()))))))))))))
Zero cases best errors: [0 1 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 108
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (298 478 479 158 480 934 1000 298 158 298)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (298 478 479 158 480 934 0 298 158 298)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 1, :instruction tagged_438} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when () boolean_not) (tagged_438) exec_empty exec_pop ())
Errors: [0 1 1 1 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 19
Size: 24
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.419
Median total errors in population: 6
Error averages by case: (0.702 0.522 0.521 0.842 0.52 0.066 1.0 0.702 0.842 0.702)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 33.44
Average program size in population (points): 45.267
Average percent parens in population: 0.250
Minimum age in population: 31.96159362792969
Maximum age in population: 36.95539283752441
Average age in population: 34.18737921667099
Median age in population: 34.22597885131836
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 4421121
--- Timings ---
Current time: 1559582748453 milliseconds
Total Time:          59.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.3 seconds, 79.5%
Fitness Testing:      7.0 seconds, 11.7%
Report:               5.1 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction 45} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_stackdepth 45 exec_eq exec_empty integer_lte exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub integer_pop print_exec () exec_do*count (exec_s_when_autoconstructing () () (boolean_frominteger exec_do*while (boolean_shove print_newline)) boolean_invert_second_then_and exec_swap (integer_rot boolean_eq) (boolean_yankdup integer_lt print_boolean exec_do*while (exec_yank print_newline)) boolean_invert_second_then_and)))) ())
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 61
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction 45} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_stackdepth 45 exec_eq exec_empty integer_lte exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub integer_pop print_exec () exec_do*count (exec_s_when_autoconstructing () () (boolean_frominteger exec_do*while (boolean_shove print_newline)) boolean_invert_second_then_and exec_swap (integer_rot boolean_eq) (boolean_yankdup integer_lt print_boolean exec_do*while (exec_yank print_newline)) boolean_invert_second_then_and)))) ())
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 61
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (237 339 932 237 236 357 1000 358 237 339)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (237 339 932 237 236 357 0 358 237 339)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 1, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup})
Best program: (exec_stackdepth exec_y_when_autoconstructing (exec_eq exec_empty) integer_lte integer_mod in4 exec_eq print_newline exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (in2) exec_s_when_autoconstructing () (boolean_frominteger boolean_flush integer_add) () integer_div exec_dup ())) ())
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 37
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 6.728
Median total errors in population: 7
Error averages by case: (0.763 0.661 0.068 0.763 0.764 0.643 1.0 0.642 0.763 0.661)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 31.677
Average program size in population (points): 42.767
Average percent parens in population: 0.245
Minimum age in population: 32.96159362792969
Maximum age in population: 38.19106483459473
Average age in population: 35.80352130484581
Median age in population: 35.87134373188019
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 4634443
--- Timings ---
Current time: 1559582750780 milliseconds
Total Time:          61.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.3 seconds, 79.6%
Fitness Testing:      7.2 seconds, 11.7%
Report:               5.3 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: 60                 
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 52                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 62                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 95                 
Correct output: 16                  | Program output: 38                 
Correct output: 7                   | Program output: 88                 
Correct output: 0                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 63                 
Correct output: 18                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 66                 
Correct output: 21                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 62                 
Correct output: -55                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 76                 
Correct output: -88                 | Program output: 73                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 24                 
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 66                 
Correct output: -88                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 95                 
Correct output: 34                  | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 56                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 66                 
Correct output: -42                 | Program output: 21                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 3                  
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: 10                 
Correct output: 8                   | Program output: 59                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 68                 
Correct output: -67                 | Program output: 62                 
Correct output: -48                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 59                 
Correct output: -83                 | Program output: 99                 
Correct output: -12                 | Program output: 60                 
Correct output: -92                 | Program output: 82                 
Correct output: -23                 | Program output: 13                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_do*count})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 boolean_dup integer_gte in3 boolean_pop print_integer boolean_dup boolean_not exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2) exec_s_when_autoconstructing (integer_yank in2 exec_do*count ()) () ()))))
Lexicase best errors: [1 1 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_do*count})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 boolean_dup integer_gte in3 boolean_pop print_integer boolean_dup boolean_not exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2) exec_s_when_autoconstructing (integer_yank in2 exec_do*count ()) () ()))))
Zero cases best errors: [1 1 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (453 453 1000 259 219 219 220 1000 219 219)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (453 453 0 259 219 219 220 0 219 219)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte exec_eq in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Errors: [1 1 1 1 0 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.739
Median total errors in population: 8
Error averages by case: (0.547 0.547 1.0 0.741 0.781 0.781 0.78 1.0 0.781 0.781)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 31.707
Average program size in population (points): 42.882
Average percent parens in population: 0.246
Minimum age in population: 33.96159362792969
Maximum age in population: 39.50741881132126
Average age in population: 37.36735103404522
Median age in population: 37.42177432775497
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 4839188
--- Timings ---
Current time: 1559582753303 milliseconds
Total Time:          64.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.3 seconds, 79.7%
Fitness Testing:      7.5 seconds, 11.6%
Report:               5.5 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 boolean_dup integer_gte in3 integer_mult exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub))) ())
Lexicase best errors: [0 0 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 boolean_dup integer_gte in3 integer_mult exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub))) ())
Zero cases best errors: [0 0 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (908 227 227 575 106 227 106 227 909 1000)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (908 227 227 575 106 227 106 227 909 0)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction -12} {:close 1, :instruction in4} {:close 2, :instruction exec_noop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing})
Best program: (exec_stackdepth integer_add exec_eq in3 integer_lte -12 in4 exec_noop integer_lt exec_yankdup integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (in3) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (exec_do*count (exec_s_when_autoconstructing () () ())))))) ())
Errors: [0 0 0 1 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.488
Median total errors in population: 7
Error averages by case: (0.092 0.773 0.773 0.425 0.894 0.773 0.894 0.773 0.091 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 32.165
Average program size in population (points): 43.602
Average percent parens in population: 0.251
Minimum age in population: 35.79161834716797
Maximum age in population: 40.91840648651123
Average age in population: 38.76790004715323
Median age in population: 38.82320234179497
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 5086114
--- Timings ---
Current time: 1559582755680 milliseconds
Total Time:          66.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        53.2 seconds, 79.7%
Fitness Testing:      7.7 seconds, 11.6%
Report:               5.7 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 66                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: 35                 
Correct output: -88                 | Program output: 32                 
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: 87                 
Correct output: -79                 | Program output: 23                 
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: 8                  
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: 39                 
Correct output: -74                 | Program output: 25                 
Correct output: -75                 | Program output: 86                 
Correct output: -12                 | Program output: 3                  
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: 34                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 66                 
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: 36                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_stackdepth integer_add exec_yankdup in2 exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_yank exec_k_when_autoconstructing (integer_dup) ())
Lexicase best errors: [1 1 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_stackdepth integer_add exec_yankdup in2 exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_yank exec_k_when_autoconstructing (integer_dup) ())
Zero cases best errors: [1 1 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (149 1 524 248 774 149 248 922 1 921)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (149 1 524 248 774 149 248 922 1 921)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer integer_div boolean_or exec_k_when_autoconstructing (integer_div boolean_not) (exec_pop (exec_empty exec_dup (exec_pop (print_exec () integer_yank in2)))))
Errors: [1 1 1 0 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 6.063
Median total errors in population: 6
Error averages by case: (0.851 0.999 0.476 0.752 0.226 0.851 0.752 0.078 0.999 0.079)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.442
Average program size in population (points): 39.675
Average percent parens in population: 0.243
Minimum age in population: 37.35658240318298
Maximum age in population: 42.24642087519169
Average age in population: 40.34753739666939
Median age in population: 40.43695169687271
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 5281110
--- Timings ---
Current time: 1559582757877 milliseconds
Total Time:          69.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.0 seconds, 79.7%
Fitness Testing:      8.0 seconds, 11.5%
Report:               5.9 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank) in2 integer_sub exec_do*count (print_exec ()))) ())
Lexicase best errors: [1 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank) in2 integer_sub exec_do*count (print_exec ()))) ())
Zero cases best errors: [1 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (280 142 258 142 142 399 246 258 246 925)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (280 142 258 142 142 399 246 258 246 925)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (integer_dup)) ())
Errors: [1 0 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 17
Size: 21
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 6.962
Median total errors in population: 7
Error averages by case: (0.72 0.858 0.742 0.858 0.858 0.601 0.754 0.742 0.754 0.075)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.091
Average program size in population (points): 36.423
Average percent parens in population: 0.246
Minimum age in population: 39.62771308422089
Maximum age in population: 43.5099141150713
Average age in population: 41.80486387193203
Median age in population: 41.81869790703058
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 191
Genome diversity (% unique genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 5473051
--- Timings ---
Current time: 1559582760492 milliseconds
Total Time:          71.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.3 seconds, 79.9%
Fitness Testing:      8.2 seconds, 11.4%
Report:               6.1 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction -46} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_eq integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_not exec_pop (print_exec (integer_empty in2 integer_sub in2 -46 boolean_dup_times exec_empty exec_k_when_autoconstructing () ())))
Lexicase best errors: [0 0 0 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction -46} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_eq integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_not exec_pop (print_exec (integer_empty in2 integer_sub in2 -46 boolean_dup_times exec_empty exec_k_when_autoconstructing () ())))
Zero cases best errors: [0 0 0 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (359 361 358 223 96 222 358 242 463 96)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (359 361 358 223 96 222 358 242 463 96)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub})
Best program: (exec_stackdepth integer_add exec_eq integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not exec_pop (print_exec (integer_yank in2 integer_sub)))) ())
Errors: [0 0 0 1 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 24
Size: 30
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.222
Median total errors in population: 7
Error averages by case: (0.641 0.639 0.642 0.777 0.904 0.778 0.642 0.758 0.537 0.904)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.475
Average program size in population (points): 36.965
Average percent parens in population: 0.248
Minimum age in population: 41.35379463434219
Maximum age in population: 45.06177077442408
Average age in population: 43.33125863926485
Median age in population: 43.42694796435535
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 5667334
--- Timings ---
Current time: 1559582763276 milliseconds
Total Time:          74.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.7 seconds, 80.2%
Fitness Testing:      8.4 seconds, 11.3%
Report:               6.2 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: 60                 
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 52                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 62                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 95                 
Correct output: 16                  | Program output: 38                 
Correct output: 7                   | Program output: 88                 
Correct output: 0                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 63                 
Correct output: 18                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 66                 
Correct output: 21                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 62                 
Correct output: -55                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 76                 
Correct output: -88                 | Program output: 73                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 24                 
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 66                 
Correct output: -88                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 95                 
Correct output: 34                  | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 56                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 66                 
Correct output: -42                 | Program output: 21                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 3                  
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: 10                 
Correct output: 8                   | Program output: 59                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 68                 
Correct output: -67                 | Program output: 62                 
Correct output: -48                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 59                 
Correct output: -83                 | Program output: 99                 
Correct output: -12                 | Program output: 60                 
Correct output: -92                 | Program output: 82                 
Correct output: -23                 | Program output: 13                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte exec_eq in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Lexicase best errors: [0 0 0 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte exec_eq in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Zero cases best errors: [0 0 0 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 252 252 127 127 199 199 199 352 252)
Population mean number of elite cases: 2.21
Count of perfect (error zero) individuals by case: (252 252 252 127 127 199 199 199 352 252)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction boolean_dup} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_do*count})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 boolean_dup integer_gte in3 boolean_pop print_integer boolean_dup boolean_not exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (boolean_pop in2) exec_s_when_autoconstructing (integer_yank in2 exec_do*count ()) () ())))
Errors: [0 0 0 1 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 26
Size: 34
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.789
Median total errors in population: 8
Error averages by case: (0.748 0.748 0.748 0.873 0.873 0.801 0.801 0.801 0.648 0.748)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.049
Average program size in population (points): 36.138
Average percent parens in population: 0.241
Minimum age in population: 42.51943166553974
Maximum age in population: 46.58838980644941
Average age in population: 44.85918358822726
Median age in population: 44.91074618138373
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 5865812
--- Timings ---
Current time: 1559582765810 milliseconds
Total Time:          77.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.8 seconds, 80.4%
Fitness Testing:      8.6 seconds, 11.2%
Report:               6.4 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 66                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: 35                 
Correct output: -88                 | Program output: 32                 
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: 87                 
Correct output: -79                 | Program output: 23                 
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: 8                  
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: 39                 
Correct output: -74                 | Program output: 25                 
Correct output: -75                 | Program output: 86                 
Correct output: -12                 | Program output: 3                  
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: 34                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 66                 
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: 36                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_stackdepth exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not boolean_swap boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub))) ())
Lexicase best errors: [1 0 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_stackdepth exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not boolean_swap boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub))) ())
Zero cases best errors: [1 0 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (386 283 283 283 80 283 283 170 170 386)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (386 283 283 283 80 283 283 170 170 386)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth})
Best program: (exec_stackdepth integer_lte integer_mod in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_swap (exec_when (integer_lte exec_pop (print_exec (integer_sub integer_div exec_noop boolean_not) exec_pop (print_exec (integer_yank boolean_not) exec_pop (in4 integer_yank exec_empty integer_stackdepth))))) ())
Errors: [1 0 0 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 29
Size: 38
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 7.393
Median total errors in population: 8
Error averages by case: (0.614 0.717 0.717 0.717 0.92 0.717 0.717 0.83 0.83 0.614)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.826
Average program size in population (points): 34.324
Average percent parens in population: 0.239
Minimum age in population: 43.83988505601883
Maximum age in population: 48.26087847631425
Average age in population: 46.30847468708362
Median age in population: 46.38660546112806
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 6065497
--- Timings ---
Current time: 1559582768290 milliseconds
Total Time:          79.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.0 seconds, 80.5%
Fitness Testing:      8.9 seconds, 11.2%
Report:               6.5 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod integer_stackdepth integer_yankdup integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank) in2 integer_sub exec_do*count (print_exec ()))) ())
Lexicase best errors: [0 0 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod integer_stackdepth integer_yankdup integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank) in2 integer_sub exec_do*count (print_exec ()))) ())
Zero cases best errors: [0 0 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (97 97 287 923 465 190 172 97 171 190)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (97 97 287 923 465 190 172 97 171 190)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 2, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_814} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop})
Best program: (in1 integer_add exec_shove (integer_inc integer_add exec_eq exec_empty) integer_lte integer_mod exec_eq integer_lt boolean_invert_second_then_and exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (exec_rot (exec_pop (exec_empty integer_stackdepth boolean_pop integer_flush) boolean_dup_times print_boolean exec_do*while (exec_empty exec_y_when_autoconstructing (boolean_dup_times print_boolean exec_yank) print_newline)) (boolean_frominteger exec_empty exec_dup_times (tag_exec_814 () integer_swap exec_empty exec_pop ())) ())))) ())
Errors: [0 0 0 0 1 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 54
Size: 71
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 7.311
Median total errors in population: 8
Error averages by case: (0.903 0.903 0.713 0.077 0.535 0.81 0.828 0.903 0.829 0.81)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.307
Average program size in population (points): 33.365
Average percent parens in population: 0.231
Minimum age in population: 44.85246074199677
Maximum age in population: 50.14069710439071
Average age in population: 47.77553625062853
Median age in population: 47.81349793076515
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 6244377
--- Timings ---
Current time: 1559582770784 milliseconds
Total Time:          81.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.1 seconds, 80.7%
Fitness Testing:      9.1 seconds, 11.1%
Report:               6.6 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 66                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: 35                 
Correct output: -88                 | Program output: 32                 
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: 60                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: 70                 
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: 87                 
Correct output: -79                 | Program output: 23                 
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: 8                  
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: 39                 
Correct output: -74                 | Program output: 25                 
Correct output: -75                 | Program output: 86                 
Correct output: -12                 | Program output: 3                  
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: 34                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 66                 
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: 36                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_yank} {:close 1, :instruction print_newline})
Lexicase best program: (exec_stackdepth integer_add exec_eq exec_stackdepth integer_add in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_stackdepth exec_yankdup) (exec_pop (print_exec (integer_yank integer_yankdup) integer_sub exec_do*count (print_exec (exec_shove (exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (integer_rot integer_stackdepth boolean_pop) print_boolean exec_yank)) print_newline)))))
Lexicase best errors: [1 0 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_yank} {:close 1, :instruction print_newline})
Zero cases best program: (exec_stackdepth integer_add exec_eq exec_stackdepth integer_add in4 exec_eq integer_lt in3 exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (exec_stackdepth exec_yankdup) (exec_pop (print_exec (integer_yank integer_yankdup) integer_sub exec_do*count (print_exec (exec_shove (exec_s_when_autoconstructing () (boolean_frominteger integer_gt integer_add) () integer_div exec_dup (exec_pop (integer_rot integer_stackdepth boolean_pop) print_boolean exec_yank)) print_newline)))))
Zero cases best errors: [1 0 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 103 611 207 206 103 103 206 102 373)
Population mean number of elite cases: 2.25
Count of perfect (error zero) individuals by case: (238 103 611 207 206 103 103 206 102 373)
Population mean number of perfect (error zero) cases: 2.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_not})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq boolean_shove boolean_or exec_noop print_integer boolean_dup exec_empty exec_k_when_autoconstructing (in2 boolean_not) ())
Errors: [1 0 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 17
Size: 20
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 7.748
Median total errors in population: 8
Error averages by case: (0.762 0.897 0.389 0.793 0.794 0.897 0.897 0.794 0.898 0.627)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.827
Average program size in population (points): 34.201
Average percent parens in population: 0.235
Minimum age in population: 46.21888050436974
Maximum age in population: 51.5971387505997
Average age in population: 49.19472118577617
Median age in population: 49.24442476802506
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 6433654
--- Timings ---
Current time: 1559582773291 milliseconds
Total Time:          84.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.2 seconds, 80.8%
Fitness Testing:      9.3 seconds, 11.0%
Report:               6.8 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 1, :instruction in2})
Lexicase best program: (exec_shove (integer_inc exec_shove (integer_inc exec_do*while (exec_yankdup in2 print_integer boolean_dup exec_empty integer_stackdepth exec_when (boolean_not) boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (in2 integer_sub exec_do*count (print_exec (in2))))))))
Lexicase best errors: [0 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 1, :instruction in2})
Zero cases best program: (exec_shove (integer_inc exec_shove (integer_inc exec_do*while (exec_yankdup in2 print_integer boolean_dup exec_empty integer_stackdepth exec_when (boolean_not) boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (in2 integer_sub exec_do*count (print_exec (in2))))))))
Zero cases best errors: [0 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (140 934 141 140 394 140 262 394 792 394)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (140 934 141 140 394 140 262 394 792 394)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (exec_shove (integer_inc exec_shove (integer_inc exec_do*while (exec_yankdup in2 print_integer boolean_dup exec_empty integer_stackdepth exec_when (boolean_not) boolean_not) exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (in2 integer_sub exec_do*count (print_exec (in2) exec_s_when_autoconstructing () () ())))))))
Errors: [0 0 0 0 1 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 39
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.269
Median total errors in population: 5
Error averages by case: (0.86 0.066 0.859 0.86 0.606 0.86 0.738 0.606 0.208 0.606)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.63
Average program size in population (points): 32.21
Average percent parens in population: 0.226
Minimum age in population: 47.78751061856747
Maximum age in population: 52.97794369433541
Average age in population: 50.69853430126572
Median age in population: 50.73948196042329
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 6615941
--- Timings ---
Current time: 1559582775978 milliseconds
Total Time:          87.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.5 seconds, 80.9%
Fitness Testing:      9.5 seconds, 10.9%
Report:               7.0 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec})
Lexicase best program: (exec_shove (integer_inc integer_add exec_eq integer_lte integer_mod in4) exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank) in2 integer_sub exec_do*count (print_exec ()))) ())
Lexicase best errors: [1 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 34
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec})
Zero cases best program: (exec_shove (integer_inc integer_add exec_eq integer_lte integer_mod in4) exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_empty exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (print_exec (integer_yank) in2 integer_sub exec_do*count (print_exec ()))) ())
Zero cases best errors: [1 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 34
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (119 930 405 404 3 404 404 930 403 403)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (119 930 405 404 3 404 404 930 403 403)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_empty})
Best program: (exec_do*count (integer_add exec_eq exec_empty) boolean_stackdepth integer_mod boolean_shove exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_swap (exec_k_when_autoconstructing (exec_when (boolean_not) exec_pop (integer_empty)) ()) ())
Errors: [1 0 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 5.595
Median total errors in population: 7
Error averages by case: (0.881 0.07 0.595 0.596 0.997 0.596 0.596 0.07 0.597 0.597)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.646
Average program size in population (points): 32.036
Average percent parens in population: 0.220
Minimum age in population: 48.78751061856747
Maximum age in population: 54.52679817454191
Average age in population: 52.19107298847818
Median age in population: 52.2589867656061
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 6796679
--- Timings ---
Current time: 1559582778622 milliseconds
Total Time:          89.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.8 seconds, 81.1%
Fitness Testing:      9.7 seconds, 10.8%
Report:               7.1 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: 60                 
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 52                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 62                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 95                 
Correct output: 16                  | Program output: 38                 
Correct output: 7                   | Program output: 88                 
Correct output: 0                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 63                 
Correct output: 18                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 66                 
Correct output: 21                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 62                 
Correct output: -55                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 76                 
Correct output: -88                 | Program output: 73                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 24                 
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 66                 
Correct output: -88                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 95                 
Correct output: 34                  | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 56                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 66                 
Correct output: -42                 | Program output: 21                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 3                  
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: 10                 
Correct output: 8                   | Program output: 59                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 68                 
Correct output: -67                 | Program output: 62                 
Correct output: -48                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 59                 
Correct output: -83                 | Program output: 99                 
Correct output: -12                 | Program output: 60                 
Correct output: -92                 | Program output: 82                 
Correct output: -23                 | Program output: 13                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank})
Lexicase best program: (exec_shove (exec_stackdepth) exec_do*while (exec_eq exec_empty) integer_lte integer_mod in4 boolean_dup integer_gte in3 boolean_pop print_integer boolean_dup boolean_not exec_pop (boolean_swap boolean_not) exec_pop (print_exec (integer_yank)))
Lexicase best errors: [0 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank})
Zero cases best program: (exec_shove (exec_stackdepth) exec_do*while (exec_eq exec_empty) integer_lte integer_mod in4 boolean_dup integer_gte in3 boolean_pop print_integer boolean_dup boolean_not exec_pop (boolean_swap boolean_not) exec_pop (print_exec (integer_yank)))
Zero cases best errors: [0 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 108 108 940 593 187 127 127 593 79)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (108 108 108 940 593 187 127 127 593 79)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_do*count})
Best program: (exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 boolean_dup integer_gte in3 boolean_pop print_integer boolean_dup boolean_not exec_pop (print_exec (integer_yank in2 integer_sub exec_do*count (print_exec (in2) exec_s_when_autoconstructing (integer_yank in2 exec_do*count ()) () ()))))
Errors: [0 0 0 0 1 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 35
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 7.03
Median total errors in population: 7
Error averages by case: (0.892 0.892 0.892 0.06 0.407 0.813 0.873 0.873 0.407 0.921)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.607
Average program size in population (points): 33.299
Average percent parens in population: 0.219
Minimum age in population: 50.97883628308773
Maximum age in population: 55.50370065524476
Average age in population: 53.75480121628565
Median age in population: 53.8421244975907
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 7004756
--- Timings ---
Current time: 1559582780872 milliseconds
Total Time:          92.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.7 seconds, 81.2%
Fitness Testing:     10.0 seconds, 10.8%
Report:               7.3 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: 50                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38                 
Correct output: -62                 | Program output: 91                 
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92                 
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: 14                 
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92                 
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: 14                 
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction 45} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_stackdepth 45 exec_eq exec_empty integer_dec exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (integer_mult boolean_not) (exec_pop (exec_do*count ())))
Lexicase best errors: [1 0 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction 45} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_stackdepth 45 exec_eq exec_empty integer_dec exec_stackdepth integer_add exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_k_when_autoconstructing (integer_mult boolean_not) (exec_pop (exec_do*count ())))
Zero cases best errors: [1 0 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (374 210 373 7 552 342 210 210 7 343)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (374 210 373 7 552 342 210 210 7 343)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove})
Best program: (exec_stackdepth integer_add exec_eq integer_add in1 integer_mod in4 exec_eq integer_lt exec_yankdup in2 print_integer boolean_dup exec_empty exec_swap (exec_when (boolean_shove)) ())
Errors: [1 0 1 1 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 17
Size: 21
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 7.372
Median total errors in population: 7
Error averages by case: (0.626 0.79 0.627 0.993 0.448 0.658 0.79 0.79 0.993 0.657)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.027
Average program size in population (points): 36.764
Average percent parens in population: 0.229
Minimum age in population: 52.33628483820939
Maximum age in population: 56.98292507206497
Average age in population: 55.26917919633613
Median age in population: 55.33298729654052
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.521
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 7198477
--- Timings ---
Current time: 1559582783327 milliseconds
Total Time:          94.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.8 seconds, 81.3%
Fitness Testing:     10.2 seconds, 10.8%
Report:               7.4 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 554
Test mean error for best: 0.55400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: -45                
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 67                 
Correct output: 2                   | Program output: 89                 
Correct output: 27                  | Program output: 99                 
Correct output: 4                   | Program output: 97                 
Correct output: 4                   | Program output: 32                 
Correct output: 0                   | Program output: 53                 
Correct output: 4                   | Program output: 49                 
Correct output: 16                  | Program output: 27                 
Correct output: 7                   | Program output: 53                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 24                 
Correct output: 6                   | Program output: 7                  
Correct output: 18                  | Program output: 59                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 55                 
Correct output: 3                   | Program output: 69                 
Correct output: 21                  | Program output: 48                 
Correct output: 6                   | Program output: 38                 
Correct output: 7                   | Program output: 34                 
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: 78                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 100                
Correct output: -88                 | Program output: 86                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 4                  
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 48                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 76                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -33                
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -66                
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 31                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 70                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -37                
Correct output: -12                 | Program output: 34                 
Correct output: -92                 | Program output: 74                 
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_add exec_empty integer_gt exec_eq in4 exec_eq integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Lexicase best errors: [1 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_add exec_empty integer_gt exec_eq in4 exec_eq integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Zero cases best errors: [1 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (303 303 265 166 166 303 266 178 166 303)
Population mean number of elite cases: 2.42
Count of perfect (error zero) individuals by case: (303 303 265 166 166 303 266 178 166 303)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_add exec_empty integer_gt exec_eq in4 exec_eq integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Errors: [1 1 0 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 21
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.581
Median total errors in population: 8
Error averages by case: (0.697 0.697 0.735 0.834 0.834 0.697 0.734 0.822 0.834 0.697)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.936
Average program size in population (points): 34.865
Average percent parens in population: 0.219
Minimum age in population: 53.39314893633127
Maximum age in population: 58.36580618839071
Average age in population: 56.76926149957263
Median age in population: 56.80567900183814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 7441303
--- Timings ---
Current time: 1559582786058 milliseconds
Total Time:          96.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.8 seconds, 81.3%
Fitness Testing:     10.5 seconds, 10.8%
Report:               7.5 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 568
Test mean error for best: 0.56800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_add exec_empty integer_gt exec_empty integer_lte integer_mod in4 exec_eq exec_eq integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Lexicase best errors: [1 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 24
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_add exec_empty integer_gt exec_empty integer_lte integer_mod in4 exec_eq exec_eq integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Zero cases best errors: [1 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 24
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (54 509 479 91 479 418 509 927 91 352)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (54 509 479 91 479 418 509 927 91 352)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 exec_eq) integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Errors: [1 0 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 15
Size: 22
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 6.091
Median total errors in population: 5
Error averages by case: (0.946 0.491 0.521 0.909 0.521 0.582 0.491 0.073 0.909 0.648)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.344
Average program size in population (points): 27.032
Average percent parens in population: 0.247
Minimum age in population: 55.14577389077749
Maximum age in population: 60.30089798479457
Average age in population: 59.05957847218127
Median age in population: 59.29867116815149
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 403
Genome diversity (% unique genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 418
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 7834224
--- Timings ---
Current time: 1559582789366 milliseconds
Total Time:         100.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.4 seconds, 81.2%
Fitness Testing:     10.9 seconds, 10.8%
Report:               7.9 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 568
Test mean error for best: 0.56800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 91                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 35                 
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 43                 
Correct output: -42                 | Program output: 11                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 58                 
Correct output: -83                 | Program output: 98                 
Correct output: -12                 | Program output: 55                 
Correct output: -92                 | Program output: 42                 
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 exec_eq) integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Lexicase best errors: [0 0 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 22
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 exec_eq) integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Zero cases best errors: [0 0 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 22
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (529 728 720 727 115 115 725 599 116 595)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (529 728 720 727 115 115 725 599 116 595)
Population mean number of perfect (error zero) cases: 4.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 exec_eq) integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Errors: [0 0 0 0 1 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 15
Size: 22
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 5.031
Median total errors in population: 6
Error averages by case: (0.471 0.272 0.28 0.273 0.885 0.885 0.275 0.401 0.884 0.405)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.988
Average program size in population (points): 27.596
Average percent parens in population: 0.243
Minimum age in population: 56.14577389077749
Maximum age in population: 62.23076357218997
Average age in population: 60.79287190875518
Median age in population: 60.83650970005237
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 212
Genome diversity (% unique genomes):	 0.373
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.342
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 8299144
--- Timings ---
Current time: 1559582792032 milliseconds
Total Time:         103.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.3 seconds, 80.9%
Fitness Testing:     11.3 seconds, 11.0%
Report:               8.3 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 35                 
Correct output: -88                 | Program output: 32                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 60                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: 87                 
Correct output: -79                 | Program output: 23                 
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 3                  
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: 34                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: 36                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_gt exec_yankdup in2 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Lexicase best errors: [0 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 21
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_gt exec_yankdup in2 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Zero cases best errors: [0 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 21
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 282 592 17 691 612 177 10 572 329)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (283 282 592 17 691 612 177 10 572 329)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (exec_eq exec_empty integer_lte integer_mod in4 exec_eq integer_gt exec_yankdup in2 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Errors: [0 1 1 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 15
Size: 21
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.435
Median total errors in population: 6
Error averages by case: (0.717 0.718 0.408 0.983 0.309 0.388 0.823 0.99 0.428 0.671)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.858
Average program size in population (points): 24.432
Average percent parens in population: 0.269
Minimum age in population: 57.14577389077749
Maximum age in population: 63.99764926702483
Average age in population: 62.49000090126504
Median age in population: 62.50336596088118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.385
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 219
Syntactic diversity (% unique Push programs):	 0.341
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 8934416
--- Timings ---
Current time: 1559582795009 milliseconds
Total Time:         105.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.3 seconds, 80.5%
Fitness Testing:     11.9 seconds, 11.3%
Report:               8.6 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 605
Test mean error for best: 0.60500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 88                 
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 9767               
Correct output: 2                   | Program output: 9189               
Correct output: 27                  | Program output: 9899               
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 432                
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 9649               
Correct output: 16                  | Program output: 2127               
Correct output: 7                   | Program output: 4053               
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 38-25              
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 87                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -29                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: 53-47              
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: -2553              
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74-19             
Correct output: -75                 | Program output: -24                
Correct output: -12                 | Program output: 92-11              
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42-33             
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61-67              
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92-23              
Correct output: -70                 | Program output: 13                 
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 50-81              
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_add exec_empty integer_gt exec_empty integer_lte integer_mod in4 exec_eq exec_shove (integer_inc integer_add exec_eq exec_empty) integer_lte exec_stackdepth in2 in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Lexicase best errors: [0 0 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_add exec_empty integer_gt exec_empty integer_lte integer_mod in4 exec_eq exec_shove (integer_inc integer_add exec_eq exec_empty) integer_lte exec_stackdepth in2 in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Zero cases best errors: [0 0 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (623 328 392 302 939 3 399 145 352 464)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (623 328 392 302 939 3 399 145 352 464)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_add exec_empty in4 in2 in4 exec_eq integer_lt in3 exec_do*times (print_integer boolean_xor exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Errors: [0 0 1 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 15
Size: 21
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.053
Median total errors in population: 6
Error averages by case: (0.377 0.672 0.608 0.698 0.061 0.997 0.601 0.855 0.648 0.536)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.708
Average program size in population (points): 23.217
Average percent parens in population: 0.282
Minimum age in population: 60.45069190406139
Maximum age in population: 65.76705825299814
Average age in population: 63.8163238763551
Median age in population: 63.91027964221053
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 245
Genome diversity (% unique genomes):	 0.309
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 251
Syntactic diversity (% unique Push programs):	 0.278
Total error diversity:				 0.006
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 9658956
--- Timings ---
Current time: 1559582797771 milliseconds
Total Time:         108.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.1 seconds, 80.1%
Fitness Testing:     12.6 seconds, 11.6%
Report:               9.0 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 67                 
Correct output: 2                   | Program output: 89                 
Correct output: 27                  | Program output: 99                 
Correct output: 4                   | Program output: 97                 
Correct output: 4                   | Program output: 32                 
Correct output: 0                   | Program output: 53                 
Correct output: 4                   | Program output: 49                 
Correct output: 16                  | Program output: 27                 
Correct output: 7                   | Program output: 53                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 24                 
Correct output: 6                   | Program output: 7                  
Correct output: 18                  | Program output: 59                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 55                 
Correct output: 3                   | Program output: 69                 
Correct output: 21                  | Program output: 48                 
Correct output: 6                   | Program output: 38                 
Correct output: 7                   | Program output: 34                 
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: 86                 
Correct output: -71                 | Program output: 67                 
Correct output: -88                 | Program output: 70                 
Correct output: -74                 | Program output: 4                  
Correct output: -57                 | Program output: 36                 
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 76                 
Correct output: -31                 | Program output: 70                 
Correct output: -79                 | Program output: -47                
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: 53                 
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: 58                 
Correct output: -74                 | Program output: -19                
Correct output: -75                 | Program output: -52                
Correct output: -12                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: 59                 
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -33                
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 31                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 70                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -37                
Correct output: -12                 | Program output: 34                 
Correct output: -92                 | Program output: 74                 
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_gte exec_empty integer_gt exec_dup (in4 exec_eq) integer_lt boolean_invert_first_then_and exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Lexicase best errors: [0 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 22
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_gte exec_empty integer_gt exec_dup (in4 exec_eq) integer_lt boolean_invert_first_then_and exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Zero cases best errors: [0 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 22
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (284 94 261 458 285 351 1000 953 285 183)
Population mean number of elite cases: 4.15
Count of perfect (error zero) individuals by case: (284 94 261 458 285 351 0 953 285 183)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_gte exec_empty integer_gt exec_dup (in4 exec_eq) integer_lt boolean_invert_first_then_and exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Errors: [0 1 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 15
Size: 22
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 6.846
Median total errors in population: 7
Error averages by case: (0.716 0.906 0.739 0.542 0.715 0.649 1.0 0.047 0.715 0.817)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 15.69
Average program size in population (points): 22.178
Average percent parens in population: 0.298
Minimum age in population: 63.29808301659659
Maximum age in population: 67.253712610722
Average age in population: 65.6280600025611
Median age in population: 65.72057154666277
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.303
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.268
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 10327358
--- Timings ---
Current time: 1559582800591 milliseconds
Total Time:         111.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.0 seconds, 79.8%
Fitness Testing:     13.2 seconds, 11.8%
Report:               9.3 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 554
Test mean error for best: 0.55400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: -45                
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 67                 
Correct output: 2                   | Program output: 89                 
Correct output: 27                  | Program output: 99                 
Correct output: 4                   | Program output: 97                 
Correct output: 4                   | Program output: 32                 
Correct output: 0                   | Program output: 53                 
Correct output: 4                   | Program output: 49                 
Correct output: 16                  | Program output: 27                 
Correct output: 7                   | Program output: 53                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 24                 
Correct output: 6                   | Program output: 7                  
Correct output: 18                  | Program output: 59                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 55                 
Correct output: 3                   | Program output: 69                 
Correct output: 21                  | Program output: 48                 
Correct output: 6                   | Program output: 38                 
Correct output: 7                   | Program output: 34                 
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: 78                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 100                
Correct output: -88                 | Program output: 86                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 4                  
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 48                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 76                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -33                
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -66                
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 31                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 70                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -37                
Correct output: -12                 | Program output: 34                 
Correct output: -92                 | Program output: 74                 
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction tag_boolean_42} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Lexicase best errors: [0 0 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction tag_boolean_42} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Zero cases best errors: [0 0 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (700 234 124 325 14 204 698 205 698 139)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (700 234 124 325 14 204 698 205 698 139)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Errors: [0 0 1 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 9
Size: 15
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 6.659
Median total errors in population: 7
Error averages by case: (0.3 0.766 0.876 0.675 0.986 0.796 0.302 0.795 0.302 0.861)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.324
Average program size in population (points): 22.049
Average percent parens in population: 0.308
Minimum age in population: 64.52915034887246
Maximum age in population: 68.84647670580466
Average age in population: 67.08960078718027
Median age in population: 67.14381860149251
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 272
Genome diversity (% unique genomes):	 0.295
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 306
Syntactic diversity (% unique Push programs):	 0.26
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 11303663
--- Timings ---
Current time: 1559582803601 milliseconds
Total Time:         114.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.8 seconds, 79.3%
Fitness Testing:     14.0 seconds, 12.2%
Report:               9.7 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 502
Test mean error for best: 0.50200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 78                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 37                 
Correct output: 4                   | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 67                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 47                 
Correct output: 18                  | Program output: 35                 
Correct output: 16                  | Program output: 46                 
Correct output: 34                  | Program output: 99                 
Correct output: 3                   | Program output: 90                 
Correct output: 21                  | Program output: 87                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 37                 
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 72                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 99                 
Correct output: -90                 | Program output: -35                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -46                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 79                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -46                
Correct output: -88                 | Program output: -53                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42-33             
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -33                
Correct output: 8                   | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -58                
Correct output: 61                  | Program output: 71                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (exec_eq exec_empty integer_lte integer_mod in4 boolean_dup integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Lexicase best errors: [0 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (exec_eq exec_empty integer_lte integer_mod in4 boolean_dup integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Zero cases best errors: [0 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (798 175 670 370 673 2 500 379 379 455)
Population mean number of elite cases: 4.40
Count of perfect (error zero) individuals by case: (798 175 670 370 673 2 500 379 379 455)
Population mean number of perfect (error zero) cases: 4.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_add exec_empty in4 in2 in4 exec_eq integer_lt in3 exec_do*times (exec_eq) integer_lt in3 exec_do*times (exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))))
Errors: [0 1 0 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.599
Median total errors in population: 5
Error averages by case: (0.202 0.825 0.33 0.63 0.327 0.998 0.5 0.621 0.621 0.545)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.152
Average program size in population (points): 22.757
Average percent parens in population: 0.296
Minimum age in population: 65.52915034887246
Maximum age in population: 70.2058604203155
Average age in population: 68.4372408350991
Median age in population: 68.49226753321051
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.305
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.265
Total error diversity:				 0.007
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 12033083
--- Timings ---
Current time: 1559582806389 milliseconds
Total Time:         117.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.6 seconds, 78.9%
Fitness Testing:     14.6 seconds, 12.4%
Report:              10.0 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 495
Test mean error for best: 0.49500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: -45                
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 97                 
Correct output: 2                   | Program output: 91                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 96                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -16                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -32                
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -47                
Correct output: -73                 | Program output: -55                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -19                
Correct output: -75                 | Program output: -52                
Correct output: -12                 | Program output: -11                
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -33                
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -66                
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -37                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -47                
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_add exec_empty in4 in2 integer_rot exec_eq integer_lt in3 exec_do*times (exec_eq) integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Lexicase best errors: [0 0 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_add exec_empty in4 in2 integer_rot exec_eq integer_lt in3 exec_do*times (exec_eq) integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Zero cases best errors: [0 0 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (58 148 748 58 473 456 525 456 199 206)
Population mean number of elite cases: 3.33
Count of perfect (error zero) individuals by case: (58 148 748 58 473 456 525 456 199 206)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_add exec_empty in4 in2 integer_rot exec_eq integer_lt in3 exec_do*times (exec_eq) integer_lt in3 exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Errors: [0 0 1 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.673
Median total errors in population: 6
Error averages by case: (0.942 0.852 0.252 0.942 0.527 0.544 0.475 0.544 0.801 0.794)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.503
Average program size in population (points): 23.161
Average percent parens in population: 0.292
Minimum age in population: 66.52915034887246
Maximum age in population: 71.78783059192648
Average age in population: 69.94549675202914
Median age in population: 70.01888666741453
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.342
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.303
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 12958972
--- Timings ---
Current time: 1559582809367 milliseconds
Total Time:         120.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.5 seconds, 78.5%
Fitness Testing:     15.4 seconds, 12.8%
Report:              10.3 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 612
Test mean error for best: 0.61200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50-50             
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 88                 
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 9767               
Correct output: 2                   | Program output: 9189               
Correct output: 27                  | Program output: 9899               
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 432                
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 9649               
Correct output: 16                  | Program output: 2127               
Correct output: 7                   | Program output: 4053               
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -88-88             
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 38-25              
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58-58             
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42-33             
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92-92             
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: -33-33             
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61-67              
Correct output: -48                 | Program output: -48-48             
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92-23              
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_add exec_empty in4 in2 in4 in3 exec_do*times (exec_eq) integer_lt in3 exec_do*times (exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))))
Lexicase best errors: [0 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_add exec_empty in4 in2 in4 in3 exec_do*times (exec_eq) integer_lt in3 exec_do*times (exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))))
Zero cases best errors: [0 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (113 2 458 158 622 558 456 910 456 906)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (113 2 458 158 622 558 456 910 456 906)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_add exec_empty in4 in2 in4 in3 exec_do*times (exec_eq) integer_lt in3 exec_do*times (exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))))
Errors: [0 1 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 5.361
Median total errors in population: 5
Error averages by case: (0.887 0.998 0.542 0.842 0.378 0.442 0.544 0.09 0.544 0.094)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.558
Average program size in population (points): 26.909
Average percent parens in population: 0.274
Minimum age in population: 68.67841141832093
Maximum age in population: 73.15280708993632
Average age in population: 71.43545227710482
Median age in population: 71.50952764866167
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 194
Genome diversity (% unique genomes):	 0.334
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 216
Syntactic diversity (% unique Push programs):	 0.289
Total error diversity:				 0.009
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 13745690
--- Timings ---
Current time: 1559582812250 milliseconds
Total Time:         123.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        96.3 seconds, 78.2%
Fitness Testing:     16.1 seconds, 13.1%
Report:              10.6 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: 60                 
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 52                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 62                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 95                 
Correct output: 16                  | Program output: 38                 
Correct output: 7                   | Program output: 88                 
Correct output: 0                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 63                 
Correct output: 18                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 66                 
Correct output: 21                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 62                 
Correct output: -55                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 76                 
Correct output: -88                 | Program output: 73                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 24                 
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 66                 
Correct output: -88                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 95                 
Correct output: 34                  | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 56                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 66                 
Correct output: -42                 | Program output: 21                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 3                  
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: 10                 
Correct output: 8                   | Program output: 59                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 68                 
Correct output: -67                 | Program output: 62                 
Correct output: -48                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 59                 
Correct output: -83                 | Program output: 99                 
Correct output: -12                 | Program output: 60                 
Correct output: -92                 | Program output: 82                 
Correct output: -23                 | Program output: 13                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_eq} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_add exec_empty integer_gt exec_empty integer_lte integer_mod boolean_invert_first_then_and exec_eq exec_eq integer_lt in3 exec_do*times (in4 exec_eq) integer_lt in3 exec_do*times (exec_eq) print_exec () in3 exec_do*times (exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))))
Lexicase best errors: [1 1 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_eq} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_add exec_empty integer_gt exec_empty integer_lte integer_mod boolean_invert_first_then_and exec_eq exec_eq integer_lt in3 exec_do*times (in4 exec_eq) integer_lt in3 exec_do*times (exec_eq) print_exec () in3 exec_do*times (exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))))
Zero cases best errors: [1 1 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 501 406 278 760 82 33 958 279 105)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (3 501 406 278 760 82 33 958 279 105)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_add exec_empty in4 in2 in4 exec_eq integer_lt in3 exec_do*times (exec_eq) exec_do*count () in3 boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Errors: [1 1 0 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.595
Median total errors in population: 7
Error averages by case: (0.997 0.499 0.594 0.722 0.24 0.918 0.967 0.042 0.721 0.895)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.284
Average program size in population (points): 26.984
Average percent parens in population: 0.285
Minimum age in population: 71.91769569182935
Maximum age in population: 73.88227782286813
Average age in population: 73.11661533998199
Median age in population: 73.26430111960669
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 427
Genome diversity (% unique genomes):	 0.273
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 446
Syntactic diversity (% unique Push programs):	 0.247
Total error diversity:				 0.006
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 14444969
--- Timings ---
Current time: 1559582815023 milliseconds
Total Time:         126.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.2 seconds, 77.9%
Fitness Testing:     16.8 seconds, 13.3%
Report:              11.0 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 612
Test mean error for best: 0.61200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 64                 
Correct output: -85                 | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50-50             
Correct output: -68                 | Program output: -3                 
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 88                 
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 9767               
Correct output: 2                   | Program output: 9189               
Correct output: 27                  | Program output: 9899               
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 432                
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 9649               
Correct output: 16                  | Program output: 2127               
Correct output: 7                   | Program output: 4053               
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -88-88             
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 38-25              
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58-58             
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42-33             
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92-92             
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: -33-33             
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61-67              
Correct output: -48                 | Program output: -48-48             
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 92-23              
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_add exec_empty integer_gt exec_empty integer_lte integer_mod boolean_invert_first_then_and exec_eq in1 integer_add exec_empty in4 in2 in4 in3 exec_do*times (exec_eq) integer_lt in3 exec_do*times (exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))))
Lexicase best errors: [0 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_add exec_empty integer_gt exec_empty integer_lte integer_mod boolean_invert_first_then_and exec_eq in1 integer_add exec_empty in4 in2 in4 in3 exec_do*times (exec_eq) integer_lt in3 exec_do*times (exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))))
Zero cases best errors: [0 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (913 221 218 445 534 755 170 319 169 751)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (913 221 218 445 534 755 170 319 169 751)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_add exec_empty in4 in2 in4 in3 exec_do*times (exec_eq) integer_lt in3 exec_do*times (exec_do*times (print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))))
Errors: [0 1 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 5.505
Median total errors in population: 5
Error averages by case: (0.087 0.779 0.782 0.555 0.466 0.245 0.83 0.681 0.831 0.249)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.309
Average program size in population (points): 27.144
Average percent parens in population: 0.293
Minimum age in population: 72.91769569182935
Maximum age in population: 75.74380024224476
Average age in population: 74.37775891465789
Median age in population: 74.53405090399946
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 188
Genome diversity (% unique genomes):	 0.353
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.309
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 14822995
--- Timings ---
Current time: 1559582817616 milliseconds
Total Time:         128.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.0 seconds, 77.8%
Fitness Testing:     17.2 seconds, 13.4%
Report:              11.2 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 348
Test mean error for best: 0.34800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 73                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -36                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -34                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 22                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction tag_boolean_42} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction tag_boolean_42} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (521 308 463 182 546 657 516 90 513 636)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (521 308 463 182 546 657 516 90 513 636)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (in1 integer_add exec_empty in4 in2 in4 in3 exec_do*times (exec_eq) integer_lt in3 exec_do*times (exec_eq) exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing () ()))
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 20
Size: 27
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 5.568
Median total errors in population: 5
Error averages by case: (0.479 0.692 0.537 0.818 0.454 0.343 0.484 0.91 0.487 0.364)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.266
Average program size in population (points): 26.995
Average percent parens in population: 0.288
Minimum age in population: 74.26430111960669
Maximum age in population: 77.401558581701
Average age in population: 75.96703843210706
Median age in population: 76.0126241239352
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 208
Genome diversity (% unique genomes):	 0.312
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 247
Syntactic diversity (% unique Push programs):	 0.28
Total error diversity:				 0.009
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 15449195
--- Timings ---
Current time: 1559582820357 milliseconds
Total Time:         131.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.9 seconds, 77.6%
Fitness Testing:     17.8 seconds, 13.5%
Report:              11.6 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 335
Test mean error for best: 0.33500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 52                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 95                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -54                
Correct output: -84                 | Program output: -9                 
Correct output: -96                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: 24                 
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -45                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: 26                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 53                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: -29                
Correct output: -26                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -54                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: 61                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -17                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 13                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -39                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -39                
Correct output: -92                 | Program output: -10                
Correct output: -81                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_empty exec_empty integer_gt in3 in2 in4 exec_eq integer_lt in3 exec_do*times (exec_eq) exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (in3 exec_do*times (exec_eq)) (exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_empty exec_empty integer_gt in3 in2 in4 exec_eq integer_lt in3 exec_do*times (exec_eq) exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (in3 exec_do*times (exec_eq)) (exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (78 808 744 768 451 803 620 579 773 620)
Population mean number of elite cases: 6.24
Count of perfect (error zero) individuals by case: (78 808 744 768 451 803 620 579 773 620)
Population mean number of perfect (error zero) cases: 6.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 2, :instruction tag_boolean_42} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_empty exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 in4 exec_eq integer_lt in3 exec_do*times (exec_eq) exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 3.756
Median total errors in population: 3
Error averages by case: (0.922 0.192 0.256 0.232 0.549 0.197 0.38 0.421 0.227 0.38)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.425
Average program size in population (points): 26.933
Average percent parens in population: 0.280
Minimum age in population: 75.34339841696274
Maximum age in population: 79.01229231506154
Average age in population: 77.60665335905158
Median age in population: 77.68162422752162
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 170
Genome diversity (% unique genomes):	 0.302
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.271
Total error diversity:				 0.009
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 16002128
--- Timings ---
Current time: 1559582823084 milliseconds
Total Time:         134.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.8 seconds, 77.4%
Fitness Testing:     18.3 seconds, 13.7%
Report:              11.8 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 208
Test mean error for best: 0.20800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: -45                
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 49                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -32                
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction tag_boolean_42} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction tag_boolean_42} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (954 442 592 440 597 440 938 922 691 954)
Population mean number of elite cases: 6.97
Count of perfect (error zero) individuals by case: (954 442 592 440 597 440 938 922 691 954)
Population mean number of perfect (error zero) cases: 6.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction tag_boolean_42} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 3.03
Median total errors in population: 4
Error averages by case: (0.046 0.558 0.408 0.56 0.403 0.56 0.062 0.078 0.309 0.046)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.566
Average program size in population (points): 28.095
Average percent parens in population: 0.268
Minimum age in population: 77.16525357484106
Maximum age in population: 80.34318109890393
Average age in population: 79.25530091227532
Median age in population: 79.17616734329476
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 257
Genome diversity (% unique genomes):	 0.308
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 269
Syntactic diversity (% unique Push programs):	 0.26
Total error diversity:				 0.009
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 16318358
--- Timings ---
Current time: 1559582825507 milliseconds
Total Time:         136.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       105.7 seconds, 77.3%
Fitness Testing:     18.7 seconds, 13.7%
Report:              12.1 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 208
Test mean error for best: 0.20800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: -45                
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 49                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -32                
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction tag_boolean_42} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Lexicase best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while (integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction tag_boolean_42} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Zero cases best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while (integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (576 767 575 937 613 943 812 820 576 767)
Population mean number of elite cases: 7.39
Count of perfect (error zero) individuals by case: (576 767 575 937 613 943 812 820 576 767)
Population mean number of perfect (error zero) cases: 7.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction tag_boolean_42} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when})
Best program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 2.614
Median total errors in population: 2
Error averages by case: (0.424 0.233 0.425 0.063 0.387 0.057 0.188 0.18 0.424 0.233)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.463
Average program size in population (points): 28.077
Average percent parens in population: 0.271
Minimum age in population: 79.04339290413763
Maximum age in population: 82.08840182810113
Average age in population: 80.87391455553758
Median age in population: 80.99503930596568
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 227
Genome diversity (% unique genomes):	 0.342
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 253
Syntactic diversity (% unique Push programs):	 0.292
Total error diversity:				 0.011
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 16625575
--- Timings ---
Current time: 1559582827910 milliseconds
Total Time:         139.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.5 seconds, 77.3%
Fitness Testing:     19.1 seconds, 13.7%
Report:              12.3 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 53
Successful program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 28


Auto-simplifying with starting size: 28
step: 0
program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 500
program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 1000
program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 1500
program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 2000
program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 2500
program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 3000
program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 3500
program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 4000
program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 4500
program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 5000
program: (in1 integer_add exec_empty integer_gt exec_dup (in4 tag_boolean_42) integer_lt in3 in2 exec_do*while () integer_min exec_do*while () integer_min boolean_not print_integer boolean_dup exec_dup_times (exec_k_when_autoconstructing (exec_when ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 208
Test mean error for best: 0.20800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: -45                
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 49                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -32                
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
;;******************************
