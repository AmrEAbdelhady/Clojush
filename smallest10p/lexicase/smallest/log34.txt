Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[8 8 8 89] 8] [[-14 -14 -14 16] -14] [[-40 -40 3 -40] -40] [[-31 23 -31 -31] -31] [[-41 -57 -41 -41] -57] [[53 67 53 53] 53] [[-20 -20 -20 -16] -20] [[-45 49 49 49] -45] [[-48 -48 83 -48] -48] [[-91 -91 -91 -97] -97] [(-65 -65 -65 -65) -65] [(10 10 10 10) 10] [(-32 -32 -32 -32) -32] [(34 34 34 34) 34] [(-22 -22 -22 -22) -22] [(83 18 93 54) 18] [(80 35 11 79) 11] [(3 40 63 83) 3] [(99 81 18 72) 18] [(52 63 51 39) 39] [(33 80 67 79) 33] [(75 78 53 29) 29] [(98 84 76 33) 33] [(20 62 86 91) 20] [(1 77 95 20) 1] [(68 5 89 31) 5] [(6 85 60 89) 6] [(75 21 75 0) 0] [(95 44 46 66) 44] [(35 25 57 2) 2] [(56 25 58 38) 25] [(65 19 74 29) 19] [(11 73 46 60) 11] [(77 88 93 56) 56] [(77 16 33 36) 16] [(84 -52 -60 -6) -60] [(54 -99 17 -12) -99] [(-51 61 76 -20) -51] [(84 -2 -20 97) -20] [(59 42 61 70) 42] [(-20 38 -64 41) -64] [(-12 65 -61 25) -61] [(72 -36 64 55) -36] [(-14 63 83 49) -14] [(7 25 70 33) 7] [(71 -42 -73 22) -73] [(-44 -54 63 -28) -54] [(52 -75 -98 -33) -98] [(-88 30 -75 42) -88] [(61 -30 -10 -52) -52] [(-9 2 30 21) -9] [(-71 -48 -77 30) -77] [(-91 -59 71 33) -91] [(-67 -9 84 -21) -67] [(68 60 58 -51) -51] [(10 93 -23 -96) -96] [(15 34 -28 29) -28] [(-64 31 -69 59) -69] [(63 -81 43 28) -81] [(-40 80 67 -54) -54] [(-68 51 -82 25) -82] [(29 12 1 -70) -70] [(-83 -47 89 -50) -83] [(-68 56 35 -6) -68] [(-31 -51 73 -15) -51] [(32 -10 67 -4) -10] [(45 53 -37 -83) -83] [(98 -32 85 19) -32] [(-61 -61 -76 -45) -76] [(97 -50 36 99) -50] [(-47 60 37 -52) -52] [(-69 -35 52 -81) -81] [(38 90 99 49) 38] [(-86 33 -20 83) -86] [(-41 -99 26 -65) -99] [(-42 -18 -4 -76) -76] [(-95 53 95 -36) -95] [(83 -80 -18 54) -80] [(26 -43 -63 54) -63] [(-40 83 -81 92) -81] [(-28 -51 -24 -83) -83] [(82 -48 -88 -38) -88] [(7 -13 90 66) -13] [(19 -2 -65 64) -65] [(95 -91 -50 66) -91] [(13 -7 -80 -45) -80] [(-59 26 -46 4) -59] [(-66 21 -25 -47) -66] [(-96 -35 -54 -1) -96] [(6 78 26 4) 4] [(-4 -88 31 66) -88] [(18 15 38 2) 2] [(86 -30 44 -20) -30] [(-4 44 27 65) -4] [(46 -85 -74 5) -85])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[8 8 8 89] 8]
Train Case:   6 | Input/Output: [[-14 -14 -14 16] -14]
Train Case:   7 | Input/Output: [[-40 -40 3 -40] -40]
Train Case:   8 | Input/Output: [[-31 23 -31 -31] -31]
Train Case:   9 | Input/Output: [[-41 -57 -41 -41] -57]
Train Case:  10 | Input/Output: [[53 67 53 53] 53]
Train Case:  11 | Input/Output: [[-20 -20 -20 -16] -20]
Train Case:  12 | Input/Output: [[-45 49 49 49] -45]
Train Case:  13 | Input/Output: [[-48 -48 83 -48] -48]
Train Case:  14 | Input/Output: [[-91 -91 -91 -97] -97]
Train Case:  15 | Input/Output: [(-65 -65 -65 -65) -65]
Train Case:  16 | Input/Output: [(10 10 10 10) 10]
Train Case:  17 | Input/Output: [(-32 -32 -32 -32) -32]
Train Case:  18 | Input/Output: [(34 34 34 34) 34]
Train Case:  19 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:  20 | Input/Output: [(83 18 93 54) 18]
Train Case:  21 | Input/Output: [(80 35 11 79) 11]
Train Case:  22 | Input/Output: [(3 40 63 83) 3]
Train Case:  23 | Input/Output: [(99 81 18 72) 18]
Train Case:  24 | Input/Output: [(52 63 51 39) 39]
Train Case:  25 | Input/Output: [(33 80 67 79) 33]
Train Case:  26 | Input/Output: [(75 78 53 29) 29]
Train Case:  27 | Input/Output: [(98 84 76 33) 33]
Train Case:  28 | Input/Output: [(20 62 86 91) 20]
Train Case:  29 | Input/Output: [(1 77 95 20) 1]
Train Case:  30 | Input/Output: [(68 5 89 31) 5]
Train Case:  31 | Input/Output: [(6 85 60 89) 6]
Train Case:  32 | Input/Output: [(75 21 75 0) 0]
Train Case:  33 | Input/Output: [(95 44 46 66) 44]
Train Case:  34 | Input/Output: [(35 25 57 2) 2]
Train Case:  35 | Input/Output: [(56 25 58 38) 25]
Train Case:  36 | Input/Output: [(65 19 74 29) 19]
Train Case:  37 | Input/Output: [(11 73 46 60) 11]
Train Case:  38 | Input/Output: [(77 88 93 56) 56]
Train Case:  39 | Input/Output: [(77 16 33 36) 16]
Train Case:  40 | Input/Output: [(84 -52 -60 -6) -60]
Train Case:  41 | Input/Output: [(54 -99 17 -12) -99]
Train Case:  42 | Input/Output: [(-51 61 76 -20) -51]
Train Case:  43 | Input/Output: [(84 -2 -20 97) -20]
Train Case:  44 | Input/Output: [(59 42 61 70) 42]
Train Case:  45 | Input/Output: [(-20 38 -64 41) -64]
Train Case:  46 | Input/Output: [(-12 65 -61 25) -61]
Train Case:  47 | Input/Output: [(72 -36 64 55) -36]
Train Case:  48 | Input/Output: [(-14 63 83 49) -14]
Train Case:  49 | Input/Output: [(7 25 70 33) 7]
Train Case:  50 | Input/Output: [(71 -42 -73 22) -73]
Train Case:  51 | Input/Output: [(-44 -54 63 -28) -54]
Train Case:  52 | Input/Output: [(52 -75 -98 -33) -98]
Train Case:  53 | Input/Output: [(-88 30 -75 42) -88]
Train Case:  54 | Input/Output: [(61 -30 -10 -52) -52]
Train Case:  55 | Input/Output: [(-9 2 30 21) -9]
Train Case:  56 | Input/Output: [(-71 -48 -77 30) -77]
Train Case:  57 | Input/Output: [(-91 -59 71 33) -91]
Train Case:  58 | Input/Output: [(-67 -9 84 -21) -67]
Train Case:  59 | Input/Output: [(68 60 58 -51) -51]
Train Case:  60 | Input/Output: [(10 93 -23 -96) -96]
Train Case:  61 | Input/Output: [(15 34 -28 29) -28]
Train Case:  62 | Input/Output: [(-64 31 -69 59) -69]
Train Case:  63 | Input/Output: [(63 -81 43 28) -81]
Train Case:  64 | Input/Output: [(-40 80 67 -54) -54]
Train Case:  65 | Input/Output: [(-68 51 -82 25) -82]
Train Case:  66 | Input/Output: [(29 12 1 -70) -70]
Train Case:  67 | Input/Output: [(-83 -47 89 -50) -83]
Train Case:  68 | Input/Output: [(-68 56 35 -6) -68]
Train Case:  69 | Input/Output: [(-31 -51 73 -15) -51]
Train Case:  70 | Input/Output: [(32 -10 67 -4) -10]
Train Case:  71 | Input/Output: [(45 53 -37 -83) -83]
Train Case:  72 | Input/Output: [(98 -32 85 19) -32]
Train Case:  73 | Input/Output: [(-61 -61 -76 -45) -76]
Train Case:  74 | Input/Output: [(97 -50 36 99) -50]
Train Case:  75 | Input/Output: [(-47 60 37 -52) -52]
Train Case:  76 | Input/Output: [(-69 -35 52 -81) -81]
Train Case:  77 | Input/Output: [(38 90 99 49) 38]
Train Case:  78 | Input/Output: [(-86 33 -20 83) -86]
Train Case:  79 | Input/Output: [(-41 -99 26 -65) -99]
Train Case:  80 | Input/Output: [(-42 -18 -4 -76) -76]
Train Case:  81 | Input/Output: [(-95 53 95 -36) -95]
Train Case:  82 | Input/Output: [(83 -80 -18 54) -80]
Train Case:  83 | Input/Output: [(26 -43 -63 54) -63]
Train Case:  84 | Input/Output: [(-40 83 -81 92) -81]
Train Case:  85 | Input/Output: [(-28 -51 -24 -83) -83]
Train Case:  86 | Input/Output: [(82 -48 -88 -38) -88]
Train Case:  87 | Input/Output: [(7 -13 90 66) -13]
Train Case:  88 | Input/Output: [(19 -2 -65 64) -65]
Train Case:  89 | Input/Output: [(95 -91 -50 66) -91]
Train Case:  90 | Input/Output: [(13 -7 -80 -45) -80]
Train Case:  91 | Input/Output: [(-59 26 -46 4) -59]
Train Case:  92 | Input/Output: [(-66 21 -25 -47) -66]
Train Case:  93 | Input/Output: [(-96 -35 -54 -1) -96]
Train Case:  94 | Input/Output: [(6 78 26 4) 4]
Train Case:  95 | Input/Output: [(-4 -88 31 66) -88]
Train Case:  96 | Input/Output: [(18 15 38 2) 2]
Train Case:  97 | Input/Output: [(86 -30 44 -20) -30]
Train Case:  98 | Input/Output: [(-4 44 27 65) -4]
Train Case:  99 | Input/Output: [(46 -85 -74 5) -85]
Test Case:   0 | Input/Output: [[46 8 8 8] 8]
Test Case:   1 | Input/Output: [[68 68 -56 68] -56]
Test Case:   2 | Input/Output: [[1 85 85 85] 1]
Test Case:   3 | Input/Output: [[-60 -76 -60 -60] -76]
Test Case:   4 | Input/Output: [[-6 53 -6 -6] -6]
Test Case:   5 | Input/Output: [[-38 21 21 21] -38]
Test Case:   6 | Input/Output: [[44 59 44 44] 44]
Test Case:   7 | Input/Output: [[99 99 38 99] 38]
Test Case:   8 | Input/Output: [[-48 32 -48 -48] -48]
Test Case:   9 | Input/Output: [[-19 -19 -19 -82] -82]
Test Case:  10 | Input/Output: [[-57 -51 -57 -57] -57]
Test Case:  11 | Input/Output: [[30 73 73 73] 30]
Test Case:  12 | Input/Output: [[-99 -99 -99 89] -99]
Test Case:  13 | Input/Output: [[-75 -75 -75 17] -75]
Test Case:  14 | Input/Output: [[34 34 52 34] 34]
Test Case:  15 | Input/Output: [[92 0 0 0] 0]
Test Case:  16 | Input/Output: [[-21 -21 -19 -21] -21]
Test Case:  17 | Input/Output: [[-48 19 19 19] -48]
Test Case:  18 | Input/Output: [[1 53 53 53] 1]
Test Case:  19 | Input/Output: [[-53 44 -53 -53] -53]
Test Case:  20 | Input/Output: [[-38 60 -38 -38] -38]
Test Case:  21 | Input/Output: [[66 66 -58 66] -58]
Test Case:  22 | Input/Output: [[93 15 93 93] 15]
Test Case:  23 | Input/Output: [[89 89 -21 89] -21]
Test Case:  24 | Input/Output: [[99 -79 -79 -79] -79]
Test Case:  25 | Input/Output: [[13 13 13 -92] -92]
Test Case:  26 | Input/Output: [[90 90 -65 90] -65]
Test Case:  27 | Input/Output: [[25 -13 -13 -13] -13]
Test Case:  28 | Input/Output: [[73 30 30 30] 30]
Test Case:  29 | Input/Output: [[-19 -92 -19 -19] -92]
Test Case:  30 | Input/Output: [[-6 8 8 8] -6]
Test Case:  31 | Input/Output: [[-18 2 -18 -18] -18]
Test Case:  32 | Input/Output: [[-32 -32 73 -32] -32]
Test Case:  33 | Input/Output: [[-22 -22 9 -22] -22]
Test Case:  34 | Input/Output: [[-16 -19 -16 -16] -19]
Test Case:  35 | Input/Output: [[66 66 66 46] 46]
Test Case:  36 | Input/Output: [[29 29 29 -95] -95]
Test Case:  37 | Input/Output: [[-2 -2 -2 -53] -53]
Test Case:  38 | Input/Output: [[73 73 -44 73] -44]
Test Case:  39 | Input/Output: [[44 44 44 -17] -17]
Test Case:  40 | Input/Output: [[-73 -73 -73 15] -73]
Test Case:  41 | Input/Output: [[8 8 8 -55] -55]
Test Case:  42 | Input/Output: [[-88 -88 96 -88] -88]
Test Case:  43 | Input/Output: [[81 81 81 60] 60]
Test Case:  44 | Input/Output: [[48 48 48 -97] -97]
Test Case:  45 | Input/Output: [[-62 29 29 29] -62]
Test Case:  46 | Input/Output: [[36 26 26 26] 26]
Test Case:  47 | Input/Output: [[-19 -19 -19 -27] -27]
Test Case:  48 | Input/Output: [[91 4 91 91] 4]
Test Case:  49 | Input/Output: [[-20 59 59 59] -20]
Test Case:  50 | Input/Output: [[72 -6 -6 -6] -6]
Test Case:  51 | Input/Output: [[14 14 14 -47] -47]
Test Case:  52 | Input/Output: [[20 20 20 -39] -39]
Test Case:  53 | Input/Output: [[-5 -5 9 -5] -5]
Test Case:  54 | Input/Output: [[-78 86 86 86] -78]
Test Case:  55 | Input/Output: [[87 -69 87 87] -69]
Test Case:  56 | Input/Output: [[61 61 61 -96] -96]
Test Case:  57 | Input/Output: [[-35 -33 -33 -33] -35]
Test Case:  58 | Input/Output: [[-67 -67 -67 -68] -68]
Test Case:  59 | Input/Output: [[54 85 54 54] 54]
Test Case:  60 | Input/Output: [[-23 -23 -23 60] -23]
Test Case:  61 | Input/Output: [[6 -7 -7 -7] -7]
Test Case:  62 | Input/Output: [[-50 -50 57 -50] -50]
Test Case:  63 | Input/Output: [[-80 -80 -64 -80] -80]
Test Case:  64 | Input/Output: [[-22 67 67 67] -22]
Test Case:  65 | Input/Output: [[-15 -15 -15 93] -15]
Test Case:  66 | Input/Output: [[-64 -87 -87 -87] -87]
Test Case:  67 | Input/Output: [[-8 -8 -8 44] -8]
Test Case:  68 | Input/Output: [[1 1 1 65] 1]
Test Case:  69 | Input/Output: [[35 35 -46 35] -46]
Test Case:  70 | Input/Output: [[3 -1 3 3] -1]
Test Case:  71 | Input/Output: [[77 -87 -87 -87] -87]
Test Case:  72 | Input/Output: [[-33 86 86 86] -33]
Test Case:  73 | Input/Output: [[16 -53 16 16] -53]
Test Case:  74 | Input/Output: [[-93 29 -93 -93] -93]
Test Case:  75 | Input/Output: [[-94 -94 -94 42] -94]
Test Case:  76 | Input/Output: [[-100 -100 -90 -100] -100]
Test Case:  77 | Input/Output: [[-3 -3 -70 -3] -70]
Test Case:  78 | Input/Output: [[-48 45 45 45] -48]
Test Case:  79 | Input/Output: [[66 66 66 81] 66]
Test Case:  80 | Input/Output: [[88 88 4 88] 4]
Test Case:  81 | Input/Output: [[-42 -42 -42 -21] -42]
Test Case:  82 | Input/Output: [[-48 5 -48 -48] -48]
Test Case:  83 | Input/Output: [[8 8 -99 8] -99]
Test Case:  84 | Input/Output: [[78 78 78 7] 7]
Test Case:  85 | Input/Output: [[66 66 66 -71] -71]
Test Case:  86 | Input/Output: [[16 -38 16 16] -38]
Test Case:  87 | Input/Output: [[-4 -4 -4 -83] -83]
Test Case:  88 | Input/Output: [[14 14 24 14] 14]
Test Case:  89 | Input/Output: [[67 67 67 -82] -82]
Test Case:  90 | Input/Output: [[-64 -64 -93 -64] -93]
Test Case:  91 | Input/Output: [[-99 -76 -99 -99] -99]
Test Case:  92 | Input/Output: [[-7 -7 -26 -7] -26]
Test Case:  93 | Input/Output: [[-46 -51 -51 -51] -51]
Test Case:  94 | Input/Output: [[-10 -10 -24 -10] -24]
Test Case:  95 | Input/Output: [[73 73 73 74] 73]
Test Case:  96 | Input/Output: [[-15 -15 -15 -42] -42]
Test Case:  97 | Input/Output: [[-30 38 -30 -30] -30]
Test Case:  98 | Input/Output: [[-46 29 -46 -46] -46]
Test Case:  99 | Input/Output: [[36 10 10 10] 10]
Test Case: 100 | Input/Output: [(81 81 81 81) 81]
Test Case: 101 | Input/Output: [(94 94 94 94) 94]
Test Case: 102 | Input/Output: [(93 93 93 93) 93]
Test Case: 103 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 104 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 105 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 106 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 107 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 108 | Input/Output: [(87 87 87 87) 87]
Test Case: 109 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 110 | Input/Output: [(76 76 76 76) 76]
Test Case: 111 | Input/Output: [(21 21 21 21) 21]
Test Case: 112 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 113 | Input/Output: [(55 55 55 55) 55]
Test Case: 114 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 115 | Input/Output: [(72 72 72 72) 72]
Test Case: 116 | Input/Output: [(61 61 61 61) 61]
Test Case: 117 | Input/Output: [(56 56 56 56) 56]
Test Case: 118 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 119 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 120 | Input/Output: [(88 88 88 88) 88]
Test Case: 121 | Input/Output: [(26 26 26 26) 26]
Test Case: 122 | Input/Output: [(21 21 21 21) 21]
Test Case: 123 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 124 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 125 | Input/Output: [(59 59 59 59) 59]
Test Case: 126 | Input/Output: [(9 9 9 9) 9]
Test Case: 127 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 128 | Input/Output: [(97 97 97 97) 97]
Test Case: 129 | Input/Output: [(25 25 25 25) 25]
Test Case: 130 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 131 | Input/Output: [(99 99 99 99) 99]
Test Case: 132 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 133 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 134 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 135 | Input/Output: [(35 35 35 35) 35]
Test Case: 136 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 137 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 138 | Input/Output: [(61 61 61 61) 61]
Test Case: 139 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 140 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 141 | Input/Output: [(54 54 54 54) 54]
Test Case: 142 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 143 | Input/Output: [(56 56 56 56) 56]
Test Case: 144 | Input/Output: [(5 5 5 5) 5]
Test Case: 145 | Input/Output: [(38 38 38 38) 38]
Test Case: 146 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 147 | Input/Output: [(94 94 94 94) 94]
Test Case: 148 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 149 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 150 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 151 | Input/Output: [(90 90 90 90) 90]
Test Case: 152 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 153 | Input/Output: [(62 62 62 62) 62]
Test Case: 154 | Input/Output: [(55 55 55 55) 55]
Test Case: 155 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 156 | Input/Output: [(95 95 95 95) 95]
Test Case: 157 | Input/Output: [(74 74 74 74) 74]
Test Case: 158 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 159 | Input/Output: [(74 74 74 74) 74]
Test Case: 160 | Input/Output: [(43 43 43 43) 43]
Test Case: 161 | Input/Output: [(60 60 60 60) 60]
Test Case: 162 | Input/Output: [(89 89 89 89) 89]
Test Case: 163 | Input/Output: [(71 71 71 71) 71]
Test Case: 164 | Input/Output: [(14 14 14 14) 14]
Test Case: 165 | Input/Output: [(85 85 85 85) 85]
Test Case: 166 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 167 | Input/Output: [(11 11 11 11) 11]
Test Case: 168 | Input/Output: [(56 56 56 56) 56]
Test Case: 169 | Input/Output: [(85 85 85 85) 85]
Test Case: 170 | Input/Output: [(1 1 1 1) 1]
Test Case: 171 | Input/Output: [(41 41 41 41) 41]
Test Case: 172 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 173 | Input/Output: [(15 15 15 15) 15]
Test Case: 174 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 175 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 176 | Input/Output: [(3 3 3 3) 3]
Test Case: 177 | Input/Output: [(78 78 78 78) 78]
Test Case: 178 | Input/Output: [(13 13 13 13) 13]
Test Case: 179 | Input/Output: [(73 73 73 73) 73]
Test Case: 180 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 181 | Input/Output: [(88 88 88 88) 88]
Test Case: 182 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 183 | Input/Output: [(10 10 10 10) 10]
Test Case: 184 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 185 | Input/Output: [(36 36 36 36) 36]
Test Case: 186 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 187 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 188 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 189 | Input/Output: [(10 10 10 10) 10]
Test Case: 190 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 191 | Input/Output: [(32 32 32 32) 32]
Test Case: 192 | Input/Output: [(70 70 70 70) 70]
Test Case: 193 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 194 | Input/Output: [(49 49 49 49) 49]
Test Case: 195 | Input/Output: [(51 51 51 51) 51]
Test Case: 196 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 197 | Input/Output: [(95 95 95 95) 95]
Test Case: 198 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 199 | Input/Output: [(26 26 26 26) 26]
Test Case: 200 | Input/Output: [(63 17 29 4) 4]
Test Case: 201 | Input/Output: [(54 91 97 35) 35]
Test Case: 202 | Input/Output: [(86 88 16 40) 16]
Test Case: 203 | Input/Output: [(8 1 33 97) 1]
Test Case: 204 | Input/Output: [(78 66 57 52) 52]
Test Case: 205 | Input/Output: [(52 33 81 73) 33]
Test Case: 206 | Input/Output: [(39 3 63 15) 3]
Test Case: 207 | Input/Output: [(55 1 67 92) 1]
Test Case: 208 | Input/Output: [(2 83 27 74) 2]
Test Case: 209 | Input/Output: [(83 28 59 17) 17]
Test Case: 210 | Input/Output: [(95 74 75 82) 74]
Test Case: 211 | Input/Output: [(56 27 78 77) 27]
Test Case: 212 | Input/Output: [(84 25 81 83) 25]
Test Case: 213 | Input/Output: [(87 41 50 17) 17]
Test Case: 214 | Input/Output: [(24 71 25 25) 24]
Test Case: 215 | Input/Output: [(71 77 4 86) 4]
Test Case: 216 | Input/Output: [(10 52 3 70) 3]
Test Case: 217 | Input/Output: [(16 60 89 10) 10]
Test Case: 218 | Input/Output: [(93 61 82 21) 21]
Test Case: 219 | Input/Output: [(62 66 100 68) 62]
Test Case: 220 | Input/Output: [(31 27 25 96) 25]
Test Case: 221 | Input/Output: [(12 5 2 43) 2]
Test Case: 222 | Input/Output: [(98 9 50 20) 9]
Test Case: 223 | Input/Output: [(30 48 61 17) 17]
Test Case: 224 | Input/Output: [(28 25 87 32) 25]
Test Case: 225 | Input/Output: [(78 29 83 49) 29]
Test Case: 226 | Input/Output: [(84 77 28 98) 28]
Test Case: 227 | Input/Output: [(77 8 41 76) 8]
Test Case: 228 | Input/Output: [(52 51 25 61) 25]
Test Case: 229 | Input/Output: [(88 96 89 53) 53]
Test Case: 230 | Input/Output: [(36 78 32 41) 32]
Test Case: 231 | Input/Output: [(63 57 20 25) 20]
Test Case: 232 | Input/Output: [(64 31 35 94) 31]
Test Case: 233 | Input/Output: [(56 26 97 44) 26]
Test Case: 234 | Input/Output: [(84 76 43 56) 43]
Test Case: 235 | Input/Output: [(89 63 0 0) 0]
Test Case: 236 | Input/Output: [(3 52 72 83) 3]
Test Case: 237 | Input/Output: [(92 25 60 89) 25]
Test Case: 238 | Input/Output: [(73 57 80 1) 1]
Test Case: 239 | Input/Output: [(37 59 98 38) 37]
Test Case: 240 | Input/Output: [(30 64 99 94) 30]
Test Case: 241 | Input/Output: [(31 7 23 42) 7]
Test Case: 242 | Input/Output: [(57 85 22 76) 22]
Test Case: 243 | Input/Output: [(66 26 43 74) 26]
Test Case: 244 | Input/Output: [(22 60 49 85) 22]
Test Case: 245 | Input/Output: [(34 20 58 13) 13]
Test Case: 246 | Input/Output: [(16 27 43 19) 16]
Test Case: 247 | Input/Output: [(64 50 89 33) 33]
Test Case: 248 | Input/Output: [(77 82 21 81) 21]
Test Case: 249 | Input/Output: [(15 65 32 2) 2]
Test Case: 250 | Input/Output: [(71 54 85 17) 17]
Test Case: 251 | Input/Output: [(78 38 78 49) 38]
Test Case: 252 | Input/Output: [(96 71 16 53) 16]
Test Case: 253 | Input/Output: [(40 35 51 28) 28]
Test Case: 254 | Input/Output: [(39 14 72 55) 14]
Test Case: 255 | Input/Output: [(40 27 47 1) 1]
Test Case: 256 | Input/Output: [(93 50 6 17) 6]
Test Case: 257 | Input/Output: [(67 90 56 98) 56]
Test Case: 258 | Input/Output: [(19 37 81 55) 19]
Test Case: 259 | Input/Output: [(62 30 68 79) 30]
Test Case: 260 | Input/Output: [(85 38 66 66) 38]
Test Case: 261 | Input/Output: [(63 92 57 66) 57]
Test Case: 262 | Input/Output: [(1 65 50 56) 1]
Test Case: 263 | Input/Output: [(91 69 15 11) 11]
Test Case: 264 | Input/Output: [(51 0 53 31) 0]
Test Case: 265 | Input/Output: [(35 60 35 12) 12]
Test Case: 266 | Input/Output: [(81 48 27 94) 27]
Test Case: 267 | Input/Output: [(84 61 95 39) 39]
Test Case: 268 | Input/Output: [(33 55 92 92) 33]
Test Case: 269 | Input/Output: [(71 67 22 49) 22]
Test Case: 270 | Input/Output: [(22 57 99 97) 22]
Test Case: 271 | Input/Output: [(74 92 76 70) 70]
Test Case: 272 | Input/Output: [(44 32 22 3) 3]
Test Case: 273 | Input/Output: [(71 67 63 49) 49]
Test Case: 274 | Input/Output: [(69 40 69 83) 40]
Test Case: 275 | Input/Output: [(21 47 17 10) 10]
Test Case: 276 | Input/Output: [(78 71 15 1) 1]
Test Case: 277 | Input/Output: [(5 72 6 55) 5]
Test Case: 278 | Input/Output: [(59 24 46 37) 24]
Test Case: 279 | Input/Output: [(33 87 79 59) 33]
Test Case: 280 | Input/Output: [(6 89 96 20) 6]
Test Case: 281 | Input/Output: [(43 31 82 60) 31]
Test Case: 282 | Input/Output: [(37 48 33 73) 33]
Test Case: 283 | Input/Output: [(1 11 86 34) 1]
Test Case: 284 | Input/Output: [(98 42 23 71) 23]
Test Case: 285 | Input/Output: [(39 88 83 86) 39]
Test Case: 286 | Input/Output: [(80 53 43 10) 10]
Test Case: 287 | Input/Output: [(5 80 2 6) 2]
Test Case: 288 | Input/Output: [(12 39 3 38) 3]
Test Case: 289 | Input/Output: [(0 69 42 70) 0]
Test Case: 290 | Input/Output: [(36 25 98 90) 25]
Test Case: 291 | Input/Output: [(73 98 61 47) 47]
Test Case: 292 | Input/Output: [(6 1 26 98) 1]
Test Case: 293 | Input/Output: [(5 4 87 23) 4]
Test Case: 294 | Input/Output: [(12 66 86 74) 12]
Test Case: 295 | Input/Output: [(40 74 97 10) 10]
Test Case: 296 | Input/Output: [(10 54 22 6) 6]
Test Case: 297 | Input/Output: [(82 76 67 36) 36]
Test Case: 298 | Input/Output: [(67 69 83 32) 32]
Test Case: 299 | Input/Output: [(97 88 26 23) 23]
Test Case: 300 | Input/Output: [(31 61 24 13) 13]
Test Case: 301 | Input/Output: [(29 51 65 10) 10]
Test Case: 302 | Input/Output: [(32 73 38 40) 32]
Test Case: 303 | Input/Output: [(74 90 17 13) 13]
Test Case: 304 | Input/Output: [(69 37 50 52) 37]
Test Case: 305 | Input/Output: [(1 100 70 45) 1]
Test Case: 306 | Input/Output: [(58 53 35 82) 35]
Test Case: 307 | Input/Output: [(53 88 40 11) 11]
Test Case: 308 | Input/Output: [(97 64 57 63) 57]
Test Case: 309 | Input/Output: [(71 99 35 40) 35]
Test Case: 310 | Input/Output: [(16 88 33 86) 16]
Test Case: 311 | Input/Output: [(29 21 93 38) 21]
Test Case: 312 | Input/Output: [(80 66 68 96) 66]
Test Case: 313 | Input/Output: [(92 83 91 77) 77]
Test Case: 314 | Input/Output: [(73 59 76 1) 1]
Test Case: 315 | Input/Output: [(82 24 63 33) 24]
Test Case: 316 | Input/Output: [(34 38 93 97) 34]
Test Case: 317 | Input/Output: [(1 32 64 67) 1]
Test Case: 318 | Input/Output: [(87 98 26 29) 26]
Test Case: 319 | Input/Output: [(32 38 74 10) 10]
Test Case: 320 | Input/Output: [(27 86 18 56) 18]
Test Case: 321 | Input/Output: [(84 17 99 93) 17]
Test Case: 322 | Input/Output: [(56 17 90 69) 17]
Test Case: 323 | Input/Output: [(78 12 43 100) 12]
Test Case: 324 | Input/Output: [(11 19 35 89) 11]
Test Case: 325 | Input/Output: [(28 18 85 97) 18]
Test Case: 326 | Input/Output: [(25 82 2 34) 2]
Test Case: 327 | Input/Output: [(82 61 28 27) 27]
Test Case: 328 | Input/Output: [(51 77 3 18) 3]
Test Case: 329 | Input/Output: [(79 74 11 12) 11]
Test Case: 330 | Input/Output: [(4 69 27 25) 4]
Test Case: 331 | Input/Output: [(89 43 90 91) 43]
Test Case: 332 | Input/Output: [(97 20 2 13) 2]
Test Case: 333 | Input/Output: [(61 10 34 18) 10]
Test Case: 334 | Input/Output: [(67 66 56 24) 24]
Test Case: 335 | Input/Output: [(77 87 49 72) 49]
Test Case: 336 | Input/Output: [(70 22 87 48) 22]
Test Case: 337 | Input/Output: [(71 45 61 85) 45]
Test Case: 338 | Input/Output: [(27 99 6 66) 6]
Test Case: 339 | Input/Output: [(18 91 45 10) 10]
Test Case: 340 | Input/Output: [(8 39 26 72) 8]
Test Case: 341 | Input/Output: [(49 69 79 89) 49]
Test Case: 342 | Input/Output: [(7 88 41 54) 7]
Test Case: 343 | Input/Output: [(55 24 20 14) 14]
Test Case: 344 | Input/Output: [(86 82 18 65) 18]
Test Case: 345 | Input/Output: [(76 47 4 95) 4]
Test Case: 346 | Input/Output: [(64 18 52 9) 9]
Test Case: 347 | Input/Output: [(45 5 16 69) 5]
Test Case: 348 | Input/Output: [(89 17 44 28) 17]
Test Case: 349 | Input/Output: [(87 12 94 7) 7]
Test Case: 350 | Input/Output: [(62 67 34 28) 28]
Test Case: 351 | Input/Output: [(77 96 35 34) 34]
Test Case: 352 | Input/Output: [(39 60 34 85) 34]
Test Case: 353 | Input/Output: [(1 59 27 7) 1]
Test Case: 354 | Input/Output: [(39 38 63 19) 19]
Test Case: 355 | Input/Output: [(0 80 11 37) 0]
Test Case: 356 | Input/Output: [(82 48 60 99) 48]
Test Case: 357 | Input/Output: [(44 71 82 30) 30]
Test Case: 358 | Input/Output: [(6 9 24 10) 6]
Test Case: 359 | Input/Output: [(47 72 55 19) 19]
Test Case: 360 | Input/Output: [(35 54 76 41) 35]
Test Case: 361 | Input/Output: [(98 97 68 68) 68]
Test Case: 362 | Input/Output: [(39 97 79 44) 39]
Test Case: 363 | Input/Output: [(8 31 16 7) 7]
Test Case: 364 | Input/Output: [(75 5 96 60) 5]
Test Case: 365 | Input/Output: [(33 86 69 64) 33]
Test Case: 366 | Input/Output: [(55 57 21 18) 18]
Test Case: 367 | Input/Output: [(65 23 19 10) 10]
Test Case: 368 | Input/Output: [(69 0 64 33) 0]
Test Case: 369 | Input/Output: [(89 68 69 7) 7]
Test Case: 370 | Input/Output: [(64 10 51 84) 10]
Test Case: 371 | Input/Output: [(21 19 12 89) 12]
Test Case: 372 | Input/Output: [(74 84 9 62) 9]
Test Case: 373 | Input/Output: [(98 2 36 52) 2]
Test Case: 374 | Input/Output: [(91 24 82 27) 24]
Test Case: 375 | Input/Output: [(85 62 94 53) 53]
Test Case: 376 | Input/Output: [(83 18 54 54) 18]
Test Case: 377 | Input/Output: [(35 85 41 30) 30]
Test Case: 378 | Input/Output: [(15 94 5 9) 5]
Test Case: 379 | Input/Output: [(59 11 100 96) 11]
Test Case: 380 | Input/Output: [(22 61 89 92) 22]
Test Case: 381 | Input/Output: [(54 13 1 42) 1]
Test Case: 382 | Input/Output: [(12 11 26 13) 11]
Test Case: 383 | Input/Output: [(39 20 53 6) 6]
Test Case: 384 | Input/Output: [(89 96 33 14) 14]
Test Case: 385 | Input/Output: [(27 27 90 3) 3]
Test Case: 386 | Input/Output: [(59 21 76 100) 21]
Test Case: 387 | Input/Output: [(34 40 74 95) 34]
Test Case: 388 | Input/Output: [(87 33 4 14) 4]
Test Case: 389 | Input/Output: [(85 78 17 74) 17]
Test Case: 390 | Input/Output: [(22 92 85 17) 17]
Test Case: 391 | Input/Output: [(20 34 82 1) 1]
Test Case: 392 | Input/Output: [(84 89 14 63) 14]
Test Case: 393 | Input/Output: [(44 64 99 80) 44]
Test Case: 394 | Input/Output: [(92 58 99 49) 49]
Test Case: 395 | Input/Output: [(86 75 83 77) 75]
Test Case: 396 | Input/Output: [(69 39 13 42) 13]
Test Case: 397 | Input/Output: [(55 22 57 55) 22]
Test Case: 398 | Input/Output: [(86 11 59 83) 11]
Test Case: 399 | Input/Output: [(61 82 95 91) 61]
Test Case: 400 | Input/Output: [(-14 28 60 36) -14]
Test Case: 401 | Input/Output: [(-54 -16 72 -15) -54]
Test Case: 402 | Input/Output: [(-36 -1 14 -11) -36]
Test Case: 403 | Input/Output: [(-63 17 27 -43) -63]
Test Case: 404 | Input/Output: [(67 22 61 -45) -45]
Test Case: 405 | Input/Output: [(-36 -37 14 41) -37]
Test Case: 406 | Input/Output: [(-60 51 87 65) -60]
Test Case: 407 | Input/Output: [(30 -83 55 -62) -83]
Test Case: 408 | Input/Output: [(-61 -96 -60 -7) -96]
Test Case: 409 | Input/Output: [(-44 -63 -66 70) -66]
Test Case: 410 | Input/Output: [(30 -25 86 -79) -79]
Test Case: 411 | Input/Output: [(9 -46 -75 -85) -85]
Test Case: 412 | Input/Output: [(97 -22 -56 -31) -56]
Test Case: 413 | Input/Output: [(98 -39 85 -3) -39]
Test Case: 414 | Input/Output: [(-23 -59 99 -15) -59]
Test Case: 415 | Input/Output: [(-45 40 -63 -43) -63]
Test Case: 416 | Input/Output: [(-52 -94 52 81) -94]
Test Case: 417 | Input/Output: [(20 41 -31 -33) -33]
Test Case: 418 | Input/Output: [(24 17 -37 -28) -37]
Test Case: 419 | Input/Output: [(-73 -45 -62 -51) -73]
Test Case: 420 | Input/Output: [(65 -75 75 -20) -75]
Test Case: 421 | Input/Output: [(25 90 -79 47) -79]
Test Case: 422 | Input/Output: [(27 70 -64 -88) -88]
Test Case: 423 | Input/Output: [(-1 41 -2 36) -2]
Test Case: 424 | Input/Output: [(81 -55 47 -91) -91]
Test Case: 425 | Input/Output: [(-9 23 65 6) -9]
Test Case: 426 | Input/Output: [(37 -28 -94 -5) -94]
Test Case: 427 | Input/Output: [(33 20 33 43) 20]
Test Case: 428 | Input/Output: [(-66 -50 -73 -71) -73]
Test Case: 429 | Input/Output: [(-84 97 -41 1) -84]
Test Case: 430 | Input/Output: [(-23 -79 3 -66) -79]
Test Case: 431 | Input/Output: [(4 -59 12 -44) -59]
Test Case: 432 | Input/Output: [(-92 30 -78 41) -92]
Test Case: 433 | Input/Output: [(71 -47 90 -35) -47]
Test Case: 434 | Input/Output: [(-7 -64 100 36) -64]
Test Case: 435 | Input/Output: [(-11 40 -41 1) -41]
Test Case: 436 | Input/Output: [(93 -67 80 18) -67]
Test Case: 437 | Input/Output: [(-32 -97 76 50) -97]
Test Case: 438 | Input/Output: [(47 -74 90 88) -74]
Test Case: 439 | Input/Output: [(53 -2 -79 -92) -92]
Test Case: 440 | Input/Output: [(-94 -82 47 96) -94]
Test Case: 441 | Input/Output: [(-96 15 50 33) -96]
Test Case: 442 | Input/Output: [(-36 33 35 -92) -92]
Test Case: 443 | Input/Output: [(-45 -50 66 -9) -50]
Test Case: 444 | Input/Output: [(43 41 63 -39) -39]
Test Case: 445 | Input/Output: [(80 83 -59 -41) -59]
Test Case: 446 | Input/Output: [(59 29 50 -33) -33]
Test Case: 447 | Input/Output: [(-30 -74 19 20) -74]
Test Case: 448 | Input/Output: [(-27 -53 31 30) -53]
Test Case: 449 | Input/Output: [(-96 -80 3 -79) -96]
Test Case: 450 | Input/Output: [(-54 -98 32 31) -98]
Test Case: 451 | Input/Output: [(-27 27 -11 -97) -97]
Test Case: 452 | Input/Output: [(95 -16 55 78) -16]
Test Case: 453 | Input/Output: [(-7 21 65 69) -7]
Test Case: 454 | Input/Output: [(-59 -19 30 -79) -79]
Test Case: 455 | Input/Output: [(-59 -19 -10 66) -59]
Test Case: 456 | Input/Output: [(-37 32 44 -79) -79]
Test Case: 457 | Input/Output: [(35 -75 82 22) -75]
Test Case: 458 | Input/Output: [(-41 -78 -47 80) -78]
Test Case: 459 | Input/Output: [(-1 1 46 38) -1]
Test Case: 460 | Input/Output: [(-90 -85 90 -38) -90]
Test Case: 461 | Input/Output: [(-35 -21 -67 -76) -76]
Test Case: 462 | Input/Output: [(68 -75 46 -32) -75]
Test Case: 463 | Input/Output: [(-92 -40 -37 99) -92]
Test Case: 464 | Input/Output: [(34 -4 -78 95) -78]
Test Case: 465 | Input/Output: [(-57 -68 -29 90) -68]
Test Case: 466 | Input/Output: [(-54 -36 46 73) -54]
Test Case: 467 | Input/Output: [(-5 -67 -70 41) -70]
Test Case: 468 | Input/Output: [(-27 -28 23 14) -28]
Test Case: 469 | Input/Output: [(9 45 99 78) 9]
Test Case: 470 | Input/Output: [(-97 -68 30 -87) -97]
Test Case: 471 | Input/Output: [(2 -32 -75 -72) -75]
Test Case: 472 | Input/Output: [(-1 -14 77 78) -14]
Test Case: 473 | Input/Output: [(-86 -91 26 46) -91]
Test Case: 474 | Input/Output: [(26 -95 9 99) -95]
Test Case: 475 | Input/Output: [(51 -32 -56 56) -56]
Test Case: 476 | Input/Output: [(58 -11 20 55) -11]
Test Case: 477 | Input/Output: [(45 -97 -52 2) -97]
Test Case: 478 | Input/Output: [(61 80 -97 96) -97]
Test Case: 479 | Input/Output: [(-23 -16 12 57) -23]
Test Case: 480 | Input/Output: [(69 8 -46 33) -46]
Test Case: 481 | Input/Output: [(73 31 34 -54) -54]
Test Case: 482 | Input/Output: [(70 -65 57 68) -65]
Test Case: 483 | Input/Output: [(21 34 -24 -69) -69]
Test Case: 484 | Input/Output: [(97 31 -54 10) -54]
Test Case: 485 | Input/Output: [(73 97 -48 -19) -48]
Test Case: 486 | Input/Output: [(17 62 -85 46) -85]
Test Case: 487 | Input/Output: [(66 -3 -57 35) -57]
Test Case: 488 | Input/Output: [(27 10 94 33) 10]
Test Case: 489 | Input/Output: [(61 47 -50 83) -50]
Test Case: 490 | Input/Output: [(55 -61 -16 61) -61]
Test Case: 491 | Input/Output: [(-27 -92 46 32) -92]
Test Case: 492 | Input/Output: [(-65 14 -14 70) -65]
Test Case: 493 | Input/Output: [(96 -10 -85 68) -85]
Test Case: 494 | Input/Output: [(-23 6 -36 96) -36]
Test Case: 495 | Input/Output: [(25 -39 -100 -27) -100]
Test Case: 496 | Input/Output: [(-57 -21 -30 -87) -87]
Test Case: 497 | Input/Output: [(10 13 54 73) 10]
Test Case: 498 | Input/Output: [(-55 45 -93 -78) -93]
Test Case: 499 | Input/Output: [(87 -4 -77 86) -77]
Test Case: 500 | Input/Output: [(-25 2 -56 -40) -56]
Test Case: 501 | Input/Output: [(-77 -1 -8 -85) -85]
Test Case: 502 | Input/Output: [(2 55 -85 -83) -85]
Test Case: 503 | Input/Output: [(-67 -54 50 -80) -80]
Test Case: 504 | Input/Output: [(-70 85 55 4) -70]
Test Case: 505 | Input/Output: [(27 73 6 -30) -30]
Test Case: 506 | Input/Output: [(26 25 35 89) 25]
Test Case: 507 | Input/Output: [(17 0 -38 -86) -86]
Test Case: 508 | Input/Output: [(35 -45 14 96) -45]
Test Case: 509 | Input/Output: [(-51 56 -62 13) -62]
Test Case: 510 | Input/Output: [(-1 -73 -80 91) -80]
Test Case: 511 | Input/Output: [(56 16 5 1) 1]
Test Case: 512 | Input/Output: [(9 -99 -35 51) -99]
Test Case: 513 | Input/Output: [(-88 22 -41 -40) -88]
Test Case: 514 | Input/Output: [(55 -94 77 13) -94]
Test Case: 515 | Input/Output: [(-99 15 95 82) -99]
Test Case: 516 | Input/Output: [(-89 -64 36 -27) -89]
Test Case: 517 | Input/Output: [(-17 0 84 44) -17]
Test Case: 518 | Input/Output: [(-89 -74 -48 -61) -89]
Test Case: 519 | Input/Output: [(-43 2 -95 62) -95]
Test Case: 520 | Input/Output: [(-49 -98 -92 34) -98]
Test Case: 521 | Input/Output: [(-61 -68 52 -72) -72]
Test Case: 522 | Input/Output: [(73 -52 -1 -14) -52]
Test Case: 523 | Input/Output: [(4 -95 67 99) -95]
Test Case: 524 | Input/Output: [(-93 -82 -49 26) -93]
Test Case: 525 | Input/Output: [(72 77 -97 55) -97]
Test Case: 526 | Input/Output: [(100 82 -79 -35) -79]
Test Case: 527 | Input/Output: [(88 86 35 90) 35]
Test Case: 528 | Input/Output: [(-53 -19 51 17) -53]
Test Case: 529 | Input/Output: [(-61 -17 80 -8) -61]
Test Case: 530 | Input/Output: [(-41 11 43 -56) -56]
Test Case: 531 | Input/Output: [(-96 70 100 12) -96]
Test Case: 532 | Input/Output: [(68 -21 -97 -48) -97]
Test Case: 533 | Input/Output: [(98 -66 -53 -57) -66]
Test Case: 534 | Input/Output: [(-34 81 14 33) -34]
Test Case: 535 | Input/Output: [(-66 -54 67 -58) -66]
Test Case: 536 | Input/Output: [(-92 -25 -28 -14) -92]
Test Case: 537 | Input/Output: [(79 4 -26 -42) -42]
Test Case: 538 | Input/Output: [(-46 32 -68 -96) -96]
Test Case: 539 | Input/Output: [(73 -57 -90 48) -90]
Test Case: 540 | Input/Output: [(-59 42 66 -57) -59]
Test Case: 541 | Input/Output: [(63 -2 -54 -96) -96]
Test Case: 542 | Input/Output: [(-77 -76 16 52) -77]
Test Case: 543 | Input/Output: [(-24 -62 30 -7) -62]
Test Case: 544 | Input/Output: [(-18 -9 43 36) -18]
Test Case: 545 | Input/Output: [(65 15 -65 1) -65]
Test Case: 546 | Input/Output: [(18 -72 56 35) -72]
Test Case: 547 | Input/Output: [(61 -21 -29 47) -29]
Test Case: 548 | Input/Output: [(32 4 73 -41) -41]
Test Case: 549 | Input/Output: [(12 -37 49 -19) -37]
Test Case: 550 | Input/Output: [(80 -53 3 52) -53]
Test Case: 551 | Input/Output: [(-60 -46 51 15) -60]
Test Case: 552 | Input/Output: [(69 74 57 13) 13]
Test Case: 553 | Input/Output: [(41 -77 -79 33) -79]
Test Case: 554 | Input/Output: [(96 3 80 -17) -17]
Test Case: 555 | Input/Output: [(-97 56 69 35) -97]
Test Case: 556 | Input/Output: [(26 23 -63 -99) -99]
Test Case: 557 | Input/Output: [(100 59 58 -60) -60]
Test Case: 558 | Input/Output: [(37 19 98 56) 19]
Test Case: 559 | Input/Output: [(-84 -96 -67 -55) -96]
Test Case: 560 | Input/Output: [(100 66 5 -27) -27]
Test Case: 561 | Input/Output: [(27 58 -38 52) -38]
Test Case: 562 | Input/Output: [(-8 73 10 -80) -80]
Test Case: 563 | Input/Output: [(-67 -54 25 59) -67]
Test Case: 564 | Input/Output: [(33 -5 -49 69) -49]
Test Case: 565 | Input/Output: [(-61 -35 -49 -39) -61]
Test Case: 566 | Input/Output: [(-43 -55 55 -90) -90]
Test Case: 567 | Input/Output: [(-8 97 -1 -24) -24]
Test Case: 568 | Input/Output: [(-23 64 47 5) -23]
Test Case: 569 | Input/Output: [(-79 78 -1 2) -79]
Test Case: 570 | Input/Output: [(-2 -43 77 -8) -43]
Test Case: 571 | Input/Output: [(10 -11 1 64) -11]
Test Case: 572 | Input/Output: [(88 30 94 5) 5]
Test Case: 573 | Input/Output: [(-19 35 63 -73) -73]
Test Case: 574 | Input/Output: [(-81 -30 -82 48) -82]
Test Case: 575 | Input/Output: [(58 -7 -4 61) -7]
Test Case: 576 | Input/Output: [(-23 4 -28 -94) -94]
Test Case: 577 | Input/Output: [(57 46 -1 91) -1]
Test Case: 578 | Input/Output: [(-56 -22 -46 18) -56]
Test Case: 579 | Input/Output: [(1 -25 75 -9) -25]
Test Case: 580 | Input/Output: [(1 61 -58 -7) -58]
Test Case: 581 | Input/Output: [(-87 53 31 43) -87]
Test Case: 582 | Input/Output: [(45 24 70 84) 24]
Test Case: 583 | Input/Output: [(-40 -36 75 35) -40]
Test Case: 584 | Input/Output: [(-6 77 94 2) -6]
Test Case: 585 | Input/Output: [(50 18 29 11) 11]
Test Case: 586 | Input/Output: [(6 -71 0 -48) -71]
Test Case: 587 | Input/Output: [(-83 -62 100 30) -83]
Test Case: 588 | Input/Output: [(-43 -22 -42 92) -43]
Test Case: 589 | Input/Output: [(-1 -68 -20 -87) -87]
Test Case: 590 | Input/Output: [(27 -75 10 -52) -75]
Test Case: 591 | Input/Output: [(-89 -63 -4 37) -89]
Test Case: 592 | Input/Output: [(-4 -75 -97 -93) -97]
Test Case: 593 | Input/Output: [(-79 -21 -10 -35) -79]
Test Case: 594 | Input/Output: [(18 77 -36 91) -36]
Test Case: 595 | Input/Output: [(-7 -60 19 -72) -72]
Test Case: 596 | Input/Output: [(-81 13 67 54) -81]
Test Case: 597 | Input/Output: [(-9 23 -4 -71) -71]
Test Case: 598 | Input/Output: [(86 -1 56 -26) -26]
Test Case: 599 | Input/Output: [(-53 -6 -12 12) -53]
Test Case: 600 | Input/Output: [(37 40 54 -79) -79]
Test Case: 601 | Input/Output: [(-12 70 -70 -46) -70]
Test Case: 602 | Input/Output: [(52 -44 -32 37) -44]
Test Case: 603 | Input/Output: [(75 -22 -57 -16) -57]
Test Case: 604 | Input/Output: [(95 -48 84 -67) -67]
Test Case: 605 | Input/Output: [(38 58 87 -17) -17]
Test Case: 606 | Input/Output: [(2 -25 39 -99) -99]
Test Case: 607 | Input/Output: [(16 59 -86 63) -86]
Test Case: 608 | Input/Output: [(-73 -27 11 46) -73]
Test Case: 609 | Input/Output: [(-57 2 26 1) -57]
Test Case: 610 | Input/Output: [(2 99 23 -93) -93]
Test Case: 611 | Input/Output: [(-93 -10 -35 45) -93]
Test Case: 612 | Input/Output: [(25 -28 26 -40) -40]
Test Case: 613 | Input/Output: [(-43 -84 -1 25) -84]
Test Case: 614 | Input/Output: [(42 67 43 32) 32]
Test Case: 615 | Input/Output: [(-5 31 27 64) -5]
Test Case: 616 | Input/Output: [(82 12 74 59) 12]
Test Case: 617 | Input/Output: [(-51 30 87 27) -51]
Test Case: 618 | Input/Output: [(-25 98 42 40) -25]
Test Case: 619 | Input/Output: [(32 68 25 99) 25]
Test Case: 620 | Input/Output: [(-47 47 -3 -81) -81]
Test Case: 621 | Input/Output: [(68 26 -4 -54) -54]
Test Case: 622 | Input/Output: [(-4 98 -32 4) -32]
Test Case: 623 | Input/Output: [(-4 58 -90 -95) -95]
Test Case: 624 | Input/Output: [(-64 -29 75 35) -64]
Test Case: 625 | Input/Output: [(-48 54 40 30) -48]
Test Case: 626 | Input/Output: [(95 -91 -99 89) -99]
Test Case: 627 | Input/Output: [(100 -22 -29 26) -29]
Test Case: 628 | Input/Output: [(53 80 95 -6) -6]
Test Case: 629 | Input/Output: [(84 -21 65 88) -21]
Test Case: 630 | Input/Output: [(-10 -80 78 -60) -80]
Test Case: 631 | Input/Output: [(-84 -85 -72 47) -85]
Test Case: 632 | Input/Output: [(-4 -50 57 -34) -50]
Test Case: 633 | Input/Output: [(38 -42 2 99) -42]
Test Case: 634 | Input/Output: [(45 -23 16 -51) -51]
Test Case: 635 | Input/Output: [(88 14 -27 -28) -28]
Test Case: 636 | Input/Output: [(-15 -90 -32 67) -90]
Test Case: 637 | Input/Output: [(7 -5 -34 17) -34]
Test Case: 638 | Input/Output: [(-78 97 20 61) -78]
Test Case: 639 | Input/Output: [(10 -40 71 40) -40]
Test Case: 640 | Input/Output: [(91 -63 -12 -4) -63]
Test Case: 641 | Input/Output: [(-95 78 -57 -4) -95]
Test Case: 642 | Input/Output: [(90 -99 -44 -96) -99]
Test Case: 643 | Input/Output: [(62 -40 8 95) -40]
Test Case: 644 | Input/Output: [(-72 30 93 -29) -72]
Test Case: 645 | Input/Output: [(24 -11 23 28) -11]
Test Case: 646 | Input/Output: [(64 91 16 20) 16]
Test Case: 647 | Input/Output: [(26 62 -54 5) -54]
Test Case: 648 | Input/Output: [(-80 -46 -62 68) -80]
Test Case: 649 | Input/Output: [(94 58 71 -48) -48]
Test Case: 650 | Input/Output: [(-39 45 90 31) -39]
Test Case: 651 | Input/Output: [(-24 -32 13 8) -32]
Test Case: 652 | Input/Output: [(97 -24 52 -11) -24]
Test Case: 653 | Input/Output: [(-56 -99 65 100) -99]
Test Case: 654 | Input/Output: [(9 1 66 71) 1]
Test Case: 655 | Input/Output: [(12 42 -40 10) -40]
Test Case: 656 | Input/Output: [(87 -47 74 -95) -95]
Test Case: 657 | Input/Output: [(25 -9 -19 85) -19]
Test Case: 658 | Input/Output: [(-41 -52 24 21) -52]
Test Case: 659 | Input/Output: [(-30 79 7 38) -30]
Test Case: 660 | Input/Output: [(46 27 -52 79) -52]
Test Case: 661 | Input/Output: [(45 36 -24 -79) -79]
Test Case: 662 | Input/Output: [(34 -81 -10 -80) -81]
Test Case: 663 | Input/Output: [(77 -67 -5 64) -67]
Test Case: 664 | Input/Output: [(-80 -83 42 -5) -83]
Test Case: 665 | Input/Output: [(14 54 89 -21) -21]
Test Case: 666 | Input/Output: [(-71 46 86 12) -71]
Test Case: 667 | Input/Output: [(32 60 36 72) 32]
Test Case: 668 | Input/Output: [(1 -91 73 -89) -91]
Test Case: 669 | Input/Output: [(-43 -71 -87 91) -87]
Test Case: 670 | Input/Output: [(0 70 3 54) 0]
Test Case: 671 | Input/Output: [(-65 63 74 -8) -65]
Test Case: 672 | Input/Output: [(-44 80 87 80) -44]
Test Case: 673 | Input/Output: [(15 -82 37 1) -82]
Test Case: 674 | Input/Output: [(62 45 -81 -10) -81]
Test Case: 675 | Input/Output: [(33 -24 -51 34) -51]
Test Case: 676 | Input/Output: [(-51 -43 -46 41) -51]
Test Case: 677 | Input/Output: [(-58 23 98 62) -58]
Test Case: 678 | Input/Output: [(-23 26 13 61) -23]
Test Case: 679 | Input/Output: [(-30 -45 -80 85) -80]
Test Case: 680 | Input/Output: [(-70 -34 -89 -55) -89]
Test Case: 681 | Input/Output: [(-33 -84 -33 -44) -84]
Test Case: 682 | Input/Output: [(-66 -49 -65 62) -66]
Test Case: 683 | Input/Output: [(-10 18 10 99) -10]
Test Case: 684 | Input/Output: [(31 45 80 53) 31]
Test Case: 685 | Input/Output: [(79 -83 66 -40) -83]
Test Case: 686 | Input/Output: [(-37 -53 -29 6) -53]
Test Case: 687 | Input/Output: [(53 70 -91 -87) -91]
Test Case: 688 | Input/Output: [(-37 45 50 -98) -98]
Test Case: 689 | Input/Output: [(58 72 -28 -24) -28]
Test Case: 690 | Input/Output: [(-23 27 -30 -83) -83]
Test Case: 691 | Input/Output: [(1 -69 8 60) -69]
Test Case: 692 | Input/Output: [(28 13 39 -12) -12]
Test Case: 693 | Input/Output: [(-33 -90 71 82) -90]
Test Case: 694 | Input/Output: [(97 80 71 -43) -43]
Test Case: 695 | Input/Output: [(-99 83 96 -90) -99]
Test Case: 696 | Input/Output: [(36 -87 37 96) -87]
Test Case: 697 | Input/Output: [(88 31 42 99) 31]
Test Case: 698 | Input/Output: [(-93 -26 -91 72) -93]
Test Case: 699 | Input/Output: [(4 27 -84 -77) -84]
Test Case: 700 | Input/Output: [(9 71 8 -8) -8]
Test Case: 701 | Input/Output: [(-51 78 -70 -82) -82]
Test Case: 702 | Input/Output: [(-65 35 41 13) -65]
Test Case: 703 | Input/Output: [(16 22 -32 61) -32]
Test Case: 704 | Input/Output: [(82 23 84 -39) -39]
Test Case: 705 | Input/Output: [(82 -20 -1 -58) -58]
Test Case: 706 | Input/Output: [(-61 -84 -5 -73) -84]
Test Case: 707 | Input/Output: [(44 -10 56 96) -10]
Test Case: 708 | Input/Output: [(82 93 -16 -75) -75]
Test Case: 709 | Input/Output: [(97 15 -45 67) -45]
Test Case: 710 | Input/Output: [(47 -3 99 -63) -63]
Test Case: 711 | Input/Output: [(51 -25 -14 -44) -44]
Test Case: 712 | Input/Output: [(70 -37 86 16) -37]
Test Case: 713 | Input/Output: [(44 -48 -97 40) -97]
Test Case: 714 | Input/Output: [(80 65 -48 51) -48]
Test Case: 715 | Input/Output: [(15 -84 -93 -14) -93]
Test Case: 716 | Input/Output: [(69 -83 2 34) -83]
Test Case: 717 | Input/Output: [(-45 -28 6 -66) -66]
Test Case: 718 | Input/Output: [(41 22 27 69) 22]
Test Case: 719 | Input/Output: [(39 98 -47 -94) -94]
Test Case: 720 | Input/Output: [(-44 31 -75 -63) -75]
Test Case: 721 | Input/Output: [(-12 -87 -49 7) -87]
Test Case: 722 | Input/Output: [(30 -49 -71 99) -71]
Test Case: 723 | Input/Output: [(58 -81 9 85) -81]
Test Case: 724 | Input/Output: [(69 75 -59 79) -59]
Test Case: 725 | Input/Output: [(-13 -34 -90 -59) -90]
Test Case: 726 | Input/Output: [(-17 69 47 87) -17]
Test Case: 727 | Input/Output: [(18 24 28 -14) -14]
Test Case: 728 | Input/Output: [(-89 -47 17 22) -89]
Test Case: 729 | Input/Output: [(-55 -5 40 59) -55]
Test Case: 730 | Input/Output: [(-33 -33 57 -13) -33]
Test Case: 731 | Input/Output: [(93 -58 32 52) -58]
Test Case: 732 | Input/Output: [(34 -40 -5 -98) -98]
Test Case: 733 | Input/Output: [(-37 30 -99 14) -99]
Test Case: 734 | Input/Output: [(85 0 -30 -71) -71]
Test Case: 735 | Input/Output: [(2 -79 -68 -26) -79]
Test Case: 736 | Input/Output: [(-40 44 -79 -98) -98]
Test Case: 737 | Input/Output: [(70 75 68 19) 19]
Test Case: 738 | Input/Output: [(34 70 34 49) 34]
Test Case: 739 | Input/Output: [(39 72 -78 34) -78]
Test Case: 740 | Input/Output: [(98 89 -80 -86) -86]
Test Case: 741 | Input/Output: [(32 9 -42 -77) -77]
Test Case: 742 | Input/Output: [(-100 -19 -55 -24) -100]
Test Case: 743 | Input/Output: [(-32 -40 42 22) -40]
Test Case: 744 | Input/Output: [(-42 5 -54 52) -54]
Test Case: 745 | Input/Output: [(56 62 -73 33) -73]
Test Case: 746 | Input/Output: [(-12 -39 67 52) -39]
Test Case: 747 | Input/Output: [(-52 -48 -35 -1) -52]
Test Case: 748 | Input/Output: [(2 14 -65 -13) -65]
Test Case: 749 | Input/Output: [(-60 -25 79 -90) -90]
Test Case: 750 | Input/Output: [(-28 80 -36 100) -36]
Test Case: 751 | Input/Output: [(48 -47 -20 47) -47]
Test Case: 752 | Input/Output: [(-11 56 23 -45) -45]
Test Case: 753 | Input/Output: [(-51 -79 7 64) -79]
Test Case: 754 | Input/Output: [(21 17 43 94) 17]
Test Case: 755 | Input/Output: [(72 23 62 -8) -8]
Test Case: 756 | Input/Output: [(87 -78 86 -41) -78]
Test Case: 757 | Input/Output: [(-67 -83 -70 87) -83]
Test Case: 758 | Input/Output: [(-26 -27 -28 71) -28]
Test Case: 759 | Input/Output: [(-44 92 0 -63) -63]
Test Case: 760 | Input/Output: [(-4 94 -13 -80) -80]
Test Case: 761 | Input/Output: [(-85 42 -19 56) -85]
Test Case: 762 | Input/Output: [(0 -64 -54 28) -64]
Test Case: 763 | Input/Output: [(-30 23 -43 41) -43]
Test Case: 764 | Input/Output: [(64 46 -45 -54) -54]
Test Case: 765 | Input/Output: [(18 55 93 41) 18]
Test Case: 766 | Input/Output: [(-85 -18 -76 3) -85]
Test Case: 767 | Input/Output: [(-93 -75 -14 -51) -93]
Test Case: 768 | Input/Output: [(-52 -84 -100 52) -100]
Test Case: 769 | Input/Output: [(57 -15 -85 -46) -85]
Test Case: 770 | Input/Output: [(42 62 79 -58) -58]
Test Case: 771 | Input/Output: [(83 -56 -49 92) -56]
Test Case: 772 | Input/Output: [(16 53 -51 7) -51]
Test Case: 773 | Input/Output: [(29 -60 -32 -99) -99]
Test Case: 774 | Input/Output: [(-58 99 41 -72) -72]
Test Case: 775 | Input/Output: [(10 67 -5 6) -5]
Test Case: 776 | Input/Output: [(74 61 56 -69) -69]
Test Case: 777 | Input/Output: [(39 14 -14 2) -14]
Test Case: 778 | Input/Output: [(82 -82 8 -92) -92]
Test Case: 779 | Input/Output: [(74 96 52 -67) -67]
Test Case: 780 | Input/Output: [(-4 -39 77 58) -39]
Test Case: 781 | Input/Output: [(-92 -62 62 -82) -92]
Test Case: 782 | Input/Output: [(83 12 79 -30) -30]
Test Case: 783 | Input/Output: [(54 2 41 81) 2]
Test Case: 784 | Input/Output: [(-69 59 86 -36) -69]
Test Case: 785 | Input/Output: [(-81 -38 -49 -74) -81]
Test Case: 786 | Input/Output: [(89 93 -22 56) -22]
Test Case: 787 | Input/Output: [(39 22 21 -35) -35]
Test Case: 788 | Input/Output: [(-7 -59 -42 -64) -64]
Test Case: 789 | Input/Output: [(-5 88 44 76) -5]
Test Case: 790 | Input/Output: [(-34 -43 -1 44) -43]
Test Case: 791 | Input/Output: [(96 -83 91 -1) -83]
Test Case: 792 | Input/Output: [(-53 -72 65 -98) -98]
Test Case: 793 | Input/Output: [(-70 -20 0 -90) -90]
Test Case: 794 | Input/Output: [(-75 81 38 -12) -75]
Test Case: 795 | Input/Output: [(-42 -44 93 -52) -52]
Test Case: 796 | Input/Output: [(40 -12 61 -91) -91]
Test Case: 797 | Input/Output: [(10 27 54 57) 10]
Test Case: 798 | Input/Output: [(67 -44 -78 36) -78]
Test Case: 799 | Input/Output: [(-61 -51 -43 -17) -61]
Test Case: 800 | Input/Output: [(16 68 7 86) 7]
Test Case: 801 | Input/Output: [(-67 95 -49 -11) -67]
Test Case: 802 | Input/Output: [(8 -75 -39 -33) -75]
Test Case: 803 | Input/Output: [(-9 -33 37 87) -33]
Test Case: 804 | Input/Output: [(-86 -46 64 -49) -86]
Test Case: 805 | Input/Output: [(71 97 -99 7) -99]
Test Case: 806 | Input/Output: [(-36 -17 -54 -22) -54]
Test Case: 807 | Input/Output: [(-75 63 1 -8) -75]
Test Case: 808 | Input/Output: [(67 -38 -30 86) -38]
Test Case: 809 | Input/Output: [(0 33 -16 -65) -65]
Test Case: 810 | Input/Output: [(54 1 86 57) 1]
Test Case: 811 | Input/Output: [(-62 -77 -96 79) -96]
Test Case: 812 | Input/Output: [(42 3 -54 -43) -54]
Test Case: 813 | Input/Output: [(-1 -99 -18 55) -99]
Test Case: 814 | Input/Output: [(-61 -70 -27 87) -70]
Test Case: 815 | Input/Output: [(86 20 75 -89) -89]
Test Case: 816 | Input/Output: [(30 -36 -64 49) -64]
Test Case: 817 | Input/Output: [(-86 -97 36 62) -97]
Test Case: 818 | Input/Output: [(-69 48 10 76) -69]
Test Case: 819 | Input/Output: [(80 -48 -59 90) -59]
Test Case: 820 | Input/Output: [(-40 55 54 -61) -61]
Test Case: 821 | Input/Output: [(22 92 53 -42) -42]
Test Case: 822 | Input/Output: [(9 -29 -7 -57) -57]
Test Case: 823 | Input/Output: [(-43 57 -41 52) -43]
Test Case: 824 | Input/Output: [(98 66 98 63) 63]
Test Case: 825 | Input/Output: [(60 -10 18 46) -10]
Test Case: 826 | Input/Output: [(-50 -49 -9 -46) -50]
Test Case: 827 | Input/Output: [(84 62 48 85) 48]
Test Case: 828 | Input/Output: [(-65 100 -64 97) -65]
Test Case: 829 | Input/Output: [(-76 58 -48 -52) -76]
Test Case: 830 | Input/Output: [(50 44 -58 -15) -58]
Test Case: 831 | Input/Output: [(-98 73 69 1) -98]
Test Case: 832 | Input/Output: [(-8 -1 -13 8) -13]
Test Case: 833 | Input/Output: [(-90 -88 98 99) -90]
Test Case: 834 | Input/Output: [(33 -44 70 -90) -90]
Test Case: 835 | Input/Output: [(71 -40 -43 -79) -79]
Test Case: 836 | Input/Output: [(18 65 76 65) 18]
Test Case: 837 | Input/Output: [(21 -84 45 -70) -84]
Test Case: 838 | Input/Output: [(17 43 -96 -68) -96]
Test Case: 839 | Input/Output: [(-88 7 -65 4) -88]
Test Case: 840 | Input/Output: [(66 -53 -78 -77) -78]
Test Case: 841 | Input/Output: [(40 4 -70 -12) -70]
Test Case: 842 | Input/Output: [(-47 -15 49 24) -47]
Test Case: 843 | Input/Output: [(-69 58 -50 -63) -69]
Test Case: 844 | Input/Output: [(75 2 11 -35) -35]
Test Case: 845 | Input/Output: [(24 6 -94 3) -94]
Test Case: 846 | Input/Output: [(-79 83 -29 4) -79]
Test Case: 847 | Input/Output: [(90 -77 75 -58) -77]
Test Case: 848 | Input/Output: [(-99 0 -18 -60) -99]
Test Case: 849 | Input/Output: [(-97 95 53 47) -97]
Test Case: 850 | Input/Output: [(-53 74 90 94) -53]
Test Case: 851 | Input/Output: [(-68 -18 -85 -66) -85]
Test Case: 852 | Input/Output: [(97 -61 17 -87) -87]
Test Case: 853 | Input/Output: [(-29 42 74 88) -29]
Test Case: 854 | Input/Output: [(38 -2 -56 -18) -56]
Test Case: 855 | Input/Output: [(70 78 12 -13) -13]
Test Case: 856 | Input/Output: [(25 -92 12 83) -92]
Test Case: 857 | Input/Output: [(-83 44 -26 -56) -83]
Test Case: 858 | Input/Output: [(-100 26 71 36) -100]
Test Case: 859 | Input/Output: [(-30 -94 -9 21) -94]
Test Case: 860 | Input/Output: [(94 75 -72 -11) -72]
Test Case: 861 | Input/Output: [(79 85 8 -33) -33]
Test Case: 862 | Input/Output: [(-73 69 93 -30) -73]
Test Case: 863 | Input/Output: [(-90 -75 -4 -54) -90]
Test Case: 864 | Input/Output: [(66 -10 67 95) -10]
Test Case: 865 | Input/Output: [(91 69 -16 81) -16]
Test Case: 866 | Input/Output: [(90 57 11 -92) -92]
Test Case: 867 | Input/Output: [(66 0 15 -71) -71]
Test Case: 868 | Input/Output: [(-98 74 44 100) -98]
Test Case: 869 | Input/Output: [(78 -59 -17 83) -59]
Test Case: 870 | Input/Output: [(-73 86 3 47) -73]
Test Case: 871 | Input/Output: [(-97 -85 58 -7) -97]
Test Case: 872 | Input/Output: [(56 -97 -88 14) -97]
Test Case: 873 | Input/Output: [(-83 52 99 66) -83]
Test Case: 874 | Input/Output: [(-55 -46 95 42) -55]
Test Case: 875 | Input/Output: [(-9 -93 -46 -90) -93]
Test Case: 876 | Input/Output: [(19 31 6 30) 6]
Test Case: 877 | Input/Output: [(-48 -31 5 -16) -48]
Test Case: 878 | Input/Output: [(55 42 98 -70) -70]
Test Case: 879 | Input/Output: [(-2 62 24 -89) -89]
Test Case: 880 | Input/Output: [(-60 53 15 100) -60]
Test Case: 881 | Input/Output: [(24 47 -91 55) -91]
Test Case: 882 | Input/Output: [(-9 -81 97 -81) -81]
Test Case: 883 | Input/Output: [(2 -60 -44 7) -60]
Test Case: 884 | Input/Output: [(33 75 64 -49) -49]
Test Case: 885 | Input/Output: [(-52 -23 -30 5) -52]
Test Case: 886 | Input/Output: [(-40 13 -91 -14) -91]
Test Case: 887 | Input/Output: [(-92 -54 -71 -62) -92]
Test Case: 888 | Input/Output: [(11 -61 -97 72) -97]
Test Case: 889 | Input/Output: [(-31 45 -75 -21) -75]
Test Case: 890 | Input/Output: [(62 -32 32 69) -32]
Test Case: 891 | Input/Output: [(-99 -40 -48 72) -99]
Test Case: 892 | Input/Output: [(40 32 41 -73) -73]
Test Case: 893 | Input/Output: [(-54 74 -3 84) -54]
Test Case: 894 | Input/Output: [(42 -36 -40 -24) -40]
Test Case: 895 | Input/Output: [(80 55 -24 27) -24]
Test Case: 896 | Input/Output: [(9 42 36 -32) -32]
Test Case: 897 | Input/Output: [(39 58 -5 -100) -100]
Test Case: 898 | Input/Output: [(87 -78 80 -59) -78]
Test Case: 899 | Input/Output: [(66 -47 -48 6) -48]
Test Case: 900 | Input/Output: [(68 68 28 -49) -49]
Test Case: 901 | Input/Output: [(94 95 -59 4) -59]
Test Case: 902 | Input/Output: [(-77 12 -79 0) -79]
Test Case: 903 | Input/Output: [(-18 6 35 -38) -38]
Test Case: 904 | Input/Output: [(68 11 39 -17) -17]
Test Case: 905 | Input/Output: [(53 95 10 68) 10]
Test Case: 906 | Input/Output: [(70 38 -5 55) -5]
Test Case: 907 | Input/Output: [(-12 27 -79 -12) -79]
Test Case: 908 | Input/Output: [(-39 55 52 -69) -69]
Test Case: 909 | Input/Output: [(-90 36 76 23) -90]
Test Case: 910 | Input/Output: [(48 70 -58 -25) -58]
Test Case: 911 | Input/Output: [(61 9 -54 85) -54]
Test Case: 912 | Input/Output: [(29 -34 94 -97) -97]
Test Case: 913 | Input/Output: [(-93 -89 94 -2) -93]
Test Case: 914 | Input/Output: [(-50 -14 3 0) -50]
Test Case: 915 | Input/Output: [(-98 -21 51 100) -98]
Test Case: 916 | Input/Output: [(-8 16 -42 13) -42]
Test Case: 917 | Input/Output: [(-67 92 22 -42) -67]
Test Case: 918 | Input/Output: [(-15 -23 -88 -17) -88]
Test Case: 919 | Input/Output: [(63 96 -28 -67) -67]
Test Case: 920 | Input/Output: [(-28 18 14 12) -28]
Test Case: 921 | Input/Output: [(-100 -5 83 -21) -100]
Test Case: 922 | Input/Output: [(-63 -75 -79 -24) -79]
Test Case: 923 | Input/Output: [(-40 -54 84 78) -54]
Test Case: 924 | Input/Output: [(-100 -7 38 -39) -100]
Test Case: 925 | Input/Output: [(-86 1 85 66) -86]
Test Case: 926 | Input/Output: [(5 -48 97 -79) -79]
Test Case: 927 | Input/Output: [(-46 -54 -9 -48) -54]
Test Case: 928 | Input/Output: [(38 8 62 66) 8]
Test Case: 929 | Input/Output: [(-42 10 -87 -75) -87]
Test Case: 930 | Input/Output: [(-59 29 -72 -36) -72]
Test Case: 931 | Input/Output: [(-79 -27 6 -78) -79]
Test Case: 932 | Input/Output: [(-44 93 10 3) -44]
Test Case: 933 | Input/Output: [(-22 -89 2 -82) -89]
Test Case: 934 | Input/Output: [(71 40 -46 -55) -55]
Test Case: 935 | Input/Output: [(42 12 22 5) 5]
Test Case: 936 | Input/Output: [(21 87 -39 76) -39]
Test Case: 937 | Input/Output: [(-20 80 -19 37) -20]
Test Case: 938 | Input/Output: [(-81 -56 30 -18) -81]
Test Case: 939 | Input/Output: [(37 -65 -80 -10) -80]
Test Case: 940 | Input/Output: [(84 -40 29 77) -40]
Test Case: 941 | Input/Output: [(35 19 48 49) 19]
Test Case: 942 | Input/Output: [(-71 -81 42 -35) -81]
Test Case: 943 | Input/Output: [(28 66 -16 74) -16]
Test Case: 944 | Input/Output: [(41 2 -83 -19) -83]
Test Case: 945 | Input/Output: [(-15 -36 32 -25) -36]
Test Case: 946 | Input/Output: [(-46 48 26 -8) -46]
Test Case: 947 | Input/Output: [(46 -10 -86 -23) -86]
Test Case: 948 | Input/Output: [(15 32 -30 68) -30]
Test Case: 949 | Input/Output: [(4 20 -40 1) -40]
Test Case: 950 | Input/Output: [(10 -21 70 56) -21]
Test Case: 951 | Input/Output: [(-98 83 31 82) -98]
Test Case: 952 | Input/Output: [(91 -36 50 -2) -36]
Test Case: 953 | Input/Output: [(-84 -79 -44 53) -84]
Test Case: 954 | Input/Output: [(2 91 49 -76) -76]
Test Case: 955 | Input/Output: [(55 94 77 74) 55]
Test Case: 956 | Input/Output: [(-97 -88 56 51) -97]
Test Case: 957 | Input/Output: [(55 -50 -79 -20) -79]
Test Case: 958 | Input/Output: [(62 65 -22 30) -22]
Test Case: 959 | Input/Output: [(-50 -89 49 -12) -89]
Test Case: 960 | Input/Output: [(-69 7 26 -20) -69]
Test Case: 961 | Input/Output: [(15 -82 11 17) -82]
Test Case: 962 | Input/Output: [(51 -4 47 27) -4]
Test Case: 963 | Input/Output: [(-47 -74 -95 -35) -95]
Test Case: 964 | Input/Output: [(70 28 78 90) 28]
Test Case: 965 | Input/Output: [(-57 -24 -90 -32) -90]
Test Case: 966 | Input/Output: [(-18 -7 -59 90) -59]
Test Case: 967 | Input/Output: [(21 -79 -7 -45) -79]
Test Case: 968 | Input/Output: [(83 71 11 31) 11]
Test Case: 969 | Input/Output: [(-73 95 24 45) -73]
Test Case: 970 | Input/Output: [(-81 -81 28 33) -81]
Test Case: 971 | Input/Output: [(-89 6 -76 19) -89]
Test Case: 972 | Input/Output: [(62 -14 -95 89) -95]
Test Case: 973 | Input/Output: [(56 11 -47 -75) -75]
Test Case: 974 | Input/Output: [(39 86 -29 -86) -86]
Test Case: 975 | Input/Output: [(-59 -91 -61 -85) -91]
Test Case: 976 | Input/Output: [(-63 86 -66 -38) -66]
Test Case: 977 | Input/Output: [(96 74 -57 -70) -70]
Test Case: 978 | Input/Output: [(48 19 56 -94) -94]
Test Case: 979 | Input/Output: [(-19 35 47 -94) -94]
Test Case: 980 | Input/Output: [(-87 -31 -86 -57) -87]
Test Case: 981 | Input/Output: [(-28 54 98 -1) -28]
Test Case: 982 | Input/Output: [(-81 11 11 49) -81]
Test Case: 983 | Input/Output: [(-69 -26 36 95) -69]
Test Case: 984 | Input/Output: [(-94 -61 -69 -41) -94]
Test Case: 985 | Input/Output: [(82 -84 -53 6) -84]
Test Case: 986 | Input/Output: [(-68 3 94 -62) -68]
Test Case: 987 | Input/Output: [(42 -48 27 -86) -86]
Test Case: 988 | Input/Output: [(-65 -7 -59 -25) -65]
Test Case: 989 | Input/Output: [(-30 -26 48 80) -30]
Test Case: 990 | Input/Output: [(81 87 64 -84) -84]
Test Case: 991 | Input/Output: [(-38 97 -34 0) -38]
Test Case: 992 | Input/Output: [(-52 -71 -9 7) -71]
Test Case: 993 | Input/Output: [(39 -82 50 46) -82]
Test Case: 994 | Input/Output: [(72 44 -39 17) -39]
Test Case: 995 | Input/Output: [(20 66 21 -52) -52]
Test Case: 996 | Input/Output: [(-87 11 -70 -40) -87]
Test Case: 997 | Input/Output: [(62 -31 -19 66) -31]
Test Case: 998 | Input/Output: [(-2 60 -90 45) -90]
Test Case: 999 | Input/Output: [(-52 37 85 41) -52]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 46 -26 -8 -84 125 -68 -9 84 8 -21 -26 -78 67 29 64 99
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[8 8 8 89] 8] [[-14 -14 -14 16] -14] [[-40 -40 3 -40] -40] [[-31 23 -31 -31] -31] [[-41 -57 -41 -41] -57] [[53 67 53 53] 53] [[-20 -20 -20 -16] -20] [[-45 49 49 49] -45] [[-48 -48 83 -48] -48] [[-91 -91 -91 -97] -97] [(-65 -65 -65 -65) -65] [(10 10 10 10) 10] [(-32 -32 -32 -32) -32] [(34 34 34 34) 34] [(-22 -22 -22 -22) -22] [(83 18 93 54) 18] [(80 35 11 79) 11] [(3 40 63 83) 3] [(99 81 18 72) 18] [(52 63 51 39) 39] [(33 80 67 79) 33] [(75 78 53 29) 29] [(98 84 76 33) 33] [(20 62 86 91) 20] [(1 77 95 20) 1] [(68 5 89 31) 5] [(6 85 60 89) 6] [(75 21 75 0) 0] [(95 44 46 66) 44] [(35 25 57 2) 2] [(56 25 58 38) 25] [(65 19 74 29) 19] [(11 73 46 60) 11] [(77 88 93 56) 56] [(77 16 33 36) 16] [(84 -52 -60 -6) -60] [(54 -99 17 -12) -99] [(-51 61 76 -20) -51] [(84 -2 -20 97) -20] [(59 42 61 70) 42] [(-20 38 -64 41) -64] [(-12 65 -61 25) -61] [(72 -36 64 55) -36] [(-14 63 83 49) -14] [(7 25 70 33) 7] [(71 -42 -73 22) -73] [(-44 -54 63 -28) -54] [(52 -75 -98 -33) -98] [(-88 30 -75 42) -88] [(61 -30 -10 -52) -52] [(-9 2 30 21) -9] [(-71 -48 -77 30) -77] [(-91 -59 71 33) -91] [(-67 -9 84 -21) -67] [(68 60 58 -51) -51] [(10 93 -23 -96) -96] [(15 34 -28 29) -28] [(-64 31 -69 59) -69] [(63 -81 43 28) -81] [(-40 80 67 -54) -54] [(-68 51 -82 25) -82] [(29 12 1 -70) -70] [(-83 -47 89 -50) -83] [(-68 56 35 -6) -68] [(-31 -51 73 -15) -51] [(32 -10 67 -4) -10] [(45 53 -37 -83) -83] [(98 -32 85 19) -32] [(-61 -61 -76 -45) -76] [(97 -50 36 99) -50] [(-47 60 37 -52) -52] [(-69 -35 52 -81) -81] [(38 90 99 49) 38] [(-86 33 -20 83) -86] [(-41 -99 26 -65) -99] [(-42 -18 -4 -76) -76] [(-95 53 95 -36) -95] [(83 -80 -18 54) -80] [(26 -43 -63 54) -63] [(-40 83 -81 92) -81] [(-28 -51 -24 -83) -83] [(82 -48 -88 -38) -88] [(7 -13 90 66) -13] [(19 -2 -65 64) -65] [(95 -91 -50 66) -91] [(13 -7 -80 -45) -80] [(-59 26 -46 4) -59] [(-66 21 -25 -47) -66] [(-96 -35 -54 -1) -96] [(6 78 26 4) 4] [(-4 -88 31 66) -88] [(18 15 38 2) 2] [(86 -30 44 -20) -30] [(-4 44 27 65) -4] [(46 -85 -74 5) -85])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 67                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 35                 
Correct output: 3                   | Program output: 40                 
Correct output: 18                  | Program output: 81                 
Correct output: 39                  | Program output: 63                 
Correct output: 33                  | Program output: 80                 
Correct output: 29                  | Program output: 78                 
Correct output: 33                  | Program output: 84                 
Correct output: 20                  | Program output: 62                 
Correct output: 1                   | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 85                 
Correct output: 0                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 2                   | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 73                 
Correct output: 56                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: -60                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: 61                 
Correct output: -20                 | Program output: -2                 
Correct output: 42                  | Program output: 42                 
Correct output: -64                 | Program output: 38                 
Correct output: -61                 | Program output: 65                 
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: 63                 
Correct output: 7                   | Program output: 25                 
Correct output: -73                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -75                
Correct output: -88                 | Program output: 30                 
Correct output: -52                 | Program output: -30                
Correct output: -9                  | Program output: 2                  
Correct output: -77                 | Program output: -48                
Correct output: -91                 | Program output: -59                
Correct output: -67                 | Program output: -9                 
Correct output: -51                 | Program output: 60                 
Correct output: -96                 | Program output: 93                 
Correct output: -28                 | Program output: 34                 
Correct output: -69                 | Program output: 31                 
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: 80                 
Correct output: -82                 | Program output: 51                 
Correct output: -70                 | Program output: 12                 
Correct output: -83                 | Program output: -47                
Correct output: -68                 | Program output: 56                 
Correct output: -51                 | Program output: -51                
Correct output: -10                 | Program output: -10                
Correct output: -83                 | Program output: 53                 
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: 60                 
Correct output: -81                 | Program output: -35                
Correct output: 38                  | Program output: 90                 
Correct output: -86                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -18                
Correct output: -95                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -43                
Correct output: -81                 | Program output: 83                 
Correct output: -83                 | Program output: -51                
Correct output: -88                 | Program output: -48                
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -7                 
Correct output: -59                 | Program output: 26                 
Correct output: -66                 | Program output: 21                 
Correct output: -96                 | Program output: -35                
Correct output: 4                   | Program output: 78                 
Correct output: -88                 | Program output: -88                
Correct output: 2                   | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -4                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop) print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (22) exec_noop integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer integer_inc boolean_dup) integer_empty exec_when (exec_k (boolean_shove boolean_empty integer_div) ())))
Lexicase best errors: [1 1 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 87
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop) print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (22) exec_noop integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer integer_inc boolean_dup) integer_empty exec_when (exec_k (boolean_shove boolean_empty integer_div) ())))
Zero cases best errors: [1 1 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 87
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1 5 4 6 7 4 1 4 6)
Population mean number of elite cases: 1.04
Count of perfect (error zero) individuals by case: (0 1 5 4 6 7 4 1 4 6)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_180} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_integer_276} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq})
Best program: (integer_div boolean_frominteger exec_do*count () integer_eq integer_mult boolean_and boolean_dup_items integer_dec boolean_invert_first_then_and integer_add exec_rot (integer_lt integer_swap in2) (print_integer integer_dup print_boolean exec_stackdepth exec_pop (boolean_rot integer_div boolean_pop boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_yankdup integer_shove integer_dup_times exec_do*range () integer_sub boolean_dup_items) (boolean_frominteger integer_div integer_dec) integer_inc integer_rot print_integer integer_pop boolean_dup exec_do*times (tagged_180 integer_dup_times) boolean_frominteger integer_inc exec_empty integer_lt tag_integer_276 exec_yank integer_shove boolean_and) exec_do*while (exec_stackdepth exec_swap () () boolean_dup boolean_xor -41 integer_mod integer_div integer_stackdepth integer_sub integer_stackdepth) exec_k (exec_while (exec_rot (exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove print_integer integer_lte exec_k_when_autoconstructing (boolean_stackdepth integer_mod integer_dup) (boolean_invert_first_then_and exec_s_when_autoconstructing (exec_pop (boolean_and integer_max exec_do*range () in2) boolean_invert_first_then_and exec_eq) () ()))) () ()) ()) () ())) ()) ())
Errors: [1 1 1 0 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 84
Size: 119
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 9.962
Median total errors in population: 10
Error averages by case: (1.0 0.999 0.995 0.996 0.994 0.993 0.996 0.999 0.996 0.994)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.775
Average program size in population (points): 70.042
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 468887
--- Timings ---
Current time: 1559583154468 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.8 seconds, 31.9%
Fitness Testing:      1.6 seconds, 63.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: 83                 
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 63                 
Correct output: 18                  | Program output: 18                 
Correct output: 39                  | Program output: 51                 
Correct output: 33                  | Program output: 67                 
Correct output: 29                  | Program output: 53                 
Correct output: 33                  | Program output: 76                 
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 95                 
Correct output: 5                   | Program output: 89                 
Correct output: 6                   | Program output: 60                 
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 46                 
Correct output: 2                   | Program output: 57                 
Correct output: 25                  | Program output: 58                 
Correct output: 19                  | Program output: 74                 
Correct output: 11                  | Program output: 46                 
Correct output: 56                  | Program output: 93                 
Correct output: 16                  | Program output: 33                 
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 17                 
Correct output: -51                 | Program output: 76                 
Correct output: -20                 | Program output: -20                
Correct output: 42                  | Program output: 61                 
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -36                 | Program output: 64                 
Correct output: -14                 | Program output: 83                 
Correct output: 7                   | Program output: 70                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -75                
Correct output: -52                 | Program output: -10                
Correct output: -9                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: 71                 
Correct output: -67                 | Program output: 84                 
Correct output: -51                 | Program output: 58                 
Correct output: -96                 | Program output: -23                
Correct output: -28                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: 43                 
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 1                  
Correct output: -83                 | Program output: 89                 
Correct output: -68                 | Program output: 35                 
Correct output: -51                 | Program output: 73                 
Correct output: -10                 | Program output: 67                 
Correct output: -83                 | Program output: -37                
Correct output: -32                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -50                 | Program output: 36                 
Correct output: -52                 | Program output: 37                 
Correct output: -81                 | Program output: 52                 
Correct output: 38                  | Program output: 99                 
Correct output: -86                 | Program output: -20                
Correct output: -99                 | Program output: 26                 
Correct output: -76                 | Program output: -4                 
Correct output: -95                 | Program output: 95                 
Correct output: -80                 | Program output: -18                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 90                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -46                
Correct output: -66                 | Program output: -25                
Correct output: -96                 | Program output: -54                
Correct output: 4                   | Program output: 26                 
Correct output: -88                 | Program output: 31                 
Correct output: 2                   | Program output: 38                 
Correct output: -30                 | Program output: 44                 
Correct output: -4                  | Program output: 27                 
Correct output: -85                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer integer_inc boolean_dup) integer_empty exec_when (exec_k (boolean_shove boolean_empty integer_div) ())))
Lexicase best errors: [0 0 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 87
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer integer_inc boolean_dup) integer_empty exec_when (exec_k (boolean_shove boolean_empty integer_div) ())))
Zero cases best errors: [0 0 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 87
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (805 1 1 324 1 2 806 1 804 325)
Population mean number of elite cases: 3.07
Count of perfect (error zero) individuals by case: (805 1 1 324 1 2 806 1 804 325)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer integer_inc boolean_dup) integer_empty exec_when (exec_k (boolean_shove boolean_empty integer_div) ())))
Errors: [0 0 0 1 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 67
Size: 87
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 6.93
Median total errors in population: 7
Error averages by case: (0.195 0.999 0.999 0.676 0.999 0.998 0.194 0.999 0.196 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.123
Average program size in population (points): 84.61
Average percent parens in population: 0.254
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.493
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1037557
--- Timings ---
Current time: 1559583157450 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.4 seconds, 45.6%
Fitness Testing:      2.2 seconds, 42.5%
Report:               0.5 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: 83                 
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 63                 
Correct output: 18                  | Program output: 18                 
Correct output: 39                  | Program output: 51                 
Correct output: 33                  | Program output: 67                 
Correct output: 29                  | Program output: 53                 
Correct output: 33                  | Program output: 76                 
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 95                 
Correct output: 5                   | Program output: 89                 
Correct output: 6                   | Program output: 60                 
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 46                 
Correct output: 2                   | Program output: 57                 
Correct output: 25                  | Program output: 58                 
Correct output: 19                  | Program output: 74                 
Correct output: 11                  | Program output: 46                 
Correct output: 56                  | Program output: 93                 
Correct output: 16                  | Program output: 33                 
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 17                 
Correct output: -51                 | Program output: 76                 
Correct output: -20                 | Program output: -20                
Correct output: 42                  | Program output: 61                 
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -36                 | Program output: 64                 
Correct output: -14                 | Program output: 83                 
Correct output: 7                   | Program output: 70                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -75                
Correct output: -52                 | Program output: -10                
Correct output: -9                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: 71                 
Correct output: -67                 | Program output: 84                 
Correct output: -51                 | Program output: 58                 
Correct output: -96                 | Program output: -23                
Correct output: -28                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: 43                 
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 1                  
Correct output: -83                 | Program output: 89                 
Correct output: -68                 | Program output: 35                 
Correct output: -51                 | Program output: 73                 
Correct output: -10                 | Program output: 67                 
Correct output: -83                 | Program output: -37                
Correct output: -32                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -50                 | Program output: 36                 
Correct output: -52                 | Program output: 37                 
Correct output: -81                 | Program output: 52                 
Correct output: 38                  | Program output: 99                 
Correct output: -86                 | Program output: -20                
Correct output: -99                 | Program output: 26                 
Correct output: -76                 | Program output: -4                 
Correct output: -95                 | Program output: 95                 
Correct output: -80                 | Program output: -18                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 90                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -46                
Correct output: -66                 | Program output: -25                
Correct output: -96                 | Program output: -54                
Correct output: 4                   | Program output: 26                 
Correct output: -88                 | Program output: 31                 
Correct output: 2                   | Program output: 38                 
Correct output: -30                 | Program output: 44                 
Correct output: -4                  | Program output: 27                 
Correct output: -85                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (print_newline exec_noop integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer integer_inc boolean_dup) integer_empty exec_when (exec_k (boolean_shove boolean_empty integer_div) ())))
Lexicase best errors: [1 0 1 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 88
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (print_newline exec_noop integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer integer_inc boolean_dup) integer_empty exec_when (exec_k (boolean_shove boolean_empty integer_div) ())))
Zero cases best errors: [1 0 1 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 88
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 522 1000 1000 1 1000 531 1000 1000 341)
Population mean number of elite cases: 7.39
Count of perfect (error zero) individuals by case: (0 522 0 0 1 0 531 0 0 341)
Population mean number of perfect (error zero) cases: 1.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer integer_inc boolean_xor boolean_shove integer_sub print_integer integer_inc boolean_dup) integer_empty exec_when (exec_k (boolean_shove boolean_empty integer_div) ())))
Errors: [1 0 1 1 1 1 0 1 1 1]
Total: 8
Mean: 0.8
Genome size: 72
Size: 92
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 8.605
Median total errors in population: 8
Error averages by case: (1.0 0.478 1.0 1.0 0.999 1.0 0.469 1.0 1.0 0.659)
Error minima by case: (1 0 1 1 0 1 0 1 1 0)
Average genome size in population (length): 64.77
Average program size in population (points): 85.436
Average percent parens in population: 0.238
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.653
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 234
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 235
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1897451
--- Timings ---
Current time: 1559583160881 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.2 seconds, 48.5%
Fitness Testing:      3.0 seconds, 34.9%
Report:               1.3 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: 83                 
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 63                 
Correct output: 18                  | Program output: 18                 
Correct output: 39                  | Program output: 51                 
Correct output: 33                  | Program output: 67                 
Correct output: 29                  | Program output: 53                 
Correct output: 33                  | Program output: 76                 
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 95                 
Correct output: 5                   | Program output: 89                 
Correct output: 6                   | Program output: 60                 
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 46                 
Correct output: 2                   | Program output: 57                 
Correct output: 25                  | Program output: 58                 
Correct output: 19                  | Program output: 74                 
Correct output: 11                  | Program output: 46                 
Correct output: 56                  | Program output: 93                 
Correct output: 16                  | Program output: 33                 
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 17                 
Correct output: -51                 | Program output: 76                 
Correct output: -20                 | Program output: -20                
Correct output: 42                  | Program output: 61                 
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -36                 | Program output: 64                 
Correct output: -14                 | Program output: 83                 
Correct output: 7                   | Program output: 70                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -75                
Correct output: -52                 | Program output: -10                
Correct output: -9                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: 71                 
Correct output: -67                 | Program output: 84                 
Correct output: -51                 | Program output: 58                 
Correct output: -96                 | Program output: -23                
Correct output: -28                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: 43                 
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 1                  
Correct output: -83                 | Program output: 89                 
Correct output: -68                 | Program output: 35                 
Correct output: -51                 | Program output: 73                 
Correct output: -10                 | Program output: 67                 
Correct output: -83                 | Program output: -37                
Correct output: -32                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -50                 | Program output: 36                 
Correct output: -52                 | Program output: 37                 
Correct output: -81                 | Program output: 52                 
Correct output: 38                  | Program output: 99                 
Correct output: -86                 | Program output: -20                
Correct output: -99                 | Program output: 26                 
Correct output: -76                 | Program output: -4                 
Correct output: -95                 | Program output: 95                 
Correct output: -80                 | Program output: -18                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 90                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -46                
Correct output: -66                 | Program output: -25                
Correct output: -96                 | Program output: -54                
Correct output: 4                   | Program output: 26                 
Correct output: -88                 | Program output: 31                 
Correct output: 2                   | Program output: 38                 
Correct output: -30                 | Program output: 44                 
Correct output: -4                  | Program output: 27                 
Correct output: -85                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_s_when_autoconstructing (exec_stackdepth integer_max integer_shove) (integer_mult) () print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor)) ())))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 76
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_s_when_autoconstructing (exec_stackdepth integer_max integer_shove) (integer_mult) () print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor)) ())))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 76
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (424 240 420 418 418 420 420 249 688 675)
Population mean number of elite cases: 4.37
Count of perfect (error zero) individuals by case: (424 240 420 418 418 420 420 249 688 675)
Population mean number of perfect (error zero) cases: 4.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop integer_add integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer integer_inc boolean_dup) integer_empty exec_when (exec_k (boolean_shove boolean_empty integer_div) ())))
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 87
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 5.628
Median total errors in population: 6
Error averages by case: (0.576 0.76 0.58 0.582 0.582 0.58 0.58 0.751 0.312 0.325)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.32
Average program size in population (points): 68.963
Average percent parens in population: 0.242
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.48125
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2790044
--- Timings ---
Current time: 1559583164185 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.1 seconds, 50.4%
Fitness Testing:      3.8 seconds, 31.5%
Report:               2.1 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: 83                 
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 63                 
Correct output: 18                  | Program output: 18                 
Correct output: 39                  | Program output: 51                 
Correct output: 33                  | Program output: 67                 
Correct output: 29                  | Program output: 53                 
Correct output: 33                  | Program output: 76                 
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 95                 
Correct output: 5                   | Program output: 89                 
Correct output: 6                   | Program output: 60                 
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 46                 
Correct output: 2                   | Program output: 57                 
Correct output: 25                  | Program output: 58                 
Correct output: 19                  | Program output: 74                 
Correct output: 11                  | Program output: 46                 
Correct output: 56                  | Program output: 93                 
Correct output: 16                  | Program output: 33                 
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 17                 
Correct output: -51                 | Program output: 76                 
Correct output: -20                 | Program output: -20                
Correct output: 42                  | Program output: 61                 
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -36                 | Program output: 64                 
Correct output: -14                 | Program output: 83                 
Correct output: 7                   | Program output: 70                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -75                
Correct output: -52                 | Program output: -10                
Correct output: -9                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: 71                 
Correct output: -67                 | Program output: 84                 
Correct output: -51                 | Program output: 58                 
Correct output: -96                 | Program output: -23                
Correct output: -28                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: 43                 
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 1                  
Correct output: -83                 | Program output: 89                 
Correct output: -68                 | Program output: 35                 
Correct output: -51                 | Program output: 73                 
Correct output: -10                 | Program output: 67                 
Correct output: -83                 | Program output: -37                
Correct output: -32                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -50                 | Program output: 36                 
Correct output: -52                 | Program output: 37                 
Correct output: -81                 | Program output: 52                 
Correct output: 38                  | Program output: 99                 
Correct output: -86                 | Program output: -20                
Correct output: -99                 | Program output: 26                 
Correct output: -76                 | Program output: -4                 
Correct output: -95                 | Program output: 95                 
Correct output: -80                 | Program output: -18                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 90                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -46                
Correct output: -66                 | Program output: -25                
Correct output: -96                 | Program output: -54                
Correct output: 4                   | Program output: 26                 
Correct output: -88                 | Program output: 31                 
Correct output: 2                   | Program output: 38                 
Correct output: -30                 | Program output: 44                 
Correct output: -4                  | Program output: 27                 
Correct output: -85                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 2, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_frominteger boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop integer_mod integer_max boolean_shove) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_swap () () boolean_dup boolean_xor -41 integer_mod integer_div integer_stackdepth integer_sub integer_stackdepth) exec_k (exec_while (exec_rot (exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ()) () ())) ())
Lexicase best errors: [1 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 98
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 2, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_frominteger boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop integer_mod integer_max boolean_shove) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_swap () () boolean_dup boolean_xor -41 integer_mod integer_div integer_stackdepth integer_sub integer_stackdepth) exec_k (exec_while (exec_rot (exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ()) () ())) ())
Zero cases best errors: [1 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 98
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 276 636 915 635 634 1000 277 633 907)
Population mean number of elite cases: 6.91
Count of perfect (error zero) individuals by case: (0 276 636 915 635 634 0 277 633 907)
Population mean number of perfect (error zero) cases: 4.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (22 boolean_invert_first_then_and integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer integer_inc boolean_dup) integer_empty exec_do*range (exec_k (boolean_shove boolean_empty integer_div) ()))
Errors: [1 1 0 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 79
Size: 104
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 5.087
Median total errors in population: 4
Error averages by case: (1.0 0.724 0.364 0.085 0.365 0.366 1.0 0.723 0.367 0.093)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 62.899
Average program size in population (points): 82.749
Average percent parens in population: 0.238
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.683
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3729952
--- Timings ---
Current time: 1559583167571 milliseconds
Total Time:          15.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.9 seconds, 51.3%
Fitness Testing:      4.6 seconds, 29.9%
Report:               2.8 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 67                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 35                 
Correct output: 3                   | Program output: 40                 
Correct output: 18                  | Program output: 81                 
Correct output: 39                  | Program output: 63                 
Correct output: 33                  | Program output: 80                 
Correct output: 29                  | Program output: 78                 
Correct output: 33                  | Program output: 84                 
Correct output: 20                  | Program output: 62                 
Correct output: 1                   | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 85                 
Correct output: 0                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 2                   | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 73                 
Correct output: 56                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: -60                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: 61                 
Correct output: -20                 | Program output: -2                 
Correct output: 42                  | Program output: 42                 
Correct output: -64                 | Program output: 38                 
Correct output: -61                 | Program output: 65                 
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: 63                 
Correct output: 7                   | Program output: 25                 
Correct output: -73                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -75                
Correct output: -88                 | Program output: 30                 
Correct output: -52                 | Program output: -30                
Correct output: -9                  | Program output: 2                  
Correct output: -77                 | Program output: -48                
Correct output: -91                 | Program output: -59                
Correct output: -67                 | Program output: -9                 
Correct output: -51                 | Program output: 60                 
Correct output: -96                 | Program output: 93                 
Correct output: -28                 | Program output: 34                 
Correct output: -69                 | Program output: 31                 
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: 80                 
Correct output: -82                 | Program output: 51                 
Correct output: -70                 | Program output: 12                 
Correct output: -83                 | Program output: -47                
Correct output: -68                 | Program output: 56                 
Correct output: -51                 | Program output: -51                
Correct output: -10                 | Program output: -10                
Correct output: -83                 | Program output: 53                 
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: 60                 
Correct output: -81                 | Program output: -35                
Correct output: 38                  | Program output: 90                 
Correct output: -86                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -18                
Correct output: -95                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -43                
Correct output: -81                 | Program output: 83                 
Correct output: -83                 | Program output: -51                
Correct output: -88                 | Program output: -48                
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -7                 
Correct output: -59                 | Program output: 26                 
Correct output: -66                 | Program output: 21                 
Correct output: -96                 | Program output: -35                
Correct output: 4                   | Program output: 78                 
Correct output: -88                 | Program output: -88                
Correct output: 2                   | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -4                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer})
Lexicase best program: (exec_y_when_autoconstructing (exec_dup_items integer_fromboolean integer_dup) boolean_shove integer_lte integer_pop integer_add boolean_shove exec_yankdup boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq boolean_frominteger integer_shove in2 boolean_flush exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) integer_flush exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer integer_inc boolean_dup) integer_empty exec_when (exec_k (boolean_shove boolean_empty print_integer) ()))
Lexicase best errors: [0 0 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 82
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer})
Zero cases best program: (exec_y_when_autoconstructing (exec_dup_items integer_fromboolean integer_dup) boolean_shove integer_lte integer_pop integer_add boolean_shove exec_yankdup boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq boolean_frominteger integer_shove in2 boolean_flush exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) integer_flush exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer integer_inc boolean_dup) integer_empty exec_when (exec_k (boolean_shove boolean_empty print_integer) ()))
Zero cases best errors: [0 0 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 82
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (323 895 323 1000 574 1000 321 324 573 1000)
Population mean number of elite cases: 6.33
Count of perfect (error zero) individuals by case: (323 895 323 0 574 0 321 324 573 0)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_integer_276} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq})
Best program: (integer_div boolean_frominteger exec_do*count () boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop) print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (integer_lt tag_integer_276 exec_yank integer_shove boolean_and exec_do*while (exec_stackdepth exec_swap () () boolean_dup boolean_xor -41 integer_mod integer_div integer_stackdepth integer_sub integer_stackdepth) exec_k (exec_while (exec_rot (exec_rot (exec_shove (boolean_stackdepth) exec_rot (exec_shove (boolean_shove print_integer integer_lte exec_k_when_autoconstructing (boolean_stackdepth integer_mod integer_dup) (boolean_invert_first_then_and boolean_dup exec_pop (boolean_and integer_max exec_do*range () in2) boolean_invert_first_then_and) exec_eq)) () ()) () ()) () ())) ())) ())))
Errors: [0 0 0 1 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 86
Size: 123
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 6.667
Median total errors in population: 7
Error averages by case: (0.677 0.105 0.677 1.0 0.426 1.0 0.679 0.676 0.427 1.0)
Error minima by case: (0 0 0 1 0 1 0 0 0 1)
Average genome size in population (length): 63.454
Average program size in population (points): 83.732
Average percent parens in population: 0.240
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.1741875
Median age in population: 7.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4675641
--- Timings ---
Current time: 1559583170838 milliseconds
Total Time:          18.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.7 seconds, 51.7%
Fitness Testing:      5.4 seconds, 28.9%
Report:               3.5 seconds, 18.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 83                 
Correct output: 11                  | Program output: 80                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 99                 
Correct output: 39                  | Program output: 52                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 75                 
Correct output: 33                  | Program output: 98                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 95                 
Correct output: 2                   | Program output: 35                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 77                 
Correct output: 16                  | Program output: 77                 
Correct output: -60                 | Program output: 84                 
Correct output: -99                 | Program output: 54                 
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 72                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 71                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: 68                 
Correct output: -96                 | Program output: 10                 
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 63                 
Correct output: -54                 | Program output: -40                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: 32                 
Correct output: -83                 | Program output: 45                 
Correct output: -32                 | Program output: 98                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -47                
Correct output: -81                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -41                
Correct output: -76                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 83                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: 82                 
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 95                 
Correct output: -80                 | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 6                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 18                 
Correct output: -30                 | Program output: 86                 
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth integer_max integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max integer_shove) integer_mult) () print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 exec_k (boolean_shove integer_sub print_integer) ())
Lexicase best errors: [1 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 84
Percent parens: 0.202
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth integer_max integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max integer_shove) integer_mult) () print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 exec_k (boolean_shove integer_sub print_integer) ())
Zero cases best errors: [1 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 84
Percent parens: 0.202
--- Lexicase Population Statistics ---
Count of elite individuals by case: (278 599 1 1 276 1 599 1 1 597)
Population mean number of elite cases: 2.35
Count of perfect (error zero) individuals by case: (278 599 1 1 276 1 599 1 1 597)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth integer_max integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max integer_shove) integer_mult) () print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 exec_k (boolean_shove integer_sub print_integer) ())
Errors: [1 1 0 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 67
Size: 84
Percent parens: 0.202
--- Population Statistics ---
Average total errors in population: 7.646
Median total errors in population: 7
Error averages by case: (0.722 0.401 0.999 0.999 0.724 0.999 0.401 0.999 0.999 0.403)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.438
Average program size in population (points): 82.336
Average percent parens in population: 0.238
Minimum age in population: 6.0
Maximum age in population: 10.59375
Average age in population: 8.676
Median age in population: 8.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5563886
--- Timings ---
Current time: 1559583174104 milliseconds
Total Time:          22.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.5 seconds, 52.2%
Fitness Testing:      6.2 seconds, 28.1%
Report:               4.2 seconds, 19.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 83                 
Correct output: 11                  | Program output: 80                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 99                 
Correct output: 39                  | Program output: 52                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 75                 
Correct output: 33                  | Program output: 98                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 95                 
Correct output: 2                   | Program output: 35                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 77                 
Correct output: 16                  | Program output: 77                 
Correct output: -60                 | Program output: 84                 
Correct output: -99                 | Program output: 54                 
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 72                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 71                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: 68                 
Correct output: -96                 | Program output: 10                 
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 63                 
Correct output: -54                 | Program output: -40                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: 32                 
Correct output: -83                 | Program output: 45                 
Correct output: -32                 | Program output: 98                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -47                
Correct output: -81                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -41                
Correct output: -76                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 83                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: 82                 
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 95                 
Correct output: -80                 | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 6                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 18                 
Correct output: -30                 | Program output: 86                 
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth integer_max integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max integer_shove) integer_mult) () print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 exec_k (boolean_shove integer_sub print_integer) ())
Lexicase best errors: [1 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 84
Percent parens: 0.202
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth integer_max integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max integer_shove) integer_mult) () print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 exec_k (boolean_shove integer_sub print_integer) ())
Zero cases best errors: [1 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 84
Percent parens: 0.202
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 371 902 371 371 108 218 207 372 211)
Population mean number of elite cases: 3.24
Count of perfect (error zero) individuals by case: (108 371 902 371 371 108 218 207 372 211)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth integer_max integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max integer_shove) integer_mult) () print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 exec_k (boolean_shove integer_sub print_integer) ())
Errors: [1 0 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 67
Size: 84
Percent parens: 0.202
--- Population Statistics ---
Average total errors in population: 6.761
Median total errors in population: 7
Error averages by case: (0.892 0.629 0.098 0.629 0.629 0.892 0.782 0.793 0.628 0.789)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.149
Average program size in population (points): 86.757
Average percent parens in population: 0.234
Minimum age in population: 7.0
Maximum age in population: 12.28125
Average age in population: 10.58221875
Median age in population: 10.828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6574428
--- Timings ---
Current time: 1559583177361 milliseconds
Total Time:          25.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.2 seconds, 52.2%
Fitness Testing:      7.0 seconds, 27.8%
Report:               4.9 seconds, 19.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 67                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 35                 
Correct output: 3                   | Program output: 40                 
Correct output: 18                  | Program output: 81                 
Correct output: 39                  | Program output: 63                 
Correct output: 33                  | Program output: 80                 
Correct output: 29                  | Program output: 78                 
Correct output: 33                  | Program output: 84                 
Correct output: 20                  | Program output: 62                 
Correct output: 1                   | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 85                 
Correct output: 0                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 2                   | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 73                 
Correct output: 56                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: -60                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: 61                 
Correct output: -20                 | Program output: -2                 
Correct output: 42                  | Program output: 42                 
Correct output: -64                 | Program output: 38                 
Correct output: -61                 | Program output: 65                 
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: 63                 
Correct output: 7                   | Program output: 25                 
Correct output: -73                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -75                
Correct output: -88                 | Program output: 30                 
Correct output: -52                 | Program output: -30                
Correct output: -9                  | Program output: 2                  
Correct output: -77                 | Program output: -48                
Correct output: -91                 | Program output: -59                
Correct output: -67                 | Program output: -9                 
Correct output: -51                 | Program output: 60                 
Correct output: -96                 | Program output: 93                 
Correct output: -28                 | Program output: 34                 
Correct output: -69                 | Program output: 31                 
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: 80                 
Correct output: -82                 | Program output: 51                 
Correct output: -70                 | Program output: 12                 
Correct output: -83                 | Program output: -47                
Correct output: -68                 | Program output: 56                 
Correct output: -51                 | Program output: -51                
Correct output: -10                 | Program output: -10                
Correct output: -83                 | Program output: 53                 
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: 60                 
Correct output: -81                 | Program output: -35                
Correct output: 38                  | Program output: 90                 
Correct output: -86                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -18                
Correct output: -95                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -43                
Correct output: -81                 | Program output: 83                 
Correct output: -83                 | Program output: -51                
Correct output: -88                 | Program output: -48                
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -7                 
Correct output: -59                 | Program output: 26                 
Correct output: -66                 | Program output: 21                 
Correct output: -96                 | Program output: -35                
Correct output: 4                   | Program output: 78                 
Correct output: -88                 | Program output: -88                
Correct output: 2                   | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -4                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop) print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max) integer_shove) (exec_stackdepth)) print_exec () exec_flush))
Lexicase best errors: [0 1 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop) print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max) integer_shove) (exec_stackdepth)) print_exec () exec_flush))
Zero cases best errors: [0 1 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 103 713 425 103 185 421 185 185 105)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (185 103 713 425 103 185 421 185 185 105)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_rot (boolean_dup_times integer_add integer_sub) (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop) print_integer) integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max print_newline) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) (exec_dup_times (22 exec_noop integer_dup tag_integer_377 in1 boolean_shove integer_sub print_integer integer_inc boolean_dup) integer_empty exec_when (integer_dup integer_div)))))
Errors: [0 1 0 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 76
Size: 98
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 7.39
Median total errors in population: 7
Error averages by case: (0.815 0.897 0.287 0.575 0.897 0.815 0.579 0.815 0.815 0.895)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.128
Average program size in population (points): 84.481
Average percent parens in population: 0.227
Minimum age in population: 9.0
Maximum age in population: 14.125
Average age in population: 12.1380703125
Median age in population: 12.171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7584927
--- Timings ---
Current time: 1559583180932 milliseconds
Total Time:          28.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.2 seconds, 52.7%
Fitness Testing:      7.9 seconds, 27.3%
Report:               5.7 seconds, 19.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 89                 
Correct output: -14                 | Program output: 16                 
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -16                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 79                 
Correct output: 3                   | Program output: 83                 
Correct output: 18                  | Program output: 72                 
Correct output: 39                  | Program output: 39                 
Correct output: 33                  | Program output: 79                 
Correct output: 29                  | Program output: 29                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 91                 
Correct output: 1                   | Program output: 20                 
Correct output: 5                   | Program output: 31                 
Correct output: 6                   | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 44                  | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 38                 
Correct output: 19                  | Program output: 29                 
Correct output: 11                  | Program output: 60                 
Correct output: 56                  | Program output: 56                 
Correct output: 16                  | Program output: 36                 
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -12                
Correct output: -51                 | Program output: -20                
Correct output: -20                 | Program output: 97                 
Correct output: 42                  | Program output: 70                 
Correct output: -64                 | Program output: 41                 
Correct output: -61                 | Program output: 25                 
Correct output: -36                 | Program output: 55                 
Correct output: -14                 | Program output: 49                 
Correct output: 7                   | Program output: 33                 
Correct output: -73                 | Program output: 22                 
Correct output: -54                 | Program output: -28                
Correct output: -98                 | Program output: -33                
Correct output: -88                 | Program output: 42                 
Correct output: -52                 | Program output: -52                
Correct output: -9                  | Program output: 21                 
Correct output: -77                 | Program output: 30                 
Correct output: -91                 | Program output: 33                 
Correct output: -67                 | Program output: -21                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 29                 
Correct output: -69                 | Program output: 59                 
Correct output: -81                 | Program output: 28                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -50                
Correct output: -68                 | Program output: -6                 
Correct output: -51                 | Program output: -15                
Correct output: -10                 | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 19                 
Correct output: -76                 | Program output: -45                
Correct output: -50                 | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 49                 
Correct output: -86                 | Program output: 83                 
Correct output: -99                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -36                
Correct output: -80                 | Program output: 54                 
Correct output: -63                 | Program output: 54                 
Correct output: -81                 | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -38                
Correct output: -13                 | Program output: 66                 
Correct output: -65                 | Program output: 64                 
Correct output: -91                 | Program output: 66                 
Correct output: -80                 | Program output: -45                
Correct output: -59                 | Program output: 4                  
Correct output: -66                 | Program output: -47                
Correct output: -96                 | Program output: -1                 
Correct output: 4                   | Program output: 4                  
Correct output: -88                 | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: -30                 | Program output: -20                
Correct output: -4                  | Program output: 65                 
Correct output: -85                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -80} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_y_when_autoconstructing (exec_dup_items integer_fromboolean integer_mult) boolean_shove integer_lte integer_pop integer_add boolean_shove exec_yankdup exec_y_when_autoconstructing (integer_dup_times boolean_yankdup exec_dup_times (-80 boolean_swap boolean_pop boolean_not in4 exec_noop) print_integer) integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger exec_y_when_autoconstructing () print_boolean) exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult)) (print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup boolean_dup boolean_xor -41 integer_mod integer_div integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ()) () ())) ()))
Lexicase best errors: [1 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 104
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -80} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_y_when_autoconstructing (exec_dup_items integer_fromboolean integer_mult) boolean_shove integer_lte integer_pop integer_add boolean_shove exec_yankdup exec_y_when_autoconstructing (integer_dup_times boolean_yankdup exec_dup_times (-80 boolean_swap boolean_pop boolean_not in4 exec_noop) print_integer) integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger exec_y_when_autoconstructing () print_boolean) exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult)) (print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup boolean_dup boolean_xor -41 integer_mod integer_div integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ()) () ())) ()))
Zero cases best errors: [1 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 104
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 10 370 337 334 334 334 528 370 337)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (188 10 370 337 334 334 334 528 370 337)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -80} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Best program: (exec_y_when_autoconstructing (exec_dup_items integer_fromboolean integer_mult) boolean_shove integer_lte integer_pop integer_add boolean_shove exec_yankdup exec_y_when_autoconstructing (integer_dup_times boolean_yankdup exec_dup_times (-80 boolean_swap boolean_pop boolean_not in4 exec_noop) print_integer) integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count () integer_lte print_newline boolean_dup_items exec_when (exec_y_when_autoconstructing () print_boolean) exec_dup_times (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max integer_shove) integer_mult) print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 exec_k (boolean_shove integer_sub print_integer) ())
Errors: [1 1 1 0 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 69
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 6.858
Median total errors in population: 8
Error averages by case: (0.812 0.99 0.63 0.663 0.666 0.666 0.666 0.472 0.63 0.663)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.743
Average program size in population (points): 86.704
Average percent parens in population: 0.237
Minimum age in population: 10.984375
Maximum age in population: 15.59375
Average age in population: 13.44263671875
Median age in population: 13.5078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8597051
--- Timings ---
Current time: 1559583184707 milliseconds
Total Time:          32.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.4 seconds, 53.4%
Fitness Testing:      8.7 seconds, 26.7%
Report:               6.4 seconds, 19.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 83                 
Correct output: 11                  | Program output: 80                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 99                 
Correct output: 39                  | Program output: 52                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 75                 
Correct output: 33                  | Program output: 98                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 95                 
Correct output: 2                   | Program output: 35                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 77                 
Correct output: 16                  | Program output: 77                 
Correct output: -60                 | Program output: 84                 
Correct output: -99                 | Program output: 54                 
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 72                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 71                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: 68                 
Correct output: -96                 | Program output: 10                 
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 63                 
Correct output: -54                 | Program output: -40                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: 32                 
Correct output: -83                 | Program output: 45                 
Correct output: -32                 | Program output: 98                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -47                
Correct output: -81                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -41                
Correct output: -76                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 83                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: 82                 
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 95                 
Correct output: -80                 | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 6                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 18                 
Correct output: -30                 | Program output: 86                 
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop boolean_flush integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (boolean_yank print_newline exec_y (boolean_dup_items) integer_pop) print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger exec_y_when_autoconstructing () print_boolean) exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup boolean_dup boolean_xor -41 integer_mod integer_div integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (boolean_flush exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ())) ())
Lexicase best errors: [0 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 105
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop boolean_flush integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (boolean_yank print_newline exec_y (boolean_dup_items) integer_pop) print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger exec_y_when_autoconstructing () print_boolean) exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup boolean_dup boolean_xor -41 integer_mod integer_div integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (boolean_flush exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ())) ())
Zero cases best errors: [0 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 105
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (120 98 170 95 120 120 121 170 170 120)
Population mean number of elite cases: 1.30
Count of perfect (error zero) individuals by case: (120 98 170 95 120 120 121 170 170 120)
Population mean number of perfect (error zero) cases: 1.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) boolean_flush exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth exec_y (integer_shove) exec_eq exec_k_when_autoconstructing (integer_mod print_exec (boolean_swap exec_stackdepth integer_max integer_max integer_shove) integer_mult) () print_exec () exec_flush exec_dup_times (integer_swap) in1 integer_dup tag_integer_377 exec_k (boolean_shove integer_sub print_integer) ())
Errors: [0 1 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 73
Size: 91
Percent parens: 0.198
--- Population Statistics ---
Average total errors in population: 8.696
Median total errors in population: 10
Error averages by case: (0.88 0.902 0.83 0.905 0.88 0.88 0.879 0.83 0.83 0.88)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.276
Average program size in population (points): 88.016
Average percent parens in population: 0.242
Minimum age in population: 12.375
Maximum age in population: 16.95703125
Average age in population: 14.9482265625
Median age in population: 15.01171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 9631409
--- Timings ---
Current time: 1559583188472 milliseconds
Total Time:          36.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.6 seconds, 53.9%
Fitness Testing:      9.6 seconds, 26.3%
Report:               7.1 seconds, 19.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 83                 
Correct output: 11                  | Program output: 80                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 99                 
Correct output: 39                  | Program output: 52                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 75                 
Correct output: 33                  | Program output: 98                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 95                 
Correct output: 2                   | Program output: 35                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 77                 
Correct output: 16                  | Program output: 77                 
Correct output: -60                 | Program output: 84                 
Correct output: -99                 | Program output: 54                 
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 72                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 71                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: 68                 
Correct output: -96                 | Program output: 10                 
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 63                 
Correct output: -54                 | Program output: -40                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: 32                 
Correct output: -83                 | Program output: 45                 
Correct output: -32                 | Program output: 98                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -47                
Correct output: -81                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -41                
Correct output: -76                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 83                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: 82                 
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 95                 
Correct output: -80                 | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 6                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 18                 
Correct output: -30                 | Program output: 86                 
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop) (exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove integer_min boolean_flush exec_noop) print_integer) integer_pop exec_yankdup integer_pop boolean_frominteger integer_mod integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth integer_max integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max exec_noop integer_dup boolean_dup boolean_xor -41 integer_mod integer_div integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ()) () ())) ()) ())
Lexicase best errors: [0 1 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 87
Percent parens: 0.287
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop) (exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove integer_min boolean_flush exec_noop) print_integer) integer_pop exec_yankdup integer_pop boolean_frominteger integer_mod integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth integer_max integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max exec_noop integer_dup boolean_dup boolean_xor -41 integer_mod integer_div integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ()) () ())) ()) ())
Zero cases best errors: [0 1 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 87
Percent parens: 0.287
--- Lexicase Population Statistics ---
Count of elite individuals by case: (630 442 188 260 188 262 188 442 443 262)
Population mean number of elite cases: 3.31
Count of perfect (error zero) individuals by case: (630 442 188 260 188 262 188 442 443 262)
Population mean number of perfect (error zero) cases: 3.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 2, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger exec_y_when_autoconstructing (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth integer_max integer_shove) exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max integer_add) integer_mult) () print_exec (exec_flush) exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 boolean_not integer_mult print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 exec_k (boolean_shove integer_sub print_integer) ())
Errors: [0 0 1 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 76
Size: 96
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.695
Median total errors in population: 6
Error averages by case: (0.37 0.558 0.812 0.74 0.812 0.738 0.812 0.558 0.557 0.738)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.023
Average program size in population (points): 84.229
Average percent parens in population: 0.237
Minimum age in population: 13.984375
Maximum age in population: 18.642578125
Average age in population: 16.5483525390625
Median age in population: 16.62255859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 10618751
--- Timings ---
Current time: 1559583191819 milliseconds
Total Time:          39.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.4 seconds, 53.8%
Fitness Testing:     10.4 seconds, 26.2%
Report:               7.8 seconds, 19.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 89                 
Correct output: -14                 | Program output: 16                 
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -16                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 79                 
Correct output: 3                   | Program output: 83                 
Correct output: 18                  | Program output: 72                 
Correct output: 39                  | Program output: 39                 
Correct output: 33                  | Program output: 79                 
Correct output: 29                  | Program output: 29                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 91                 
Correct output: 1                   | Program output: 20                 
Correct output: 5                   | Program output: 31                 
Correct output: 6                   | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 44                  | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 38                 
Correct output: 19                  | Program output: 29                 
Correct output: 11                  | Program output: 60                 
Correct output: 56                  | Program output: 56                 
Correct output: 16                  | Program output: 36                 
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -12                
Correct output: -51                 | Program output: -20                
Correct output: -20                 | Program output: 97                 
Correct output: 42                  | Program output: 70                 
Correct output: -64                 | Program output: 41                 
Correct output: -61                 | Program output: 25                 
Correct output: -36                 | Program output: 55                 
Correct output: -14                 | Program output: 49                 
Correct output: 7                   | Program output: 33                 
Correct output: -73                 | Program output: 22                 
Correct output: -54                 | Program output: -28                
Correct output: -98                 | Program output: -33                
Correct output: -88                 | Program output: 42                 
Correct output: -52                 | Program output: -52                
Correct output: -9                  | Program output: 21                 
Correct output: -77                 | Program output: 30                 
Correct output: -91                 | Program output: 33                 
Correct output: -67                 | Program output: -21                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 29                 
Correct output: -69                 | Program output: 59                 
Correct output: -81                 | Program output: 28                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -50                
Correct output: -68                 | Program output: -6                 
Correct output: -51                 | Program output: -15                
Correct output: -10                 | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 19                 
Correct output: -76                 | Program output: -45                
Correct output: -50                 | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 49                 
Correct output: -86                 | Program output: 83                 
Correct output: -99                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -36                
Correct output: -80                 | Program output: 54                 
Correct output: -63                 | Program output: 54                 
Correct output: -81                 | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -38                
Correct output: -13                 | Program output: 66                 
Correct output: -65                 | Program output: 64                 
Correct output: -91                 | Program output: 66                 
Correct output: -80                 | Program output: -45                
Correct output: -59                 | Program output: 4                  
Correct output: -66                 | Program output: -47                
Correct output: -96                 | Program output: -1                 
Correct output: 4                   | Program output: 4                  
Correct output: -88                 | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: -30                 | Program output: -20                
Correct output: -4                  | Program output: 65                 
Correct output: -85                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_pop (boolean_frominteger boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_pop (boolean_dup_times integer_add integer_sub exec_noop) print_integer) integer_pop exec_yankdup integer_pop) integer_inc boolean_swap boolean_pop boolean_not in4 exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger exec_y_when_autoconstructing () print_boolean) exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_max exec_eq) (exec_k_when_autoconstructing (print_exec () exec_flush) (exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor) integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot () () ()) () ())) ())))
Lexicase best errors: [0 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 89
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_pop (boolean_frominteger boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_pop (boolean_dup_times integer_add integer_sub exec_noop) print_integer) integer_pop exec_yankdup integer_pop) integer_inc boolean_swap boolean_pop boolean_not in4 exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger exec_y_when_autoconstructing () print_boolean) exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_max exec_eq) (exec_k_when_autoconstructing (print_exec () exec_flush) (exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor) integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot () () ()) () ())) ())))
Zero cases best errors: [0 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 89
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 315 1 315 304 304 281 1 304 1)
Population mean number of elite cases: 1.83
Count of perfect (error zero) individuals by case: (1 315 1 315 304 304 281 1 304 1)
Population mean number of perfect (error zero) cases: 1.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot})
Best program: (exec_pop (boolean_frominteger boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_pop (boolean_dup_times integer_add integer_sub exec_noop) print_integer) integer_pop exec_yankdup integer_pop) integer_inc boolean_swap boolean_pop boolean_not in4 exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger exec_y_when_autoconstructing () print_boolean) exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_max exec_eq) (exec_k_when_autoconstructing (print_exec () exec_flush) (exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor) integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot () () ()) () ())) ())))
Errors: [0 1 0 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 64
Size: 89
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 8.173
Median total errors in population: 8
Error averages by case: (0.999 0.685 0.999 0.685 0.696 0.696 0.719 0.999 0.696 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.734
Average program size in population (points): 83.909
Average percent parens in population: 0.237
Minimum age in population: 15.005859375
Maximum age in population: 19.90185546875
Average age in population: 18.0515322265625
Median age in population: 18.13818359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 11601444
--- Timings ---
Current time: 1559583195430 milliseconds
Total Time:          43.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.4 seconds, 54.1%
Fitness Testing:     11.2 seconds, 25.9%
Report:               8.5 seconds, 19.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: 83                 
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 63                 
Correct output: 18                  | Program output: 18                 
Correct output: 39                  | Program output: 51                 
Correct output: 33                  | Program output: 67                 
Correct output: 29                  | Program output: 53                 
Correct output: 33                  | Program output: 76                 
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 95                 
Correct output: 5                   | Program output: 89                 
Correct output: 6                   | Program output: 60                 
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 46                 
Correct output: 2                   | Program output: 57                 
Correct output: 25                  | Program output: 58                 
Correct output: 19                  | Program output: 74                 
Correct output: 11                  | Program output: 46                 
Correct output: 56                  | Program output: 93                 
Correct output: 16                  | Program output: 33                 
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 17                 
Correct output: -51                 | Program output: 76                 
Correct output: -20                 | Program output: -20                
Correct output: 42                  | Program output: 61                 
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -36                 | Program output: 64                 
Correct output: -14                 | Program output: 83                 
Correct output: 7                   | Program output: 70                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -75                
Correct output: -52                 | Program output: -10                
Correct output: -9                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: 71                 
Correct output: -67                 | Program output: 84                 
Correct output: -51                 | Program output: 58                 
Correct output: -96                 | Program output: -23                
Correct output: -28                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: 43                 
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 1                  
Correct output: -83                 | Program output: 89                 
Correct output: -68                 | Program output: 35                 
Correct output: -51                 | Program output: 73                 
Correct output: -10                 | Program output: 67                 
Correct output: -83                 | Program output: -37                
Correct output: -32                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -50                 | Program output: 36                 
Correct output: -52                 | Program output: 37                 
Correct output: -81                 | Program output: 52                 
Correct output: 38                  | Program output: 99                 
Correct output: -86                 | Program output: -20                
Correct output: -99                 | Program output: 26                 
Correct output: -76                 | Program output: -4                 
Correct output: -95                 | Program output: 95                 
Correct output: -80                 | Program output: -18                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 90                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -46                
Correct output: -66                 | Program output: -25                
Correct output: -96                 | Program output: -54                
Correct output: 4                   | Program output: 26                 
Correct output: -88                 | Program output: 31                 
Correct output: 2                   | Program output: 38                 
Correct output: -30                 | Program output: 44                 
Correct output: -4                  | Program output: 27                 
Correct output: -85                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction print_exec} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot})
Lexicase best program: (boolean_not in3 exec_noop exec_dup_items boolean_frominteger boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_pop (boolean_dup_times integer_add integer_sub exec_noop) print_integer) integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte exec_noop boolean_dup_items boolean_frominteger exec_y_when_autoconstructing () print_boolean) exec_dup_times (exec_do*while (exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) print_exec ()) (print_exec () exec_flush) exec_dup_times (22 integer_gte integer_dup boolean_dup boolean_xor exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor) integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot () () ()) () ())) ())))
Lexicase best errors: [0 1 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 93
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction print_exec} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot})
Zero cases best program: (boolean_not in3 exec_noop exec_dup_items boolean_frominteger boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (exec_pop (boolean_dup_times integer_add integer_sub exec_noop) print_integer) integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte exec_noop boolean_dup_items boolean_frominteger exec_y_when_autoconstructing () print_boolean) exec_dup_times (exec_do*while (exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) print_exec ()) (print_exec () exec_flush) exec_dup_times (22 integer_gte integer_dup boolean_dup boolean_xor exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor) integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot () () ()) () ())) ())))
Zero cases best errors: [0 1 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 93
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (537 113 115 731 189 189 233 233 233 419)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (537 113 115 731 189 189 233 233 233 419)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove integer_min boolean_flush exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) boolean_frominteger integer_swap integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth integer_max integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max exec_noop exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ())) ())
Errors: [0 1 1 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 69
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 7.008
Median total errors in population: 7
Error averages by case: (0.463 0.887 0.885 0.269 0.811 0.811 0.767 0.767 0.767 0.581)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.259
Average program size in population (points): 84.952
Average percent parens in population: 0.253
Minimum age in population: 16.39453125
Maximum age in population: 21.383056640625
Average age in population: 19.62089672851562
Median age in population: 19.6092529296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 12586620
--- Timings ---
Current time: 1559583198584 milliseconds
Total Time:          46.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.5 seconds, 54.4%
Fitness Testing:     12.1 seconds, 25.7%
Report:               9.2 seconds, 19.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 67                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 35                 
Correct output: 3                   | Program output: 40                 
Correct output: 18                  | Program output: 81                 
Correct output: 39                  | Program output: 63                 
Correct output: 33                  | Program output: 80                 
Correct output: 29                  | Program output: 78                 
Correct output: 33                  | Program output: 84                 
Correct output: 20                  | Program output: 62                 
Correct output: 1                   | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 85                 
Correct output: 0                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 2                   | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 73                 
Correct output: 56                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: -60                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: 61                 
Correct output: -20                 | Program output: -2                 
Correct output: 42                  | Program output: 42                 
Correct output: -64                 | Program output: 38                 
Correct output: -61                 | Program output: 65                 
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: 63                 
Correct output: 7                   | Program output: 25                 
Correct output: -73                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -75                
Correct output: -88                 | Program output: 30                 
Correct output: -52                 | Program output: -30                
Correct output: -9                  | Program output: 2                  
Correct output: -77                 | Program output: -48                
Correct output: -91                 | Program output: -59                
Correct output: -67                 | Program output: -9                 
Correct output: -51                 | Program output: 60                 
Correct output: -96                 | Program output: 93                 
Correct output: -28                 | Program output: 34                 
Correct output: -69                 | Program output: 31                 
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: 80                 
Correct output: -82                 | Program output: 51                 
Correct output: -70                 | Program output: 12                 
Correct output: -83                 | Program output: -47                
Correct output: -68                 | Program output: 56                 
Correct output: -51                 | Program output: -51                
Correct output: -10                 | Program output: -10                
Correct output: -83                 | Program output: 53                 
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: 60                 
Correct output: -81                 | Program output: -35                
Correct output: 38                  | Program output: 90                 
Correct output: -86                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -18                
Correct output: -95                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -43                
Correct output: -81                 | Program output: 83                 
Correct output: -83                 | Program output: -51                
Correct output: -88                 | Program output: -48                
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -7                 
Correct output: -59                 | Program output: 26                 
Correct output: -66                 | Program output: 21                 
Correct output: -96                 | Program output: -35                
Correct output: 4                   | Program output: 78                 
Correct output: -88                 | Program output: -88                
Correct output: 2                   | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -4                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop)) (print_integer) integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec ()) ())
Lexicase best errors: [1 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop)) (print_integer) integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec ()) ())
Zero cases best errors: [1 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (178 890 478 177 3 304 176 305 897 305)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (178 890 478 177 3 304 176 305 897 305)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -80} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gt} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod})
Best program: (exec_y_when_autoconstructing (exec_dup_items integer_fromboolean integer_mult) boolean_shove integer_lte integer_pop integer_add boolean_shove exec_yankdup exec_y_when_autoconstructing (integer_dup_times boolean_yankdup exec_dup_times (-80 boolean_swap boolean_pop boolean_not boolean_frominteger integer_shove in2 boolean_flush integer_gt) print_integer) integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop exec_stackdepth exec_do*count (integer_lte integer_pop print_boolean integer_lte print_newline boolean_dup_items) boolean_frominteger integer_dup_items boolean_pop exec_dup_times (exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod) ()))
Errors: [0 0 0 0 1 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 48
Size: 58
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 6.287
Median total errors in population: 8
Error averages by case: (0.822 0.11 0.522 0.823 0.997 0.696 0.824 0.695 0.103 0.695)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.012
Average program size in population (points): 83.097
Average percent parens in population: 0.239
Minimum age in population: 17.39453125
Maximum age in population: 23.0911865234375
Average age in population: 20.97414221191406
Median age in population: 21.048583984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 13551293
--- Timings ---
Current time: 1559583202642 milliseconds
Total Time:          50.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.0 seconds, 55.5%
Fitness Testing:     12.9 seconds, 25.5%
Report:               9.5 seconds, 18.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 67                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 35                 
Correct output: 3                   | Program output: 40                 
Correct output: 18                  | Program output: 81                 
Correct output: 39                  | Program output: 63                 
Correct output: 33                  | Program output: 80                 
Correct output: 29                  | Program output: 78                 
Correct output: 33                  | Program output: 84                 
Correct output: 20                  | Program output: 62                 
Correct output: 1                   | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 85                 
Correct output: 0                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 2                   | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 73                 
Correct output: 56                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: -60                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: 61                 
Correct output: -20                 | Program output: -2                 
Correct output: 42                  | Program output: 42                 
Correct output: -64                 | Program output: 38                 
Correct output: -61                 | Program output: 65                 
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: 63                 
Correct output: 7                   | Program output: 25                 
Correct output: -73                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -75                
Correct output: -88                 | Program output: 30                 
Correct output: -52                 | Program output: -30                
Correct output: -9                  | Program output: 2                  
Correct output: -77                 | Program output: -48                
Correct output: -91                 | Program output: -59                
Correct output: -67                 | Program output: -9                 
Correct output: -51                 | Program output: 60                 
Correct output: -96                 | Program output: 93                 
Correct output: -28                 | Program output: 34                 
Correct output: -69                 | Program output: 31                 
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: 80                 
Correct output: -82                 | Program output: 51                 
Correct output: -70                 | Program output: 12                 
Correct output: -83                 | Program output: -47                
Correct output: -68                 | Program output: 56                 
Correct output: -51                 | Program output: -51                
Correct output: -10                 | Program output: -10                
Correct output: -83                 | Program output: 53                 
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: 60                 
Correct output: -81                 | Program output: -35                
Correct output: 38                  | Program output: 90                 
Correct output: -86                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -18                
Correct output: -95                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -43                
Correct output: -81                 | Program output: 83                 
Correct output: -83                 | Program output: -51                
Correct output: -88                 | Program output: -48                
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -7                 
Correct output: -59                 | Program output: 26                 
Correct output: -66                 | Program output: 21                 
Correct output: -96                 | Program output: -35                
Correct output: 4                   | Program output: 78                 
Correct output: -88                 | Program output: -88                
Correct output: 2                   | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -4                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_not integer_yankdup boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop integer_flush integer_flush integer_lte print_newline exec_when (integer_max exec_k () (exec_dup_times () exec_noop exec_when (integer_max exec_eq exec_k_when_autoconstructing () (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult)) print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer)))
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 75
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_not integer_yankdup boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop integer_flush integer_flush integer_lte print_newline exec_when (integer_max exec_k () (exec_dup_times () exec_noop exec_when (integer_max exec_eq exec_k_when_autoconstructing () (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult)) print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup tag_integer_377 boolean_xor boolean_shove integer_sub print_integer)))
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 75
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (398 379 395 782 537 123 378 379 398 378)
Population mean number of elite cases: 4.15
Count of perfect (error zero) individuals by case: (398 379 395 782 537 123 378 379 398 378)
Population mean number of perfect (error zero) cases: 4.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or})
Best program: (integer_yankdup boolean_not in2 in3 integer_stackdepth integer_eq boolean_flush boolean_rot exec_when (exec_s () (boolean_dup boolean_invert_second_then_and integer_stackdepth integer_dup exec_do*count (exec_noop) integer_dup_times) (exec_when (print_integer boolean_or))))
Errors: [1 0 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 20
Size: 27
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 5.853
Median total errors in population: 5
Error averages by case: (0.602 0.621 0.605 0.218 0.463 0.877 0.622 0.621 0.602 0.622)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.999
Average program size in population (points): 85.191
Average percent parens in population: 0.244
Minimum age in population: 19.6962890625
Maximum age in population: 24.33270263671875
Average age in population: 22.37140350341797
Median age in population: 22.458251953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 14524995
--- Timings ---
Current time: 1559583205685 milliseconds
Total Time:          54.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.9 seconds, 55.4%
Fitness Testing:     13.7 seconds, 25.4%
Report:              10.2 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 89                 
Correct output: -14                 | Program output: 16                 
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -16                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 79                 
Correct output: 3                   | Program output: 83                 
Correct output: 18                  | Program output: 72                 
Correct output: 39                  | Program output: 39                 
Correct output: 33                  | Program output: 79                 
Correct output: 29                  | Program output: 29                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 91                 
Correct output: 1                   | Program output: 20                 
Correct output: 5                   | Program output: 31                 
Correct output: 6                   | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 44                  | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 38                 
Correct output: 19                  | Program output: 29                 
Correct output: 11                  | Program output: 60                 
Correct output: 56                  | Program output: 56                 
Correct output: 16                  | Program output: 36                 
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -12                
Correct output: -51                 | Program output: -20                
Correct output: -20                 | Program output: 97                 
Correct output: 42                  | Program output: 70                 
Correct output: -64                 | Program output: 41                 
Correct output: -61                 | Program output: 25                 
Correct output: -36                 | Program output: 55                 
Correct output: -14                 | Program output: 49                 
Correct output: 7                   | Program output: 33                 
Correct output: -73                 | Program output: 22                 
Correct output: -54                 | Program output: -28                
Correct output: -98                 | Program output: -33                
Correct output: -88                 | Program output: 42                 
Correct output: -52                 | Program output: -52                
Correct output: -9                  | Program output: 21                 
Correct output: -77                 | Program output: 30                 
Correct output: -91                 | Program output: 33                 
Correct output: -67                 | Program output: -21                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 29                 
Correct output: -69                 | Program output: 59                 
Correct output: -81                 | Program output: 28                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -50                
Correct output: -68                 | Program output: -6                 
Correct output: -51                 | Program output: -15                
Correct output: -10                 | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 19                 
Correct output: -76                 | Program output: -45                
Correct output: -50                 | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 49                 
Correct output: -86                 | Program output: 83                 
Correct output: -99                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -36                
Correct output: -80                 | Program output: 54                 
Correct output: -63                 | Program output: 54                 
Correct output: -81                 | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -38                
Correct output: -13                 | Program output: 66                 
Correct output: -65                 | Program output: 64                 
Correct output: -91                 | Program output: 66                 
Correct output: -80                 | Program output: -45                
Correct output: -59                 | Program output: 4                  
Correct output: -66                 | Program output: -47                
Correct output: -96                 | Program output: -1                 
Correct output: 4                   | Program output: 4                  
Correct output: -88                 | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: -30                 | Program output: -20                
Correct output: -4                  | Program output: 65                 
Correct output: -85                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3 exec_rot (boolean_dup_times exec_do*times (integer_sub) exec_eq boolean_or boolean_eq integer_inc boolean_swap boolean_pop boolean_not in4 exec_noop) (print_integer) (integer_pop exec_yankdup integer_pop) exec_y () boolean_dup_items) (integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max exec_swap (exec_eq) (exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) (print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup boolean_dup boolean_xor) -41 integer_mod integer_div integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ()) () ())) ())))))
Lexicase best errors: [1 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 103
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3 exec_rot (boolean_dup_times exec_do*times (integer_sub) exec_eq boolean_or boolean_eq integer_inc boolean_swap boolean_pop boolean_not in4 exec_noop) (print_integer) (integer_pop exec_yankdup integer_pop) exec_y () boolean_dup_items) (integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max exec_swap (exec_eq) (exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) (print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup boolean_dup boolean_xor) -41 integer_mod integer_div integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ()) () ())) ())))))
Zero cases best errors: [1 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 103
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 99 914 892 99 399 399 99 394 107)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (9 99 914 892 99 399 399 99 394 107)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3 exec_rot (boolean_dup_times exec_do*times (integer_sub) exec_eq boolean_or boolean_eq integer_inc boolean_swap boolean_pop integer_mult in4 exec_noop) (print_integer) (integer_pop exec_yankdup integer_pop) exec_y () boolean_dup_items) (integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max exec_swap (exec_eq) (exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) (print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dup boolean_dup boolean_xor) -41 integer_mod integer_div integer_stackdepth integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ()) () ())) ())))))
Errors: [1 0 0 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 71
Size: 103
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 6.589
Median total errors in population: 7
Error averages by case: (0.991 0.901 0.086 0.108 0.901 0.601 0.601 0.901 0.606 0.893)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.26
Average program size in population (points): 85.454
Average percent parens in population: 0.243
Minimum age in population: 20.887939453125
Maximum age in population: 25.86834716796875
Average age in population: 23.88572058105469
Median age in population: 23.9559326171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 15505284
--- Timings ---
Current time: 1559583209100 milliseconds
Total Time:          57.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.9 seconds, 55.9%
Fitness Testing:     14.5 seconds, 25.5%
Report:              10.5 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 67                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 35                 
Correct output: 3                   | Program output: 40                 
Correct output: 18                  | Program output: 81                 
Correct output: 39                  | Program output: 63                 
Correct output: 33                  | Program output: 80                 
Correct output: 29                  | Program output: 78                 
Correct output: 33                  | Program output: 84                 
Correct output: 20                  | Program output: 62                 
Correct output: 1                   | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 85                 
Correct output: 0                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 2                   | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 73                 
Correct output: 56                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: -60                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: 61                 
Correct output: -20                 | Program output: -2                 
Correct output: 42                  | Program output: 42                 
Correct output: -64                 | Program output: 38                 
Correct output: -61                 | Program output: 65                 
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: 63                 
Correct output: 7                   | Program output: 25                 
Correct output: -73                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -75                
Correct output: -88                 | Program output: 30                 
Correct output: -52                 | Program output: -30                
Correct output: -9                  | Program output: 2                  
Correct output: -77                 | Program output: -48                
Correct output: -91                 | Program output: -59                
Correct output: -67                 | Program output: -9                 
Correct output: -51                 | Program output: 60                 
Correct output: -96                 | Program output: 93                 
Correct output: -28                 | Program output: 34                 
Correct output: -69                 | Program output: 31                 
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: 80                 
Correct output: -82                 | Program output: 51                 
Correct output: -70                 | Program output: 12                 
Correct output: -83                 | Program output: -47                
Correct output: -68                 | Program output: 56                 
Correct output: -51                 | Program output: -51                
Correct output: -10                 | Program output: -10                
Correct output: -83                 | Program output: 53                 
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: 60                 
Correct output: -81                 | Program output: -35                
Correct output: 38                  | Program output: 90                 
Correct output: -86                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -18                
Correct output: -95                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -43                
Correct output: -81                 | Program output: 83                 
Correct output: -83                 | Program output: -51                
Correct output: -88                 | Program output: -48                
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -7                 
Correct output: -59                 | Program output: 26                 
Correct output: -66                 | Program output: 21                 
Correct output: -96                 | Program output: -35                
Correct output: 4                   | Program output: 78                 
Correct output: -88                 | Program output: -88                
Correct output: 2                   | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -4                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Lexicase best program: (exec_dup_items boolean_yankdup boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (in3) exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop print_integer) (integer_pop exec_yankdup print_integer exec_yank integer_pop integer_pop) integer_rot exec_y (boolean_dup_items) exec_k_when_autoconstructing () (print_boolean exec_dup_times (integer_lte print_newline integer_pop) print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max integer_shove) integer_mult) () print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 exec_k (boolean_shove integer_sub print_integer) ())
Lexicase best errors: [1 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 99
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Zero cases best program: (exec_dup_items boolean_yankdup boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger in3) (in3) exec_rot (boolean_dup_times integer_add integer_sub exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in2 boolean_flush exec_noop print_integer) (integer_pop exec_yankdup print_integer exec_yank integer_pop integer_pop) integer_rot exec_y (boolean_dup_items) exec_k_when_autoconstructing () (print_boolean exec_dup_times (integer_lte print_newline integer_pop) print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max integer_shove) integer_mult) () print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 exec_k (boolean_shove integer_sub print_integer) ())
Zero cases best errors: [1 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 99
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (100 212 212 128 212 447 428 128 212 212)
Population mean number of elite cases: 2.29
Count of perfect (error zero) individuals by case: (100 212 212 128 212 447 428 128 212 212)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (in3 exec_noop exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc integer_add boolean_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop) (exec_y (boolean_dup_items) integer_pop) print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_noop exec_when (integer_max integer_max exec_eq) integer_shove) exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (print_exec (integer_shove) integer_mult)) (print_exec () exec_flush) exec_dup_times (22) exec_noop integer_dup integer_max boolean_xor boolean_shove integer_sub exec_y_when_autoconstructing (integer_inc boolean_dup) integer_empty exec_noop exec_stackdepth integer_max integer_max integer_shove integer_mult print_exec () exec_flush exec_dup_times ())
Errors: [1 0 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 67
Size: 87
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 7.709
Median total errors in population: 8
Error averages by case: (0.9 0.788 0.788 0.872 0.788 0.553 0.572 0.872 0.788 0.788)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.112
Average program size in population (points): 90.766
Average percent parens in population: 0.266
Minimum age in population: 22.5848388671875
Maximum age in population: 27.18203735351562
Average age in population: 25.37654261779785
Median age in population: 25.40861511230469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 16432423
--- Timings ---
Current time: 1559583212515 milliseconds
Total Time:          60.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.7 seconds, 55.9%
Fitness Testing:     15.4 seconds, 25.5%
Report:              11.2 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 83                 
Correct output: 11                  | Program output: 80                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 99                 
Correct output: 39                  | Program output: 52                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 75                 
Correct output: 33                  | Program output: 98                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 95                 
Correct output: 2                   | Program output: 35                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 77                 
Correct output: 16                  | Program output: 77                 
Correct output: -60                 | Program output: 84                 
Correct output: -99                 | Program output: 54                 
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 72                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 71                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: 68                 
Correct output: -96                 | Program output: 10                 
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 63                 
Correct output: -54                 | Program output: -40                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: 32                 
Correct output: -83                 | Program output: 45                 
Correct output: -32                 | Program output: 98                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -47                
Correct output: -81                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -41                
Correct output: -76                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 83                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: 82                 
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 95                 
Correct output: -80                 | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 6                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 18                 
Correct output: -30                 | Program output: 86                 
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -42} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth) integer_max integer_max exec_noop integer_dup boolean_dup boolean_xor -42 integer_mod integer_div integer_stackdepth integer_sub boolean_yank) (exec_k (exec_while (exec_rot (exec_rot () (exec_shove (boolean_stackdepth) exec_rot (exec_shove (boolean_shove)) () ()) ()) () ())) ()))
Lexicase best errors: [1 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 67
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -42} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth) integer_max integer_max exec_noop integer_dup boolean_dup boolean_xor -42 integer_mod integer_div integer_stackdepth integer_sub boolean_yank) (exec_k (exec_while (exec_rot (exec_rot () (exec_shove (boolean_stackdepth) exec_rot (exec_shove (boolean_shove)) () ()) ()) () ())) ()))
Zero cases best errors: [1 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 67
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (432 183 730 110 185 432 183 183 183 167)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (432 183 730 110 185 432 183 183 183 167)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 3, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 2, :instruction print_integer})
Best program: (boolean_not exec_shove (exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop) print_boolean boolean_stackdepth integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items exec_noop exec_when (integer_max exec_dup_times (integer_pop integer_max integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () print_exec () exec_flush) exec_dup_times (22 exec_noop integer_dec boolean_dup boolean_xor exec_k_when_autoconstructing (exec_yank print_exec (exec_noop) exec_stackdepth integer_max integer_max integer_shove) (integer_mult))) print_exec () exec_flush exec_dup_times (integer_swap exec_noop integer_dup tag_integer_377 exec_k (boolean_shove integer_sub print_integer) ()))
Errors: [1 0 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 75
Size: 97
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 7.212
Median total errors in population: 7
Error averages by case: (0.568 0.817 0.27 0.89 0.815 0.568 0.817 0.817 0.817 0.833)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.45
Average program size in population (points): 86.623
Average percent parens in population: 0.251
Minimum age in population: 23.5848388671875
Maximum age in population: 28.57920837402344
Average age in population: 26.90004211425781
Median age in population: 26.96481323242188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 17393062
--- Timings ---
Current time: 1559583216423 milliseconds
Total Time:          64.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.1 seconds, 56.2%
Fitness Testing:     16.2 seconds, 25.2%
Report:              11.9 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: 83                 
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 63                 
Correct output: 18                  | Program output: 18                 
Correct output: 39                  | Program output: 51                 
Correct output: 33                  | Program output: 67                 
Correct output: 29                  | Program output: 53                 
Correct output: 33                  | Program output: 76                 
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 95                 
Correct output: 5                   | Program output: 89                 
Correct output: 6                   | Program output: 60                 
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 46                 
Correct output: 2                   | Program output: 57                 
Correct output: 25                  | Program output: 58                 
Correct output: 19                  | Program output: 74                 
Correct output: 11                  | Program output: 46                 
Correct output: 56                  | Program output: 93                 
Correct output: 16                  | Program output: 33                 
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 17                 
Correct output: -51                 | Program output: 76                 
Correct output: -20                 | Program output: -20                
Correct output: 42                  | Program output: 61                 
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -36                 | Program output: 64                 
Correct output: -14                 | Program output: 83                 
Correct output: 7                   | Program output: 70                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -75                
Correct output: -52                 | Program output: -10                
Correct output: -9                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: 71                 
Correct output: -67                 | Program output: 84                 
Correct output: -51                 | Program output: 58                 
Correct output: -96                 | Program output: -23                
Correct output: -28                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: 43                 
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 1                  
Correct output: -83                 | Program output: 89                 
Correct output: -68                 | Program output: 35                 
Correct output: -51                 | Program output: 73                 
Correct output: -10                 | Program output: 67                 
Correct output: -83                 | Program output: -37                
Correct output: -32                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -50                 | Program output: 36                 
Correct output: -52                 | Program output: 37                 
Correct output: -81                 | Program output: 52                 
Correct output: 38                  | Program output: 99                 
Correct output: -86                 | Program output: -20                
Correct output: -99                 | Program output: 26                 
Correct output: -76                 | Program output: -4                 
Correct output: -95                 | Program output: 95                 
Correct output: -80                 | Program output: -18                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 90                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -46                
Correct output: -66                 | Program output: -25                
Correct output: -96                 | Program output: -54                
Correct output: 4                   | Program output: 26                 
Correct output: -88                 | Program output: 31                 
Correct output: 2                   | Program output: 38                 
Correct output: -30                 | Program output: 44                 
Correct output: -4                  | Program output: 27                 
Correct output: -85                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction 11} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing () (exec_eq boolean_and boolean_flush exec_noop) print_integer) (integer_pop) exec_yankdup integer_pop exec_y (boolean_dup_items integer_pop) print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline in4 boolean_frominteger 11) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq) (exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) (integer_shove) exec_eq) exec_k_when_autoconstructing (integer_mod exec_eq) (exec_k_when_autoconstructing (integer_mod exec_k (exec_noop integer_sub integer_max integer_flush) ()) ()))
Lexicase best errors: [0 1 1 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 80
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction 11} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing () (exec_eq boolean_and boolean_flush exec_noop) print_integer) (integer_pop) exec_yankdup integer_pop exec_y (boolean_dup_items integer_pop) print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline in4 boolean_frominteger 11) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq) (exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) (integer_shove) exec_eq) exec_k_when_autoconstructing (integer_mod exec_eq) (exec_k_when_autoconstructing (integer_mod exec_k (exec_noop integer_sub integer_max integer_flush) ()) ()))
Zero cases best errors: [0 1 1 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 80
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (114 84 91 890 114 203 513 114 513 201)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (114 84 91 890 114 203 513 114 513 201)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_not in3 exec_noop boolean_flush boolean_not in3 exec_noop exec_k_when_autoconstructing (in3) (exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing () (boolean_not in3 exec_noop boolean_flush exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop) print_boolean boolean_dup_items) integer_pop integer_shove integer_mult exec_stackdepth integer_max integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max exec_noop integer_dup boolean_dup boolean_xor -41 integer_mod integer_div integer_stackdepth boolean_empty boolean_yank) exec_k (exec_while ()) ()) ())
Errors: [0 1 1 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 61
Size: 77
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 7.163
Median total errors in population: 7
Error averages by case: (0.886 0.916 0.909 0.11 0.886 0.797 0.487 0.886 0.487 0.799)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.701
Average program size in population (points): 83.242
Average percent parens in population: 0.242
Minimum age in population: 25.451904296875
Maximum age in population: 30.32595825195312
Average age in population: 28.36146071624756
Median age in population: 28.42723846435547
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 18373007
--- Timings ---
Current time: 1559583220216 milliseconds
Total Time:          68.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.4 seconds, 56.4%
Fitness Testing:     17.0 seconds, 25.0%
Report:              12.6 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 67                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 35                 
Correct output: 3                   | Program output: 40                 
Correct output: 18                  | Program output: 81                 
Correct output: 39                  | Program output: 63                 
Correct output: 33                  | Program output: 80                 
Correct output: 29                  | Program output: 78                 
Correct output: 33                  | Program output: 84                 
Correct output: 20                  | Program output: 62                 
Correct output: 1                   | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 85                 
Correct output: 0                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 2                   | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 73                 
Correct output: 56                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: -60                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: 61                 
Correct output: -20                 | Program output: -2                 
Correct output: 42                  | Program output: 42                 
Correct output: -64                 | Program output: 38                 
Correct output: -61                 | Program output: 65                 
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: 63                 
Correct output: 7                   | Program output: 25                 
Correct output: -73                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -75                
Correct output: -88                 | Program output: 30                 
Correct output: -52                 | Program output: -30                
Correct output: -9                  | Program output: 2                  
Correct output: -77                 | Program output: -48                
Correct output: -91                 | Program output: -59                
Correct output: -67                 | Program output: -9                 
Correct output: -51                 | Program output: 60                 
Correct output: -96                 | Program output: 93                 
Correct output: -28                 | Program output: 34                 
Correct output: -69                 | Program output: 31                 
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: 80                 
Correct output: -82                 | Program output: 51                 
Correct output: -70                 | Program output: 12                 
Correct output: -83                 | Program output: -47                
Correct output: -68                 | Program output: 56                 
Correct output: -51                 | Program output: -51                
Correct output: -10                 | Program output: -10                
Correct output: -83                 | Program output: 53                 
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: 60                 
Correct output: -81                 | Program output: -35                
Correct output: 38                  | Program output: 90                 
Correct output: -86                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -18                
Correct output: -95                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -43                
Correct output: -81                 | Program output: 83                 
Correct output: -83                 | Program output: -51                
Correct output: -88                 | Program output: -48                
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -7                 
Correct output: -59                 | Program output: 26                 
Correct output: -66                 | Program output: 21                 
Correct output: -96                 | Program output: -35                
Correct output: 4                   | Program output: 78                 
Correct output: -88                 | Program output: -88                
Correct output: 2                   | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -4                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_yankdup integer_inc exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop boolean_dup_items exec_eq boolean_and boolean_eq) (boolean_frominteger boolean_or boolean_eq) boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop exec_y (integer_dup_items) integer_pop print_boolean exec_do*count (exec_shove (boolean_invert_second_then_and boolean_dup_items boolean_frominteger exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max integer_max exec_eq) boolean_and integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult)) print_exec () exec_flush) exec_dup_times (22 exec_noop print_exec () exec_flush) integer_mult print_exec () exec_flush exec_dup_times (22 exec_noop integer_dup boolean_dup boolean_xor -41 integer_mod integer_div boolean_or integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot (in2) (boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ())) () ())) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 112
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_yankdup integer_inc exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop boolean_dup_items exec_eq boolean_and boolean_eq) (boolean_frominteger boolean_or boolean_eq) boolean_frominteger integer_shove in2 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup integer_pop exec_y (integer_dup_items) integer_pop print_boolean exec_do*count (exec_shove (boolean_invert_second_then_and boolean_dup_items boolean_frominteger exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max integer_max exec_eq) boolean_and integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult)) print_exec () exec_flush) exec_dup_times (22 exec_noop print_exec () exec_flush) integer_mult print_exec () exec_flush exec_dup_times (22 exec_noop integer_dup boolean_dup boolean_xor -41 integer_mod integer_div boolean_or integer_sub boolean_yank) exec_k (exec_while (exec_rot (exec_rot (in2) (boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ())) () ())) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 112
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 205 888 195 206 206 407 902 291 203)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (206 205 888 195 206 206 407 902 291 203)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 1, :instruction integer_pop} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3) (exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_dup_times boolean_dup_times integer_sub) exec_eq boolean_and boolean_eq) boolean_frominteger integer_shove in2 boolean_flush exec_noop print_integer exec_yankdup integer_pop exec_y (in1) integer_pop exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth integer_max integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max exec_noop) integer_dup boolean_dup boolean_xor -41 integer_mod integer_empty integer_fromboolean integer_lt) (exec_s_when_autoconstructing () (exec_rot (boolean_frominteger boolean_dup_times exec_y () integer_dup_times exec_eq exec_s () (integer_dup exec_do*while ()) ()) () ()) ()))
Errors: [0 0 0 1 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 67
Size: 90
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.291
Median total errors in population: 7
Error averages by case: (0.794 0.795 0.112 0.805 0.794 0.794 0.593 0.098 0.709 0.797)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.74
Average program size in population (points): 84.15
Average percent parens in population: 0.251
Minimum age in population: 26.451904296875
Maximum age in population: 31.73795890808105
Average age in population: 29.78227111434937
Median age in population: 29.86001300811768
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 19333858
--- Timings ---
Current time: 1559583223883 milliseconds
Total Time:          71.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.4 seconds, 56.4%
Fitness Testing:     17.9 seconds, 24.9%
Report:              13.3 seconds, 18.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 53                  | Program output: 67                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 35                 
Correct output: 3                   | Program output: 40                 
Correct output: 18                  | Program output: 81                 
Correct output: 39                  | Program output: 63                 
Correct output: 33                  | Program output: 80                 
Correct output: 29                  | Program output: 78                 
Correct output: 33                  | Program output: 84                 
Correct output: 20                  | Program output: 62                 
Correct output: 1                   | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 85                 
Correct output: 0                   | Program output: 21                 
Correct output: 44                  | Program output: 44                 
Correct output: 2                   | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 73                 
Correct output: 56                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: -60                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -51                 | Program output: 61                 
Correct output: -20                 | Program output: -2                 
Correct output: 42                  | Program output: 42                 
Correct output: -64                 | Program output: 38                 
Correct output: -61                 | Program output: 65                 
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: 63                 
Correct output: 7                   | Program output: 25                 
Correct output: -73                 | Program output: -42                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -75                
Correct output: -88                 | Program output: 30                 
Correct output: -52                 | Program output: -30                
Correct output: -9                  | Program output: 2                  
Correct output: -77                 | Program output: -48                
Correct output: -91                 | Program output: -59                
Correct output: -67                 | Program output: -9                 
Correct output: -51                 | Program output: 60                 
Correct output: -96                 | Program output: 93                 
Correct output: -28                 | Program output: 34                 
Correct output: -69                 | Program output: 31                 
Correct output: -81                 | Program output: -81                
Correct output: -54                 | Program output: 80                 
Correct output: -82                 | Program output: 51                 
Correct output: -70                 | Program output: 12                 
Correct output: -83                 | Program output: -47                
Correct output: -68                 | Program output: 56                 
Correct output: -51                 | Program output: -51                
Correct output: -10                 | Program output: -10                
Correct output: -83                 | Program output: 53                 
Correct output: -32                 | Program output: -32                
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: 60                 
Correct output: -81                 | Program output: -35                
Correct output: 38                  | Program output: 90                 
Correct output: -86                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -18                
Correct output: -95                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -43                
Correct output: -81                 | Program output: 83                 
Correct output: -83                 | Program output: -51                
Correct output: -88                 | Program output: -48                
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -7                 
Correct output: -59                 | Program output: 26                 
Correct output: -66                 | Program output: 21                 
Correct output: -96                 | Program output: -35                
Correct output: 4                   | Program output: 78                 
Correct output: -88                 | Program output: -88                
Correct output: 2                   | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -4                  | Program output: 44                 
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction print_exec} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush boolean_rot) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean boolean_yankdup integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec () integer_shove) (integer_mult) print_exec () exec_flush exec_dup_times (22 exec_noop integer_dup boolean_dup boolean_xor) -41 in3 integer_div integer_stackdepth integer_sub boolean_yank exec_k (exec_while (exec_rot (exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ()) () ())) ())
Lexicase best errors: [0 0 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 95
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction print_exec} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush boolean_rot) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean boolean_yankdup integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec () integer_shove) (integer_mult) print_exec () exec_flush exec_dup_times (22 exec_noop integer_dup boolean_dup boolean_xor) -41 in3 integer_div integer_stackdepth integer_sub boolean_yank exec_k (exec_while (exec_rot (exec_rot (exec_shove () boolean_stackdepth) (exec_rot (exec_shove (boolean_shove)) () ()) ()) () ())) ())
Zero cases best errors: [0 0 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 95
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (144 891 121 530 144 530 121 265 101 531)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (144 891 121 530 144 530 121 265 101 531)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div})
Best program: (boolean_not in3 integer_mult exec_k_when_autoconstructing (boolean_not in3 integer_max exec_k_when_autoconstructing (exec_eq boolean_and integer_dup_items) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) in2 exec_do*while (exec_noop) print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop boolean_xor exec_do*count (integer_lte exec_noop exec_stackdepth integer_max integer_shove) integer_mult integer_dup_items integer_max integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_eq) (exec_k_when_autoconstructing (integer_mod) (print_exec (exec_noop exec_stackdepth boolean_yankdup) exec_dup_times (22 exec_noop integer_dup tag_integer_377 exec_when (exec_k (boolean_shove integer_div integer_div) ())))))
Errors: [1 0 1 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 67
Size: 85
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 6.622
Median total errors in population: 6
Error averages by case: (0.856 0.109 0.879 0.47 0.856 0.47 0.879 0.735 0.899 0.469)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.497
Average program size in population (points): 80.177
Average percent parens in population: 0.242
Minimum age in population: 27.451904296875
Maximum age in population: 33.38869762420654
Average age in population: 31.28189057445526
Median age in population: 31.34881401062012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 20247849
--- Timings ---
Current time: 1559583227584 milliseconds
Total Time:          75.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.6 seconds, 56.5%
Fitness Testing:     18.6 seconds, 24.7%
Report:              14.1 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 83                 
Correct output: 11                  | Program output: 80                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 99                 
Correct output: 39                  | Program output: 52                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 75                 
Correct output: 33                  | Program output: 98                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 95                 
Correct output: 2                   | Program output: 35                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 77                 
Correct output: 16                  | Program output: 77                 
Correct output: -60                 | Program output: 84                 
Correct output: -99                 | Program output: 54                 
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 72                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 71                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: 68                 
Correct output: -96                 | Program output: 10                 
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 63                 
Correct output: -54                 | Program output: -40                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: 32                 
Correct output: -83                 | Program output: 45                 
Correct output: -32                 | Program output: 98                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -47                
Correct output: -81                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -41                
Correct output: -76                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 83                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: 82                 
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 95                 
Correct output: -80                 | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 6                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 18                 
Correct output: -30                 | Program output: 86                 
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush print_integer) integer_pop exec_yankdup integer_pop) (exec_y () boolean_dup_items) integer_pop print_boolean exec_s (integer_lte print_newline exec_noop exec_when (integer_max exec_dup_times (exec_y (boolean_dup_items) integer_pop) boolean_xor exec_do*count (integer_lte exec_noop exec_stackdepth integer_max integer_shove) integer_mult)) (integer_dup_items integer_max exec_swap (exec_eq) (exec_k_when_autoconstructing (integer_mod print_exec (exec_noop boolean_invert_second_then_and integer_max integer_shove) integer_mult) ())) ())
Lexicase best errors: [1 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_flush print_integer) integer_pop exec_yankdup integer_pop) (exec_y () boolean_dup_items) integer_pop print_boolean exec_s (integer_lte print_newline exec_noop exec_when (integer_max exec_dup_times (exec_y (boolean_dup_items) integer_pop) boolean_xor exec_do*count (integer_lte exec_noop exec_stackdepth integer_max integer_shove) integer_mult)) (integer_dup_items integer_max exec_swap (exec_eq) (exec_k_when_autoconstructing (integer_mod print_exec (exec_noop boolean_invert_second_then_and integer_max integer_shove) integer_mult) ())) ())
Zero cases best errors: [1 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (242 270 271 241 86 593 82 271 82 273)
Population mean number of elite cases: 2.41
Count of perfect (error zero) individuals by case: (242 270 271 241 86 593 82 271 82 273)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq exec_do*times (boolean_eq) boolean_frominteger integer_shove in1 boolean_flush exec_noop) (print_integer) integer_pop exec_yankdup exec_stackdepth) (exec_y (boolean_dup_items) integer_pop) print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte boolean_eq boolean_dup_items))
Errors: [1 0 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 7.589
Median total errors in population: 7
Error averages by case: (0.758 0.73 0.729 0.759 0.914 0.407 0.918 0.729 0.918 0.727)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.827
Average program size in population (points): 78.721
Average percent parens in population: 0.237
Minimum age in population: 30.21719026565552
Maximum age in population: 34.83324432373047
Average age in population: 32.77874264431
Median age in population: 32.83541250228882
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 21199007
--- Timings ---
Current time: 1559583231055 milliseconds
Total Time:          78.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.6 seconds, 56.5%
Fitness Testing:     19.4 seconds, 24.6%
Report:              14.8 seconds, 18.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 83                 
Correct output: 11                  | Program output: 80                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 99                 
Correct output: 39                  | Program output: 52                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 75                 
Correct output: 33                  | Program output: 98                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 95                 
Correct output: 2                   | Program output: 35                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 77                 
Correct output: 16                  | Program output: 77                 
Correct output: -60                 | Program output: 84                 
Correct output: -99                 | Program output: 54                 
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 72                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 71                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: 68                 
Correct output: -96                 | Program output: 10                 
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 63                 
Correct output: -54                 | Program output: -40                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: 32                 
Correct output: -83                 | Program output: 45                 
Correct output: -32                 | Program output: 98                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -47                
Correct output: -81                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -41                
Correct output: -76                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 83                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: 82                 
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 95                 
Correct output: -80                 | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 6                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 18                 
Correct output: -30                 | Program output: 86                 
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 2, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_461} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_yank boolean_frominteger in3) boolean_eq in1 exec_empty in1 boolean_pop exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (boolean_swap print_newline boolean_dup_items boolean_frominteger boolean_dup) integer_max exec_do*count () exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth in3 integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (integer_max integer_shove)) (integer_shove) integer_mult print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_461 exec_k (exec_flush integer_sub print_integer) ())
Lexicase best errors: [1 0 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 79
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 2, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_461} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_yank boolean_frominteger in3) boolean_eq in1 exec_empty in1 boolean_pop exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (boolean_swap print_newline boolean_dup_items boolean_frominteger boolean_dup) integer_max exec_do*count () exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth in3 integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (integer_max integer_shove)) (integer_shove) integer_mult print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_461 exec_k (exec_flush integer_sub print_integer) ())
Zero cases best errors: [1 0 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 79
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 393 1000 273 393 393 395 282 1000 665)
Population mean number of elite cases: 5.79
Count of perfect (error zero) individuals by case: (0 393 0 273 393 393 395 282 0 665)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_integer_306} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 22} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot) (boolean_flush boolean_frominteger in3) boolean_eq boolean_frominteger integer_shove in1 boolean_flush boolean_invert_second_then_and print_integer integer_pop exec_yankdup integer_sub exec_eq boolean_and boolean_eq boolean_frominteger print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_swap boolean_pop boolean_not in4 exec_noop) print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_yankdup exec_dup () exec_y (boolean_dup_items integer_pop) print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger tag_integer_306) exec_k (exec_dup_times (exec_noop integer_max exec_when (integer_max integer_max exec_swap (boolean_and) (exec_k_when_autoconstructing (boolean_and) (exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max exec_eq exec_s () (integer_dup exec_do*while (integer_dup boolean_rot exec_k (integer_empty in1) (exec_if (integer_max exec_k_when_autoconstructing (22 integer_mult integer_dup boolean_dup boolean_xor) (-41 integer_mod)) ()))) ())) ())))) ())
Errors: [1 0 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 89
Size: 118
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 7.206
Median total errors in population: 7
Error averages by case: (1.0 0.607 1.0 0.727 0.607 0.607 0.605 0.718 1.0 0.335)
Error minima by case: (1 0 1 0 0 0 0 0 1 0)
Average genome size in population (length): 62.279
Average program size in population (points): 82.068
Average percent parens in population: 0.238
Minimum age in population: 31.30834436416626
Maximum age in population: 36.16302824020386
Average age in population: 34.26333432364464
Median age in population: 34.32392811775208
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 22178252
--- Timings ---
Current time: 1559583234931 milliseconds
Total Time:          82.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.7 seconds, 56.5%
Fitness Testing:     20.3 seconds, 24.5%
Report:              15.5 seconds, 18.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 89                 
Correct output: -14                 | Program output: 16                 
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -16                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 79                 
Correct output: 3                   | Program output: 83                 
Correct output: 18                  | Program output: 72                 
Correct output: 39                  | Program output: 39                 
Correct output: 33                  | Program output: 79                 
Correct output: 29                  | Program output: 29                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 91                 
Correct output: 1                   | Program output: 20                 
Correct output: 5                   | Program output: 31                 
Correct output: 6                   | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 44                  | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 38                 
Correct output: 19                  | Program output: 29                 
Correct output: 11                  | Program output: 60                 
Correct output: 56                  | Program output: 56                 
Correct output: 16                  | Program output: 36                 
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -12                
Correct output: -51                 | Program output: -20                
Correct output: -20                 | Program output: 97                 
Correct output: 42                  | Program output: 70                 
Correct output: -64                 | Program output: 41                 
Correct output: -61                 | Program output: 25                 
Correct output: -36                 | Program output: 55                 
Correct output: -14                 | Program output: 49                 
Correct output: 7                   | Program output: 33                 
Correct output: -73                 | Program output: 22                 
Correct output: -54                 | Program output: -28                
Correct output: -98                 | Program output: -33                
Correct output: -88                 | Program output: 42                 
Correct output: -52                 | Program output: -52                
Correct output: -9                  | Program output: 21                 
Correct output: -77                 | Program output: 30                 
Correct output: -91                 | Program output: 33                 
Correct output: -67                 | Program output: -21                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 29                 
Correct output: -69                 | Program output: 59                 
Correct output: -81                 | Program output: 28                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -50                
Correct output: -68                 | Program output: -6                 
Correct output: -51                 | Program output: -15                
Correct output: -10                 | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 19                 
Correct output: -76                 | Program output: -45                
Correct output: -50                 | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 49                 
Correct output: -86                 | Program output: 83                 
Correct output: -99                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -36                
Correct output: -80                 | Program output: 54                 
Correct output: -63                 | Program output: 54                 
Correct output: -81                 | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -38                
Correct output: -13                 | Program output: 66                 
Correct output: -65                 | Program output: 64                 
Correct output: -91                 | Program output: 66                 
Correct output: -80                 | Program output: -45                
Correct output: -59                 | Program output: 4                  
Correct output: -66                 | Program output: -47                
Correct output: -96                 | Program output: -1                 
Correct output: 4                   | Program output: 4                  
Correct output: -88                 | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: -30                 | Program output: -20                
Correct output: -4                  | Program output: 65                 
Correct output: -85                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction integer_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_if} {:close 1, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod})
Lexicase best program: (exec_y_when_autoconstructing (exec_dup_items integer_fromboolean integer_mult) boolean_shove in4 integer_pop integer_add boolean_shove exec_yankdup exec_y_when_autoconstructing (integer_dup_times boolean_yankdup exec_dup_times (exec_rot (boolean_dup_times exec_do*times (integer_sub) exec_eq in1 boolean_eq integer_inc boolean_swap boolean_pop boolean_not in4 exec_noop) (print_integer) (exec_eq boolean_and boolean_eq) boolean_frominteger print_integer integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop) exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y () boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max exec_swap (boolean_and) (exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_dec exec_if () (integer_mult) print_exec () exec_flush) exec_dup_times (22 integer_mult integer_dup boolean_dup boolean_xor) -41 integer_mod) ())))))
Lexicase best errors: [1 1 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 99
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction integer_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_if} {:close 1, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction -41} {:close 0, :instruction integer_mod})
Zero cases best program: (exec_y_when_autoconstructing (exec_dup_items integer_fromboolean integer_mult) boolean_shove in4 integer_pop integer_add boolean_shove exec_yankdup exec_y_when_autoconstructing (integer_dup_times boolean_yankdup exec_dup_times (exec_rot (boolean_dup_times exec_do*times (integer_sub) exec_eq in1 boolean_eq integer_inc boolean_swap boolean_pop boolean_not in4 exec_noop) (print_integer) (exec_eq boolean_and boolean_eq) boolean_frominteger print_integer integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop) exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y () boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max exec_swap (boolean_and) (exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_dec exec_if () (integer_mult) print_exec () exec_flush) exec_dup_times (22 integer_mult integer_dup boolean_dup boolean_xor) -41 integer_mod) ())))))
Zero cases best errors: [1 1 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 99
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (593 1000 305 914 311 306 311 9 9 1000)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (593 0 305 914 311 306 311 9 9 0)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_gte boolean_dup_times exec_do*times (integer_sub exec_eq boolean_or boolean_eq) integer_inc boolean_swap boolean_pop boolean_not in4 exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max exec_swap (exec_eq) (exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) ())))))
Errors: [1 1 0 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 48
Size: 61
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 7.242
Median total errors in population: 8
Error averages by case: (0.407 1.0 0.695 0.086 0.689 0.694 0.689 0.991 0.991 1.0)
Error minima by case: (0 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 61.567
Average program size in population (points): 80.779
Average percent parens in population: 0.235
Minimum age in population: 32.68065643310547
Maximum age in population: 37.50822710990906
Average age in population: 35.72620640289783
Median age in population: 35.79562264680862
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 23147967
--- Timings ---
Current time: 1559583238307 milliseconds
Total Time:          86.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.5 seconds, 56.3%
Fitness Testing:     21.1 seconds, 24.5%
Report:              16.4 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 89                 
Correct output: -14                 | Program output: 16                 
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -16                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 79                 
Correct output: 3                   | Program output: 83                 
Correct output: 18                  | Program output: 72                 
Correct output: 39                  | Program output: 39                 
Correct output: 33                  | Program output: 79                 
Correct output: 29                  | Program output: 29                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 91                 
Correct output: 1                   | Program output: 20                 
Correct output: 5                   | Program output: 31                 
Correct output: 6                   | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 44                  | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 38                 
Correct output: 19                  | Program output: 29                 
Correct output: 11                  | Program output: 60                 
Correct output: 56                  | Program output: 56                 
Correct output: 16                  | Program output: 36                 
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -12                
Correct output: -51                 | Program output: -20                
Correct output: -20                 | Program output: 97                 
Correct output: 42                  | Program output: 70                 
Correct output: -64                 | Program output: 41                 
Correct output: -61                 | Program output: 25                 
Correct output: -36                 | Program output: 55                 
Correct output: -14                 | Program output: 49                 
Correct output: 7                   | Program output: 33                 
Correct output: -73                 | Program output: 22                 
Correct output: -54                 | Program output: -28                
Correct output: -98                 | Program output: -33                
Correct output: -88                 | Program output: 42                 
Correct output: -52                 | Program output: -52                
Correct output: -9                  | Program output: 21                 
Correct output: -77                 | Program output: 30                 
Correct output: -91                 | Program output: 33                 
Correct output: -67                 | Program output: -21                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 29                 
Correct output: -69                 | Program output: 59                 
Correct output: -81                 | Program output: 28                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -50                
Correct output: -68                 | Program output: -6                 
Correct output: -51                 | Program output: -15                
Correct output: -10                 | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 19                 
Correct output: -76                 | Program output: -45                
Correct output: -50                 | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 49                 
Correct output: -86                 | Program output: 83                 
Correct output: -99                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -36                
Correct output: -80                 | Program output: 54                 
Correct output: -63                 | Program output: 54                 
Correct output: -81                 | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -38                
Correct output: -13                 | Program output: 66                 
Correct output: -65                 | Program output: 64                 
Correct output: -91                 | Program output: 66                 
Correct output: -80                 | Program output: -45                
Correct output: -59                 | Program output: 4                  
Correct output: -66                 | Program output: -47                
Correct output: -96                 | Program output: -1                 
Correct output: 4                   | Program output: 4                  
Correct output: -88                 | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: -30                 | Program output: -20                
Correct output: -4                  | Program output: 65                 
Correct output: -85                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot})
Lexicase best program: (boolean_not boolean_not boolean_invert_first_then_and exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc integer_sub) exec_eq boolean_or boolean_yank integer_inc boolean_swap boolean_pop boolean_not boolean_swap boolean_pop boolean_not in4 exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y () boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop) exec_when (exec_eq exec_dup_times (22 integer_dup integer_dup tag_integer_377 boolean_xor integer_eq integer_sub print_integer integer_inc) boolean_dup integer_empty exec_empty) integer_stackdepth integer_sub boolean_yank exec_k (exec_while (exec_rot (exec_rot () () ()) () ())) ())
Lexicase best errors: [0 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 70
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot})
Zero cases best program: (boolean_not boolean_not boolean_invert_first_then_and exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc integer_sub) exec_eq boolean_or boolean_yank integer_inc boolean_swap boolean_pop boolean_not boolean_swap boolean_pop boolean_not in4 exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y () boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop) exec_when (exec_eq exec_dup_times (22 integer_dup integer_dup tag_integer_377 boolean_xor integer_eq integer_sub print_integer integer_inc) boolean_dup integer_empty exec_empty) integer_stackdepth integer_sub boolean_yank exec_k (exec_while (exec_rot (exec_rot () () ()) () ())) ())
Zero cases best errors: [0 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 70
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (489 136 500 134 136 248 488 250 868 888)
Population mean number of elite cases: 4.14
Count of perfect (error zero) individuals by case: (489 136 500 134 136 248 488 250 868 888)
Population mean number of perfect (error zero) cases: 4.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Best program: (boolean_invert_second_then_and in3 exec_noop exec_k_when_autoconstructing (boolean_rot integer_inc boolean_frominteger boolean_frominteger in3 exec_rot (boolean_dup_times exec_do*times (integer_sub) exec_eq boolean_eq integer_inc boolean_swap boolean_pop boolean_not in4 exec_noop) (print_integer) (integer_pop exec_yankdup integer_pop) exec_y () boolean_dup_items) (integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max exec_swap (exec_eq) (exec_k_when_autoconstructing (integer_mod) (print_exec (exec_noop exec_stackdepth integer_max integer_shove integer_mult) print_exec () exec_flush exec_dup_times (22 exec_flush integer_lte print_newline integer_max integer_shove) integer_mult)) print_exec () exec_flush) exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 exec_k (boolean_shove integer_sub print_integer) ()))))
Errors: [0 1 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 69
Size: 91
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 5.863
Median total errors in population: 5
Error averages by case: (0.511 0.864 0.5 0.866 0.864 0.752 0.512 0.75 0.132 0.112)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.594
Average program size in population (points): 81.287
Average percent parens in population: 0.240
Minimum age in population: 33.78319931030273
Maximum age in population: 39.08734732866287
Average age in population: 37.35457113009691
Median age in population: 37.37480643391609
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 24112186
--- Timings ---
Current time: 1559583242004 milliseconds
Total Time:          90.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.7 seconds, 56.4%
Fitness Testing:     22.0 seconds, 24.4%
Report:              17.1 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: 83                 
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 63                 
Correct output: 18                  | Program output: 18                 
Correct output: 39                  | Program output: 51                 
Correct output: 33                  | Program output: 67                 
Correct output: 29                  | Program output: 53                 
Correct output: 33                  | Program output: 76                 
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 95                 
Correct output: 5                   | Program output: 89                 
Correct output: 6                   | Program output: 60                 
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 46                 
Correct output: 2                   | Program output: 57                 
Correct output: 25                  | Program output: 58                 
Correct output: 19                  | Program output: 74                 
Correct output: 11                  | Program output: 46                 
Correct output: 56                  | Program output: 93                 
Correct output: 16                  | Program output: 33                 
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 17                 
Correct output: -51                 | Program output: 76                 
Correct output: -20                 | Program output: -20                
Correct output: 42                  | Program output: 61                 
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -36                 | Program output: 64                 
Correct output: -14                 | Program output: 83                 
Correct output: 7                   | Program output: 70                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -75                
Correct output: -52                 | Program output: -10                
Correct output: -9                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: 71                 
Correct output: -67                 | Program output: 84                 
Correct output: -51                 | Program output: 58                 
Correct output: -96                 | Program output: -23                
Correct output: -28                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: 43                 
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 1                  
Correct output: -83                 | Program output: 89                 
Correct output: -68                 | Program output: 35                 
Correct output: -51                 | Program output: 73                 
Correct output: -10                 | Program output: 67                 
Correct output: -83                 | Program output: -37                
Correct output: -32                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -50                 | Program output: 36                 
Correct output: -52                 | Program output: 37                 
Correct output: -81                 | Program output: 52                 
Correct output: 38                  | Program output: 99                 
Correct output: -86                 | Program output: -20                
Correct output: -99                 | Program output: 26                 
Correct output: -76                 | Program output: -4                 
Correct output: -95                 | Program output: 95                 
Correct output: -80                 | Program output: -18                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 90                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -46                
Correct output: -66                 | Program output: -25                
Correct output: -96                 | Program output: -54                
Correct output: 4                   | Program output: 26                 
Correct output: -88                 | Program output: 31                 
Correct output: 2                   | Program output: 38                 
Correct output: -30                 | Program output: 44                 
Correct output: -4                  | Program output: 27                 
Correct output: -85                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_303} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop print_integer integer_pop exec_yankdup integer_pop) (exec_y (boolean_dup_items) integer_pop) print_boolean boolean_dup_items print_newline boolean_dup_items boolean_frominteger integer_dup_items exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_noop exec_when (integer_max boolean_and exec_noop integer_max exec_swap (exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () integer_mult boolean_frominteger integer_eq exec_k_when_autoconstructing (print_integer integer_inc boolean_dup) (integer_empty exec_stackdepth) boolean_invert_second_then_and) (integer_shove) integer_mult)) print_exec () exec_flush) exec_dup_times (print_exec () exec_flush) exec_y_when_autoconstructing (integer_inc boolean_dup) in3 exec_noop exec_stackdepth integer_max integer_max integer_gte integer_mult) integer_dup_items exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_303 exec_k (boolean_shove integer_sub boolean_xor) ())
Lexicase best errors: [0 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 101
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_303} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop print_integer integer_pop exec_yankdup integer_pop) (exec_y (boolean_dup_items) integer_pop) print_boolean boolean_dup_items print_newline boolean_dup_items boolean_frominteger integer_dup_items exec_k () (exec_dup_times (exec_noop exec_when (integer_max exec_noop exec_when (integer_max boolean_and exec_noop integer_max exec_swap (exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () integer_mult boolean_frominteger integer_eq exec_k_when_autoconstructing (print_integer integer_inc boolean_dup) (integer_empty exec_stackdepth) boolean_invert_second_then_and) (integer_shove) integer_mult)) print_exec () exec_flush) exec_dup_times (print_exec () exec_flush) exec_y_when_autoconstructing (integer_inc boolean_dup) in3 exec_noop exec_stackdepth integer_max integer_max integer_gte integer_mult) integer_dup_items exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_303 exec_k (boolean_shove integer_sub boolean_xor) ())
Zero cases best errors: [0 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 101
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 581 663 249 249 248 1000 330 336 331)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (249 581 663 249 249 248 0 330 336 331)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod})
Best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) exec_rot (boolean_dup_times exec_do*times (integer_sub exec_eq boolean_or boolean_eq) integer_inc boolean_swap) (boolean_pop boolean_not in4 exec_noop) (print_integer) integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max exec_swap (exec_eq) (exec_k_when_autoconstructing (integer_mod) ())))))
Errors: [0 0 1 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 42
Size: 57
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.764
Median total errors in population: 7
Error averages by case: (0.751 0.419 0.337 0.751 0.751 0.752 1.0 0.67 0.664 0.669)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 60.184
Average program size in population (points): 79.451
Average percent parens in population: 0.240
Minimum age in population: 35.72533488273621
Maximum age in population: 40.7030003964901
Average age in population: 38.82308927118778
Median age in population: 38.89594784379005
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 25092240
--- Timings ---
Current time: 1559583245664 milliseconds
Total Time:          93.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.8 seconds, 56.5%
Fitness Testing:     22.9 seconds, 24.5%
Report:              17.7 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 83                 
Correct output: 11                  | Program output: 80                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 99                 
Correct output: 39                  | Program output: 52                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 75                 
Correct output: 33                  | Program output: 98                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 95                 
Correct output: 2                   | Program output: 35                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 77                 
Correct output: 16                  | Program output: 77                 
Correct output: -60                 | Program output: 84                 
Correct output: -99                 | Program output: 54                 
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 72                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 71                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: 68                 
Correct output: -96                 | Program output: 10                 
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 63                 
Correct output: -54                 | Program output: -40                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: 32                 
Correct output: -83                 | Program output: 45                 
Correct output: -32                 | Program output: 98                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -47                
Correct output: -81                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -41                
Correct output: -76                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 83                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: 82                 
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 95                 
Correct output: -80                 | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 6                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 18                 
Correct output: -30                 | Program output: 86                 
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (exec_k_when_autoconstructing (in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop boolean_not boolean_eq boolean_and boolean_eq) (exec_while (integer_shove in1 boolean_dup_times exec_noop) print_integer) integer_pop exec_yankdup integer_pop) (exec_y (boolean_dup_items) integer_pop) print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items exec_while (integer_mod)) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth exec_noop exec_when (exec_s (exec_eq) (exec_k_when_autoconstructing (integer_max exec_eq) (exec_k_when_autoconstructing () ())) ()))) ())
Lexicase best errors: [1 0 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 68
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (exec_k_when_autoconstructing (in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop boolean_not boolean_eq boolean_and boolean_eq) (exec_while (integer_shove in1 boolean_dup_times exec_noop) print_integer) integer_pop exec_yankdup integer_pop) (exec_y (boolean_dup_items) integer_pop) print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items exec_while (integer_mod)) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth exec_noop exec_when (exec_s (exec_eq) (exec_k_when_autoconstructing (integer_max exec_eq) (exec_k_when_autoconstructing () ())) ()))) ())
Zero cases best errors: [1 0 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 68
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 444 182 1000 444 1000 1000 882 1000 255)
Population mean number of elite cases: 6.39
Count of perfect (error zero) individuals by case: (182 444 182 0 444 0 0 882 0 255)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 2, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq) (boolean_frominteger integer_gte) in1 boolean_flush exec_noop print_integer) (integer_flush exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop in1 boolean_pop exec_noop) print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_mod) integer_max exec_do*count () exec_y (integer_mod print_exec (exec_noop integer_eq integer_max integer_shove)) integer_mult exec_stackdepth in3 integer_shove exec_eq boolean_frominteger exec_y_when_autoconstructing () print_boolean boolean_or integer_sub exec_when (integer_max exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max integer_shove) exec_k (exec_while (exec_rot (boolean_stackdepth) () ())) ()) ()))
Errors: [0 1 0 1 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 76
Size: 98
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 7.611
Median total errors in population: 7
Error averages by case: (0.818 0.556 0.818 1.0 0.556 1.0 1.0 0.118 1.0 0.745)
Error minima by case: (0 0 0 1 0 1 1 0 1 0)
Average genome size in population (length): 60.456
Average program size in population (points): 79.735
Average percent parens in population: 0.240
Minimum age in population: 37.55475997924805
Maximum age in population: 42.08752028644085
Average age in population: 40.40530399121344
Median age in population: 40.49818999320269
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 26070317
--- Timings ---
Current time: 1559583249043 milliseconds
Total Time:          96.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.6 seconds, 56.4%
Fitness Testing:     23.7 seconds, 24.5%
Report:              18.4 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 8                   | Program output: 89                 
Correct output: -14                 | Program output: 16                 
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -16                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 79                 
Correct output: 3                   | Program output: 83                 
Correct output: 18                  | Program output: 72                 
Correct output: 39                  | Program output: 39                 
Correct output: 33                  | Program output: 79                 
Correct output: 29                  | Program output: 29                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 91                 
Correct output: 1                   | Program output: 20                 
Correct output: 5                   | Program output: 31                 
Correct output: 6                   | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 44                  | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 38                 
Correct output: 19                  | Program output: 29                 
Correct output: 11                  | Program output: 60                 
Correct output: 56                  | Program output: 56                 
Correct output: 16                  | Program output: 36                 
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -12                
Correct output: -51                 | Program output: -20                
Correct output: -20                 | Program output: 97                 
Correct output: 42                  | Program output: 70                 
Correct output: -64                 | Program output: 41                 
Correct output: -61                 | Program output: 25                 
Correct output: -36                 | Program output: 55                 
Correct output: -14                 | Program output: 49                 
Correct output: 7                   | Program output: 33                 
Correct output: -73                 | Program output: 22                 
Correct output: -54                 | Program output: -28                
Correct output: -98                 | Program output: -33                
Correct output: -88                 | Program output: 42                 
Correct output: -52                 | Program output: -52                
Correct output: -9                  | Program output: 21                 
Correct output: -77                 | Program output: 30                 
Correct output: -91                 | Program output: 33                 
Correct output: -67                 | Program output: -21                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 29                 
Correct output: -69                 | Program output: 59                 
Correct output: -81                 | Program output: 28                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -50                
Correct output: -68                 | Program output: -6                 
Correct output: -51                 | Program output: -15                
Correct output: -10                 | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 19                 
Correct output: -76                 | Program output: -45                
Correct output: -50                 | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 49                 
Correct output: -86                 | Program output: 83                 
Correct output: -99                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -36                
Correct output: -80                 | Program output: 54                 
Correct output: -63                 | Program output: 54                 
Correct output: -81                 | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -38                
Correct output: -13                 | Program output: 66                 
Correct output: -65                 | Program output: 64                 
Correct output: -91                 | Program output: 66                 
Correct output: -80                 | Program output: -45                
Correct output: -59                 | Program output: 4                  
Correct output: -66                 | Program output: -47                
Correct output: -96                 | Program output: -1                 
Correct output: 4                   | Program output: 4                  
Correct output: -88                 | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: -30                 | Program output: -20                
Correct output: -4                  | Program output: 65                 
Correct output: -85                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 2, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (boolean_not in3 exec_noop integer_div exec_noop exec_k_when_autoconstructing (boolean_not in3) (boolean_dup_times integer_mod integer_sub exec_eq boolean_or boolean_eq integer_inc boolean_swap boolean_pop boolean_not in4 exec_noop) print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean integer_mult exec_when (integer_max exec_dup_times (exec_noop print_newline exec_noop exec_when (integer_max exec_dup_times (in1 integer_max) exec_swap (exec_eq) (exec_k_when_autoconstructing (boolean_swap print_exec () exec_noop integer_sub boolean_yank exec_k (exec_while (exec_rot (boolean_yank exec_shove () boolean_stackdepth exec_rot () () ()) () ())) ()) ())))))
Lexicase best errors: [0 1 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 2, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (boolean_not in3 exec_noop integer_div exec_noop exec_k_when_autoconstructing (boolean_not in3) (boolean_dup_times integer_mod integer_sub exec_eq boolean_or boolean_eq integer_inc boolean_swap boolean_pop boolean_not in4 exec_noop) print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean integer_mult exec_when (integer_max exec_dup_times (exec_noop print_newline exec_noop exec_when (integer_max exec_dup_times (in1 integer_max) exec_swap (exec_eq) (exec_k_when_autoconstructing (boolean_swap print_exec () exec_noop integer_sub boolean_yank exec_k (exec_while (exec_rot (boolean_yank exec_shove () boolean_stackdepth exec_rot () () ()) () ())) ()) ())))))
Zero cases best errors: [0 1 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (908 1000 177 908 185 178 1000 1000 357 184)
Population mean number of elite cases: 5.90
Count of perfect (error zero) individuals by case: (908 0 177 908 185 178 0 0 357 184)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) exec_rot (boolean_dup_times exec_do*times (integer_sub exec_eq integer_dup_items boolean_eq) integer_inc boolean_frominteger boolean_pop boolean_not in4 integer_eq) (print_integer) (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items integer_pop) print_boolean exec_do*count (integer_pop exec_yankdup integer_pop) exec_y (boolean_dup_items) integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop exec_when (integer_max exec_eq) exec_k_when_autoconstructing (boolean_xor print_exec (exec_noop exec_stackdepth integer_max integer_shove) integer_mult) () exec_stackdepth integer_max) integer_shove exec_eq exec_k_when_autoconstructing (integer_mod print_exec (integer_max print_exec () exec_flush) exec_y_when_autoconstructing (integer_inc exec_k (boolean_shove boolean_frominteger integer_div) ())) ())
Errors: [0 1 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 68
Size: 90
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 7.103
Median total errors in population: 7
Error averages by case: (0.092 1.0 0.823 0.092 0.815 0.822 1.0 1.0 0.643 0.816)
Error minima by case: (0 1 0 0 0 0 1 1 0 0)
Average genome size in population (length): 59.573
Average program size in population (points): 78.171
Average percent parens in population: 0.235
Minimum age in population: 38.55475997924805
Maximum age in population: 43.58213283866644
Average age in population: 41.86836054235697
Median age in population: 41.92399735376239
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 27056073
--- Timings ---
Current time: 1559583252921 milliseconds
Total Time:         100.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.9 seconds, 56.5%
Fitness Testing:     24.6 seconds, 24.4%
Report:              19.1 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: 83                 
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 63                 
Correct output: 18                  | Program output: 18                 
Correct output: 39                  | Program output: 51                 
Correct output: 33                  | Program output: 67                 
Correct output: 29                  | Program output: 53                 
Correct output: 33                  | Program output: 76                 
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 95                 
Correct output: 5                   | Program output: 89                 
Correct output: 6                   | Program output: 60                 
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 46                 
Correct output: 2                   | Program output: 57                 
Correct output: 25                  | Program output: 58                 
Correct output: 19                  | Program output: 74                 
Correct output: 11                  | Program output: 46                 
Correct output: 56                  | Program output: 93                 
Correct output: 16                  | Program output: 33                 
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 17                 
Correct output: -51                 | Program output: 76                 
Correct output: -20                 | Program output: -20                
Correct output: 42                  | Program output: 61                 
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -36                 | Program output: 64                 
Correct output: -14                 | Program output: 83                 
Correct output: 7                   | Program output: 70                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -75                
Correct output: -52                 | Program output: -10                
Correct output: -9                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: 71                 
Correct output: -67                 | Program output: 84                 
Correct output: -51                 | Program output: 58                 
Correct output: -96                 | Program output: -23                
Correct output: -28                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: 43                 
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 1                  
Correct output: -83                 | Program output: 89                 
Correct output: -68                 | Program output: 35                 
Correct output: -51                 | Program output: 73                 
Correct output: -10                 | Program output: 67                 
Correct output: -83                 | Program output: -37                
Correct output: -32                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -50                 | Program output: 36                 
Correct output: -52                 | Program output: 37                 
Correct output: -81                 | Program output: 52                 
Correct output: 38                  | Program output: 99                 
Correct output: -86                 | Program output: -20                
Correct output: -99                 | Program output: 26                 
Correct output: -76                 | Program output: -4                 
Correct output: -95                 | Program output: 95                 
Correct output: -80                 | Program output: -18                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 90                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -46                
Correct output: -66                 | Program output: -25                
Correct output: -96                 | Program output: -54                
Correct output: 4                   | Program output: 26                 
Correct output: -88                 | Program output: 31                 
Correct output: 2                   | Program output: 38                 
Correct output: -30                 | Program output: 44                 
Correct output: -4                  | Program output: 27                 
Correct output: -85                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction -18} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop boolean_not exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_dup_times exec_noop) print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items print_newline exec_noop in2 integer_max exec_dup_times (exec_noop -18 print_exec (exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max exec_swap (exec_eq) (exec_k_when_autoconstructing (integer_mod) ())))))))
Lexicase best errors: [0 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 62
Percent parens: 0.210
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction -18} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop boolean_not exec_eq boolean_and boolean_eq) (boolean_frominteger integer_shove in1 boolean_dup_times exec_noop) print_integer integer_pop exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items print_newline exec_noop in2 integer_max exec_dup_times (exec_noop -18 print_exec (exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max exec_swap (exec_eq) (exec_k_when_autoconstructing (integer_mod) ())))))))
Zero cases best errors: [0 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 62
Percent parens: 0.210
--- Lexicase Population Statistics ---
Count of elite individuals by case: (193 677 889 890 192 4 693 193 4 1000)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (193 677 889 890 192 4 693 193 4 0)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction -41} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop print_integer integer_pop exec_yankdup integer_pop) (exec_y (boolean_dup_items) integer_pop) print_boolean boolean_dup_items integer_pop print_boolean boolean_frominteger integer_dup_items exec_do*count (integer_lte print_newline boolean_dup_items boolean_frominteger integer_dup_items) exec_k () (exec_dup_times (exec_when (boolean_stackdepth exec_dup_times (exec_noop integer_max exec_swap (exec_eq) (exec_k_when_autoconstructing (integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_shove integer_mult) print_exec () integer_pop) (exec_dup_times (22 exec_if (integer_dup boolean_dup exec_stackdepth) (-41 integer_mod integer_div integer_stackdepth integer_sub boolean_yank) exec_k (integer_mod) ()))))))))
Errors: [0 1 0 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 59
Size: 80
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.265
Median total errors in population: 6
Error averages by case: (0.807 0.323 0.111 0.11 0.808 0.996 0.307 0.807 0.996 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 59.376
Average program size in population (points): 78.182
Average percent parens in population: 0.238
Minimum age in population: 40.57024657726288
Maximum age in population: 45.2538462691009
Average age in population: 43.28500466350093
Median age in population: 43.38259982131422
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 28023187
--- Timings ---
Current time: 1559583256658 milliseconds
Total Time:         104.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.1 seconds, 56.5%
Fitness Testing:     25.5 seconds, 24.4%
Report:              19.9 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 83                 
Correct output: 11                  | Program output: 80                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 99                 
Correct output: 39                  | Program output: 52                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 75                 
Correct output: 33                  | Program output: 98                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 95                 
Correct output: 2                   | Program output: 35                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 77                 
Correct output: 16                  | Program output: 77                 
Correct output: -60                 | Program output: 84                 
Correct output: -99                 | Program output: 54                 
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 72                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 71                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: 68                 
Correct output: -96                 | Program output: 10                 
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 63                 
Correct output: -54                 | Program output: -40                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: 32                 
Correct output: -83                 | Program output: 45                 
Correct output: -32                 | Program output: 98                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -47                
Correct output: -81                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -41                
Correct output: -76                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 83                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: 82                 
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 95                 
Correct output: -80                 | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 6                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 18                 
Correct output: -30                 | Program output: 86                 
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 2, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) exec_rot (boolean_dup_times exec_do*times (integer_sub exec_eq boolean_or boolean_eq) integer_inc boolean_swap boolean_pop integer_lt) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) () print_integer integer_pop boolean_dup integer_pop exec_y (boolean_dup_items) exec_pop () in4 exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y (exec_shove () boolean_dup_items) exec_pop () print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline exec_k (boolean_stackdepth exec_flush) (exec_dup_times (22 boolean_stackdepth integer_dup tag_integer_377 boolean_swap integer_max integer_shove)) exec_eq) integer_dec integer_mod)
Lexicase best errors: [1 1 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 22} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 2, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) exec_rot (boolean_dup_times exec_do*times (integer_sub exec_eq boolean_or boolean_eq) integer_inc boolean_swap boolean_pop integer_lt) (boolean_frominteger integer_shove in1 boolean_flush exec_noop) () print_integer integer_pop boolean_dup integer_pop exec_y (boolean_dup_items) exec_pop () in4 exec_noop print_integer integer_pop exec_yankdup integer_pop exec_y (exec_shove () boolean_dup_items) exec_pop () print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline exec_k (boolean_stackdepth exec_flush) (exec_dup_times (22 boolean_stackdepth integer_dup tag_integer_377 boolean_swap integer_max integer_shove)) exec_eq) integer_dec integer_mod)
Zero cases best errors: [1 1 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 347 347 1000 383 347 347 895 1000)
Population mean number of elite cases: 6.67
Count of perfect (error zero) individuals by case: (0 0 347 347 0 383 347 347 895 0)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove})
Best program: (boolean_not boolean_not boolean_invert_first_then_and boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3 exec_noop exec_k_when_autoconstructing (exec_eq) (boolean_and boolean_eq) boolean_frominteger integer_shove) (in1 print_integer) integer_pop exec_yankdup integer_pop exec_y () boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop) exec_when (exec_eq exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (integer_empty exec_stackdepth integer_max) integer_shove) (integer_mult) exec_stackdepth integer_max integer_shove)
Errors: [1 1 0 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 43
Size: 54
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 7.334
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.653 0.653 1.0 0.617 0.653 0.653 0.105 1.0)
Error minima by case: (1 1 0 0 1 0 0 0 0 1)
Average genome size in population (length): 57.694
Average program size in population (points): 75.334
Average percent parens in population: 0.232
Minimum age in population: 41.83150169253349
Maximum age in population: 46.76329200528562
Average age in population: 44.62729851225577
Median age in population: 44.73663363233209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 28999925
--- Timings ---
Current time: 1559583259833 milliseconds
Total Time:         107.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.8 seconds, 56.4%
Fitness Testing:     26.3 seconds, 24.4%
Report:              20.6 seconds, 19.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 83                 
Correct output: 11                  | Program output: 80                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 99                 
Correct output: 39                  | Program output: 52                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 75                 
Correct output: 33                  | Program output: 98                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 95                 
Correct output: 2                   | Program output: 35                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 77                 
Correct output: 16                  | Program output: 77                 
Correct output: -60                 | Program output: 84                 
Correct output: -99                 | Program output: 54                 
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 72                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 71                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: 68                 
Correct output: -96                 | Program output: 10                 
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 63                 
Correct output: -54                 | Program output: -40                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: 29                 
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: 32                 
Correct output: -83                 | Program output: 45                 
Correct output: -32                 | Program output: 98                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -47                
Correct output: -81                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -41                
Correct output: -76                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 83                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: 82                 
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 95                 
Correct output: -80                 | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 6                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 18                 
Correct output: -30                 | Program output: 86                 
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_not in3 exec_noop integer_gte boolean_rot integer_inc boolean_or boolean_eq integer_inc boolean_frominteger boolean_pop boolean_not boolean_not in1 print_integer integer_pop exec_yankdup integer_pop exec_y () boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop integer_inc integer_max exec_dup_times (exec_noop print_newline exec_noop exec_when (boolean_and) exec_dup_times (boolean_not) exec_when (exec_when (exec_y (boolean_dup_items) integer_pop) boolean_xor exec_do*count (integer_lte exec_noop integer_add integer_max integer_shove) integer_mult)) integer_max exec_eq exec_s () (integer_dup exec_do*while (integer_dup boolean_rot exec_k (integer_empty in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty integer_empty boolean_shove exec_do*count (in4 integer_dup_times integer_dec integer_max))) ()) ()))) ()))
Lexicase best errors: [1 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_not in3 exec_noop integer_gte boolean_rot integer_inc boolean_or boolean_eq integer_inc boolean_frominteger boolean_pop boolean_not boolean_not in1 print_integer integer_pop exec_yankdup integer_pop exec_y () boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte print_newline exec_noop integer_inc integer_max exec_dup_times (exec_noop print_newline exec_noop exec_when (boolean_and) exec_dup_times (boolean_not) exec_when (exec_when (exec_y (boolean_dup_items) integer_pop) boolean_xor exec_do*count (integer_lte exec_noop integer_add integer_max integer_shove) integer_mult)) integer_max exec_eq exec_s () (integer_dup exec_do*while (integer_dup boolean_rot exec_k (integer_empty in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty integer_empty boolean_shove exec_do*count (in4 integer_dup_times integer_dec integer_max))) ()) ()))) ()))
Zero cases best errors: [1 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 2 711 901 194 710 1000 913 710 1000)
Population mean number of elite cases: 7.14
Count of perfect (error zero) individuals by case: (0 2 711 901 194 710 0 913 710 0)
Population mean number of perfect (error zero) cases: 4.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_188} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod})
Best program: (boolean_not exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 boolean_dup_times exec_noop print_integer integer_pop tagged_188 boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean integer_pop print_boolean exec_do*count (integer_lte print_newline boolean_dup_items exec_while (integer_mod)) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean) exec_do*count (integer_lte print_newline exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max exec_swap (exec_eq) (exec_k_when_autoconstructing (integer_mod) ()))))) ())
Errors: [1 1 0 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 49
Size: 65
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 5.859
Median total errors in population: 5
Error averages by case: (1.0 0.998 0.289 0.099 0.806 0.29 1.0 0.087 0.29 1.0)
Error minima by case: (1 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 56.266
Average program size in population (points): 72.848
Average percent parens in population: 0.225
Minimum age in population: 43.56966182589531
Maximum age in population: 48.08132164087147
Average age in population: 45.99162104874104
Median age in population: 46.03885112702847
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 29947987
--- Timings ---
Current time: 1559583263554 milliseconds
Total Time:         111.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.0 seconds, 56.5%
Fitness Testing:     27.2 seconds, 24.4%
Report:              21.2 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: 3                  
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: 49                 
Correct output: -48                 | Program output: 83                 
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 63                 
Correct output: 18                  | Program output: 18                 
Correct output: 39                  | Program output: 51                 
Correct output: 33                  | Program output: 67                 
Correct output: 29                  | Program output: 53                 
Correct output: 33                  | Program output: 76                 
Correct output: 20                  | Program output: 86                 
Correct output: 1                   | Program output: 95                 
Correct output: 5                   | Program output: 89                 
Correct output: 6                   | Program output: 60                 
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 46                 
Correct output: 2                   | Program output: 57                 
Correct output: 25                  | Program output: 58                 
Correct output: 19                  | Program output: 74                 
Correct output: 11                  | Program output: 46                 
Correct output: 56                  | Program output: 93                 
Correct output: 16                  | Program output: 33                 
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 17                 
Correct output: -51                 | Program output: 76                 
Correct output: -20                 | Program output: -20                
Correct output: 42                  | Program output: 61                 
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -36                 | Program output: 64                 
Correct output: -14                 | Program output: 83                 
Correct output: 7                   | Program output: 70                 
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -75                
Correct output: -52                 | Program output: -10                
Correct output: -9                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: 71                 
Correct output: -67                 | Program output: 84                 
Correct output: -51                 | Program output: 58                 
Correct output: -96                 | Program output: -23                
Correct output: -28                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: 43                 
Correct output: -54                 | Program output: 67                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 1                  
Correct output: -83                 | Program output: 89                 
Correct output: -68                 | Program output: 35                 
Correct output: -51                 | Program output: 73                 
Correct output: -10                 | Program output: 67                 
Correct output: -83                 | Program output: -37                
Correct output: -32                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -50                 | Program output: 36                 
Correct output: -52                 | Program output: 37                 
Correct output: -81                 | Program output: 52                 
Correct output: 38                  | Program output: 99                 
Correct output: -86                 | Program output: -20                
Correct output: -99                 | Program output: 26                 
Correct output: -76                 | Program output: -4                 
Correct output: -95                 | Program output: 95                 
Correct output: -80                 | Program output: -18                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 90                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -46                
Correct output: -66                 | Program output: -25                
Correct output: -96                 | Program output: -54                
Correct output: 4                   | Program output: 26                 
Correct output: -88                 | Program output: 31                 
Correct output: 2                   | Program output: 38                 
Correct output: -30                 | Program output: 44                 
Correct output: -4                  | Program output: 27                 
Correct output: -85                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) exec_rot (boolean_dup_times exec_do*times (integer_dup_times exec_eq boolean_or boolean_eq) integer_inc boolean_swap) (boolean_pop boolean_not in4 exec_noop) (print_integer) integer_pop exec_yankdup boolean_flush exec_noop print_integer integer_pop boolean_flush integer_pop exec_y (boolean_dup_items) integer_pop exec_yankdup integer_pop boolean_dup_items integer_pop print_boolean integer_swap integer_pop print_boolean exec_do*count (boolean_yank print_newline exec_y (boolean_dup_items) integer_pop) integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max integer_shove) integer_mult print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 exec_k (boolean_shove) ())
Lexicase best errors: [1 0 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 79
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_mult} {:close 1, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_377} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) exec_rot (boolean_dup_times exec_do*times (integer_dup_times exec_eq boolean_or boolean_eq) integer_inc boolean_swap) (boolean_pop boolean_not in4 exec_noop) (print_integer) integer_pop exec_yankdup boolean_flush exec_noop print_integer integer_pop boolean_flush integer_pop exec_y (boolean_dup_items) integer_pop exec_yankdup integer_pop boolean_dup_items integer_pop print_boolean integer_swap integer_pop print_boolean exec_do*count (boolean_yank print_newline exec_y (boolean_dup_items) integer_pop) integer_mod print_exec (exec_noop exec_stackdepth integer_max integer_max integer_shove) integer_mult print_exec () exec_flush exec_dup_times (integer_swap) exec_noop integer_dup tag_integer_377 exec_k (boolean_shove) ())
Zero cases best errors: [1 0 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 79
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (141 190 563 187 750 563 189 141 563 190)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (141 190 563 187 750 563 189 141 563 190)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_not in3 exec_noop exec_k_when_autoconstructing (boolean_not in3) (exec_noop exec_k_when_autoconstructing (exec_eq boolean_and boolean_eq exec_when () integer_shove boolean_or boolean_flush exec_noop) (print_integer integer_pop exec_yankdup integer_pop) exec_yankdup integer_pop exec_y (boolean_dup_items) integer_pop) print_boolean exec_do*count (exec_dup_times (exec_noop print_boolean boolean_dup_items integer_pop) print_newline exec_noop exec_when (integer_max exec_dup_times (exec_noop integer_max exec_swap (exec_eq exec_k_when_autoconstructing (integer_mod print_exec (integer_min exec_stackdepth)) ()) ()))))
Errors: [1 0 1 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 46
Size: 62
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.523
Median total errors in population: 6
Error averages by case: (0.859 0.81 0.437 0.813 0.25 0.437 0.811 0.859 0.437 0.81)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.323
Average program size in population (points): 73.824
Average percent parens in population: 0.234
Minimum age in population: 44.56966182589531
Maximum age in population: 49.33681724686176
Average age in population: 47.34396795970155
Median age in population: 47.43581438739784
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 30876394
--- Timings ---
Current time: 1559583266815 milliseconds
Total Time:         114.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.7 seconds, 56.4%
Fitness Testing:     28.1 seconds, 24.5%
Report:              21.8 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 39                  | Program output: 51                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 53                 
Correct output: 33                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 46                 
Correct output: 2                   | Program output: 35                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 77                 
Correct output: 16                  | Program output: 33                 
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 17                 
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: -20                
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -36                 | Program output: 64                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: -10                
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: 58                 
Correct output: -96                 | Program output: -23                
Correct output: -28                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: 43                 
Correct output: -54                 | Program output: -40                
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 1                  
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: 32                 
Correct output: -83                 | Program output: -37                
Correct output: -32                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -50                 | Program output: 36                 
Correct output: -52                 | Program output: -47                
Correct output: -81                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -41                
Correct output: -76                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -18                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 6                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 18                 
Correct output: -30                 | Program output: 44                 
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 boolean_dup_times integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Lexicase best errors: [0 0 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 94
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 boolean_dup_times integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Zero cases best errors: [0 0 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 94
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (436 896 1000 158 297 304 163 158 297 297)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (436 896 0 158 297 304 163 158 297 297)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 boolean_dup_times integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Errors: [0 0 1 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 68
Size: 94
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 6.994
Median total errors in population: 8
Error averages by case: (0.564 0.104 1.0 0.842 0.703 0.696 0.837 0.842 0.703 0.703)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 56.94
Average program size in population (points): 75.137
Average percent parens in population: 0.239
Minimum age in population: 45.56966182589531
Maximum age in population: 50.84099995903671
Average age in population: 48.80665639248211
Median age in population: 48.8897283122642
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 31834723
--- Timings ---
Current time: 1559583270731 milliseconds
Total Time:         118.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.0 seconds, 56.5%
Fitness Testing:     29.0 seconds, 24.4%
Report:              22.5 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 39                  | Program output: 51                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 53                 
Correct output: 33                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 46                 
Correct output: 2                   | Program output: 35                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 77                 
Correct output: 16                  | Program output: 33                 
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 17                 
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: -20                
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -36                 | Program output: 64                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: -10                
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: 58                 
Correct output: -96                 | Program output: -23                
Correct output: -28                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: 43                 
Correct output: -54                 | Program output: -40                
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 1                  
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: 32                 
Correct output: -83                 | Program output: -37                
Correct output: -32                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -50                 | Program output: 36                 
Correct output: -52                 | Program output: -47                
Correct output: -81                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -41                
Correct output: -76                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -18                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 6                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 18                 
Correct output: -30                 | Program output: 44                 
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 boolean_dup_times integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ()))
Lexicase best errors: [0 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 85
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 boolean_dup_times integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ()))
Zero cases best errors: [0 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 85
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (562 581 563 562 1000 919 1000 1000 1000 316)
Population mean number of elite cases: 7.50
Count of perfect (error zero) individuals by case: (562 581 563 562 0 919 0 0 0 316)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 boolean_dup_times integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items integer_pop) print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth integer_max exec_eq) (exec_s () (integer_dup integer_dup_times integer_dup boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ())) ())) ())
Errors: [0 0 0 0 1 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 68
Size: 94
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 6.497
Median total errors in population: 5
Error averages by case: (0.438 0.419 0.437 0.438 1.0 0.081 1.0 1.0 1.0 0.684)
Error minima by case: (0 0 0 0 1 0 1 1 1 0)
Average genome size in population (length): 64.854
Average program size in population (points): 89.471
Average percent parens in population: 0.274
Minimum age in population: 47.25973484665155
Maximum age in population: 52.14597243745811
Average age in population: 48.94215640755917
Median age in population: 48.87647338211536
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 214
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 218
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 32803609
--- Timings ---
Current time: 1559583274284 milliseconds
Total Time:         122.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.9 seconds, 56.5%
Fitness Testing:     29.8 seconds, 24.4%
Report:              23.2 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 79                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 72                 
Correct output: 39                  | Program output: 39                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 29                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 44                  | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 38                 
Correct output: 19                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 56                 
Correct output: 16                  | Program output: 36                 
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -12                
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 55                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 22                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: -33                
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: -52                
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 28                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 19                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 54                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -38                
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 66                 
Correct output: -80                 | Program output: -45                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 4                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 2                  
Correct output: -30                 | Program output: -20                
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Lexicase best errors: [0 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 94
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Zero cases best errors: [0 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 94
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (925 731 174 173 182 1000 174 1000 713 731)
Population mean number of elite cases: 5.80
Count of perfect (error zero) individuals by case: (925 731 174 173 182 0 174 0 713 731)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Errors: [0 1 0 0 0 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 68
Size: 94
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 6.197
Median total errors in population: 6
Error averages by case: (0.075 0.269 0.826 0.827 0.818 1.0 0.826 1.0 0.287 0.269)
Error minima by case: (0 0 0 0 0 1 0 1 0 0)
Average genome size in population (length): 65.561
Average program size in population (points): 90.308
Average percent parens in population: 0.273
Minimum age in population: 48.56810411438346
Maximum age in population: 53.14597243745811
Average age in population: 50.18813061681535
Median age in population: 50.29044313533814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 33816639
--- Timings ---
Current time: 1559583278152 milliseconds
Total Time:         126.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.2 seconds, 56.5%
Fitness Testing:     30.7 seconds, 24.4%
Report:              24.0 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 83                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 39                  | Program output: 51                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 53                 
Correct output: 33                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 68                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 75                 
Correct output: 44                  | Program output: 46                 
Correct output: 2                   | Program output: 35                 
Correct output: 25                  | Program output: 56                 
Correct output: 19                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 77                 
Correct output: 16                  | Program output: 33                 
Correct output: -60                 | Program output: -60                
Correct output: -99                 | Program output: 17                 
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: -20                
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -36                 | Program output: 64                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: -10                
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: 58                 
Correct output: -96                 | Program output: -23                
Correct output: -28                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -81                 | Program output: 43                 
Correct output: -54                 | Program output: -40                
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 1                  
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: 32                 
Correct output: -83                 | Program output: -37                
Correct output: -32                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -50                 | Program output: 36                 
Correct output: -52                 | Program output: -47                
Correct output: -81                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -41                
Correct output: -76                 | Program output: -42                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -18                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 6                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 18                 
Correct output: -30                 | Program output: 44                 
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Lexicase best errors: [0 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 94
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Zero cases best errors: [0 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 94
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (934 921 921 605 606 323 605 1000 324 324)
Population mean number of elite cases: 6.56
Count of perfect (error zero) individuals by case: (934 921 921 605 606 323 605 0 324 324)
Population mean number of perfect (error zero) cases: 5.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 boolean_dup_times integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (exec_eq) exec_k_when_autoconstructing (integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod)) (integer_max exec_eq) exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) integer_empty) (integer_dup integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ())) ())
Errors: [0 0 0 1 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 83
Size: 113
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 4.437
Median total errors in population: 4
Error averages by case: (0.066 0.079 0.079 0.395 0.394 0.677 0.395 1.0 0.676 0.676)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 67.667
Average program size in population (points): 93.484
Average percent parens in population: 0.276
Minimum age in population: 49.87647338211536
Maximum age in population: 53.1991647365503
Average age in population: 50.7880664894933
Median age in population: 50.87647338211536
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 239
Genome diversity (% unique genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 245
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 34869124
--- Timings ---
Current time: 1559583281699 milliseconds
Total Time:         129.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.1 seconds, 56.5%
Fitness Testing:     31.6 seconds, 24.4%
Report:              24.7 seconds, 19.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 79                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 72                 
Correct output: 39                  | Program output: 39                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 29                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 44                  | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 38                 
Correct output: 19                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 56                 
Correct output: 16                  | Program output: 36                 
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -12                
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 55                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 22                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: -33                
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: -52                
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 28                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 19                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 54                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -38                
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 66                 
Correct output: -80                 | Program output: -45                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 4                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 2                  
Correct output: -30                 | Program output: -20                
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 exec_if (integer_min) (print_integer integer_pop exec_yankdup boolean_shove) exec_y (boolean_dup_items) integer_pop integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt boolean_stackdepth integer_mod integer_max boolean_stackdepth integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Lexicase best errors: [0 0 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 99
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 exec_if (integer_min) (print_integer integer_pop exec_yankdup boolean_shove) exec_y (boolean_dup_items) integer_pop integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt boolean_stackdepth integer_mod integer_max boolean_stackdepth integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Zero cases best errors: [0 0 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 99
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (925 943 489 1 489 448 927 1 448 941)
Population mean number of elite cases: 5.61
Count of perfect (error zero) individuals by case: (925 943 489 1 489 448 927 1 448 941)
Population mean number of perfect (error zero) cases: 5.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger integer_inc boolean_frominteger in3) integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_yank integer_lte integer_mult integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (exec_flush) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Errors: [0 0 0 1 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 70
Size: 95
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 4.388
Median total errors in population: 4
Error averages by case: (0.075 0.057 0.511 0.999 0.511 0.552 0.073 0.999 0.552 0.059)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.613
Average program size in population (points): 93.319
Average percent parens in population: 0.275
Minimum age in population: 50.87647338211536
Maximum age in population: 54.44203493221721
Average age in population: 52.37518829310467
Median age in population: 52.37647338211536
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 35923483
--- Timings ---
Current time: 1559583285189 milliseconds
Total Time:         133.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.0 seconds, 56.4%
Fitness Testing:     32.5 seconds, 24.4%
Report:              25.4 seconds, 19.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 413
Test mean error for best: 0.41300
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 1
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 79                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 72                 
Correct output: 39                  | Program output: 39                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 29                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 44                  | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 38                 
Correct output: 19                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 56                 
Correct output: 16                  | Program output: 36                 
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -12                
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 55                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 22                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: -33                
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: -52                
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 28                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 19                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 54                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -38                
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 66                 
Correct output: -80                 | Program output: -45                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 4                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 2                  
Correct output: -30                 | Program output: -20                
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt integer_flush integer_mod integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup_items integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 93
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger in3) integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup boolean_shove exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt integer_flush integer_mod integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items) exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup_items integer_dup_times integer_dup) (boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 93
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (426 689 429 935 690 690 689 691 690 428)
Population mean number of elite cases: 6.36
Count of perfect (error zero) individuals by case: (426 689 429 935 690 690 689 691 690 428)
Population mean number of perfect (error zero) cases: 6.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty})
Best program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger) in3 integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup integer_rot exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup) (integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 68
Size: 94
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 3.643
Median total errors in population: 3
Error averages by case: (0.574 0.311 0.571 0.065 0.31 0.31 0.311 0.309 0.31 0.572)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.633
Average program size in population (points): 87.958
Average percent parens in population: 0.264
Minimum age in population: 51.87647338211536
Maximum age in population: 55.49441082595149
Average age in population: 54.03648872448842
Median age in population: 53.99953096894751
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 36977566
--- Timings ---
Current time: 1559583288578 milliseconds
Total Time:         136.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.8 seconds, 56.3%
Fitness Testing:     33.4 seconds, 24.5%
Report:              26.1 seconds, 19.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 38
Successful program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger) in3 integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup integer_rot exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup) (integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 94


Auto-simplifying with starting size: 94
step: 0
program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger) in3 integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup integer_rot exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup) (integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 500
program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger) in3 integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup integer_rot exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup) (integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 1000
program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger) in3 integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup integer_rot exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup) (integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 1500
program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger) in3 integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup integer_rot exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup) (integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 2000
program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger) in3 integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup integer_rot exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup) (integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 2500
program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger) in3 integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup integer_rot exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup) (integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 3000
program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger) in3 integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup integer_rot exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup) (integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 3500
program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger) in3 integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup integer_rot exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup) (integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 4000
program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger) in3 integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup integer_rot exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup) (integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 4500
program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger) in3 integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup integer_rot exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup) (integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

step: 5000
program: (boolean_not integer_inc exec_noop exec_k_when_autoconstructing (boolean_rot) (integer_inc boolean_frominteger) in3 integer_shove in1 in4 integer_min print_integer integer_pop exec_yankdup integer_rot exec_y (boolean_dup_items) integer_pop print_boolean boolean_dup_items integer_pop print_boolean exec_do*count (integer_lte) print_newline integer_lt exec_while (integer_mod) integer_max exec_eq exec_k_when_autoconstructing (integer_mod print_exec (print_boolean exec_do*count (integer_lte print_newline exec_noop exec_dup_times (boolean_not) exec_when (integer_shove) exec_y ()) exec_stackdepth exec_y (integer_shove) integer_dup_items exec_k_when_autoconstructing (integer_mod exec_empty exec_noop exec_stackdepth) (integer_max exec_eq) exec_s () (integer_dup) (integer_dup_times integer_dup) boolean_rot exec_k (exec_yank in1) (exec_if (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_empty)) ()) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 94

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 413
Test mean error for best: 0.41300
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 1
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -14                 | Program output: -14                
Correct output: -40                 | Program output: -40                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -41                
Correct output: 53                  | Program output: 53                 
Correct output: -20                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: 10                  | Program output: 10                 
Correct output: -32                 | Program output: -32                
Correct output: 34                  | Program output: 34                 
Correct output: -22                 | Program output: -22                
Correct output: 18                  | Program output: 54                 
Correct output: 11                  | Program output: 79                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 72                 
Correct output: 39                  | Program output: 39                 
Correct output: 33                  | Program output: 33                 
Correct output: 29                  | Program output: 29                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 44                  | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 38                 
Correct output: 19                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 56                  | Program output: 56                 
Correct output: 16                  | Program output: 36                 
Correct output: -60                 | Program output: -6                 
Correct output: -99                 | Program output: -12                
Correct output: -51                 | Program output: -51                
Correct output: -20                 | Program output: 84                 
Correct output: 42                  | Program output: 59                 
Correct output: -64                 | Program output: -20                
Correct output: -61                 | Program output: -12                
Correct output: -36                 | Program output: 55                 
Correct output: -14                 | Program output: -14                
Correct output: 7                   | Program output: 7                  
Correct output: -73                 | Program output: 22                 
Correct output: -54                 | Program output: -44                
Correct output: -98                 | Program output: -33                
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: -52                
Correct output: -9                  | Program output: -9                 
Correct output: -77                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -28                 | Program output: 15                 
Correct output: -69                 | Program output: -64                
Correct output: -81                 | Program output: 28                 
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -68                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -10                 | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -32                 | Program output: 19                 
Correct output: -76                 | Program output: -61                
Correct output: -50                 | Program output: 97                 
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: 54                 
Correct output: -63                 | Program output: 26                 
Correct output: -81                 | Program output: -40                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -38                
Correct output: -13                 | Program output: 7                  
Correct output: -65                 | Program output: 19                 
Correct output: -91                 | Program output: 66                 
Correct output: -80                 | Program output: -45                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 4                  
Correct output: -88                 | Program output: -4                 
Correct output: 2                   | Program output: 2                  
Correct output: -30                 | Program output: -20                
Correct output: -4                  | Program output: -4                 
Correct output: -85                 | Program output: 5                  
;;******************************
