Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-86 -86 -86 84] -86] [[85 85 85 75] 75] [[-85 -60 -60 -60] -85] [[62 6 6 6] 6] [[77 -50 -50 -50] -50] [[88 88 39 88] 39] [[-68 -68 -68 68] -68] [[45 45 45 52] 45] [[75 85 85 85] 75] [[-62 -62 -10 -62] -62] [(93 93 93 93) 93] [(31 31 31 31) 31] [(-62 -62 -62 -62) -62] [(-72 -72 -72 -72) -72] [(-90 -90 -90 -90) -90] [(1 70 90 81) 1] [(18 65 77 28) 18] [(33 23 13 58) 13] [(74 81 94 13) 13] [(51 86 28 10) 10] [(46 64 100 62) 46] [(38 47 88 10) 10] [(40 62 70 45) 40] [(68 49 0 14) 0] [(50 74 90 100) 50] [(42 94 99 3) 3] [(42 39 57 6) 6] [(46 63 69 64) 46] [(17 98 87 88) 17] [(31 47 14 8) 8] [(24 84 66 86) 24] [(38 35 5 48) 5] [(55 66 9 76) 9] [(90 27 25 94) 25] [(84 28 8 6) 6] [(97 38 9 67) 9] [(87 31 100 19) 19] [(-42 -14 28 95) -42] [(9 -100 23 -69) -100] [(-7 48 -13 50) -13] [(74 -21 33 -26) -26] [(-40 -47 76 -99) -99] [(-46 -81 -82 39) -82] [(13 72 71 16) 13] [(-1 -58 -20 -18) -58] [(68 69 0 85) 0] [(-14 79 -94 2) -94] [(-28 -54 -20 0) -54] [(-93 50 -67 26) -93] [(-38 -92 60 84) -92] [(-58 22 -26 79) -58] [(57 30 -96 -6) -96] [(49 -95 -78 -43) -95] [(49 61 25 94) 25] [(44 -14 -98 -44) -98] [(87 -25 34 92) -25] [(35 58 -6 -72) -72] [(13 20 -84 -6) -84] [(-95 -84 -57 15) -95] [(-28 -98 -100 -99) -100] [(81 3 2 -88) -88] [(84 88 71 -54) -54] [(15 -84 -48 -87) -87] [(-82 -88 -83 -84) -88] [(-27 66 71 99) -27] [(-33 29 -95 85) -95] [(13 6 68 75) 6] [(-65 16 -91 -23) -91] [(73 -56 74 -38) -56] [(11 30 -51 43) -51] [(-3 16 -45 33) -45] [(-16 -39 66 -29) -39] [(-95 33 -82 35) -95] [(9 -67 21 -12) -67] [(62 52 -68 -63) -68] [(43 100 -90 -2) -90] [(-9 48 86 38) -9] [(-5 -4 98 69) -5] [(20 43 -20 -47) -47] [(2 44 40 -90) -90] [(-68 -68 -2 -40) -68] [(30 97 56 -88) -88] [(49 -72 -44 -68) -72] [(41 -47 -57 -65) -65] [(-19 -1 99 69) -19] [(73 6 13 32) 6] [(21 70 64 58) 21] [(-32 54 33 17) -32] [(86 -89 -69 -43) -89] [(78 -84 -99 70) -99] [(-61 -77 65 74) -77] [(-30 -100 21 49) -100] [(18 -26 76 -93) -93] [(-94 70 -69 89) -94] [(73 -12 -2 -75) -75])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-86 -86 -86 84] -86]
Train Case:   6 | Input/Output: [[85 85 85 75] 75]
Train Case:   7 | Input/Output: [[-85 -60 -60 -60] -85]
Train Case:   8 | Input/Output: [[62 6 6 6] 6]
Train Case:   9 | Input/Output: [[77 -50 -50 -50] -50]
Train Case:  10 | Input/Output: [[88 88 39 88] 39]
Train Case:  11 | Input/Output: [[-68 -68 -68 68] -68]
Train Case:  12 | Input/Output: [[45 45 45 52] 45]
Train Case:  13 | Input/Output: [[75 85 85 85] 75]
Train Case:  14 | Input/Output: [[-62 -62 -10 -62] -62]
Train Case:  15 | Input/Output: [(93 93 93 93) 93]
Train Case:  16 | Input/Output: [(31 31 31 31) 31]
Train Case:  17 | Input/Output: [(-62 -62 -62 -62) -62]
Train Case:  18 | Input/Output: [(-72 -72 -72 -72) -72]
Train Case:  19 | Input/Output: [(-90 -90 -90 -90) -90]
Train Case:  20 | Input/Output: [(1 70 90 81) 1]
Train Case:  21 | Input/Output: [(18 65 77 28) 18]
Train Case:  22 | Input/Output: [(33 23 13 58) 13]
Train Case:  23 | Input/Output: [(74 81 94 13) 13]
Train Case:  24 | Input/Output: [(51 86 28 10) 10]
Train Case:  25 | Input/Output: [(46 64 100 62) 46]
Train Case:  26 | Input/Output: [(38 47 88 10) 10]
Train Case:  27 | Input/Output: [(40 62 70 45) 40]
Train Case:  28 | Input/Output: [(68 49 0 14) 0]
Train Case:  29 | Input/Output: [(50 74 90 100) 50]
Train Case:  30 | Input/Output: [(42 94 99 3) 3]
Train Case:  31 | Input/Output: [(42 39 57 6) 6]
Train Case:  32 | Input/Output: [(46 63 69 64) 46]
Train Case:  33 | Input/Output: [(17 98 87 88) 17]
Train Case:  34 | Input/Output: [(31 47 14 8) 8]
Train Case:  35 | Input/Output: [(24 84 66 86) 24]
Train Case:  36 | Input/Output: [(38 35 5 48) 5]
Train Case:  37 | Input/Output: [(55 66 9 76) 9]
Train Case:  38 | Input/Output: [(90 27 25 94) 25]
Train Case:  39 | Input/Output: [(84 28 8 6) 6]
Train Case:  40 | Input/Output: [(97 38 9 67) 9]
Train Case:  41 | Input/Output: [(87 31 100 19) 19]
Train Case:  42 | Input/Output: [(-42 -14 28 95) -42]
Train Case:  43 | Input/Output: [(9 -100 23 -69) -100]
Train Case:  44 | Input/Output: [(-7 48 -13 50) -13]
Train Case:  45 | Input/Output: [(74 -21 33 -26) -26]
Train Case:  46 | Input/Output: [(-40 -47 76 -99) -99]
Train Case:  47 | Input/Output: [(-46 -81 -82 39) -82]
Train Case:  48 | Input/Output: [(13 72 71 16) 13]
Train Case:  49 | Input/Output: [(-1 -58 -20 -18) -58]
Train Case:  50 | Input/Output: [(68 69 0 85) 0]
Train Case:  51 | Input/Output: [(-14 79 -94 2) -94]
Train Case:  52 | Input/Output: [(-28 -54 -20 0) -54]
Train Case:  53 | Input/Output: [(-93 50 -67 26) -93]
Train Case:  54 | Input/Output: [(-38 -92 60 84) -92]
Train Case:  55 | Input/Output: [(-58 22 -26 79) -58]
Train Case:  56 | Input/Output: [(57 30 -96 -6) -96]
Train Case:  57 | Input/Output: [(49 -95 -78 -43) -95]
Train Case:  58 | Input/Output: [(49 61 25 94) 25]
Train Case:  59 | Input/Output: [(44 -14 -98 -44) -98]
Train Case:  60 | Input/Output: [(87 -25 34 92) -25]
Train Case:  61 | Input/Output: [(35 58 -6 -72) -72]
Train Case:  62 | Input/Output: [(13 20 -84 -6) -84]
Train Case:  63 | Input/Output: [(-95 -84 -57 15) -95]
Train Case:  64 | Input/Output: [(-28 -98 -100 -99) -100]
Train Case:  65 | Input/Output: [(81 3 2 -88) -88]
Train Case:  66 | Input/Output: [(84 88 71 -54) -54]
Train Case:  67 | Input/Output: [(15 -84 -48 -87) -87]
Train Case:  68 | Input/Output: [(-82 -88 -83 -84) -88]
Train Case:  69 | Input/Output: [(-27 66 71 99) -27]
Train Case:  70 | Input/Output: [(-33 29 -95 85) -95]
Train Case:  71 | Input/Output: [(13 6 68 75) 6]
Train Case:  72 | Input/Output: [(-65 16 -91 -23) -91]
Train Case:  73 | Input/Output: [(73 -56 74 -38) -56]
Train Case:  74 | Input/Output: [(11 30 -51 43) -51]
Train Case:  75 | Input/Output: [(-3 16 -45 33) -45]
Train Case:  76 | Input/Output: [(-16 -39 66 -29) -39]
Train Case:  77 | Input/Output: [(-95 33 -82 35) -95]
Train Case:  78 | Input/Output: [(9 -67 21 -12) -67]
Train Case:  79 | Input/Output: [(62 52 -68 -63) -68]
Train Case:  80 | Input/Output: [(43 100 -90 -2) -90]
Train Case:  81 | Input/Output: [(-9 48 86 38) -9]
Train Case:  82 | Input/Output: [(-5 -4 98 69) -5]
Train Case:  83 | Input/Output: [(20 43 -20 -47) -47]
Train Case:  84 | Input/Output: [(2 44 40 -90) -90]
Train Case:  85 | Input/Output: [(-68 -68 -2 -40) -68]
Train Case:  86 | Input/Output: [(30 97 56 -88) -88]
Train Case:  87 | Input/Output: [(49 -72 -44 -68) -72]
Train Case:  88 | Input/Output: [(41 -47 -57 -65) -65]
Train Case:  89 | Input/Output: [(-19 -1 99 69) -19]
Train Case:  90 | Input/Output: [(73 6 13 32) 6]
Train Case:  91 | Input/Output: [(21 70 64 58) 21]
Train Case:  92 | Input/Output: [(-32 54 33 17) -32]
Train Case:  93 | Input/Output: [(86 -89 -69 -43) -89]
Train Case:  94 | Input/Output: [(78 -84 -99 70) -99]
Train Case:  95 | Input/Output: [(-61 -77 65 74) -77]
Train Case:  96 | Input/Output: [(-30 -100 21 49) -100]
Train Case:  97 | Input/Output: [(18 -26 76 -93) -93]
Train Case:  98 | Input/Output: [(-94 70 -69 89) -94]
Train Case:  99 | Input/Output: [(73 -12 -2 -75) -75]
Test Case:   0 | Input/Output: [[34 34 34 81] 34]
Test Case:   1 | Input/Output: [[15 15 15 53] 15]
Test Case:   2 | Input/Output: [[-93 37 -93 -93] -93]
Test Case:   3 | Input/Output: [[16 16 16 90] 16]
Test Case:   4 | Input/Output: [[26 41 41 41] 26]
Test Case:   5 | Input/Output: [[-11 5 -11 -11] -11]
Test Case:   6 | Input/Output: [[86 86 20 86] 20]
Test Case:   7 | Input/Output: [[-88 -17 -88 -88] -88]
Test Case:   8 | Input/Output: [[10 10 10 19] 10]
Test Case:   9 | Input/Output: [[31 -63 31 31] -63]
Test Case:  10 | Input/Output: [[-75 -75 -75 94] -75]
Test Case:  11 | Input/Output: [[-30 -30 -14 -30] -30]
Test Case:  12 | Input/Output: [[33 -62 -62 -62] -62]
Test Case:  13 | Input/Output: [[-44 -44 -44 43] -44]
Test Case:  14 | Input/Output: [[-38 -38 -10 -38] -38]
Test Case:  15 | Input/Output: [[26 26 -18 26] -18]
Test Case:  16 | Input/Output: [[30 30 83 30] 30]
Test Case:  17 | Input/Output: [[-23 -23 -23 -26] -26]
Test Case:  18 | Input/Output: [[82 82 82 -54] -54]
Test Case:  19 | Input/Output: [[-70 -70 -70 17] -70]
Test Case:  20 | Input/Output: [[63 49 49 49] 49]
Test Case:  21 | Input/Output: [[-64 -66 -64 -64] -66]
Test Case:  22 | Input/Output: [[-85 -85 -85 -83] -85]
Test Case:  23 | Input/Output: [[-1 -1 -1 -85] -85]
Test Case:  24 | Input/Output: [[100 100 100 -92] -92]
Test Case:  25 | Input/Output: [[81 86 86 86] 81]
Test Case:  26 | Input/Output: [[-68 -68 38 -68] -68]
Test Case:  27 | Input/Output: [[-2 -2 -72 -2] -72]
Test Case:  28 | Input/Output: [[55 55 44 55] 44]
Test Case:  29 | Input/Output: [[9 77 9 9] 9]
Test Case:  30 | Input/Output: [[35 10 10 10] 10]
Test Case:  31 | Input/Output: [[19 29 19 19] 19]
Test Case:  32 | Input/Output: [[81 -48 -48 -48] -48]
Test Case:  33 | Input/Output: [[-70 -75 -70 -70] -75]
Test Case:  34 | Input/Output: [[21 21 59 21] 21]
Test Case:  35 | Input/Output: [[45 -89 -89 -89] -89]
Test Case:  36 | Input/Output: [[61 61 61 78] 61]
Test Case:  37 | Input/Output: [[-82 -77 -77 -77] -82]
Test Case:  38 | Input/Output: [[50 56 56 56] 50]
Test Case:  39 | Input/Output: [[64 64 11 64] 11]
Test Case:  40 | Input/Output: [[72 -100 72 72] -100]
Test Case:  41 | Input/Output: [[58 -88 58 58] -88]
Test Case:  42 | Input/Output: [[-60 -60 -60 24] -60]
Test Case:  43 | Input/Output: [[45 2 2 2] 2]
Test Case:  44 | Input/Output: [[66 66 66 40] 40]
Test Case:  45 | Input/Output: [[38 18 38 38] 18]
Test Case:  46 | Input/Output: [[-59 -24 -59 -59] -59]
Test Case:  47 | Input/Output: [[-77 14 14 14] -77]
Test Case:  48 | Input/Output: [[-46 33 33 33] -46]
Test Case:  49 | Input/Output: [[-77 -88 -88 -88] -88]
Test Case:  50 | Input/Output: [[40 40 40 -32] -32]
Test Case:  51 | Input/Output: [[2 -68 -68 -68] -68]
Test Case:  52 | Input/Output: [[46 79 46 46] 46]
Test Case:  53 | Input/Output: [[-99 -99 40 -99] -99]
Test Case:  54 | Input/Output: [[90 90 87 90] 87]
Test Case:  55 | Input/Output: [[-81 1 1 1] -81]
Test Case:  56 | Input/Output: [[46 24 24 24] 24]
Test Case:  57 | Input/Output: [[-47 58 -47 -47] -47]
Test Case:  58 | Input/Output: [[-68 23 23 23] -68]
Test Case:  59 | Input/Output: [[-40 -40 -74 -40] -74]
Test Case:  60 | Input/Output: [[-3 -3 -3 -94] -94]
Test Case:  61 | Input/Output: [[97 97 97 -60] -60]
Test Case:  62 | Input/Output: [[54 75 54 54] 54]
Test Case:  63 | Input/Output: [[-91 -91 19 -91] -91]
Test Case:  64 | Input/Output: [[56 56 56 61] 56]
Test Case:  65 | Input/Output: [[-9 38 38 38] -9]
Test Case:  66 | Input/Output: [[22 22 22 -69] -69]
Test Case:  67 | Input/Output: [[20 55 55 55] 20]
Test Case:  68 | Input/Output: [[-30 -11 -11 -11] -30]
Test Case:  69 | Input/Output: [[-33 -33 -45 -33] -45]
Test Case:  70 | Input/Output: [[78 -72 78 78] -72]
Test Case:  71 | Input/Output: [[-65 70 -65 -65] -65]
Test Case:  72 | Input/Output: [[0 0 0 -67] -67]
Test Case:  73 | Input/Output: [[97 17 17 17] 17]
Test Case:  74 | Input/Output: [[-87 -87 -87 -56] -87]
Test Case:  75 | Input/Output: [[80 17 17 17] 17]
Test Case:  76 | Input/Output: [[45 45 24 45] 24]
Test Case:  77 | Input/Output: [[86 86 -78 86] -78]
Test Case:  78 | Input/Output: [[17 17 17 -71] -71]
Test Case:  79 | Input/Output: [[-89 -89 -89 67] -89]
Test Case:  80 | Input/Output: [[21 21 21 -95] -95]
Test Case:  81 | Input/Output: [[-7 -7 -53 -7] -53]
Test Case:  82 | Input/Output: [[72 72 19 72] 19]
Test Case:  83 | Input/Output: [[-7 -26 -26 -26] -26]
Test Case:  84 | Input/Output: [[-34 -34 27 -34] -34]
Test Case:  85 | Input/Output: [[65 65 -26 65] -26]
Test Case:  86 | Input/Output: [[-9 -9 -9 -18] -18]
Test Case:  87 | Input/Output: [[-64 17 -64 -64] -64]
Test Case:  88 | Input/Output: [[38 73 38 38] 38]
Test Case:  89 | Input/Output: [[-87 94 -87 -87] -87]
Test Case:  90 | Input/Output: [[-29 -29 -72 -29] -72]
Test Case:  91 | Input/Output: [[11 11 11 36] 11]
Test Case:  92 | Input/Output: [[-76 -71 -71 -71] -76]
Test Case:  93 | Input/Output: [[-38 -38 -38 18] -38]
Test Case:  94 | Input/Output: [[71 52 52 52] 52]
Test Case:  95 | Input/Output: [[14 3 3 3] 3]
Test Case:  96 | Input/Output: [[55 16 55 55] 16]
Test Case:  97 | Input/Output: [[12 12 12 0] 0]
Test Case:  98 | Input/Output: [[-61 -61 -20 -61] -61]
Test Case:  99 | Input/Output: [[-25 -25 -50 -25] -50]
Test Case: 100 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 101 | Input/Output: [(33 33 33 33) 33]
Test Case: 102 | Input/Output: [(64 64 64 64) 64]
Test Case: 103 | Input/Output: [(12 12 12 12) 12]
Test Case: 104 | Input/Output: [(49 49 49 49) 49]
Test Case: 105 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 106 | Input/Output: [(2 2 2 2) 2]
Test Case: 107 | Input/Output: [(29 29 29 29) 29]
Test Case: 108 | Input/Output: [(51 51 51 51) 51]
Test Case: 109 | Input/Output: [(83 83 83 83) 83]
Test Case: 110 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 111 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 112 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 113 | Input/Output: [(57 57 57 57) 57]
Test Case: 114 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 115 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 116 | Input/Output: [(51 51 51 51) 51]
Test Case: 117 | Input/Output: [(82 82 82 82) 82]
Test Case: 118 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 119 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 120 | Input/Output: [(8 8 8 8) 8]
Test Case: 121 | Input/Output: [(13 13 13 13) 13]
Test Case: 122 | Input/Output: [(71 71 71 71) 71]
Test Case: 123 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 124 | Input/Output: [(56 56 56 56) 56]
Test Case: 125 | Input/Output: [(66 66 66 66) 66]
Test Case: 126 | Input/Output: [(38 38 38 38) 38]
Test Case: 127 | Input/Output: [(81 81 81 81) 81]
Test Case: 128 | Input/Output: [(75 75 75 75) 75]
Test Case: 129 | Input/Output: [(78 78 78 78) 78]
Test Case: 130 | Input/Output: [(60 60 60 60) 60]
Test Case: 131 | Input/Output: [(59 59 59 59) 59]
Test Case: 132 | Input/Output: [(93 93 93 93) 93]
Test Case: 133 | Input/Output: [(23 23 23 23) 23]
Test Case: 134 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 135 | Input/Output: [(92 92 92 92) 92]
Test Case: 136 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 137 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 138 | Input/Output: [(41 41 41 41) 41]
Test Case: 139 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 140 | Input/Output: [(67 67 67 67) 67]
Test Case: 141 | Input/Output: [(71 71 71 71) 71]
Test Case: 142 | Input/Output: [(63 63 63 63) 63]
Test Case: 143 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 144 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 145 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 146 | Input/Output: [(92 92 92 92) 92]
Test Case: 147 | Input/Output: [(19 19 19 19) 19]
Test Case: 148 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 149 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 150 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 151 | Input/Output: [(58 58 58 58) 58]
Test Case: 152 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 153 | Input/Output: [(1 1 1 1) 1]
Test Case: 154 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 155 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 156 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 157 | Input/Output: [(63 63 63 63) 63]
Test Case: 158 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 159 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 160 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 161 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 162 | Input/Output: [(47 47 47 47) 47]
Test Case: 163 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 164 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 165 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 166 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 167 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 168 | Input/Output: [(46 46 46 46) 46]
Test Case: 169 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 170 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 171 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 172 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 173 | Input/Output: [(86 86 86 86) 86]
Test Case: 174 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 175 | Input/Output: [(12 12 12 12) 12]
Test Case: 176 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 177 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 178 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 179 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 180 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 181 | Input/Output: [(74 74 74 74) 74]
Test Case: 182 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 183 | Input/Output: [(50 50 50 50) 50]
Test Case: 184 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 185 | Input/Output: [(91 91 91 91) 91]
Test Case: 186 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 187 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 188 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 189 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 190 | Input/Output: [(58 58 58 58) 58]
Test Case: 191 | Input/Output: [(53 53 53 53) 53]
Test Case: 192 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 193 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 194 | Input/Output: [(94 94 94 94) 94]
Test Case: 195 | Input/Output: [(97 97 97 97) 97]
Test Case: 196 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 197 | Input/Output: [(11 11 11 11) 11]
Test Case: 198 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 199 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 200 | Input/Output: [(94 82 69 20) 20]
Test Case: 201 | Input/Output: [(60 22 32 44) 22]
Test Case: 202 | Input/Output: [(87 25 90 60) 25]
Test Case: 203 | Input/Output: [(78 33 52 74) 33]
Test Case: 204 | Input/Output: [(10 70 17 23) 10]
Test Case: 205 | Input/Output: [(40 76 16 9) 9]
Test Case: 206 | Input/Output: [(66 46 82 63) 46]
Test Case: 207 | Input/Output: [(57 78 85 58) 57]
Test Case: 208 | Input/Output: [(64 71 66 27) 27]
Test Case: 209 | Input/Output: [(12 26 20 65) 12]
Test Case: 210 | Input/Output: [(22 64 1 62) 1]
Test Case: 211 | Input/Output: [(68 15 53 90) 15]
Test Case: 212 | Input/Output: [(71 80 39 98) 39]
Test Case: 213 | Input/Output: [(0 53 43 70) 0]
Test Case: 214 | Input/Output: [(69 73 53 100) 53]
Test Case: 215 | Input/Output: [(11 19 82 72) 11]
Test Case: 216 | Input/Output: [(0 50 29 72) 0]
Test Case: 217 | Input/Output: [(39 44 16 19) 16]
Test Case: 218 | Input/Output: [(34 94 37 76) 34]
Test Case: 219 | Input/Output: [(75 43 47 29) 29]
Test Case: 220 | Input/Output: [(24 81 2 77) 2]
Test Case: 221 | Input/Output: [(3 97 2 99) 2]
Test Case: 222 | Input/Output: [(78 55 81 28) 28]
Test Case: 223 | Input/Output: [(4 92 24 87) 4]
Test Case: 224 | Input/Output: [(71 60 39 90) 39]
Test Case: 225 | Input/Output: [(36 0 89 38) 0]
Test Case: 226 | Input/Output: [(84 98 84 16) 16]
Test Case: 227 | Input/Output: [(0 12 55 27) 0]
Test Case: 228 | Input/Output: [(32 92 80 80) 32]
Test Case: 229 | Input/Output: [(87 17 56 71) 17]
Test Case: 230 | Input/Output: [(36 17 57 52) 17]
Test Case: 231 | Input/Output: [(10 67 31 6) 6]
Test Case: 232 | Input/Output: [(90 28 85 6) 6]
Test Case: 233 | Input/Output: [(61 66 9 53) 9]
Test Case: 234 | Input/Output: [(59 11 28 46) 11]
Test Case: 235 | Input/Output: [(36 39 61 93) 36]
Test Case: 236 | Input/Output: [(38 71 6 22) 6]
Test Case: 237 | Input/Output: [(74 47 82 28) 28]
Test Case: 238 | Input/Output: [(7 48 83 73) 7]
Test Case: 239 | Input/Output: [(43 41 99 37) 37]
Test Case: 240 | Input/Output: [(13 34 80 7) 7]
Test Case: 241 | Input/Output: [(9 94 79 16) 9]
Test Case: 242 | Input/Output: [(42 9 47 69) 9]
Test Case: 243 | Input/Output: [(74 3 69 68) 3]
Test Case: 244 | Input/Output: [(18 12 12 20) 12]
Test Case: 245 | Input/Output: [(60 45 97 31) 31]
Test Case: 246 | Input/Output: [(76 88 30 58) 30]
Test Case: 247 | Input/Output: [(67 41 41 3) 3]
Test Case: 248 | Input/Output: [(23 40 100 60) 23]
Test Case: 249 | Input/Output: [(82 60 9 68) 9]
Test Case: 250 | Input/Output: [(73 25 99 9) 9]
Test Case: 251 | Input/Output: [(48 74 45 52) 45]
Test Case: 252 | Input/Output: [(46 8 48 78) 8]
Test Case: 253 | Input/Output: [(67 21 45 42) 21]
Test Case: 254 | Input/Output: [(65 4 82 86) 4]
Test Case: 255 | Input/Output: [(53 20 24 56) 20]
Test Case: 256 | Input/Output: [(95 45 19 22) 19]
Test Case: 257 | Input/Output: [(21 9 17 94) 9]
Test Case: 258 | Input/Output: [(16 91 75 47) 16]
Test Case: 259 | Input/Output: [(31 19 5 80) 5]
Test Case: 260 | Input/Output: [(83 27 95 21) 21]
Test Case: 261 | Input/Output: [(46 87 48 78) 46]
Test Case: 262 | Input/Output: [(46 72 9 7) 7]
Test Case: 263 | Input/Output: [(76 51 6 33) 6]
Test Case: 264 | Input/Output: [(33 70 18 59) 18]
Test Case: 265 | Input/Output: [(73 74 47 40) 40]
Test Case: 266 | Input/Output: [(61 36 5 40) 5]
Test Case: 267 | Input/Output: [(44 9 96 42) 9]
Test Case: 268 | Input/Output: [(62 35 42 86) 35]
Test Case: 269 | Input/Output: [(62 45 89 58) 45]
Test Case: 270 | Input/Output: [(29 1 40 44) 1]
Test Case: 271 | Input/Output: [(51 86 68 47) 47]
Test Case: 272 | Input/Output: [(92 42 77 77) 42]
Test Case: 273 | Input/Output: [(46 86 9 24) 9]
Test Case: 274 | Input/Output: [(17 28 16 58) 16]
Test Case: 275 | Input/Output: [(11 76 11 62) 11]
Test Case: 276 | Input/Output: [(10 62 16 2) 2]
Test Case: 277 | Input/Output: [(22 75 5 82) 5]
Test Case: 278 | Input/Output: [(95 1 94 14) 1]
Test Case: 279 | Input/Output: [(94 45 11 80) 11]
Test Case: 280 | Input/Output: [(31 97 82 77) 31]
Test Case: 281 | Input/Output: [(76 23 14 12) 12]
Test Case: 282 | Input/Output: [(72 81 37 68) 37]
Test Case: 283 | Input/Output: [(84 98 84 84) 84]
Test Case: 284 | Input/Output: [(89 26 73 23) 23]
Test Case: 285 | Input/Output: [(36 67 16 99) 16]
Test Case: 286 | Input/Output: [(94 25 51 36) 25]
Test Case: 287 | Input/Output: [(15 95 62 36) 15]
Test Case: 288 | Input/Output: [(79 6 11 4) 4]
Test Case: 289 | Input/Output: [(47 91 90 60) 47]
Test Case: 290 | Input/Output: [(95 2 4 17) 2]
Test Case: 291 | Input/Output: [(93 2 96 94) 2]
Test Case: 292 | Input/Output: [(79 48 97 2) 2]
Test Case: 293 | Input/Output: [(30 8 86 16) 8]
Test Case: 294 | Input/Output: [(57 7 57 62) 7]
Test Case: 295 | Input/Output: [(39 40 80 7) 7]
Test Case: 296 | Input/Output: [(2 90 79 43) 2]
Test Case: 297 | Input/Output: [(53 80 29 59) 29]
Test Case: 298 | Input/Output: [(1 74 55 48) 1]
Test Case: 299 | Input/Output: [(28 37 68 18) 18]
Test Case: 300 | Input/Output: [(57 65 35 8) 8]
Test Case: 301 | Input/Output: [(26 35 19 30) 19]
Test Case: 302 | Input/Output: [(75 66 30 3) 3]
Test Case: 303 | Input/Output: [(67 26 1 24) 1]
Test Case: 304 | Input/Output: [(74 68 28 12) 12]
Test Case: 305 | Input/Output: [(73 7 39 28) 7]
Test Case: 306 | Input/Output: [(53 7 25 38) 7]
Test Case: 307 | Input/Output: [(10 37 46 64) 10]
Test Case: 308 | Input/Output: [(91 47 41 81) 41]
Test Case: 309 | Input/Output: [(70 32 13 14) 13]
Test Case: 310 | Input/Output: [(91 73 12 89) 12]
Test Case: 311 | Input/Output: [(65 85 16 84) 16]
Test Case: 312 | Input/Output: [(55 70 25 21) 21]
Test Case: 313 | Input/Output: [(72 4 49 16) 4]
Test Case: 314 | Input/Output: [(94 56 21 23) 21]
Test Case: 315 | Input/Output: [(39 24 54 83) 24]
Test Case: 316 | Input/Output: [(79 12 48 84) 12]
Test Case: 317 | Input/Output: [(83 25 70 55) 25]
Test Case: 318 | Input/Output: [(52 4 71 23) 4]
Test Case: 319 | Input/Output: [(39 43 25 3) 3]
Test Case: 320 | Input/Output: [(91 62 52 3) 3]
Test Case: 321 | Input/Output: [(68 84 47 42) 42]
Test Case: 322 | Input/Output: [(75 87 38 94) 38]
Test Case: 323 | Input/Output: [(13 94 33 35) 13]
Test Case: 324 | Input/Output: [(89 52 66 26) 26]
Test Case: 325 | Input/Output: [(27 64 48 16) 16]
Test Case: 326 | Input/Output: [(86 85 35 57) 35]
Test Case: 327 | Input/Output: [(44 71 70 86) 44]
Test Case: 328 | Input/Output: [(89 95 88 66) 66]
Test Case: 329 | Input/Output: [(94 80 38 57) 38]
Test Case: 330 | Input/Output: [(27 65 27 85) 27]
Test Case: 331 | Input/Output: [(52 7 34 87) 7]
Test Case: 332 | Input/Output: [(15 57 74 91) 15]
Test Case: 333 | Input/Output: [(46 78 88 43) 43]
Test Case: 334 | Input/Output: [(33 19 65 97) 19]
Test Case: 335 | Input/Output: [(5 99 51 16) 5]
Test Case: 336 | Input/Output: [(41 11 57 22) 11]
Test Case: 337 | Input/Output: [(21 82 44 88) 21]
Test Case: 338 | Input/Output: [(56 75 65 91) 56]
Test Case: 339 | Input/Output: [(78 20 65 61) 20]
Test Case: 340 | Input/Output: [(63 57 19 85) 19]
Test Case: 341 | Input/Output: [(18 41 25 39) 18]
Test Case: 342 | Input/Output: [(40 56 43 33) 33]
Test Case: 343 | Input/Output: [(55 4 11 49) 4]
Test Case: 344 | Input/Output: [(96 27 39 39) 27]
Test Case: 345 | Input/Output: [(18 100 21 87) 18]
Test Case: 346 | Input/Output: [(32 86 68 61) 32]
Test Case: 347 | Input/Output: [(55 86 17 71) 17]
Test Case: 348 | Input/Output: [(79 95 3 7) 3]
Test Case: 349 | Input/Output: [(47 49 12 80) 12]
Test Case: 350 | Input/Output: [(6 1 94 42) 1]
Test Case: 351 | Input/Output: [(15 95 90 43) 15]
Test Case: 352 | Input/Output: [(96 5 81 27) 5]
Test Case: 353 | Input/Output: [(80 3 9 77) 3]
Test Case: 354 | Input/Output: [(93 36 65 70) 36]
Test Case: 355 | Input/Output: [(89 51 97 86) 51]
Test Case: 356 | Input/Output: [(20 63 47 61) 20]
Test Case: 357 | Input/Output: [(30 13 49 90) 13]
Test Case: 358 | Input/Output: [(34 64 41 55) 34]
Test Case: 359 | Input/Output: [(98 10 0 65) 0]
Test Case: 360 | Input/Output: [(17 29 21 15) 15]
Test Case: 361 | Input/Output: [(23 7 68 87) 7]
Test Case: 362 | Input/Output: [(42 37 36 75) 36]
Test Case: 363 | Input/Output: [(45 63 55 2) 2]
Test Case: 364 | Input/Output: [(73 94 34 81) 34]
Test Case: 365 | Input/Output: [(11 38 17 22) 11]
Test Case: 366 | Input/Output: [(36 55 46 74) 36]
Test Case: 367 | Input/Output: [(19 86 26 60) 19]
Test Case: 368 | Input/Output: [(28 58 48 54) 28]
Test Case: 369 | Input/Output: [(76 8 90 44) 8]
Test Case: 370 | Input/Output: [(66 30 34 32) 30]
Test Case: 371 | Input/Output: [(100 90 46 7) 7]
Test Case: 372 | Input/Output: [(61 1 2 24) 1]
Test Case: 373 | Input/Output: [(18 80 22 36) 18]
Test Case: 374 | Input/Output: [(89 98 84 62) 62]
Test Case: 375 | Input/Output: [(78 88 29 89) 29]
Test Case: 376 | Input/Output: [(92 29 41 21) 21]
Test Case: 377 | Input/Output: [(1 80 32 25) 1]
Test Case: 378 | Input/Output: [(7 73 28 43) 7]
Test Case: 379 | Input/Output: [(45 20 24 92) 20]
Test Case: 380 | Input/Output: [(100 19 37 92) 19]
Test Case: 381 | Input/Output: [(37 83 49 80) 37]
Test Case: 382 | Input/Output: [(32 18 94 2) 2]
Test Case: 383 | Input/Output: [(87 31 19 99) 19]
Test Case: 384 | Input/Output: [(0 45 71 64) 0]
Test Case: 385 | Input/Output: [(57 10 13 85) 10]
Test Case: 386 | Input/Output: [(21 54 56 95) 21]
Test Case: 387 | Input/Output: [(79 95 93 72) 72]
Test Case: 388 | Input/Output: [(88 18 41 19) 18]
Test Case: 389 | Input/Output: [(40 49 27 21) 21]
Test Case: 390 | Input/Output: [(94 64 43 33) 33]
Test Case: 391 | Input/Output: [(3 31 14 84) 3]
Test Case: 392 | Input/Output: [(41 78 39 97) 39]
Test Case: 393 | Input/Output: [(57 82 14 61) 14]
Test Case: 394 | Input/Output: [(54 38 99 83) 38]
Test Case: 395 | Input/Output: [(73 11 5 69) 5]
Test Case: 396 | Input/Output: [(88 66 76 80) 66]
Test Case: 397 | Input/Output: [(46 51 27 0) 0]
Test Case: 398 | Input/Output: [(91 79 91 70) 70]
Test Case: 399 | Input/Output: [(47 84 38 40) 38]
Test Case: 400 | Input/Output: [(87 -8 -19 90) -19]
Test Case: 401 | Input/Output: [(43 -82 -29 -8) -82]
Test Case: 402 | Input/Output: [(-67 65 -5 -8) -67]
Test Case: 403 | Input/Output: [(14 2 -97 6) -97]
Test Case: 404 | Input/Output: [(16 -17 71 71) -17]
Test Case: 405 | Input/Output: [(35 -31 52 39) -31]
Test Case: 406 | Input/Output: [(-57 59 -36 96) -57]
Test Case: 407 | Input/Output: [(14 26 -99 -85) -99]
Test Case: 408 | Input/Output: [(93 77 70 -14) -14]
Test Case: 409 | Input/Output: [(33 4 39 -73) -73]
Test Case: 410 | Input/Output: [(-56 47 62 -53) -56]
Test Case: 411 | Input/Output: [(55 96 83 61) 55]
Test Case: 412 | Input/Output: [(-70 66 -90 77) -90]
Test Case: 413 | Input/Output: [(5 39 -26 53) -26]
Test Case: 414 | Input/Output: [(-19 76 -14 17) -19]
Test Case: 415 | Input/Output: [(40 -41 59 47) -41]
Test Case: 416 | Input/Output: [(-3 -33 -65 97) -65]
Test Case: 417 | Input/Output: [(49 62 35 61) 35]
Test Case: 418 | Input/Output: [(-2 -28 -45 -63) -63]
Test Case: 419 | Input/Output: [(2 -39 -37 -3) -39]
Test Case: 420 | Input/Output: [(20 84 4 31) 4]
Test Case: 421 | Input/Output: [(10 27 -52 -30) -52]
Test Case: 422 | Input/Output: [(-48 -75 19 43) -75]
Test Case: 423 | Input/Output: [(38 1 -66 92) -66]
Test Case: 424 | Input/Output: [(49 54 -45 -18) -45]
Test Case: 425 | Input/Output: [(-59 -65 66 -11) -65]
Test Case: 426 | Input/Output: [(-15 -39 81 -96) -96]
Test Case: 427 | Input/Output: [(71 9 33 -37) -37]
Test Case: 428 | Input/Output: [(64 -17 -41 42) -41]
Test Case: 429 | Input/Output: [(-53 -89 68 -9) -89]
Test Case: 430 | Input/Output: [(70 6 -25 56) -25]
Test Case: 431 | Input/Output: [(67 100 -87 85) -87]
Test Case: 432 | Input/Output: [(82 -81 16 -5) -81]
Test Case: 433 | Input/Output: [(68 91 91 -38) -38]
Test Case: 434 | Input/Output: [(-63 -13 -40 -87) -87]
Test Case: 435 | Input/Output: [(-95 -98 7 -52) -98]
Test Case: 436 | Input/Output: [(26 23 32 -2) -2]
Test Case: 437 | Input/Output: [(7 -12 24 71) -12]
Test Case: 438 | Input/Output: [(-85 -78 -6 -47) -85]
Test Case: 439 | Input/Output: [(26 88 8 -14) -14]
Test Case: 440 | Input/Output: [(-26 -79 11 -49) -79]
Test Case: 441 | Input/Output: [(-26 79 -98 77) -98]
Test Case: 442 | Input/Output: [(26 -10 -61 59) -61]
Test Case: 443 | Input/Output: [(-85 -98 75 -30) -98]
Test Case: 444 | Input/Output: [(50 23 -53 -33) -53]
Test Case: 445 | Input/Output: [(-71 -68 51 33) -71]
Test Case: 446 | Input/Output: [(47 -74 -21 -35) -74]
Test Case: 447 | Input/Output: [(-71 65 -39 -73) -73]
Test Case: 448 | Input/Output: [(-94 59 -32 64) -94]
Test Case: 449 | Input/Output: [(19 18 -39 -89) -89]
Test Case: 450 | Input/Output: [(33 53 67 -82) -82]
Test Case: 451 | Input/Output: [(5 35 0 -23) -23]
Test Case: 452 | Input/Output: [(7 64 -84 -94) -94]
Test Case: 453 | Input/Output: [(11 -7 -47 -37) -47]
Test Case: 454 | Input/Output: [(14 9 -43 -83) -83]
Test Case: 455 | Input/Output: [(35 -23 -76 -34) -76]
Test Case: 456 | Input/Output: [(32 -23 7 19) -23]
Test Case: 457 | Input/Output: [(-64 -10 -67 14) -67]
Test Case: 458 | Input/Output: [(-72 -86 -14 58) -86]
Test Case: 459 | Input/Output: [(-38 36 -6 -82) -82]
Test Case: 460 | Input/Output: [(14 -56 88 37) -56]
Test Case: 461 | Input/Output: [(95 39 -42 37) -42]
Test Case: 462 | Input/Output: [(66 -1 12 -18) -18]
Test Case: 463 | Input/Output: [(59 -42 48 46) -42]
Test Case: 464 | Input/Output: [(-12 -45 -100 -51) -100]
Test Case: 465 | Input/Output: [(83 68 -78 -13) -78]
Test Case: 466 | Input/Output: [(-22 44 -31 -74) -74]
Test Case: 467 | Input/Output: [(-4 -72 33 35) -72]
Test Case: 468 | Input/Output: [(-31 5 -48 64) -48]
Test Case: 469 | Input/Output: [(-61 82 60 -3) -61]
Test Case: 470 | Input/Output: [(-36 49 -37 95) -37]
Test Case: 471 | Input/Output: [(67 28 33 74) 28]
Test Case: 472 | Input/Output: [(-47 -76 17 -48) -76]
Test Case: 473 | Input/Output: [(20 -87 -40 -86) -87]
Test Case: 474 | Input/Output: [(55 -81 -37 55) -81]
Test Case: 475 | Input/Output: [(4 -92 -51 92) -92]
Test Case: 476 | Input/Output: [(8 -54 56 42) -54]
Test Case: 477 | Input/Output: [(-69 51 100 0) -69]
Test Case: 478 | Input/Output: [(-72 -51 -60 74) -72]
Test Case: 479 | Input/Output: [(17 77 -15 -59) -59]
Test Case: 480 | Input/Output: [(7 48 24 -34) -34]
Test Case: 481 | Input/Output: [(-95 -48 46 -100) -100]
Test Case: 482 | Input/Output: [(40 -48 -85 -24) -85]
Test Case: 483 | Input/Output: [(28 44 25 1) 1]
Test Case: 484 | Input/Output: [(-2 -48 -66 42) -66]
Test Case: 485 | Input/Output: [(-50 32 26 -4) -50]
Test Case: 486 | Input/Output: [(-33 -62 85 -9) -62]
Test Case: 487 | Input/Output: [(3 -68 51 39) -68]
Test Case: 488 | Input/Output: [(54 85 -19 -35) -35]
Test Case: 489 | Input/Output: [(-91 58 -9 33) -91]
Test Case: 490 | Input/Output: [(19 -72 63 -5) -72]
Test Case: 491 | Input/Output: [(-93 68 -4 80) -93]
Test Case: 492 | Input/Output: [(-5 -52 -13 99) -52]
Test Case: 493 | Input/Output: [(-86 -71 -43 -28) -86]
Test Case: 494 | Input/Output: [(70 39 -47 -25) -47]
Test Case: 495 | Input/Output: [(82 -15 -15 70) -15]
Test Case: 496 | Input/Output: [(2 -56 -6 98) -56]
Test Case: 497 | Input/Output: [(-30 -13 0 79) -30]
Test Case: 498 | Input/Output: [(8 -57 -92 73) -92]
Test Case: 499 | Input/Output: [(44 42 -91 -79) -91]
Test Case: 500 | Input/Output: [(-66 63 46 77) -66]
Test Case: 501 | Input/Output: [(1 84 36 99) 1]
Test Case: 502 | Input/Output: [(53 19 45 -79) -79]
Test Case: 503 | Input/Output: [(84 -100 77 -27) -100]
Test Case: 504 | Input/Output: [(25 -66 13 -38) -66]
Test Case: 505 | Input/Output: [(-17 12 38 10) -17]
Test Case: 506 | Input/Output: [(-31 79 -83 27) -83]
Test Case: 507 | Input/Output: [(-52 -15 65 35) -52]
Test Case: 508 | Input/Output: [(-82 56 38 36) -82]
Test Case: 509 | Input/Output: [(-100 -4 85 -52) -100]
Test Case: 510 | Input/Output: [(42 79 31 -98) -98]
Test Case: 511 | Input/Output: [(-87 58 -99 51) -99]
Test Case: 512 | Input/Output: [(-89 -57 44 26) -89]
Test Case: 513 | Input/Output: [(54 49 -78 14) -78]
Test Case: 514 | Input/Output: [(-68 -72 46 23) -72]
Test Case: 515 | Input/Output: [(41 28 -8 -7) -8]
Test Case: 516 | Input/Output: [(12 -12 -99 28) -99]
Test Case: 517 | Input/Output: [(77 55 32 -33) -33]
Test Case: 518 | Input/Output: [(-58 -62 -59 92) -62]
Test Case: 519 | Input/Output: [(100 -64 84 49) -64]
Test Case: 520 | Input/Output: [(-18 83 -27 73) -27]
Test Case: 521 | Input/Output: [(62 -83 89 49) -83]
Test Case: 522 | Input/Output: [(-44 -62 19 69) -62]
Test Case: 523 | Input/Output: [(96 -21 78 15) -21]
Test Case: 524 | Input/Output: [(-46 -57 11 80) -57]
Test Case: 525 | Input/Output: [(42 -62 10 50) -62]
Test Case: 526 | Input/Output: [(21 75 -76 7) -76]
Test Case: 527 | Input/Output: [(84 -37 78 -94) -94]
Test Case: 528 | Input/Output: [(58 70 70 -42) -42]
Test Case: 529 | Input/Output: [(55 -83 -66 -57) -83]
Test Case: 530 | Input/Output: [(-31 -96 3 -9) -96]
Test Case: 531 | Input/Output: [(16 -11 -66 -96) -96]
Test Case: 532 | Input/Output: [(-39 -5 -39 -52) -52]
Test Case: 533 | Input/Output: [(-40 -79 88 68) -79]
Test Case: 534 | Input/Output: [(66 71 -35 -100) -100]
Test Case: 535 | Input/Output: [(19 73 -27 81) -27]
Test Case: 536 | Input/Output: [(59 65 -16 -100) -100]
Test Case: 537 | Input/Output: [(69 54 -56 -5) -56]
Test Case: 538 | Input/Output: [(44 -24 -59 -84) -84]
Test Case: 539 | Input/Output: [(87 7 -46 38) -46]
Test Case: 540 | Input/Output: [(54 95 -13 -32) -32]
Test Case: 541 | Input/Output: [(-76 59 -100 92) -100]
Test Case: 542 | Input/Output: [(-28 29 -4 26) -28]
Test Case: 543 | Input/Output: [(-74 92 -75 -43) -75]
Test Case: 544 | Input/Output: [(23 -9 88 44) -9]
Test Case: 545 | Input/Output: [(-47 -1 -7 -76) -76]
Test Case: 546 | Input/Output: [(80 70 62 25) 25]
Test Case: 547 | Input/Output: [(60 11 12 -20) -20]
Test Case: 548 | Input/Output: [(90 -84 -39 51) -84]
Test Case: 549 | Input/Output: [(95 -47 78 90) -47]
Test Case: 550 | Input/Output: [(86 3 69 -48) -48]
Test Case: 551 | Input/Output: [(45 12 78 12) 12]
Test Case: 552 | Input/Output: [(-63 18 -97 -8) -97]
Test Case: 553 | Input/Output: [(-41 -86 -96 40) -96]
Test Case: 554 | Input/Output: [(61 -36 -53 -90) -90]
Test Case: 555 | Input/Output: [(-10 51 29 -38) -38]
Test Case: 556 | Input/Output: [(1 23 -51 61) -51]
Test Case: 557 | Input/Output: [(59 87 -57 87) -57]
Test Case: 558 | Input/Output: [(-2 41 48 41) -2]
Test Case: 559 | Input/Output: [(39 -73 1 23) -73]
Test Case: 560 | Input/Output: [(-54 60 0 75) -54]
Test Case: 561 | Input/Output: [(-59 43 -6 38) -59]
Test Case: 562 | Input/Output: [(64 64 6 0) 0]
Test Case: 563 | Input/Output: [(-14 -58 -19 -26) -58]
Test Case: 564 | Input/Output: [(100 8 76 -85) -85]
Test Case: 565 | Input/Output: [(-15 -59 36 10) -59]
Test Case: 566 | Input/Output: [(-51 -3 21 -87) -87]
Test Case: 567 | Input/Output: [(63 -12 -100 84) -100]
Test Case: 568 | Input/Output: [(95 58 -9 21) -9]
Test Case: 569 | Input/Output: [(-16 -25 78 -67) -67]
Test Case: 570 | Input/Output: [(74 4 -49 90) -49]
Test Case: 571 | Input/Output: [(-11 -3 -69 77) -69]
Test Case: 572 | Input/Output: [(18 70 31 35) 18]
Test Case: 573 | Input/Output: [(-9 91 -77 53) -77]
Test Case: 574 | Input/Output: [(12 46 -65 17) -65]
Test Case: 575 | Input/Output: [(4 -80 91 -87) -87]
Test Case: 576 | Input/Output: [(-66 -2 28 53) -66]
Test Case: 577 | Input/Output: [(38 -1 1 -36) -36]
Test Case: 578 | Input/Output: [(96 88 -17 6) -17]
Test Case: 579 | Input/Output: [(62 99 -55 -76) -76]
Test Case: 580 | Input/Output: [(-49 -77 78 -17) -77]
Test Case: 581 | Input/Output: [(-50 53 9 -81) -81]
Test Case: 582 | Input/Output: [(-47 41 -20 4) -47]
Test Case: 583 | Input/Output: [(-42 -74 2 72) -74]
Test Case: 584 | Input/Output: [(-5 -4 80 -66) -66]
Test Case: 585 | Input/Output: [(-77 -26 1 23) -77]
Test Case: 586 | Input/Output: [(-64 26 -32 94) -64]
Test Case: 587 | Input/Output: [(70 -31 79 84) -31]
Test Case: 588 | Input/Output: [(-19 51 -9 -70) -70]
Test Case: 589 | Input/Output: [(32 66 -24 19) -24]
Test Case: 590 | Input/Output: [(-35 64 -45 -59) -59]
Test Case: 591 | Input/Output: [(-61 -69 -43 46) -69]
Test Case: 592 | Input/Output: [(-88 85 93 -6) -88]
Test Case: 593 | Input/Output: [(-55 -72 -37 49) -72]
Test Case: 594 | Input/Output: [(-93 100 -27 -99) -99]
Test Case: 595 | Input/Output: [(-67 -18 -33 65) -67]
Test Case: 596 | Input/Output: [(97 24 -73 -52) -73]
Test Case: 597 | Input/Output: [(-85 -61 5 62) -85]
Test Case: 598 | Input/Output: [(8 41 87 -10) -10]
Test Case: 599 | Input/Output: [(-94 85 -32 52) -94]
Test Case: 600 | Input/Output: [(-28 9 24 4) -28]
Test Case: 601 | Input/Output: [(-63 -27 59 44) -63]
Test Case: 602 | Input/Output: [(79 44 6 70) 6]
Test Case: 603 | Input/Output: [(-25 -6 -30 38) -30]
Test Case: 604 | Input/Output: [(-1 28 42 18) -1]
Test Case: 605 | Input/Output: [(-23 48 29 96) -23]
Test Case: 606 | Input/Output: [(-14 36 54 -77) -77]
Test Case: 607 | Input/Output: [(-79 -40 7 54) -79]
Test Case: 608 | Input/Output: [(-78 -44 -51 84) -78]
Test Case: 609 | Input/Output: [(-68 -14 -21 -85) -85]
Test Case: 610 | Input/Output: [(100 -98 79 -83) -98]
Test Case: 611 | Input/Output: [(74 0 -98 62) -98]
Test Case: 612 | Input/Output: [(68 57 -73 -9) -73]
Test Case: 613 | Input/Output: [(31 0 24 32) 0]
Test Case: 614 | Input/Output: [(-42 -13 -40 -93) -93]
Test Case: 615 | Input/Output: [(-46 -4 -14 37) -46]
Test Case: 616 | Input/Output: [(50 87 74 -45) -45]
Test Case: 617 | Input/Output: [(-18 -27 18 0) -27]
Test Case: 618 | Input/Output: [(-72 -21 -56 4) -72]
Test Case: 619 | Input/Output: [(85 47 -21 -22) -22]
Test Case: 620 | Input/Output: [(-50 -9 62 17) -50]
Test Case: 621 | Input/Output: [(95 -47 -57 -70) -70]
Test Case: 622 | Input/Output: [(-87 31 59 -77) -87]
Test Case: 623 | Input/Output: [(88 28 -3 -99) -99]
Test Case: 624 | Input/Output: [(18 79 -1 -3) -3]
Test Case: 625 | Input/Output: [(-79 -79 99 -54) -79]
Test Case: 626 | Input/Output: [(97 -59 -85 -18) -85]
Test Case: 627 | Input/Output: [(-10 -83 -9 39) -83]
Test Case: 628 | Input/Output: [(5 -8 -43 -96) -96]
Test Case: 629 | Input/Output: [(95 -55 75 89) -55]
Test Case: 630 | Input/Output: [(77 -95 72 98) -95]
Test Case: 631 | Input/Output: [(-95 68 59 90) -95]
Test Case: 632 | Input/Output: [(-8 -79 71 -38) -79]
Test Case: 633 | Input/Output: [(23 53 -37 73) -37]
Test Case: 634 | Input/Output: [(49 82 77 -25) -25]
Test Case: 635 | Input/Output: [(8 26 90 -86) -86]
Test Case: 636 | Input/Output: [(-79 -24 34 28) -79]
Test Case: 637 | Input/Output: [(14 70 69 -92) -92]
Test Case: 638 | Input/Output: [(-9 -34 53 -5) -34]
Test Case: 639 | Input/Output: [(58 -14 20 -64) -64]
Test Case: 640 | Input/Output: [(9 33 -46 -11) -46]
Test Case: 641 | Input/Output: [(79 -100 -31 -5) -100]
Test Case: 642 | Input/Output: [(-60 -53 -30 -17) -60]
Test Case: 643 | Input/Output: [(-68 -89 -69 -14) -89]
Test Case: 644 | Input/Output: [(99 37 36 -24) -24]
Test Case: 645 | Input/Output: [(-9 18 -55 69) -55]
Test Case: 646 | Input/Output: [(-52 -1 40 -44) -52]
Test Case: 647 | Input/Output: [(-89 -31 83 68) -89]
Test Case: 648 | Input/Output: [(96 56 69 87) 56]
Test Case: 649 | Input/Output: [(36 55 -60 -40) -60]
Test Case: 650 | Input/Output: [(-91 17 48 53) -91]
Test Case: 651 | Input/Output: [(49 -36 59 -23) -36]
Test Case: 652 | Input/Output: [(79 -55 91 -78) -78]
Test Case: 653 | Input/Output: [(-98 -6 -34 -96) -98]
Test Case: 654 | Input/Output: [(73 -63 30 -39) -63]
Test Case: 655 | Input/Output: [(33 99 -18 -90) -90]
Test Case: 656 | Input/Output: [(56 31 81 -28) -28]
Test Case: 657 | Input/Output: [(-67 41 86 -47) -67]
Test Case: 658 | Input/Output: [(-65 -45 -66 -34) -66]
Test Case: 659 | Input/Output: [(-99 25 32 99) -99]
Test Case: 660 | Input/Output: [(64 42 86 -20) -20]
Test Case: 661 | Input/Output: [(-8 83 18 -56) -56]
Test Case: 662 | Input/Output: [(-34 -5 -16 -57) -57]
Test Case: 663 | Input/Output: [(-36 78 -32 28) -36]
Test Case: 664 | Input/Output: [(10 -81 -100 43) -100]
Test Case: 665 | Input/Output: [(-21 82 -55 -78) -78]
Test Case: 666 | Input/Output: [(-33 -67 -72 -53) -72]
Test Case: 667 | Input/Output: [(55 27 -54 -21) -54]
Test Case: 668 | Input/Output: [(28 4 -13 -1) -13]
Test Case: 669 | Input/Output: [(-63 -97 -25 89) -97]
Test Case: 670 | Input/Output: [(-19 -40 -28 58) -40]
Test Case: 671 | Input/Output: [(-45 -1 8 -53) -53]
Test Case: 672 | Input/Output: [(-72 3 -13 8) -72]
Test Case: 673 | Input/Output: [(59 -73 -57 -32) -73]
Test Case: 674 | Input/Output: [(-2 40 31 100) -2]
Test Case: 675 | Input/Output: [(38 55 -67 -29) -67]
Test Case: 676 | Input/Output: [(93 86 82 -54) -54]
Test Case: 677 | Input/Output: [(85 -27 -66 -57) -66]
Test Case: 678 | Input/Output: [(69 -51 -51 -32) -51]
Test Case: 679 | Input/Output: [(40 -79 9 76) -79]
Test Case: 680 | Input/Output: [(3 65 -73 96) -73]
Test Case: 681 | Input/Output: [(13 79 -70 86) -70]
Test Case: 682 | Input/Output: [(97 92 -11 -19) -19]
Test Case: 683 | Input/Output: [(-99 67 83 94) -99]
Test Case: 684 | Input/Output: [(85 -5 -88 -68) -88]
Test Case: 685 | Input/Output: [(64 7 76 -14) -14]
Test Case: 686 | Input/Output: [(-14 -45 71 -54) -54]
Test Case: 687 | Input/Output: [(30 -59 17 90) -59]
Test Case: 688 | Input/Output: [(96 -88 -67 -71) -88]
Test Case: 689 | Input/Output: [(-38 13 92 24) -38]
Test Case: 690 | Input/Output: [(-53 -87 32 67) -87]
Test Case: 691 | Input/Output: [(23 43 -28 5) -28]
Test Case: 692 | Input/Output: [(-100 35 -53 31) -100]
Test Case: 693 | Input/Output: [(10 -75 -3 17) -75]
Test Case: 694 | Input/Output: [(100 39 -99 -23) -99]
Test Case: 695 | Input/Output: [(-28 -74 -74 51) -74]
Test Case: 696 | Input/Output: [(-72 -61 -24 -17) -72]
Test Case: 697 | Input/Output: [(99 36 96 22) 22]
Test Case: 698 | Input/Output: [(-33 57 -2 -23) -33]
Test Case: 699 | Input/Output: [(98 14 84 20) 14]
Test Case: 700 | Input/Output: [(-29 -42 87 -17) -42]
Test Case: 701 | Input/Output: [(10 -47 100 -23) -47]
Test Case: 702 | Input/Output: [(37 -58 -13 -28) -58]
Test Case: 703 | Input/Output: [(-28 21 -51 -73) -73]
Test Case: 704 | Input/Output: [(-31 -38 86 -52) -52]
Test Case: 705 | Input/Output: [(79 -7 21 -95) -95]
Test Case: 706 | Input/Output: [(-69 -49 -26 91) -69]
Test Case: 707 | Input/Output: [(61 -47 -68 -50) -68]
Test Case: 708 | Input/Output: [(-60 -15 13 13) -60]
Test Case: 709 | Input/Output: [(17 -53 -94 35) -94]
Test Case: 710 | Input/Output: [(67 3 97 79) 3]
Test Case: 711 | Input/Output: [(59 -13 100 -16) -16]
Test Case: 712 | Input/Output: [(40 -96 90 -53) -96]
Test Case: 713 | Input/Output: [(15 -55 97 4) -55]
Test Case: 714 | Input/Output: [(-20 23 -81 -51) -81]
Test Case: 715 | Input/Output: [(69 100 13 -34) -34]
Test Case: 716 | Input/Output: [(-97 84 -58 76) -97]
Test Case: 717 | Input/Output: [(64 -31 -37 63) -37]
Test Case: 718 | Input/Output: [(37 44 -83 -83) -83]
Test Case: 719 | Input/Output: [(14 -69 12 48) -69]
Test Case: 720 | Input/Output: [(-22 -95 12 -95) -95]
Test Case: 721 | Input/Output: [(92 -94 68 -42) -94]
Test Case: 722 | Input/Output: [(7 -79 -28 84) -79]
Test Case: 723 | Input/Output: [(-25 -21 -12 -35) -35]
Test Case: 724 | Input/Output: [(-93 -85 -24 -15) -93]
Test Case: 725 | Input/Output: [(-67 -34 -9 -5) -67]
Test Case: 726 | Input/Output: [(-84 -92 6 -66) -92]
Test Case: 727 | Input/Output: [(-27 35 -20 -68) -68]
Test Case: 728 | Input/Output: [(85 65 -74 12) -74]
Test Case: 729 | Input/Output: [(17 -90 -4 -85) -90]
Test Case: 730 | Input/Output: [(-80 58 -36 -38) -80]
Test Case: 731 | Input/Output: [(89 69 -24 -89) -89]
Test Case: 732 | Input/Output: [(5 64 76 -55) -55]
Test Case: 733 | Input/Output: [(88 -96 46 -36) -96]
Test Case: 734 | Input/Output: [(-18 -75 48 -59) -75]
Test Case: 735 | Input/Output: [(-48 54 -17 75) -48]
Test Case: 736 | Input/Output: [(14 85 68 31) 14]
Test Case: 737 | Input/Output: [(-70 -15 -81 -11) -81]
Test Case: 738 | Input/Output: [(-72 -37 93 -31) -72]
Test Case: 739 | Input/Output: [(-78 -58 -100 -75) -100]
Test Case: 740 | Input/Output: [(46 1 -88 -30) -88]
Test Case: 741 | Input/Output: [(5 -34 97 42) -34]
Test Case: 742 | Input/Output: [(-6 42 51 39) -6]
Test Case: 743 | Input/Output: [(-30 -41 93 -82) -82]
Test Case: 744 | Input/Output: [(-58 11 -98 100) -98]
Test Case: 745 | Input/Output: [(-52 -89 -55 -79) -89]
Test Case: 746 | Input/Output: [(-69 -39 96 -30) -69]
Test Case: 747 | Input/Output: [(84 85 47 90) 47]
Test Case: 748 | Input/Output: [(-23 -34 99 16) -34]
Test Case: 749 | Input/Output: [(6 50 11 -100) -100]
Test Case: 750 | Input/Output: [(-51 -88 -60 -92) -92]
Test Case: 751 | Input/Output: [(16 -74 -28 49) -74]
Test Case: 752 | Input/Output: [(65 -48 66 -51) -51]
Test Case: 753 | Input/Output: [(21 87 18 38) 18]
Test Case: 754 | Input/Output: [(-4 9 33 -42) -42]
Test Case: 755 | Input/Output: [(82 8 -57 46) -57]
Test Case: 756 | Input/Output: [(85 92 40 84) 40]
Test Case: 757 | Input/Output: [(-89 60 -61 56) -89]
Test Case: 758 | Input/Output: [(-36 -98 -52 -10) -98]
Test Case: 759 | Input/Output: [(58 65 -53 -50) -53]
Test Case: 760 | Input/Output: [(94 -61 -18 -71) -71]
Test Case: 761 | Input/Output: [(-85 -88 31 -32) -88]
Test Case: 762 | Input/Output: [(-21 -97 74 -40) -97]
Test Case: 763 | Input/Output: [(-67 -21 -83 -5) -83]
Test Case: 764 | Input/Output: [(53 83 5 81) 5]
Test Case: 765 | Input/Output: [(-50 55 27 -19) -50]
Test Case: 766 | Input/Output: [(-1 -5 40 -93) -93]
Test Case: 767 | Input/Output: [(-35 17 -29 -12) -35]
Test Case: 768 | Input/Output: [(-65 -22 -20 -74) -74]
Test Case: 769 | Input/Output: [(-97 -49 -81 41) -97]
Test Case: 770 | Input/Output: [(-8 -74 -26 91) -74]
Test Case: 771 | Input/Output: [(20 -70 -22 94) -70]
Test Case: 772 | Input/Output: [(-28 64 -68 96) -68]
Test Case: 773 | Input/Output: [(-14 34 -23 -47) -47]
Test Case: 774 | Input/Output: [(-100 43 56 9) -100]
Test Case: 775 | Input/Output: [(53 56 100 -52) -52]
Test Case: 776 | Input/Output: [(98 -35 -84 -78) -84]
Test Case: 777 | Input/Output: [(-39 20 1 -62) -62]
Test Case: 778 | Input/Output: [(-26 62 71 -85) -85]
Test Case: 779 | Input/Output: [(7 -72 42 -26) -72]
Test Case: 780 | Input/Output: [(44 -80 -4 -10) -80]
Test Case: 781 | Input/Output: [(-90 -39 6 31) -90]
Test Case: 782 | Input/Output: [(46 7 -52 75) -52]
Test Case: 783 | Input/Output: [(-83 56 78 -95) -95]
Test Case: 784 | Input/Output: [(18 -57 44 -16) -57]
Test Case: 785 | Input/Output: [(53 6 -83 -39) -83]
Test Case: 786 | Input/Output: [(-5 6 59 -25) -25]
Test Case: 787 | Input/Output: [(-94 71 -96 63) -96]
Test Case: 788 | Input/Output: [(64 70 -89 70) -89]
Test Case: 789 | Input/Output: [(1 -70 60 -21) -70]
Test Case: 790 | Input/Output: [(54 30 97 35) 30]
Test Case: 791 | Input/Output: [(-8 13 -93 67) -93]
Test Case: 792 | Input/Output: [(-1 54 79 -73) -73]
Test Case: 793 | Input/Output: [(-27 -81 -13 85) -81]
Test Case: 794 | Input/Output: [(-60 91 -66 -45) -66]
Test Case: 795 | Input/Output: [(97 37 71 34) 34]
Test Case: 796 | Input/Output: [(-37 18 -25 -97) -97]
Test Case: 797 | Input/Output: [(-10 5 -43 -80) -80]
Test Case: 798 | Input/Output: [(-73 58 -67 -9) -73]
Test Case: 799 | Input/Output: [(75 -95 -59 11) -95]
Test Case: 800 | Input/Output: [(42 -69 -98 66) -98]
Test Case: 801 | Input/Output: [(53 -93 -40 0) -93]
Test Case: 802 | Input/Output: [(-67 -54 87 -72) -72]
Test Case: 803 | Input/Output: [(-57 74 -88 -74) -88]
Test Case: 804 | Input/Output: [(18 -99 -33 -80) -99]
Test Case: 805 | Input/Output: [(-21 26 66 41) -21]
Test Case: 806 | Input/Output: [(-45 76 -7 -92) -92]
Test Case: 807 | Input/Output: [(-6 22 -87 -51) -87]
Test Case: 808 | Input/Output: [(77 24 -96 22) -96]
Test Case: 809 | Input/Output: [(52 31 -4 -91) -91]
Test Case: 810 | Input/Output: [(51 -45 56 -10) -45]
Test Case: 811 | Input/Output: [(31 -60 39 -19) -60]
Test Case: 812 | Input/Output: [(69 -9 97 70) -9]
Test Case: 813 | Input/Output: [(-55 -6 80 -43) -55]
Test Case: 814 | Input/Output: [(-11 13 -17 15) -17]
Test Case: 815 | Input/Output: [(16 99 44 55) 16]
Test Case: 816 | Input/Output: [(-48 -6 34 6) -48]
Test Case: 817 | Input/Output: [(54 91 -39 14) -39]
Test Case: 818 | Input/Output: [(-94 -12 -4 98) -94]
Test Case: 819 | Input/Output: [(71 25 -50 -12) -50]
Test Case: 820 | Input/Output: [(78 -73 -18 -78) -78]
Test Case: 821 | Input/Output: [(-18 -97 -90 58) -97]
Test Case: 822 | Input/Output: [(-39 -9 -39 -85) -85]
Test Case: 823 | Input/Output: [(-27 -31 -57 73) -57]
Test Case: 824 | Input/Output: [(38 44 -99 -32) -99]
Test Case: 825 | Input/Output: [(34 61 44 31) 31]
Test Case: 826 | Input/Output: [(43 -69 79 -81) -81]
Test Case: 827 | Input/Output: [(-54 40 -75 52) -75]
Test Case: 828 | Input/Output: [(-54 18 -10 2) -54]
Test Case: 829 | Input/Output: [(-24 -26 -2 -30) -30]
Test Case: 830 | Input/Output: [(31 7 -84 -100) -100]
Test Case: 831 | Input/Output: [(-72 -25 50 -95) -95]
Test Case: 832 | Input/Output: [(41 -66 -24 -19) -66]
Test Case: 833 | Input/Output: [(-7 -21 79 -76) -76]
Test Case: 834 | Input/Output: [(73 -32 -23 39) -32]
Test Case: 835 | Input/Output: [(37 -48 24 69) -48]
Test Case: 836 | Input/Output: [(69 -62 86 -88) -88]
Test Case: 837 | Input/Output: [(9 43 20 0) 0]
Test Case: 838 | Input/Output: [(-31 -29 94 50) -31]
Test Case: 839 | Input/Output: [(-24 9 -80 63) -80]
Test Case: 840 | Input/Output: [(-76 -15 36 79) -76]
Test Case: 841 | Input/Output: [(87 -43 -56 -42) -56]
Test Case: 842 | Input/Output: [(-13 44 43 87) -13]
Test Case: 843 | Input/Output: [(-59 81 1 -50) -59]
Test Case: 844 | Input/Output: [(-99 -70 50 -62) -99]
Test Case: 845 | Input/Output: [(-44 4 86 -90) -90]
Test Case: 846 | Input/Output: [(72 98 -83 -31) -83]
Test Case: 847 | Input/Output: [(88 61 -56 -77) -77]
Test Case: 848 | Input/Output: [(89 19 17 -84) -84]
Test Case: 849 | Input/Output: [(-74 5 93 -69) -74]
Test Case: 850 | Input/Output: [(53 -97 77 7) -97]
Test Case: 851 | Input/Output: [(1 -17 37 -21) -21]
Test Case: 852 | Input/Output: [(7 -4 -44 17) -44]
Test Case: 853 | Input/Output: [(35 91 93 31) 31]
Test Case: 854 | Input/Output: [(-33 -43 -4 83) -43]
Test Case: 855 | Input/Output: [(29 20 72 8) 8]
Test Case: 856 | Input/Output: [(42 -63 -7 -78) -78]
Test Case: 857 | Input/Output: [(67 91 -82 56) -82]
Test Case: 858 | Input/Output: [(55 -100 -28 -96) -100]
Test Case: 859 | Input/Output: [(-65 88 -9 -84) -84]
Test Case: 860 | Input/Output: [(-74 -30 12 36) -74]
Test Case: 861 | Input/Output: [(-24 -7 -16 78) -24]
Test Case: 862 | Input/Output: [(61 10 79 -16) -16]
Test Case: 863 | Input/Output: [(73 77 90 -54) -54]
Test Case: 864 | Input/Output: [(70 77 60 -58) -58]
Test Case: 865 | Input/Output: [(-70 95 -80 43) -80]
Test Case: 866 | Input/Output: [(-83 -50 -49 -50) -83]
Test Case: 867 | Input/Output: [(-52 -11 78 -35) -52]
Test Case: 868 | Input/Output: [(83 -42 -73 -27) -73]
Test Case: 869 | Input/Output: [(36 -44 24 39) -44]
Test Case: 870 | Input/Output: [(-82 -98 71 43) -98]
Test Case: 871 | Input/Output: [(-77 43 -67 -92) -92]
Test Case: 872 | Input/Output: [(49 66 -34 -70) -70]
Test Case: 873 | Input/Output: [(43 0 99 -63) -63]
Test Case: 874 | Input/Output: [(-32 20 -1 -13) -32]
Test Case: 875 | Input/Output: [(-34 32 92 11) -34]
Test Case: 876 | Input/Output: [(-85 95 85 -77) -85]
Test Case: 877 | Input/Output: [(92 4 40 16) 4]
Test Case: 878 | Input/Output: [(-51 12 29 78) -51]
Test Case: 879 | Input/Output: [(11 -58 -55 -26) -58]
Test Case: 880 | Input/Output: [(-71 10 54 -39) -71]
Test Case: 881 | Input/Output: [(-92 -81 -89 -21) -92]
Test Case: 882 | Input/Output: [(-46 55 -63 -32) -63]
Test Case: 883 | Input/Output: [(2 30 -94 -48) -94]
Test Case: 884 | Input/Output: [(52 25 29 -52) -52]
Test Case: 885 | Input/Output: [(-30 -40 -19 34) -40]
Test Case: 886 | Input/Output: [(77 48 -70 24) -70]
Test Case: 887 | Input/Output: [(28 62 49 59) 28]
Test Case: 888 | Input/Output: [(5 -69 -40 90) -69]
Test Case: 889 | Input/Output: [(59 -45 68 -28) -45]
Test Case: 890 | Input/Output: [(-18 98 -18 -67) -67]
Test Case: 891 | Input/Output: [(-74 75 40 -63) -74]
Test Case: 892 | Input/Output: [(16 -40 97 -49) -49]
Test Case: 893 | Input/Output: [(73 59 33 34) 33]
Test Case: 894 | Input/Output: [(-2 -61 -72 65) -72]
Test Case: 895 | Input/Output: [(-54 -93 -92 -69) -93]
Test Case: 896 | Input/Output: [(21 -8 65 11) -8]
Test Case: 897 | Input/Output: [(37 -18 -56 51) -56]
Test Case: 898 | Input/Output: [(61 -42 -63 -6) -63]
Test Case: 899 | Input/Output: [(76 -2 39 15) -2]
Test Case: 900 | Input/Output: [(-45 -80 57 -37) -80]
Test Case: 901 | Input/Output: [(-98 -49 17 88) -98]
Test Case: 902 | Input/Output: [(71 73 37 84) 37]
Test Case: 903 | Input/Output: [(-20 96 -50 82) -50]
Test Case: 904 | Input/Output: [(-18 63 -20 -97) -97]
Test Case: 905 | Input/Output: [(3 12 -63 -5) -63]
Test Case: 906 | Input/Output: [(60 -36 71 -11) -36]
Test Case: 907 | Input/Output: [(-37 -95 71 -10) -95]
Test Case: 908 | Input/Output: [(67 43 -57 -70) -70]
Test Case: 909 | Input/Output: [(-92 82 34 -74) -92]
Test Case: 910 | Input/Output: [(-35 -41 -65 73) -65]
Test Case: 911 | Input/Output: [(92 -68 87 61) -68]
Test Case: 912 | Input/Output: [(90 -50 12 37) -50]
Test Case: 913 | Input/Output: [(9 -47 91 -83) -83]
Test Case: 914 | Input/Output: [(-48 -76 -55 -89) -89]
Test Case: 915 | Input/Output: [(33 82 43 36) 33]
Test Case: 916 | Input/Output: [(50 -64 2 3) -64]
Test Case: 917 | Input/Output: [(58 29 55 -1) -1]
Test Case: 918 | Input/Output: [(72 -19 5 23) -19]
Test Case: 919 | Input/Output: [(-49 5 36 99) -49]
Test Case: 920 | Input/Output: [(56 -41 -96 8) -96]
Test Case: 921 | Input/Output: [(32 77 -49 45) -49]
Test Case: 922 | Input/Output: [(9 -83 -58 4) -83]
Test Case: 923 | Input/Output: [(65 -4 -10 -74) -74]
Test Case: 924 | Input/Output: [(65 -97 -24 8) -97]
Test Case: 925 | Input/Output: [(55 21 91 -8) -8]
Test Case: 926 | Input/Output: [(-24 88 -57 70) -57]
Test Case: 927 | Input/Output: [(88 37 -57 57) -57]
Test Case: 928 | Input/Output: [(0 -8 -19 -23) -23]
Test Case: 929 | Input/Output: [(78 27 50 -93) -93]
Test Case: 930 | Input/Output: [(49 22 -59 48) -59]
Test Case: 931 | Input/Output: [(-22 -15 80 -41) -41]
Test Case: 932 | Input/Output: [(-34 -96 28 83) -96]
Test Case: 933 | Input/Output: [(-30 57 -96 -72) -96]
Test Case: 934 | Input/Output: [(-20 -5 -27 35) -27]
Test Case: 935 | Input/Output: [(46 26 59 -14) -14]
Test Case: 936 | Input/Output: [(-4 18 -6 11) -6]
Test Case: 937 | Input/Output: [(-41 -90 77 29) -90]
Test Case: 938 | Input/Output: [(8 -69 91 13) -69]
Test Case: 939 | Input/Output: [(37 58 -34 15) -34]
Test Case: 940 | Input/Output: [(-89 68 -19 1) -89]
Test Case: 941 | Input/Output: [(-20 -13 -2 -28) -28]
Test Case: 942 | Input/Output: [(-22 -36 61 7) -36]
Test Case: 943 | Input/Output: [(-45 96 -36 -12) -45]
Test Case: 944 | Input/Output: [(45 -12 -7 68) -12]
Test Case: 945 | Input/Output: [(-22 92 98 75) -22]
Test Case: 946 | Input/Output: [(-27 45 -31 -17) -31]
Test Case: 947 | Input/Output: [(-62 -19 23 -86) -86]
Test Case: 948 | Input/Output: [(-37 -92 60 -80) -92]
Test Case: 949 | Input/Output: [(71 -96 99 37) -96]
Test Case: 950 | Input/Output: [(48 -14 4 26) -14]
Test Case: 951 | Input/Output: [(-94 -19 71 -84) -94]
Test Case: 952 | Input/Output: [(-39 84 39 50) -39]
Test Case: 953 | Input/Output: [(20 66 -47 4) -47]
Test Case: 954 | Input/Output: [(-79 -35 83 8) -79]
Test Case: 955 | Input/Output: [(55 -87 38 9) -87]
Test Case: 956 | Input/Output: [(52 -69 28 47) -69]
Test Case: 957 | Input/Output: [(-8 -45 23 -3) -45]
Test Case: 958 | Input/Output: [(94 -62 70 87) -62]
Test Case: 959 | Input/Output: [(-60 -75 60 -6) -75]
Test Case: 960 | Input/Output: [(80 -32 -82 75) -82]
Test Case: 961 | Input/Output: [(-85 19 49 -11) -85]
Test Case: 962 | Input/Output: [(-94 -31 73 13) -94]
Test Case: 963 | Input/Output: [(-90 -12 65 71) -90]
Test Case: 964 | Input/Output: [(2 14 85 87) 2]
Test Case: 965 | Input/Output: [(-61 42 -92 -100) -100]
Test Case: 966 | Input/Output: [(32 21 70 99) 21]
Test Case: 967 | Input/Output: [(10 -15 96 -6) -15]
Test Case: 968 | Input/Output: [(-67 -71 -62 84) -71]
Test Case: 969 | Input/Output: [(81 88 1 82) 1]
Test Case: 970 | Input/Output: [(32 73 -61 23) -61]
Test Case: 971 | Input/Output: [(82 66 -44 42) -44]
Test Case: 972 | Input/Output: [(84 -63 27 -9) -63]
Test Case: 973 | Input/Output: [(68 86 87 -51) -51]
Test Case: 974 | Input/Output: [(19 -37 96 87) -37]
Test Case: 975 | Input/Output: [(30 32 5 8) 5]
Test Case: 976 | Input/Output: [(-10 -41 2 -28) -41]
Test Case: 977 | Input/Output: [(-80 32 80 -97) -97]
Test Case: 978 | Input/Output: [(86 53 59 -80) -80]
Test Case: 979 | Input/Output: [(33 54 -16 -58) -58]
Test Case: 980 | Input/Output: [(-76 27 49 -30) -76]
Test Case: 981 | Input/Output: [(-61 -30 -78 72) -78]
Test Case: 982 | Input/Output: [(48 -80 -36 35) -80]
Test Case: 983 | Input/Output: [(92 70 -82 68) -82]
Test Case: 984 | Input/Output: [(-8 -93 -25 99) -93]
Test Case: 985 | Input/Output: [(31 10 27 76) 10]
Test Case: 986 | Input/Output: [(53 -68 -98 -36) -98]
Test Case: 987 | Input/Output: [(38 6 -45 -40) -45]
Test Case: 988 | Input/Output: [(5 100 11 -80) -80]
Test Case: 989 | Input/Output: [(62 26 -48 75) -48]
Test Case: 990 | Input/Output: [(-82 3 60 49) -82]
Test Case: 991 | Input/Output: [(-97 24 84 -49) -97]
Test Case: 992 | Input/Output: [(66 28 87 -39) -39]
Test Case: 993 | Input/Output: [(-71 -98 60 -91) -98]
Test Case: 994 | Input/Output: [(96 83 96 78) 78]
Test Case: 995 | Input/Output: [(22 46 33 -56) -56]
Test Case: 996 | Input/Output: [(63 68 40 98) 40]
Test Case: 997 | Input/Output: [(-8 -39 100 70) -39]
Test Case: 998 | Input/Output: [(36 -51 -26 6) -51]
Test Case: 999 | Input/Output: [(93 -40 -51 -4) -51]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 58 67 -6 -21 -116 -28 33 -121 -87 95 126 -35 -18 101 -63 -37
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-86 -86 -86 84] -86] [[85 85 85 75] 75] [[-85 -60 -60 -60] -85] [[62 6 6 6] 6] [[77 -50 -50 -50] -50] [[88 88 39 88] 39] [[-68 -68 -68 68] -68] [[45 45 45 52] 45] [[75 85 85 85] 75] [[-62 -62 -10 -62] -62] [(93 93 93 93) 93] [(31 31 31 31) 31] [(-62 -62 -62 -62) -62] [(-72 -72 -72 -72) -72] [(-90 -90 -90 -90) -90] [(1 70 90 81) 1] [(18 65 77 28) 18] [(33 23 13 58) 13] [(74 81 94 13) 13] [(51 86 28 10) 10] [(46 64 100 62) 46] [(38 47 88 10) 10] [(40 62 70 45) 40] [(68 49 0 14) 0] [(50 74 90 100) 50] [(42 94 99 3) 3] [(42 39 57 6) 6] [(46 63 69 64) 46] [(17 98 87 88) 17] [(31 47 14 8) 8] [(24 84 66 86) 24] [(38 35 5 48) 5] [(55 66 9 76) 9] [(90 27 25 94) 25] [(84 28 8 6) 6] [(97 38 9 67) 9] [(87 31 100 19) 19] [(-42 -14 28 95) -42] [(9 -100 23 -69) -100] [(-7 48 -13 50) -13] [(74 -21 33 -26) -26] [(-40 -47 76 -99) -99] [(-46 -81 -82 39) -82] [(13 72 71 16) 13] [(-1 -58 -20 -18) -58] [(68 69 0 85) 0] [(-14 79 -94 2) -94] [(-28 -54 -20 0) -54] [(-93 50 -67 26) -93] [(-38 -92 60 84) -92] [(-58 22 -26 79) -58] [(57 30 -96 -6) -96] [(49 -95 -78 -43) -95] [(49 61 25 94) 25] [(44 -14 -98 -44) -98] [(87 -25 34 92) -25] [(35 58 -6 -72) -72] [(13 20 -84 -6) -84] [(-95 -84 -57 15) -95] [(-28 -98 -100 -99) -100] [(81 3 2 -88) -88] [(84 88 71 -54) -54] [(15 -84 -48 -87) -87] [(-82 -88 -83 -84) -88] [(-27 66 71 99) -27] [(-33 29 -95 85) -95] [(13 6 68 75) 6] [(-65 16 -91 -23) -91] [(73 -56 74 -38) -56] [(11 30 -51 43) -51] [(-3 16 -45 33) -45] [(-16 -39 66 -29) -39] [(-95 33 -82 35) -95] [(9 -67 21 -12) -67] [(62 52 -68 -63) -68] [(43 100 -90 -2) -90] [(-9 48 86 38) -9] [(-5 -4 98 69) -5] [(20 43 -20 -47) -47] [(2 44 40 -90) -90] [(-68 -68 -2 -40) -68] [(30 97 56 -88) -88] [(49 -72 -44 -68) -72] [(41 -47 -57 -65) -65] [(-19 -1 99 69) -19] [(73 6 13 32) 6] [(21 70 64 58) 21] [(-32 54 33 17) -32] [(86 -89 -69 -43) -89] [(78 -84 -99 70) -99] [(-61 -77 65 74) -77] [(-30 -100 21 49) -100] [(18 -26 76 -93) -93] [(-94 70 -69 89) -94] [(73 -12 -2 -75) -75])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ())) ()) () ())
Lexicase best errors: [1 1 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 62
Percent parens: 0.339
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ())) ()) () ())
Zero cases best errors: [1 1 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 62
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 2 3 1 2 2 2 1 1 5)
Population mean number of elite cases: 0.02
Count of perfect (error zero) individuals by case: (3 2 3 1 2 2 2 1 1 5)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ())) ()) () ())
Errors: [1 1 1 1 0 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 62
Percent parens: 0.339
--- Population Statistics ---
Average total errors in population: 9.978
Median total errors in population: 10
Error averages by case: (0.997 0.998 0.997 0.999 0.998 0.998 0.998 0.999 0.999 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.758
Average program size in population (points): 69.924
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 515019
--- Timings ---
Current time: 1559583257830 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 30.4%
Fitness Testing:      1.7 seconds, 65.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -86                 | Program output: 84                 
Correct output: 75                  | Program output: 75                 
Correct output: -85                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: 68                 
Correct output: 45                  | Program output: 52                 
Correct output: 75                  | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 81                 
Correct output: 18                  | Program output: 28                 
Correct output: 13                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 46                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 45                 
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 64                 
Correct output: 17                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 48                 
Correct output: 9                   | Program output: 76                 
Correct output: 25                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: -42                 | Program output: 95                 
Correct output: -100                | Program output: -69                
Correct output: -13                 | Program output: 50                 
Correct output: -26                 | Program output: -26                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: 39                 
Correct output: 13                  | Program output: 16                 
Correct output: -58                 | Program output: -18                
Correct output: 0                   | Program output: 85                 
Correct output: -94                 | Program output: 2                  
Correct output: -54                 | Program output: 0                  
Correct output: -93                 | Program output: 26                 
Correct output: -92                 | Program output: 84                 
Correct output: -58                 | Program output: 79                 
Correct output: -96                 | Program output: -6                 
Correct output: -95                 | Program output: -43                
Correct output: 25                  | Program output: 94                 
Correct output: -98                 | Program output: -44                
Correct output: -25                 | Program output: 92                 
Correct output: -72                 | Program output: -72                
Correct output: -84                 | Program output: -6                 
Correct output: -95                 | Program output: 15                 
Correct output: -100                | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -84                
Correct output: -27                 | Program output: 99                 
Correct output: -95                 | Program output: 85                 
Correct output: 6                   | Program output: 75                 
Correct output: -91                 | Program output: -23                
Correct output: -56                 | Program output: -38                
Correct output: -51                 | Program output: 43                 
Correct output: -45                 | Program output: 33                 
Correct output: -39                 | Program output: -29                
Correct output: -95                 | Program output: 35                 
Correct output: -67                 | Program output: -12                
Correct output: -68                 | Program output: -63                
Correct output: -90                 | Program output: -2                 
Correct output: -9                  | Program output: 38                 
Correct output: -5                  | Program output: 69                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -19                 | Program output: 69                 
Correct output: 6                   | Program output: 32                 
Correct output: 21                  | Program output: 58                 
Correct output: -32                 | Program output: 17                 
Correct output: -89                 | Program output: -43                
Correct output: -99                 | Program output: 70                 
Correct output: -77                 | Program output: 74                 
Correct output: -100                | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 89                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_flush boolean_not boolean_invert_second_then_and exec_do*times (exec_yank integer_stackdepth) exec_yank boolean_stackdepth in4 integer_swap exec_yank integer_add print_integer exec_do*times (boolean_dup exec_do*times () exec_swap () (exec_pop (integer_eq integer_dec exec_dup () integer_flush) exec_pop (boolean_swap integer_swap integer_eq exec_y_when_autoconstructing (integer_yankdup exec_when (integer_empty integer_mod exec_if (exec_empty) (exec_noop) integer_dup_items boolean_yank exec_dup (exec_swap (print_newline exec_k_when_autoconstructing () ()) ())))))))
Lexicase best errors: [0 0 1 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 58
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_flush boolean_not boolean_invert_second_then_and exec_do*times (exec_yank integer_stackdepth) exec_yank boolean_stackdepth in4 integer_swap exec_yank integer_add print_integer exec_do*times (boolean_dup exec_do*times () exec_swap () (exec_pop (integer_eq integer_dec exec_dup () integer_flush) exec_pop (boolean_swap integer_swap integer_eq exec_y_when_autoconstructing (integer_yankdup exec_when (integer_empty integer_mod exec_if (exec_empty) (exec_noop) integer_dup_items boolean_yank exec_dup (exec_swap (print_newline exec_k_when_autoconstructing () ()) ())))))))
Zero cases best errors: [0 0 1 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 58
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 892 451 1000 1000 252 1000 451 252 189)
Population mean number of elite cases: 5.74
Count of perfect (error zero) individuals by case: (252 892 451 0 0 252 0 451 252 189)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction tagged_184} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean})
Best program: (boolean_flush boolean_not boolean_invert_second_then_and exec_do*times (exec_yank integer_stackdepth) exec_yank boolean_stackdepth in4 integer_swap exec_yank integer_add print_integer exec_do*times (boolean_dup exec_do*times () exec_swap () (exec_pop (integer_eq integer_dec exec_dup () integer_flush) exec_pop (boolean_swap integer_swap integer_eq exec_y_when_autoconstructing (integer_yankdup exec_when (boolean_invert_second_then_and integer_mod exec_if (exec_empty) (exec_noop) integer_dup_items boolean_yank exec_dup (exec_swap (print_exec (boolean_rot) integer_shove tagged_184) (integer_flush integer_div print_boolean))))))))
Errors: [0 0 1 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 45
Size: 62
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 7.261
Median total errors in population: 7
Error averages by case: (0.748 0.108 0.549 1.0 1.0 0.748 1.0 0.549 0.748 0.811)
Error minima by case: (0 0 0 1 1 0 1 0 0 0)
Average genome size in population (length): 46.042
Average program size in population (points): 65.33
Average percent parens in population: 0.293
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.503
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 239
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 240
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1021621
--- Timings ---
Current time: 1559583260608 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.4 seconds, 42.7%
Fitness Testing:      2.5 seconds, 44.6%
Report:               0.6 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 85                 
Correct output: -62                 | Program output: -10                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 90                 
Correct output: 18                  | Program output: 77                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 94                 
Correct output: 10                  | Program output: 28                 
Correct output: 46                  | Program output: 100                
Correct output: 10                  | Program output: 88                 
Correct output: 40                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 90                 
Correct output: 3                   | Program output: 99                 
Correct output: 6                   | Program output: 57                 
Correct output: 46                  | Program output: 69                 
Correct output: 17                  | Program output: 87                 
Correct output: 8                   | Program output: 14                 
Correct output: 24                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 100                
Correct output: -42                 | Program output: 28                 
Correct output: -100                | Program output: 23                 
Correct output: -13                 | Program output: -13                
Correct output: -26                 | Program output: 33                 
Correct output: -99                 | Program output: 76                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 71                 
Correct output: -58                 | Program output: -20                
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -20                
Correct output: -93                 | Program output: -67                
Correct output: -92                 | Program output: 60                 
Correct output: -58                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -78                
Correct output: 25                  | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -25                 | Program output: 34                 
Correct output: -72                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: 2                  
Correct output: -54                 | Program output: 71                 
Correct output: -87                 | Program output: -48                
Correct output: -88                 | Program output: -83                
Correct output: -27                 | Program output: 71                 
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 68                 
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 74                 
Correct output: -51                 | Program output: -51                
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: 66                 
Correct output: -95                 | Program output: -82                
Correct output: -67                 | Program output: 21                 
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -9                  | Program output: 86                 
Correct output: -5                  | Program output: 98                 
Correct output: -47                 | Program output: -20                
Correct output: -90                 | Program output: 40                 
Correct output: -68                 | Program output: -2                 
Correct output: -88                 | Program output: 56                 
Correct output: -72                 | Program output: -44                
Correct output: -65                 | Program output: -57                
Correct output: -19                 | Program output: 99                 
Correct output: 6                   | Program output: 13                 
Correct output: 21                  | Program output: 64                 
Correct output: -32                 | Program output: 33                 
Correct output: -89                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -77                 | Program output: 65                 
Correct output: -100                | Program output: 21                 
Correct output: -93                 | Program output: 76                 
Correct output: -94                 | Program output: -69                
Correct output: -75                 | Program output: -2                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_if (integer_dup_items in3 integer_mod print_integer exec_when (integer_gte boolean_invert_second_then_and integer_lte integer_inc) exec_do*count (boolean_stackdepth integer_pop exec_yank integer_dup integer_add integer_pop integer_fromboolean) exec_rot (integer_stackdepth) (boolean_and integer_gt integer_swap) () integer_dec integer_shove boolean_shove exec_do*count (exec_if (integer_lte integer_rot) (integer_sub boolean_eq) exec_dup_times (integer_gte boolean_invert_first_then_and in2 boolean_invert_first_then_and) exec_pop () integer_empty integer_inc integer_dup_times)) (exec_s (boolean_yank) (exec_pop (integer_dup_times boolean_pop exec_rot () (boolean_dup_items print_exec (boolean_not integer_min exec_shove (integer_fromboolean))) ())) ()))
Lexicase best errors: [1 0 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 75
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_if (integer_dup_items in3 integer_mod print_integer exec_when (integer_gte boolean_invert_second_then_and integer_lte integer_inc) exec_do*count (boolean_stackdepth integer_pop exec_yank integer_dup integer_add integer_pop integer_fromboolean) exec_rot (integer_stackdepth) (boolean_and integer_gt integer_swap) () integer_dec integer_shove boolean_shove exec_do*count (exec_if (integer_lte integer_rot) (integer_sub boolean_eq) exec_dup_times (integer_gte boolean_invert_first_then_and in2 boolean_invert_first_then_and) exec_pop () integer_empty integer_inc integer_dup_times)) (exec_s (boolean_yank) (exec_pop (integer_dup_times boolean_pop exec_rot () (boolean_dup_items print_exec (boolean_not integer_min exec_shove (integer_fromboolean))) ())) ()))
Zero cases best errors: [1 0 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 75
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (428 121 431 324 121 1000 324 554 122 445)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (428 121 431 324 121 0 324 554 122 445)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_exec})
Best program: (exec_if (integer_dup_items in3 integer_mod print_integer exec_when (integer_gte boolean_invert_second_then_and integer_lte integer_inc) exec_do*count (boolean_stackdepth integer_pop exec_yank integer_dup integer_add integer_pop integer_fromboolean) exec_rot (integer_stackdepth) (boolean_and integer_gt integer_swap) () integer_dec integer_shove boolean_shove exec_do*count (exec_if (integer_lte integer_rot) (integer_sub boolean_eq) exec_dup_times (integer_gte exec_s (in2 boolean_invert_first_then_and) (exec_pop () integer_empty integer_inc integer_dup_times) () exec_s (boolean_yank) (integer_rot integer_dup_times boolean_pop exec_rot () (boolean_dup_items exec_when (boolean_not integer_min exec_shove (integer_fromboolean exec_when (exec_y_when_autoconstructing (exec_dup_items) exec_dup_times (exec_while (exec_stackdepth) boolean_and) integer_fromboolean) integer_mod integer_min exec_flush integer_eq integer_mod integer_stackdepth exec_do*while () print_newline exec_k (integer_dup_items boolean_invert_first_then_and) (exec_yankdup boolean_xor exec_empty boolean_rot) exec_k_when_autoconstructing (boolean_dup integer_dup boolean_or boolean_dup print_exec ()) ()))) ()) ()))) ())
Errors: [1 0 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 82
Size: 116
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 7.13
Median total errors in population: 7
Error averages by case: (0.572 0.879 0.569 0.676 0.879 1.0 0.676 0.446 0.878 0.555)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 45.257
Average program size in population (points): 63.765
Average percent parens in population: 0.288
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9615
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1457446
--- Timings ---
Current time: 1559583263864 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.7 seconds, 53.1%
Fitness Testing:      3.2 seconds, 35.6%
Report:               0.9 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty integer_rot tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ()) ()) () ())
Lexicase best errors: [0 1 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 61
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty integer_rot tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ()) ()) () ())
Zero cases best errors: [0 1 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 61
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (244 409 244 1 885 407 245 244 1 885)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (244 409 244 1 885 407 245 244 1 885)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction tagged_184} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div})
Best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (in2) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_noop boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank integer_swap integer_eq exec_y_when_autoconstructing (integer_yankdup exec_do*while (boolean_invert_second_then_and integer_mod exec_if (exec_empty) (exec_noop) integer_dup_items boolean_yank exec_dup (exec_swap (print_exec (boolean_rot) integer_shove tagged_184) (integer_flush integer_div))))) ()) () ())
Errors: [0 1 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 53
Size: 76
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 6.435
Median total errors in population: 6
Error averages by case: (0.756 0.591 0.756 0.999 0.115 0.593 0.755 0.756 0.999 0.115)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.468
Average program size in population (points): 66.829
Average percent parens in population: 0.267
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4545
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1884141
--- Timings ---
Current time: 1559583267061 milliseconds
Total Time:          11.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.8 seconds, 57.2%
Fitness Testing:      3.8 seconds, 31.9%
Report:               1.2 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ())) ()) () ())
Lexicase best errors: [1 1 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.339
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ())) ()) () ())
Zero cases best errors: [1 1 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 436 211 436 899 253 1000 1000 899)
Population mean number of elite cases: 7.13
Count of perfect (error zero) individuals by case: (0 0 436 211 436 899 253 0 0 899)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_957} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_957 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ())) ()) () ())
Errors: [1 1 0 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 41
Size: 62
Percent parens: 0.339
--- Population Statistics ---
Average total errors in population: 6.866
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.564 0.789 0.564 0.101 0.747 1.0 1.0 0.101)
Error minima by case: (1 1 0 0 0 0 0 1 1 0)
Average genome size in population (length): 47.097
Average program size in population (points): 66.943
Average percent parens in population: 0.293
Minimum age in population: 4.0
Maximum age in population: 7.375
Average age in population: 5.724375
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2379970
--- Timings ---
Current time: 1559583270384 milliseconds
Total Time:          15.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.9 seconds, 58.7%
Fitness Testing:      4.5 seconds, 29.4%
Report:               1.7 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 85                 
Correct output: -62                 | Program output: -10                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 90                 
Correct output: 18                  | Program output: 77                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 94                 
Correct output: 10                  | Program output: 28                 
Correct output: 46                  | Program output: 100                
Correct output: 10                  | Program output: 88                 
Correct output: 40                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 90                 
Correct output: 3                   | Program output: 99                 
Correct output: 6                   | Program output: 57                 
Correct output: 46                  | Program output: 69                 
Correct output: 17                  | Program output: 87                 
Correct output: 8                   | Program output: 14                 
Correct output: 24                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 100                
Correct output: -42                 | Program output: 28                 
Correct output: -100                | Program output: 23                 
Correct output: -13                 | Program output: -13                
Correct output: -26                 | Program output: 33                 
Correct output: -99                 | Program output: 76                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 71                 
Correct output: -58                 | Program output: -20                
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -20                
Correct output: -93                 | Program output: -67                
Correct output: -92                 | Program output: 60                 
Correct output: -58                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -78                
Correct output: 25                  | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -25                 | Program output: 34                 
Correct output: -72                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: 2                  
Correct output: -54                 | Program output: 71                 
Correct output: -87                 | Program output: -48                
Correct output: -88                 | Program output: -83                
Correct output: -27                 | Program output: 71                 
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 68                 
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 74                 
Correct output: -51                 | Program output: -51                
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: 66                 
Correct output: -95                 | Program output: -82                
Correct output: -67                 | Program output: 21                 
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -9                  | Program output: 86                 
Correct output: -5                  | Program output: 98                 
Correct output: -47                 | Program output: -20                
Correct output: -90                 | Program output: 40                 
Correct output: -68                 | Program output: -2                 
Correct output: -88                 | Program output: 56                 
Correct output: -72                 | Program output: -44                
Correct output: -65                 | Program output: -57                
Correct output: -19                 | Program output: 99                 
Correct output: 6                   | Program output: 13                 
Correct output: 21                  | Program output: 64                 
Correct output: -32                 | Program output: 33                 
Correct output: -89                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -77                 | Program output: 65                 
Correct output: -100                | Program output: 21                 
Correct output: -93                 | Program output: 76                 
Correct output: -94                 | Program output: -69                
Correct output: -75                 | Program output: -2                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_dup exec_do*count (in1 integer_yank exec_swap (integer_div integer_fromboolean boolean_yankdup) (boolean_rot exec_noop boolean_invert_first_then_and boolean_stackdepth) exec_when (integer_dec in3 exec_while () exec_noop print_integer) integer_sub in2) integer_inc integer_div integer_inc boolean_xor)
Lexicase best errors: [0 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_dup exec_do*count (in1 integer_yank exec_swap (integer_div integer_fromboolean boolean_yankdup) (boolean_rot exec_noop boolean_invert_first_then_and boolean_stackdepth) exec_when (integer_dec in3 exec_while () exec_noop print_integer) integer_sub in2) integer_inc integer_div integer_inc boolean_xor)
Zero cases best errors: [0 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (901 711 222 189 188 190 219 187 490 190)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (901 711 222 189 188 190 219 187 490 190)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove})
Best program: (exec_if (integer_dup_items in3 integer_mod print_integer exec_when (integer_gte boolean_invert_second_then_and integer_lte integer_inc) exec_do*count (boolean_stackdepth integer_pop exec_yank integer_dup integer_add integer_pop integer_fromboolean) exec_rot (integer_stackdepth) (boolean_and integer_gt integer_swap) () integer_dec integer_shove boolean_shove exec_do*count (exec_if (integer_lte integer_rot) (integer_sub boolean_eq) exec_dup_times (integer_gte boolean_invert_first_then_and in2 boolean_invert_first_then_and) exec_pop () integer_empty integer_inc integer_dup_times)) (exec_s (boolean_yank) (exec_pop (integer_dup_times boolean_pop exec_rot () (boolean_dup_items print_exec (boolean_not integer_min exec_shove ())) ())) ()))
Errors: [0 1 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 52
Size: 74
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 6.513
Median total errors in population: 7
Error averages by case: (0.099 0.289 0.778 0.811 0.812 0.81 0.781 0.813 0.51 0.81)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.849
Average program size in population (points): 66.734
Average percent parens in population: 0.295
Minimum age in population: 5.25
Maximum age in population: 9.0625
Average age in population: 7.291125
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2913784
--- Timings ---
Current time: 1559583273608 milliseconds
Total Time:          18.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.1 seconds, 59.6%
Fitness Testing:      5.2 seconds, 27.8%
Report:               2.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 85                 
Correct output: -62                 | Program output: -10                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 90                 
Correct output: 18                  | Program output: 77                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 94                 
Correct output: 10                  | Program output: 28                 
Correct output: 46                  | Program output: 100                
Correct output: 10                  | Program output: 88                 
Correct output: 40                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 90                 
Correct output: 3                   | Program output: 99                 
Correct output: 6                   | Program output: 57                 
Correct output: 46                  | Program output: 69                 
Correct output: 17                  | Program output: 87                 
Correct output: 8                   | Program output: 14                 
Correct output: 24                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 100                
Correct output: -42                 | Program output: 28                 
Correct output: -100                | Program output: 23                 
Correct output: -13                 | Program output: -13                
Correct output: -26                 | Program output: 33                 
Correct output: -99                 | Program output: 76                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 71                 
Correct output: -58                 | Program output: -20                
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -20                
Correct output: -93                 | Program output: -67                
Correct output: -92                 | Program output: 60                 
Correct output: -58                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -78                
Correct output: 25                  | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -25                 | Program output: 34                 
Correct output: -72                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: 2                  
Correct output: -54                 | Program output: 71                 
Correct output: -87                 | Program output: -48                
Correct output: -88                 | Program output: -83                
Correct output: -27                 | Program output: 71                 
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 68                 
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 74                 
Correct output: -51                 | Program output: -51                
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: 66                 
Correct output: -95                 | Program output: -82                
Correct output: -67                 | Program output: 21                 
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -9                  | Program output: 86                 
Correct output: -5                  | Program output: 98                 
Correct output: -47                 | Program output: -20                
Correct output: -90                 | Program output: 40                 
Correct output: -68                 | Program output: -2                 
Correct output: -88                 | Program output: 56                 
Correct output: -72                 | Program output: -44                
Correct output: -65                 | Program output: -57                
Correct output: -19                 | Program output: 99                 
Correct output: 6                   | Program output: 13                 
Correct output: 21                  | Program output: 64                 
Correct output: -32                 | Program output: 33                 
Correct output: -89                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -77                 | Program output: 65                 
Correct output: -100                | Program output: 21                 
Correct output: -93                 | Program output: 76                 
Correct output: -94                 | Program output: -69                
Correct output: -75                 | Program output: -2                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in1 print_integer integer_sub integer_yank integer_shove exec_y () tagged_964 integer_flush exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_rot integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ())) ())
Lexicase best errors: [0 1 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 59
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in1 print_integer integer_sub integer_yank integer_shove exec_y () tagged_964 integer_flush exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_rot integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ())) ())
Zero cases best errors: [0 1 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 59
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (892 753 1000 141 140 142 480 274 1000 481)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (892 753 0 141 140 142 480 274 0 481)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction -48} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor})
Best program: (boolean_dup exec_do*count (in1 integer_yank exec_swap (integer_div integer_fromboolean boolean_yankdup) (boolean_rot integer_rot -48 in2 integer_yankdup integer_dec exec_empty boolean_invert_first_then_and boolean_stackdepth) exec_when (integer_dec in3 exec_while () exec_noop print_integer) integer_sub in2) integer_inc integer_div integer_inc boolean_xor)
Errors: [0 0 1 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 29
Size: 35
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 6.697
Median total errors in population: 6
Error averages by case: (0.108 0.247 1.0 0.859 0.86 0.858 0.52 0.726 1.0 0.519)
Error minima by case: (0 0 1 0 0 0 0 0 1 0)
Average genome size in population (length): 48.495
Average program size in population (points): 66.821
Average percent parens in population: 0.264
Minimum age in population: 6.25
Maximum age in population: 10.46875
Average age in population: 8.74140625
Median age in population: 8.859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3332085
--- Timings ---
Current time: 1559583276618 milliseconds
Total Time:          21.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.4 seconds, 61.6%
Fitness Testing:      5.7 seconds, 26.2%
Report:               2.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_985} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec})
Lexicase best program: (in1 print_integer integer_sub integer_rot integer_dec exec_y () tagged_985 exec_s_when_autoconstructing (exec_dup (integer_rot 78 boolean_yank exec_y ()) tagged_964 boolean_not) (print_newline) (boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while (in2 exec_pop (boolean_swap integer_swap integer_eq exec_y_when_autoconstructing (integer_yankdup exec_when (boolean_invert_second_then_and integer_mod exec_if (exec_empty exec_noop) () integer_dup_items boolean_yank exec_dup (exec_swap (print_exec ()) ())))))) ())
Lexicase best errors: [0 1 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 64
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_985} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec})
Zero cases best program: (in1 print_integer integer_sub integer_rot integer_dec exec_y () tagged_985 exec_s_when_autoconstructing (exec_dup (integer_rot 78 boolean_yank exec_y ()) tagged_964 boolean_not) (print_newline) (boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while (in2 exec_pop (boolean_swap integer_swap integer_eq exec_y_when_autoconstructing (integer_yankdup exec_when (boolean_invert_second_then_and integer_mod exec_if (exec_empty exec_noop) () integer_dup_items boolean_yank exec_dup (exec_swap (print_exec ()) ())))))) ())
Zero cases best errors: [0 1 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 64
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (410 334 155 1000 1000 409 898 410 1000 333)
Population mean number of elite cases: 5.95
Count of perfect (error zero) individuals by case: (410 334 155 0 0 409 898 410 0 333)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction -48} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction tagged_184} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean})
Best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (exec_do*count (in1 integer_yank exec_swap (integer_div integer_fromboolean boolean_yankdup) (boolean_rot integer_rot -48 in2 print_integer exec_do*times (boolean_dup exec_do*times () exec_swap () (exec_pop (integer_eq integer_dec exec_dup () integer_eq integer_dec exec_dup () integer_flush) exec_pop (boolean_swap integer_swap integer_eq exec_y_when_autoconstructing (integer_yankdup exec_when (boolean_invert_second_then_and integer_mod exec_if (exec_empty) (exec_noop) integer_dup_items boolean_yank exec_dup (exec_swap (print_exec (boolean_rot) integer_shove tagged_184) (integer_flush integer_div print_boolean)))))))))) ())) () ())
Errors: [0 1 1 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 59
Size: 87
Percent parens: 0.322
--- Population Statistics ---
Average total errors in population: 7.051
Median total errors in population: 7
Error averages by case: (0.59 0.666 0.845 1.0 1.0 0.591 0.102 0.59 1.0 0.667)
Error minima by case: (0 0 0 1 1 0 0 0 1 0)
Average genome size in population (length): 46.129
Average program size in population (points): 65.042
Average percent parens in population: 0.284
Minimum age in population: 7.25
Maximum age in population: 12.203125
Average age in population: 10.209015625
Median age in population: 10.296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3852597
--- Timings ---
Current time: 1559583279798 milliseconds
Total Time:          24.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.4 seconds, 62.4%
Fitness Testing:      6.3 seconds, 25.7%
Report:               2.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap})
Lexicase best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot in3 integer_mod print_integer exec_when (integer_gte) integer_shove integer_lte integer_inc) exec_do*count (boolean_stackdepth integer_dec exec_yank integer_dup integer_add integer_pop integer_flush) exec_pop (boolean_swap integer_swap)) () ()) () ())
Lexicase best errors: [0 0 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap})
Zero cases best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot in3 integer_mod print_integer exec_when (integer_gte) integer_shove integer_lte integer_inc) exec_do*count (boolean_stackdepth integer_dec exec_yank integer_dup integer_add integer_pop integer_flush) exec_pop (boolean_swap integer_swap)) () ()) () ())
Zero cases best errors: [0 0 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (479 479 479 1000 286 144 285 765 285 479)
Population mean number of elite cases: 4.68
Count of perfect (error zero) individuals by case: (479 479 479 0 286 144 285 765 285 479)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank) exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ()) ()) () ())
Errors: [0 0 0 1 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 62
Percent parens: 0.339
--- Population Statistics ---
Average total errors in population: 6.319
Median total errors in population: 6
Error averages by case: (0.521 0.521 0.521 1.0 0.714 0.856 0.715 0.235 0.715 0.521)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 45.057
Average program size in population (points): 63.563
Average percent parens in population: 0.285
Minimum age in population: 8.5
Maximum age in population: 13.59375
Average age in population: 11.6782421875
Median age in population: 11.7578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4403197
--- Timings ---
Current time: 1559583282958 milliseconds
Total Time:          27.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.3 seconds, 62.4%
Fitness Testing:      7.0 seconds, 25.2%
Report:               3.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_51} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 77} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in1 print_integer integer_sub tagged_51 integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 77 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ()) ()) () ())
Lexicase best errors: [0 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.404
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_51} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 77} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in1 print_integer integer_sub tagged_51 integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 77 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ()) ()) () ())
Zero cases best errors: [0 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.404
--- Lexicase Population Statistics ---
Count of elite individuals by case: (514 514 1 515 303 1 515 915 514 515)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (514 514 1 515 303 1 515 915 514 515)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction -48} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction integer_shove})
Best program: (in1 print_integer integer_sub integer_rot integer_max integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_yankdup) boolean_rot integer_rot -48 in2 print_integer exec_do*times (boolean_dup exec_do*times () exec_swap () (exec_pop (integer_eq integer_dec in3 integer_shove)))) () ())
Errors: [0 0 1 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 44
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 5.693
Median total errors in population: 3
Error averages by case: (0.486 0.486 0.999 0.485 0.697 0.999 0.485 0.085 0.486 0.485)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.523
Average program size in population (points): 61.412
Average percent parens in population: 0.283
Minimum age in population: 9.75
Maximum age in population: 15.04296875
Average age in population: 13.187640625
Median age in population: 13.28515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4960720
--- Timings ---
Current time: 1559583286551 milliseconds
Total Time:          31.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.7 seconds, 62.8%
Fitness Testing:      7.7 seconds, 24.6%
Report:               3.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor})
Lexicase best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_empty boolean_invert_first_then_and boolean_stackdepth) exec_when (integer_dec in3 exec_while () exec_noop boolean_dup_items) integer_sub in2) (integer_inc integer_div integer_inc boolean_xor) ())
Lexicase best errors: [1 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor})
Zero cases best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_empty boolean_invert_first_then_and boolean_stackdepth) exec_when (integer_dec in3 exec_while () exec_noop boolean_dup_items) integer_sub in2) (integer_inc integer_div integer_inc boolean_xor) ())
Zero cases best errors: [1 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 631 217 217 101 217 631 631 1000 631)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (101 631 217 217 101 217 631 631 0 631)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times})
Best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_yank) exec_while () integer_min) (integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times) ()) ())
Errors: [1 0 1 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 43
Percent parens: 0.372
--- Population Statistics ---
Average total errors in population: 6.623
Median total errors in population: 6
Error averages by case: (0.899 0.369 0.783 0.783 0.899 0.783 0.369 0.369 1.0 0.369)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 36.066
Average program size in population (points): 52.031
Average percent parens in population: 0.304
Minimum age in population: 11.71875
Maximum age in population: 16.72265625
Average age in population: 14.642521484375
Median age in population: 14.66796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5622558
--- Timings ---
Current time: 1559583290101 milliseconds
Total Time:          35.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.9 seconds, 62.6%
Fitness Testing:      8.6 seconds, 24.6%
Report:               4.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ())) ()) () ())
Lexicase best errors: [0 1 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.339
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline exec_k_when_autoconstructing () ()) ())) ()) () ())
Zero cases best errors: [0 1 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (402 1000 204 402 331 402 1000 537 402 331)
Population mean number of elite cases: 5.01
Count of perfect (error zero) individuals by case: (402 0 204 402 331 402 0 537 402 331)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction tag_integer_851} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (in1 print_integer integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty boolean_empty integer_gte tag_integer_851 integer_shove boolean_frominteger boolean_yank exec_empty) exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (exec_dup (print_newline boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (integer_min print_newline) (exec_k_when_autoconstructing () ()))) ()) ()) () ())
Errors: [0 1 1 0 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 47
Size: 72
Percent parens: 0.347
--- Population Statistics ---
Average total errors in population: 6.989
Median total errors in population: 7
Error averages by case: (0.598 1.0 0.796 0.598 0.669 0.598 1.0 0.463 0.598 0.669)
Error minima by case: (0 1 0 0 0 0 1 0 0 0)
Average genome size in population (length): 33.191
Average program size in population (points): 47.552
Average percent parens in population: 0.301
Minimum age in population: 13.25
Maximum age in population: 18.1015625
Average age in population: 16.088458984375
Median age in population: 16.1103515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 194
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 195
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6252481
--- Timings ---
Current time: 1559583293475 milliseconds
Total Time:          38.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.9 seconds, 62.5%
Fitness Testing:      9.4 seconds, 24.6%
Report:               4.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 85                 
Correct output: -62                 | Program output: -10                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 90                 
Correct output: 18                  | Program output: 77                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 94                 
Correct output: 10                  | Program output: 28                 
Correct output: 46                  | Program output: 100                
Correct output: 10                  | Program output: 88                 
Correct output: 40                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 90                 
Correct output: 3                   | Program output: 99                 
Correct output: 6                   | Program output: 57                 
Correct output: 46                  | Program output: 69                 
Correct output: 17                  | Program output: 87                 
Correct output: 8                   | Program output: 14                 
Correct output: 24                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 100                
Correct output: -42                 | Program output: 28                 
Correct output: -100                | Program output: 23                 
Correct output: -13                 | Program output: -13                
Correct output: -26                 | Program output: 33                 
Correct output: -99                 | Program output: 76                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 71                 
Correct output: -58                 | Program output: -20                
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -20                
Correct output: -93                 | Program output: -67                
Correct output: -92                 | Program output: 60                 
Correct output: -58                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -78                
Correct output: 25                  | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -25                 | Program output: 34                 
Correct output: -72                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: 2                  
Correct output: -54                 | Program output: 71                 
Correct output: -87                 | Program output: -48                
Correct output: -88                 | Program output: -83                
Correct output: -27                 | Program output: 71                 
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 68                 
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 74                 
Correct output: -51                 | Program output: -51                
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: 66                 
Correct output: -95                 | Program output: -82                
Correct output: -67                 | Program output: 21                 
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -9                  | Program output: 86                 
Correct output: -5                  | Program output: 98                 
Correct output: -47                 | Program output: -20                
Correct output: -90                 | Program output: 40                 
Correct output: -68                 | Program output: -2                 
Correct output: -88                 | Program output: 56                 
Correct output: -72                 | Program output: -44                
Correct output: -65                 | Program output: -57                
Correct output: -19                 | Program output: 99                 
Correct output: 6                   | Program output: 13                 
Correct output: 21                  | Program output: 64                 
Correct output: -32                 | Program output: 33                 
Correct output: -89                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -77                 | Program output: 65                 
Correct output: -100                | Program output: 21                 
Correct output: -93                 | Program output: 76                 
Correct output: -94                 | Program output: -69                
Correct output: -75                 | Program output: -2                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot})
Lexicase best program: (exec_if (integer_dup_items in3 integer_mod print_integer exec_when (integer_gte boolean_invert_second_then_and integer_lte integer_inc)) (exec_do*count (boolean_stackdepth integer_pop exec_yank integer_dup integer_add integer_pop integer_fromboolean) exec_rot (integer_stackdepth) (boolean_and) (integer_gt integer_swap) integer_dec integer_shove in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) boolean_stackdepth integer_dup_times) exec_s (boolean_yank) (exec_pop (integer_dup_times boolean_pop exec_rot () () ())) ())
Lexicase best errors: [1 0 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot})
Zero cases best program: (exec_if (integer_dup_items in3 integer_mod print_integer exec_when (integer_gte boolean_invert_second_then_and integer_lte integer_inc)) (exec_do*count (boolean_stackdepth integer_pop exec_yank integer_dup integer_add integer_pop integer_fromboolean) exec_rot (integer_stackdepth) (boolean_and) (integer_gt integer_swap) integer_dec integer_shove in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) boolean_stackdepth integer_dup_times) exec_s (boolean_yank) (exec_pop (integer_dup_times boolean_pop exec_rot () () ())) ())
Zero cases best errors: [1 0 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 146 474 327 146 327 146 1000 608 462)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (0 146 474 327 146 327 146 0 608 462)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 3, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_dup_times})
Best program: (exec_if (integer_dup_items in3 exec_rot (print_integer exec_when (integer_gte boolean_invert_second_then_and integer_lte integer_inc) exec_rot (boolean_stackdepth integer_pop exec_yank integer_dup integer_add integer_pop integer_fromboolean) (exec_rot (integer_stackdepth) (boolean_and integer_gt integer_swap) ()) (integer_dec integer_shove boolean_shove exec_do*count (exec_if (integer_lte integer_rot) (integer_sub boolean_eq exec_dup_times (boolean_yankdup boolean_invert_first_then_and in2 boolean_invert_first_then_and) exec_yank) integer_empty integer_inc integer_dup_times))) () ()) ())
Errors: [1 0 0 1 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 41
Size: 58
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 7.364
Median total errors in population: 8
Error averages by case: (1.0 0.854 0.526 0.673 0.854 0.673 0.854 1.0 0.392 0.538)
Error minima by case: (1 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 32.229
Average program size in population (points): 46.631
Average percent parens in population: 0.308
Minimum age in population: 14.421875
Maximum age in population: 19.51708984375
Average age in population: 17.58273486328125
Median age in population: 17.656005859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6899746
--- Timings ---
Current time: 1559583296733 milliseconds
Total Time:          41.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.0 seconds, 62.3%
Fitness Testing:     10.3 seconds, 24.6%
Report:               5.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 85                 
Correct output: -62                 | Program output: -10                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 90                 
Correct output: 18                  | Program output: 77                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 94                 
Correct output: 10                  | Program output: 28                 
Correct output: 46                  | Program output: 100                
Correct output: 10                  | Program output: 88                 
Correct output: 40                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 90                 
Correct output: 3                   | Program output: 99                 
Correct output: 6                   | Program output: 57                 
Correct output: 46                  | Program output: 69                 
Correct output: 17                  | Program output: 87                 
Correct output: 8                   | Program output: 14                 
Correct output: 24                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 100                
Correct output: -42                 | Program output: 28                 
Correct output: -100                | Program output: 23                 
Correct output: -13                 | Program output: -13                
Correct output: -26                 | Program output: 33                 
Correct output: -99                 | Program output: 76                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 71                 
Correct output: -58                 | Program output: -20                
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -20                
Correct output: -93                 | Program output: -67                
Correct output: -92                 | Program output: 60                 
Correct output: -58                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -78                
Correct output: 25                  | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -25                 | Program output: 34                 
Correct output: -72                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: 2                  
Correct output: -54                 | Program output: 71                 
Correct output: -87                 | Program output: -48                
Correct output: -88                 | Program output: -83                
Correct output: -27                 | Program output: 71                 
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 68                 
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 74                 
Correct output: -51                 | Program output: -51                
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: 66                 
Correct output: -95                 | Program output: -82                
Correct output: -67                 | Program output: 21                 
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -9                  | Program output: 86                 
Correct output: -5                  | Program output: 98                 
Correct output: -47                 | Program output: -20                
Correct output: -90                 | Program output: 40                 
Correct output: -68                 | Program output: -2                 
Correct output: -88                 | Program output: 56                 
Correct output: -72                 | Program output: -44                
Correct output: -65                 | Program output: -57                
Correct output: -19                 | Program output: 99                 
Correct output: 6                   | Program output: 13                 
Correct output: 21                  | Program output: 64                 
Correct output: -32                 | Program output: 33                 
Correct output: -89                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -77                 | Program output: 65                 
Correct output: -100                | Program output: 21                 
Correct output: -93                 | Program output: 76                 
Correct output: -94                 | Program output: -69                
Correct output: -75                 | Program output: -2                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if})
Lexicase best program: (exec_if (integer_dup_items in3 integer_mod print_integer exec_when (boolean_yank boolean_invert_second_then_and integer_swap integer_inc) exec_do*count (integer_fromboolean) exec_rot (integer_stackdepth) (boolean_and integer_gt integer_swap) () integer_dec integer_shove boolean_shove exec_do*count (exec_if () ())) ())
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if})
Zero cases best program: (exec_if (integer_dup_items in3 integer_mod print_integer exec_when (boolean_yank boolean_invert_second_then_and integer_swap integer_inc) exec_do*count (integer_fromboolean) exec_rot (integer_stackdepth) (boolean_and integer_gt integer_swap) () integer_dec integer_shove boolean_shove exec_do*count (exec_if () ())) ())
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (542 148 533 533 787 245 148 245 778 148)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (542 148 533 533 787 245 148 245 778 148)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div})
Best program: (exec_if (integer_dup_items in3 integer_mod print_integer exec_when (integer_gte boolean_invert_second_then_and exec_s () (boolean_not) (print_integer) integer_sub in2) integer_inc integer_div) ())
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 22
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 5.893
Median total errors in population: 5
Error averages by case: (0.458 0.852 0.467 0.467 0.213 0.755 0.852 0.755 0.222 0.852)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.598
Average program size in population (points): 47.17
Average percent parens in population: 0.285
Minimum age in population: 16.328125
Maximum age in population: 21.198486328125
Average age in population: 19.08284375
Median age in population: 19.116943359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7490015
--- Timings ---
Current time: 1559583299559 milliseconds
Total Time:          44.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.0 seconds, 62.5%
Fitness Testing:     11.0 seconds, 24.6%
Report:               5.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 exec_s_when_autoconstructing (integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (exec_if (exec_empty) (exec_noop) integer_dup_items boolean_yank integer_min print_newline exec_k_when_autoconstructing () ()) ())) () ()) ()) () ())
Lexicase best errors: [0 0 1 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.361
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 exec_s_when_autoconstructing (integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty exec_k_when_autoconstructing (exec_if (exec_empty) (exec_noop) integer_dup_items boolean_yank integer_min print_newline exec_k_when_autoconstructing () ()) ())) () ()) ()) () ())
Zero cases best errors: [0 0 1 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.361
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 287 271 287 378 936 271 287 271 380)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (287 287 271 287 378 936 271 287 271 380)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_empty})
Best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_y (integer_eq exec_s_when_autoconstructing () () (exec_dup (integer_rot 78 exec_s (boolean_not) (print_newline) (boolean_frominteger exec_while () integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty integer_swap integer_gte in3 integer_shove boolean_frominteger boolean_yank exec_empty exec_dup_times (tagged_976) integer_empty)) ()))))) () ())
Errors: [0 0 1 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 40
Size: 61
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 6.345
Median total errors in population: 6
Error averages by case: (0.713 0.713 0.729 0.713 0.622 0.064 0.729 0.713 0.729 0.62)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.263
Average program size in population (points): 45.759
Average percent parens in population: 0.292
Minimum age in population: 17.328125
Maximum age in population: 22.5277099609375
Average age in population: 20.60243103027344
Median age in population: 20.67633056640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 8095876
--- Timings ---
Current time: 1559583302690 milliseconds
Total Time:          47.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.8 seconds, 62.8%
Fitness Testing:     11.8 seconds, 24.8%
Report:               5.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -86                 | Program output: 84                 
Correct output: 75                  | Program output: 75                 
Correct output: -85                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: 68                 
Correct output: 45                  | Program output: 52                 
Correct output: 75                  | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 81                 
Correct output: 18                  | Program output: 28                 
Correct output: 13                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 46                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 45                 
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 64                 
Correct output: 17                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 48                 
Correct output: 9                   | Program output: 76                 
Correct output: 25                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: -42                 | Program output: 95                 
Correct output: -100                | Program output: -69                
Correct output: -13                 | Program output: 50                 
Correct output: -26                 | Program output: -26                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: 39                 
Correct output: 13                  | Program output: 16                 
Correct output: -58                 | Program output: -18                
Correct output: 0                   | Program output: 85                 
Correct output: -94                 | Program output: 2                  
Correct output: -54                 | Program output: 0                  
Correct output: -93                 | Program output: 26                 
Correct output: -92                 | Program output: 84                 
Correct output: -58                 | Program output: 79                 
Correct output: -96                 | Program output: -6                 
Correct output: -95                 | Program output: -43                
Correct output: 25                  | Program output: 94                 
Correct output: -98                 | Program output: -44                
Correct output: -25                 | Program output: 92                 
Correct output: -72                 | Program output: -72                
Correct output: -84                 | Program output: -6                 
Correct output: -95                 | Program output: 15                 
Correct output: -100                | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -84                
Correct output: -27                 | Program output: 99                 
Correct output: -95                 | Program output: 85                 
Correct output: 6                   | Program output: 75                 
Correct output: -91                 | Program output: -23                
Correct output: -56                 | Program output: -38                
Correct output: -51                 | Program output: 43                 
Correct output: -45                 | Program output: 33                 
Correct output: -39                 | Program output: -29                
Correct output: -95                 | Program output: 35                 
Correct output: -67                 | Program output: -12                
Correct output: -68                 | Program output: -63                
Correct output: -90                 | Program output: -2                 
Correct output: -9                  | Program output: 38                 
Correct output: -5                  | Program output: 69                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -19                 | Program output: 69                 
Correct output: 6                   | Program output: 32                 
Correct output: 21                  | Program output: 58                 
Correct output: -32                 | Program output: 17                 
Correct output: -89                 | Program output: -43                
Correct output: -99                 | Program output: 70                 
Correct output: -77                 | Program output: 74                 
Correct output: -100                | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 89                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction -56} {:close 0, :instruction integer_div})
Lexicase best program: (in4 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_integer) integer_sub in2) -56 integer_div) () ())
Lexicase best errors: [0 1 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction -56} {:close 0, :instruction integer_div})
Zero cases best program: (in4 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_integer) integer_sub in2) -56 integer_div) () ())
Zero cases best errors: [0 1 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (293 1 293 449 293 944 199 293 1 199)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (293 1 293 449 293 944 199 293 1 199)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor})
Best program: (in4 print_integer integer_sub integer_rot integer_shove exec_y () in3 exec_while () boolean_or print_integer integer_sub in2 integer_inc exec_yank integer_inc boolean_xor)
Errors: [0 1 0 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 16
Size: 19
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 7.035
Median total errors in population: 8
Error averages by case: (0.707 0.999 0.707 0.551 0.707 0.056 0.801 0.707 0.999 0.801)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.759
Average program size in population (points): 43.922
Average percent parens in population: 0.295
Minimum age in population: 18.640625
Maximum age in population: 23.85009765625
Average age in population: 22.02673229980469
Median age in population: 22.14471435546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 8739864
--- Timings ---
Current time: 1559583306082 milliseconds
Total Time:          50.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.9 seconds, 62.6%
Fitness Testing:     12.6 seconds, 24.8%
Report:               6.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -86                 | Program output: 84                 
Correct output: 75                  | Program output: 75                 
Correct output: -85                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: 68                 
Correct output: 45                  | Program output: 52                 
Correct output: 75                  | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 81                 
Correct output: 18                  | Program output: 28                 
Correct output: 13                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 46                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 45                 
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 64                 
Correct output: 17                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 48                 
Correct output: 9                   | Program output: 76                 
Correct output: 25                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: -42                 | Program output: 95                 
Correct output: -100                | Program output: -69                
Correct output: -13                 | Program output: 50                 
Correct output: -26                 | Program output: -26                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: 39                 
Correct output: 13                  | Program output: 16                 
Correct output: -58                 | Program output: -18                
Correct output: 0                   | Program output: 85                 
Correct output: -94                 | Program output: 2                  
Correct output: -54                 | Program output: 0                  
Correct output: -93                 | Program output: 26                 
Correct output: -92                 | Program output: 84                 
Correct output: -58                 | Program output: 79                 
Correct output: -96                 | Program output: -6                 
Correct output: -95                 | Program output: -43                
Correct output: 25                  | Program output: 94                 
Correct output: -98                 | Program output: -44                
Correct output: -25                 | Program output: 92                 
Correct output: -72                 | Program output: -72                
Correct output: -84                 | Program output: -6                 
Correct output: -95                 | Program output: 15                 
Correct output: -100                | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -84                
Correct output: -27                 | Program output: 99                 
Correct output: -95                 | Program output: 85                 
Correct output: 6                   | Program output: 75                 
Correct output: -91                 | Program output: -23                
Correct output: -56                 | Program output: -38                
Correct output: -51                 | Program output: 43                 
Correct output: -45                 | Program output: 33                 
Correct output: -39                 | Program output: -29                
Correct output: -95                 | Program output: 35                 
Correct output: -67                 | Program output: -12                
Correct output: -68                 | Program output: -63                
Correct output: -90                 | Program output: -2                 
Correct output: -9                  | Program output: 38                 
Correct output: -5                  | Program output: 69                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -19                 | Program output: 69                 
Correct output: 6                   | Program output: 32                 
Correct output: 21                  | Program output: 58                 
Correct output: -32                 | Program output: 17                 
Correct output: -89                 | Program output: -43                
Correct output: -99                 | Program output: 70                 
Correct output: -77                 | Program output: 74                 
Correct output: -100                | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 89                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub})
Lexicase best program: (in4 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (boolean_invert_first_then_and boolean_stackdepth) exec_when (integer_dec in3) exec_yankdup) (exec_noop print_integer) (integer_sub))
Lexicase best errors: [0 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub})
Zero cases best program: (in4 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (boolean_invert_first_then_and boolean_stackdepth) exec_when (integer_dec in3) exec_yankdup) (exec_noop print_integer) (integer_sub))
Zero cases best errors: [0 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 122 947 372 222 372 222 122 231 372)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (372 122 947 372 222 372 222 122 231 372)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div})
Best program: (in4 print_integer integer_sub integer_rot integer_shove exec_y () integer_swap exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_integer) integer_sub integer_stackdepth) integer_inc integer_div) () ())
Errors: [0 1 0 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 18
Size: 27
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.646
Median total errors in population: 7
Error averages by case: (0.628 0.878 0.053 0.628 0.778 0.628 0.778 0.878 0.769 0.628)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.851
Average program size in population (points): 38.031
Average percent parens in population: 0.291
Minimum age in population: 20.60400390625
Maximum age in population: 25.3360595703125
Average age in population: 23.59093054199219
Median age in population: 23.66032409667969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 9386617
--- Timings ---
Current time: 1559583309599 milliseconds
Total Time:          54.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.1 seconds, 62.6%
Fitness Testing:     13.5 seconds, 24.8%
Report:               6.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -86                 | Program output: 84                 
Correct output: 75                  | Program output: 75                 
Correct output: -85                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: 68                 
Correct output: 45                  | Program output: 52                 
Correct output: 75                  | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 81                 
Correct output: 18                  | Program output: 28                 
Correct output: 13                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 46                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 45                 
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 64                 
Correct output: 17                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 48                 
Correct output: 9                   | Program output: 76                 
Correct output: 25                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: -42                 | Program output: 95                 
Correct output: -100                | Program output: -69                
Correct output: -13                 | Program output: 50                 
Correct output: -26                 | Program output: -26                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: 39                 
Correct output: 13                  | Program output: 16                 
Correct output: -58                 | Program output: -18                
Correct output: 0                   | Program output: 85                 
Correct output: -94                 | Program output: 2                  
Correct output: -54                 | Program output: 0                  
Correct output: -93                 | Program output: 26                 
Correct output: -92                 | Program output: 84                 
Correct output: -58                 | Program output: 79                 
Correct output: -96                 | Program output: -6                 
Correct output: -95                 | Program output: -43                
Correct output: 25                  | Program output: 94                 
Correct output: -98                 | Program output: -44                
Correct output: -25                 | Program output: 92                 
Correct output: -72                 | Program output: -72                
Correct output: -84                 | Program output: -6                 
Correct output: -95                 | Program output: 15                 
Correct output: -100                | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -84                
Correct output: -27                 | Program output: 99                 
Correct output: -95                 | Program output: 85                 
Correct output: 6                   | Program output: 75                 
Correct output: -91                 | Program output: -23                
Correct output: -56                 | Program output: -38                
Correct output: -51                 | Program output: 43                 
Correct output: -45                 | Program output: 33                 
Correct output: -39                 | Program output: -29                
Correct output: -95                 | Program output: 35                 
Correct output: -67                 | Program output: -12                
Correct output: -68                 | Program output: -63                
Correct output: -90                 | Program output: -2                 
Correct output: -9                  | Program output: 38                 
Correct output: -5                  | Program output: 69                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -19                 | Program output: 69                 
Correct output: 6                   | Program output: 32                 
Correct output: 21                  | Program output: 58                 
Correct output: -32                 | Program output: 17                 
Correct output: -89                 | Program output: -43                
Correct output: -99                 | Program output: 70                 
Correct output: -77                 | Program output: 74                 
Correct output: -100                | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 89                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_if (integer_dup_items in3 integer_mod print_integer exec_when (integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 integer_dup) boolean_not) (print_newline) () boolean_stackdepth integer_sub in1) exec_dup_times (integer_gte boolean_invert_first_then_and in2 boolean_invert_first_then_and) exec_pop (integer_empty integer_inc integer_dup_times)) (exec_s (boolean_yank) (exec_pop (integer_dup_times boolean_pop exec_rot () (boolean_dup_items) ())) ()))
Lexicase best errors: [1 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 55
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 2, :instruction print_newline} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_if (integer_dup_items in3 integer_mod print_integer exec_when (integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 integer_dup) boolean_not) (print_newline) () boolean_stackdepth integer_sub in1) exec_dup_times (integer_gte boolean_invert_first_then_and in2 boolean_invert_first_then_and) exec_pop (integer_empty integer_inc integer_dup_times)) (exec_s (boolean_yank) (exec_pop (integer_dup_times boolean_pop exec_rot () (boolean_dup_items) ())) ()))
Zero cases best errors: [1 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 55
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (422 422 194 410 116 216 116 194 332 422)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (422 422 194 410 116 216 116 194 332 422)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div})
Best program: (in4 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (exec_dup (integer_yank 78 exec_s () (boolean_not) (print_newline) 78 exec_s () (boolean_not exec_yank) (integer_sub in2) integer_inc integer_div)) ())) () ())
Errors: [0 0 1 1 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 26
Size: 42
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 7.156
Median total errors in population: 7
Error averages by case: (0.578 0.578 0.806 0.59 0.884 0.784 0.884 0.806 0.668 0.578)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.516
Average program size in population (points): 37.923
Average percent parens in population: 0.297
Minimum age in population: 21.60400390625
Maximum age in population: 26.90303039550781
Average age in population: 25.02492868041992
Median age in population: 25.10195922851562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.002
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 10034444
--- Timings ---
Current time: 1559583313086 milliseconds
Total Time:          58.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.2 seconds, 62.5%
Fitness Testing:     14.4 seconds, 24.8%
Report:               7.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty})
Lexicase best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (boolean_pop) boolean_frominteger exec_while () integer_shove boolean_frominteger exec_yankdup exec_empty)) () ())
Lexicase best errors: [1 1 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty})
Zero cases best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (boolean_pop) boolean_frominteger exec_while () integer_shove boolean_frominteger exec_yankdup exec_empty)) () ())
Zero cases best errors: [1 1 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 294 216 238 203 294 204 238 203 204)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (238 294 216 238 203 294 204 238 203 204)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer})
Best program: (in1 print_integer integer_sub integer_rot boolean_invert_first_then_and exec_y (tagged_964) exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () () (boolean_not print_newline) boolean_frominteger exec_while (integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) ()) ())) () ())
Errors: [1 1 1 1 0 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 21
Size: 35
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 7.668
Median total errors in population: 8
Error averages by case: (0.762 0.706 0.784 0.762 0.797 0.706 0.796 0.762 0.797 0.796)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.438
Average program size in population (points): 37.603
Average percent parens in population: 0.293
Minimum age in population: 23.48974609375
Maximum age in population: 28.47029876708984
Average age in population: 26.462671875
Median age in population: 26.54478073120117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 10670013
--- Timings ---
Current time: 1559583316716 milliseconds
Total Time:          61.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.5 seconds, 62.5%
Fitness Testing:     15.2 seconds, 24.7%
Report:               7.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -86                 | Program output: 84                 
Correct output: 75                  | Program output: 75                 
Correct output: -85                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: 68                 
Correct output: 45                  | Program output: 52                 
Correct output: 75                  | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 81                 
Correct output: 18                  | Program output: 28                 
Correct output: 13                  | Program output: 58                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 46                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 40                  | Program output: 45                 
Correct output: 0                   | Program output: 14                 
Correct output: 50                  | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 46                  | Program output: 64                 
Correct output: 17                  | Program output: 88                 
Correct output: 8                   | Program output: 8                  
Correct output: 24                  | Program output: 86                 
Correct output: 5                   | Program output: 48                 
Correct output: 9                   | Program output: 76                 
Correct output: 25                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: -42                 | Program output: 95                 
Correct output: -100                | Program output: -69                
Correct output: -13                 | Program output: 50                 
Correct output: -26                 | Program output: -26                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: 39                 
Correct output: 13                  | Program output: 16                 
Correct output: -58                 | Program output: -18                
Correct output: 0                   | Program output: 85                 
Correct output: -94                 | Program output: 2                  
Correct output: -54                 | Program output: 0                  
Correct output: -93                 | Program output: 26                 
Correct output: -92                 | Program output: 84                 
Correct output: -58                 | Program output: 79                 
Correct output: -96                 | Program output: -6                 
Correct output: -95                 | Program output: -43                
Correct output: 25                  | Program output: 94                 
Correct output: -98                 | Program output: -44                
Correct output: -25                 | Program output: 92                 
Correct output: -72                 | Program output: -72                
Correct output: -84                 | Program output: -6                 
Correct output: -95                 | Program output: 15                 
Correct output: -100                | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -84                
Correct output: -27                 | Program output: 99                 
Correct output: -95                 | Program output: 85                 
Correct output: 6                   | Program output: 75                 
Correct output: -91                 | Program output: -23                
Correct output: -56                 | Program output: -38                
Correct output: -51                 | Program output: 43                 
Correct output: -45                 | Program output: 33                 
Correct output: -39                 | Program output: -29                
Correct output: -95                 | Program output: 35                 
Correct output: -67                 | Program output: -12                
Correct output: -68                 | Program output: -63                
Correct output: -90                 | Program output: -2                 
Correct output: -9                  | Program output: 38                 
Correct output: -5                  | Program output: 69                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -19                 | Program output: 69                 
Correct output: 6                   | Program output: 32                 
Correct output: 21                  | Program output: 58                 
Correct output: -32                 | Program output: 17                 
Correct output: -89                 | Program output: -43                
Correct output: -99                 | Program output: 70                 
Correct output: -77                 | Program output: 74                 
Correct output: -100                | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: 89                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction tag_exec_75} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div})
Lexicase best program: (in4 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (tag_exec_75 () print_integer) (integer_sub in2) integer_inc integer_div)) () ())
Lexicase best errors: [0 1 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 28
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction tag_exec_75} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div})
Zero cases best program: (in4 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (tag_exec_75 () print_integer) (integer_sub in2) integer_inc integer_div)) () ())
Zero cases best errors: [0 1 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 28
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (954 661 579 92 373 201 201 201 286 954)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (954 661 579 92 373 201 201 201 286 954)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 3, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub})
Best program: (in4 print_integer exec_empty integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s (boolean_not) (print_integer) (integer_sub in2) exec_rot (boolean_stackdepth integer_pop exec_yank integer_dup integer_add integer_pop integer_fromboolean) (exec_rot (integer_stackdepth) (boolean_and integer_gt integer_swap) ()) (integer_dec integer_shove boolean_shove exec_do*count (exec_if (integer_lte integer_rot) (integer_sub))))) () ())
Errors: [0 1 0 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 37
Size: 55
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 5.498
Median total errors in population: 6
Error averages by case: (0.046 0.339 0.421 0.908 0.627 0.799 0.799 0.799 0.714 0.046)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.124
Average program size in population (points): 37.257
Average percent parens in population: 0.294
Minimum age in population: 25.06805419921875
Maximum age in population: 29.86296844482422
Average age in population: 28.04185712432861
Median age in population: 28.12803649902344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 11348611
--- Timings ---
Current time: 1559583320744 milliseconds
Total Time:          65.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.1 seconds, 62.7%
Fitness Testing:     16.1 seconds, 24.5%
Report:               8.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 85                 
Correct output: -62                 | Program output: -10                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 90                 
Correct output: 18                  | Program output: 77                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 94                 
Correct output: 10                  | Program output: 28                 
Correct output: 46                  | Program output: 100                
Correct output: 10                  | Program output: 88                 
Correct output: 40                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 90                 
Correct output: 3                   | Program output: 99                 
Correct output: 6                   | Program output: 57                 
Correct output: 46                  | Program output: 69                 
Correct output: 17                  | Program output: 87                 
Correct output: 8                   | Program output: 14                 
Correct output: 24                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 100                
Correct output: -42                 | Program output: 28                 
Correct output: -100                | Program output: 23                 
Correct output: -13                 | Program output: -13                
Correct output: -26                 | Program output: 33                 
Correct output: -99                 | Program output: 76                 
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 71                 
Correct output: -58                 | Program output: -20                
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -20                
Correct output: -93                 | Program output: -67                
Correct output: -92                 | Program output: 60                 
Correct output: -58                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -78                
Correct output: 25                  | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -25                 | Program output: 34                 
Correct output: -72                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: 2                  
Correct output: -54                 | Program output: 71                 
Correct output: -87                 | Program output: -48                
Correct output: -88                 | Program output: -83                
Correct output: -27                 | Program output: 71                 
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 68                 
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 74                 
Correct output: -51                 | Program output: -51                
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: 66                 
Correct output: -95                 | Program output: -82                
Correct output: -67                 | Program output: 21                 
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -9                  | Program output: 86                 
Correct output: -5                  | Program output: 98                 
Correct output: -47                 | Program output: -20                
Correct output: -90                 | Program output: 40                 
Correct output: -68                 | Program output: -2                 
Correct output: -88                 | Program output: 56                 
Correct output: -72                 | Program output: -44                
Correct output: -65                 | Program output: -57                
Correct output: -19                 | Program output: 99                 
Correct output: 6                   | Program output: 13                 
Correct output: 21                  | Program output: 64                 
Correct output: -32                 | Program output: 33                 
Correct output: -89                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -77                 | Program output: 65                 
Correct output: -100                | Program output: 21                 
Correct output: -93                 | Program output: 76                 
Correct output: -94                 | Program output: -69                
Correct output: -75                 | Program output: -2                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div})
Lexicase best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () exec_do*times (in2) integer_inc integer_div)
Lexicase best errors: [1 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div})
Zero cases best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () exec_do*times (in2) integer_inc integer_div)
Zero cases best errors: [1 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (246 550 143 246 161 161 143 161 143 958)
Population mean number of elite cases: 2.91
Count of perfect (error zero) individuals by case: (246 550 143 246 161 161 143 161 143 958)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove})
Best program: (exec_if (integer_dup_items in3) (integer_mod print_integer exec_when (boolean_invert_second_then_and) boolean_invert_second_then_and integer_lte integer_inc) exec_do*count (integer_fromboolean) exec_rot (integer_stackdepth) (boolean_and integer_gt integer_swap) () integer_dec integer_shove boolean_shove)
Errors: [1 0 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.088
Median total errors in population: 6
Error averages by case: (0.754 0.45 0.857 0.754 0.839 0.839 0.857 0.839 0.857 0.042)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.778
Average program size in population (points): 35.494
Average percent parens in population: 0.300
Minimum age in population: 26.80859375
Maximum age in population: 31.27401733398438
Average age in population: 29.4504740562439
Median age in population: 29.50881385803223
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 12020703
--- Timings ---
Current time: 1559583324077 milliseconds
Total Time:          69.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.4 seconds, 62.7%
Fitness Testing:     17.0 seconds, 24.5%
Report:               8.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction 78} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while})
Lexicase best program: (in1 print_integer integer_swap integer_rot integer_shove exec_y () integer_dup_items exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () 78 exec_k_when_autoconstructing (print_integer) () exec_do*while () print_newline) boolean_and integer_sub in1) (exec_dup_times (integer_gte boolean_invert_first_then_and in2 boolean_invert_first_then_and) exec_pop (integer_empty exec_while () integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while ()) ())) ())
Lexicase best errors: [0 0 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.356
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction 78} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while})
Zero cases best program: (in1 print_integer integer_swap integer_rot integer_shove exec_y () integer_dup_items exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while () 78 exec_k_when_autoconstructing (print_integer) () exec_do*while () print_newline) boolean_and integer_sub in1) (exec_dup_times (integer_gte boolean_invert_first_then_and in2 boolean_invert_first_then_and) exec_pop (integer_empty exec_while () integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () exec_do*while ()) ())) ())
Zero cases best errors: [0 0 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.356
--- Lexicase Population Statistics ---
Count of elite individuals by case: (938 368 938 236 334 1000 368 368 702 334)
Population mean number of elite cases: 5.59
Count of perfect (error zero) individuals by case: (938 368 938 236 334 0 368 368 702 334)
Population mean number of perfect (error zero) cases: 4.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor})
Best program: (in1 print_integer integer_sub exec_dup_items integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (exec_dup_times (boolean_xor)))) () ())
Errors: [0 0 0 1 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 15
Size: 25
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 5.414
Median total errors in population: 5
Error averages by case: (0.062 0.632 0.062 0.764 0.666 1.0 0.632 0.632 0.298 0.666)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 27.159
Average program size in population (points): 38.526
Average percent parens in population: 0.291
Minimum age in population: 28.08355712890625
Maximum age in population: 32.82508754730225
Average age in population: 30.90213297653198
Median age in population: 31.00207948684692
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 12690071
--- Timings ---
Current time: 1559583327680 milliseconds
Total Time:          72.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.7 seconds, 63.0%
Fitness Testing:     17.8 seconds, 24.6%
Report:               9.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div})
Lexicase best program: (in1 print_integer integer_sub boolean_yankdup integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_dec) print_integer) (integer_sub in2) (integer_inc integer_div))
Lexicase best errors: [1 1 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 21
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div})
Zero cases best program: (in1 print_integer integer_sub boolean_yankdup integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_dec) print_integer) (integer_sub in2) (integer_inc integer_div))
Zero cases best errors: [1 1 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 21
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 304 150 486 486 485 485 939 486 150)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (0 304 150 486 486 485 485 939 486 150)
Population mean number of perfect (error zero) cases: 3.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 4, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte})
Best program: (in1 print_integer integer_sub integer_rot in1 exec_y () tagged_964 in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (boolean_invert_second_then_and 78 exec_s () (boolean_not) (print_newline) boolean_frominteger exec_while (integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) ()) () exec_do*while () in2 in2 integer_inc exec_when (print_integer exec_do*times (boolean_dup exec_do*times () exec_swap (exec_pop (integer_eq integer_dec) integer_yankdup) (exec_swap (exec_k_when_autoconstructing (integer_empty) () integer_empty) (boolean_frominteger boolean_and integer_dup_times exec_y (boolean_empty integer_swap integer_gte)))))))) () ())
Errors: [1 1 1 0 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 53
Size: 80
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 6.029
Median total errors in population: 7
Error averages by case: (1.0 0.696 0.85 0.514 0.514 0.515 0.515 0.061 0.514 0.85)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.761
Average program size in population (points): 38.076
Average percent parens in population: 0.293
Minimum age in population: 29.61641693115234
Maximum age in population: 34.77836036682129
Average age in population: 32.40328446578979
Median age in population: 32.4682765007019
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 13368316
--- Timings ---
Current time: 1559583331039 milliseconds
Total Time:          75.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.7 seconds, 62.9%
Fitness Testing:     18.6 seconds, 24.6%
Report:               9.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 79} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_xor})
Lexicase best program: (in1 print_integer integer_sub exec_y_when_autoconstructing (exec_noop exec_y () integer_dup_items exec_s_when_autoconstructing (exec_dup (integer_rot 79 exec_s () (exec_noop print_integer) (integer_sub in2) integer_inc integer_div integer_inc) boolean_xor) () ()))
Lexicase best errors: [1 1 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 79} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_xor})
Zero cases best program: (in1 print_integer integer_sub exec_y_when_autoconstructing (exec_noop exec_y () integer_dup_items exec_s_when_autoconstructing (exec_dup (integer_rot 79 exec_s () (exec_noop print_integer) (integer_sub in2) integer_inc integer_div integer_inc) boolean_xor) () ()))
Zero cases best errors: [1 1 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 115 601 236 601 952 1000 1000 1000 952)
Population mean number of elite cases: 6.57
Count of perfect (error zero) individuals by case: (115 115 601 236 601 952 0 0 0 952)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction 79} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop})
Best program: (in1 print_integer integer_sub exec_y_when_autoconstructing (exec_noop exec_y () integer_dup_items exec_s_when_autoconstructing (boolean_shove integer_rot 79 exec_s () (exec_noop) ()) () ()))
Errors: [1 1 0 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 13
Size: 22
Percent parens: 0.409
--- Population Statistics ---
Average total errors in population: 6.428
Median total errors in population: 6
Error averages by case: (0.885 0.885 0.399 0.764 0.399 0.048 1.0 1.0 1.0 0.048)
Error minima by case: (0 0 0 0 0 0 1 1 1 0)
Average genome size in population (length): 25.977
Average program size in population (points): 37.081
Average percent parens in population: 0.294
Minimum age in population: 30.96813201904297
Maximum age in population: 36.06539225578308
Average age in population: 33.95133067393303
Median age in population: 34.01097536087036
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 14071509
--- Timings ---
Current time: 1559583334247 milliseconds
Total Time:          79.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.6 seconds, 62.7%
Fitness Testing:     19.5 seconds, 24.7%
Report:               9.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_stackdepth} {:close 1, :instruction exec_when} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () integer_dup_items exec_s_when_autoconstructing (in2 print_integer integer_sub integer_rot integer_shove) (exec_y () tagged_964 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (exec_empty boolean_invert_first_then_and boolean_stackdepth)) (exec_when () exec_dup_items) (in3 integer_pop integer_fromboolean) integer_flush integer_stackdepth boolean_and integer_gt integer_swap) () exec_dup_times (tagged_976 integer_empty exec_k_when_autoconstructing () ()))
Lexicase best errors: [0 1 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_stackdepth} {:close 1, :instruction exec_when} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_976} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in1 print_integer integer_sub integer_rot integer_shove exec_y () integer_dup_items exec_s_when_autoconstructing (in2 print_integer integer_sub integer_rot integer_shove) (exec_y () tagged_964 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (exec_empty boolean_invert_first_then_and boolean_stackdepth)) (exec_when () exec_dup_items) (in3 integer_pop integer_fromboolean) integer_flush integer_stackdepth boolean_and integer_gt integer_swap) () exec_dup_times (tagged_976 integer_empty exec_k_when_autoconstructing () ()))
Zero cases best errors: [0 1 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (413 338 940 413 1000 338 413 337 1000 1000)
Population mean number of elite cases: 6.19
Count of perfect (error zero) individuals by case: (413 338 940 413 0 338 413 337 0 0)
Population mean number of perfect (error zero) cases: 3.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer})
Best program: (in1 print_integer integer_sub boolean_dup_times integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (boolean_not) (boolean_pop boolean_frominteger integer_dec exec_swap (integer_div integer_fromboolean boolean_yankdup integer_dec in3 exec_while () exec_noop print_integer) ()))) () ())
Errors: [0 1 0 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 25
Size: 37
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.808
Median total errors in population: 6
Error averages by case: (0.587 0.662 0.06 0.587 1.0 0.662 0.587 0.663 1.0 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 1 1)
Average genome size in population (length): 25.826
Average program size in population (points): 36.774
Average percent parens in population: 0.292
Minimum age in population: 32.05400276184082
Maximum age in population: 37.13914787769318
Average age in population: 35.36025378489494
Median age in population: 35.46140742301941
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 14718686
--- Timings ---
Current time: 1559583337284 milliseconds
Total Time:          82.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.3 seconds, 62.5%
Fitness Testing:     20.3 seconds, 24.8%
Report:              10.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 62                 
Correct output: -50                 | Program output: 77                 
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 33                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 42                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 38                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 90                 
Correct output: 6                   | Program output: 84                 
Correct output: 9                   | Program output: 97                 
Correct output: 19                  | Program output: 87                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 9                  
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: 74                 
Correct output: -99                 | Program output: -40                
Correct output: -82                 | Program output: -46                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -1                 
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 57                 
Correct output: -95                 | Program output: 49                 
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: 44                 
Correct output: -25                 | Program output: 87                 
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -28                
Correct output: -88                 | Program output: 81                 
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: 15                 
Correct output: -88                 | Program output: -82                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 13                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 73                 
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 9                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: 49                 
Correct output: -65                 | Program output: 41                 
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 73                 
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 86                 
Correct output: -99                 | Program output: 78                 
Correct output: -77                 | Program output: -61                
Correct output: -100                | Program output: -30                
Correct output: -93                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y} {:close 1, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lt} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_when} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty})
Lexicase best program: (in1 print_integer integer_sub integer_rot integer_shove exec_when (exec_y () tagged_964) exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (integer_lt) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (exec_when ()) (exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty))) ()) () ())
Lexicase best errors: [0 1 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 46
Percent parens: 0.391
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y} {:close 1, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction integer_lt} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_when} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty})
Zero cases best program: (in1 print_integer integer_sub integer_rot integer_shove exec_when (exec_y () tagged_964) exec_s_when_autoconstructing (exec_dup (integer_rot 78 exec_s () (integer_lt) (print_newline) boolean_frominteger exec_while () integer_min) integer_empty exec_swap (exec_k_when_autoconstructing (exec_when ()) (exec_do*while () in2 boolean_dup_items integer_dup_times exec_y (boolean_empty))) ()) () ())
Zero cases best errors: [0 1 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 46
Percent parens: 0.391
--- Lexicase Population Statistics ---
Count of elite individuals by case: (939 1 448 1 1000 1000 449 447 491 1000)
Population mean number of elite cases: 5.78
Count of perfect (error zero) individuals by case: (939 1 448 1 0 0 449 447 491 0)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction -55} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 78} {:close 1, :instruction exec_s} {:close 1, :instruction exec_s} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap})
Best program: (in1 print_integer integer_sub integer_rot -55 exec_y () tagged_964 in1 print_integer integer_sub integer_rot integer_shove exec_y () tagged_964 exec_s_when_autoconstructing (exec_dup (boolean_invert_second_then_and 78 exec_s () (exec_s () (print_newline) (boolean_frominteger exec_while (integer_min integer_empty exec_swap () ()))) ())) () ())
Errors: [0 1 0 1 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 42
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 7.224
Median total errors in population: 8
Error averages by case: (0.061 0.999 0.552 0.999 1.0 1.0 0.551 0.553 0.509 1.0)
Error minima by case: (0 0 0 0 1 1 0 0 0 1)
Average genome size in population (length): 26.331
Average program size in population (points): 37.78
Average percent parens in population: 0.298
Minimum age in population: 34.12786674499512
Maximum age in population: 38.92627847194672
Average age in population: 36.89093859988451
Median age in population: 36.96989622712135
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 15355309
--- Timings ---
Current time: 1559583340663 milliseconds
Total Time:          85.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.5 seconds, 62.5%
Fitness Testing:     21.1 seconds, 24.7%
Report:              10.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 23                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 49                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 39                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 35                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 27                 
Correct output: 6                   | Program output: 28                 
Correct output: 9                   | Program output: 38                 
Correct output: 19                  | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: -21                
Correct output: -99                 | Program output: -47                
Correct output: -82                 | Program output: -81                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -54                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 30                 
Correct output: -95                 | Program output: -95                
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -98                
Correct output: -88                 | Program output: 3                  
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -67                
Correct output: -68                 | Program output: 52                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: -65                 | Program output: -47                
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -84                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2})
Lexicase best program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove exec_y () tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer)) exec_do*while () in2 integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 46
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2})
Zero cases best program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove exec_y () tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer)) exec_do*while () in2 integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 46
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (860 380 380 707 153 382 328 381 860 328)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (860 380 380 707 153 382 328 381 860 328)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2})
Best program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove exec_y () tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer)) exec_do*while () in2 integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 31
Size: 46
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 5.241
Median total errors in population: 5
Error averages by case: (0.14 0.62 0.62 0.293 0.847 0.618 0.672 0.619 0.14 0.672)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.313
Average program size in population (points): 40.098
Average percent parens in population: 0.315
Minimum age in population: 35.90490293502808
Maximum age in population: 40.46650975942612
Average age in population: 38.83917046162486
Median age in population: 38.87940913438797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 252
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 255
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 15770294
--- Timings ---
Current time: 1559583343143 milliseconds
Total Time:          88.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.2 seconds, 62.6%
Fitness Testing:     21.6 seconds, 24.5%
Report:              11.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 88                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 23                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 51                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 49                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 39                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 35                 
Correct output: 9                   | Program output: 55                 
Correct output: 25                  | Program output: 27                 
Correct output: 6                   | Program output: 28                 
Correct output: 9                   | Program output: 38                 
Correct output: 19                  | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -13                 | Program output: -7                 
Correct output: -26                 | Program output: -21                
Correct output: -99                 | Program output: -47                
Correct output: -82                 | Program output: -81                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 68                 
Correct output: -94                 | Program output: -14                
Correct output: -54                 | Program output: -54                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: 30                 
Correct output: -95                 | Program output: -95                
Correct output: 25                  | Program output: 49                 
Correct output: -98                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 35                 
Correct output: -84                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -98                
Correct output: -88                 | Program output: 3                  
Correct output: -54                 | Program output: 84                 
Correct output: -87                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -51                 | Program output: 11                 
Correct output: -45                 | Program output: -3                 
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -67                
Correct output: -68                 | Program output: 52                 
Correct output: -90                 | Program output: 43                 
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: 20                 
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: -65                 | Program output: -47                
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -84                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2})
Lexicase best program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove exec_y () tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer)) exec_do*while () in2 integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
Lexicase best errors: [0 0 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2})
Zero cases best program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove exec_y () tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer)) exec_do*while () in2 integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
Zero cases best errors: [0 0 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (707 707 1000 764 764 121 120 891 707 1000)
Population mean number of elite cases: 6.78
Count of perfect (error zero) individuals by case: (707 707 0 764 764 121 120 891 707 0)
Population mean number of perfect (error zero) cases: 4.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2})
Best program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove exec_y () tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer)) exec_do*while () in2 integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
Errors: [0 0 1 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 31
Size: 46
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 5.219
Median total errors in population: 4
Error averages by case: (0.293 0.293 1.0 0.236 0.236 0.879 0.88 0.109 0.293 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 30.542
Average program size in population (points): 45.162
Average percent parens in population: 0.323
Minimum age in population: 36.90490293502808
Maximum age in population: 41.94697785377502
Average age in population: 40.82255994997919
Median age in population: 40.44354611635208
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 541
Genome diversity (% unique genomes):	 0.412
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 547
Syntactic diversity (% unique Push programs):	 0.405
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 15955735
--- Timings ---
Current time: 1559583345614 milliseconds
Total Time:          90.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.3 seconds, 63.1%
Fitness Testing:     21.9 seconds, 24.1%
Report:              11.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 221
Test mean error for best: 0.22100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 28                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 39                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -13                 | Program output: -13                
Correct output: -26                 | Program output: -21                
Correct output: -99                 | Program output: -47                
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -54                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: 25                  | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: 2                  
Correct output: -54                 | Program output: 71                 
Correct output: -87                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -51                 | Program output: -51                
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -67                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -20                
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: -65                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -99                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2})
Lexicase best program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 45
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2})
Zero cases best program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 45
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (510 550 867 867 601 550 509 550 550 867)
Population mean number of elite cases: 6.42
Count of perfect (error zero) individuals by case: (510 550 867 867 601 550 509 550 550 867)
Population mean number of perfect (error zero) cases: 6.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 1, :instruction integer_min} {:close 2, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction in2})
Best program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 32
Size: 45
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 3.579
Median total errors in population: 3
Error averages by case: (0.49 0.45 0.133 0.133 0.399 0.45 0.491 0.45 0.45 0.133)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.097
Average program size in population (points): 45.372
Average percent parens in population: 0.314
Minimum age in population: 41.13716369122267
Maximum age in population: 43.54500029236078
Average age in population: 42.38806579989195
Median age in population: 42.44354611635208
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 220
Genome diversity (% unique genomes):	 0.449
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.009
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 16088254
--- Timings ---
Current time: 1559583348020 milliseconds
Total Time:          93.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.3 seconds, 63.7%
Fitness Testing:     22.1 seconds, 23.7%
Report:              11.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 28
Successful program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 45


Auto-simplifying with starting size: 45
step: 0
program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 500
program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 1000
program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 1500
program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 2000
program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 2500
program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 3000
program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 3500
program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 4000
program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 4500
program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 5000
program: (in1 exec_pop (exec_if (integer_dup_items in3) (integer_mod print_integer integer_rot integer_shove boolean_stackdepth) tagged_964 exec_dup_times (integer_mod integer_rot exec_yank) exec_s () (boolean_not) (print_newline boolean_frominteger exec_while () integer_min) print_integer) in3 in2 integer_min integer_min integer_empty exec_swap (exec_k_when_autoconstructing (print_integer) () integer_add in2) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 221
Test mean error for best: 0.22100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -86                 | Program output: -86                
Correct output: 75                  | Program output: 85                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -50                 | Program output: -50                
Correct output: 39                  | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 93                  | Program output: 93                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 74                 
Correct output: 10                  | Program output: 28                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 38                 
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 42                 
Correct output: 6                   | Program output: 39                 
Correct output: 46                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -13                 | Program output: -13                
Correct output: -26                 | Program output: -21                
Correct output: -99                 | Program output: -47                
Correct output: -82                 | Program output: -82                
Correct output: 13                  | Program output: 13                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -54                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: 25                  | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: 2                  
Correct output: -54                 | Program output: 71                 
Correct output: -87                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: 6                   | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -51                 | Program output: -51                
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -67                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -9                  | Program output: -9                 
Correct output: -5                  | Program output: -5                 
Correct output: -47                 | Program output: -20                
Correct output: -90                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: -65                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -99                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -12                
;;******************************
