Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[46 -14 46 46] -14] [[-100 -100 -100 -31] -100] [[-36 -36 -36 -12] -36] [[32 32 32 32] 32] [[-61 7 -61 -61] -61] [[-52 -91 -52 -52] -91] [[-25 -25 59 -25] -25] [[-22 -22 -22 -19] -22] [[-12 29 29 29] -12] [[-33 -33 -33 48] -33] [(18 18 18 18) 18] [(56 56 56 56) 56] [(-69 -69 -69 -69) -69] [(48 48 48 48) 48] [(-94 -94 -94 -94) -94] [(37 73 10 70) 10] [(77 19 37 94) 19] [(22 77 97 15) 15] [(23 57 69 90) 23] [(6 29 90 93) 6] [(65 23 81 22) 22] [(76 27 46 32) 27] [(48 84 30 77) 30] [(76 97 39 39) 39] [(95 67 18 75) 18] [(62 23 43 51) 23] [(100 50 20 14) 14] [(25 13 81 16) 13] [(29 100 69 37) 29] [(74 65 72 49) 49] [(72 32 57 92) 32] [(68 20 78 65) 20] [(37 19 41 56) 19] [(29 3 51 35) 3] [(52 58 17 99) 17] [(31 80 73 -46) -46] [(83 84 36 76) 36] [(9 74 -73 12) -73] [(-43 74 15 -16) -43] [(-20 16 -39 37) -39] [(76 89 86 -3) -3] [(-39 35 65 -88) -88] [(-100 33 -56 -78) -100] [(-65 46 -74 72) -74] [(87 -21 51 36) -21] [(1 -62 69 -88) -88] [(46 25 -81 -89) -89] [(22 4 -51 -30) -51] [(13 78 71 -80) -80] [(-60 -88 -37 -89) -89] [(98 25 -7 -59) -59] [(44 39 -60 35) -60] [(1 55 83 71) 1] [(70 8 -27 97) -27] [(88 -69 100 68) -69] [(0 45 57 -43) -43] [(42 -68 -40 -79) -79] [(-40 19 -78 -74) -78] [(-75 -88 -43 46) -88] [(-36 -87 9 86) -87] [(5 -55 -65 98) -65] [(-62 60 -41 -33) -62] [(63 -6 -70 52) -70] [(-94 -27 -84 -81) -94] [(50 -26 -4 -87) -87] [(56 82 -42 -34) -42] [(-49 -59 -73 -23) -73] [(76 11 49 -7) -7] [(18 -33 -65 27) -65] [(-9 -10 -28 -35) -35] [(-20 31 -26 -13) -26] [(-19 -13 7 -9) -19] [(82 -30 20 5) -30] [(78 0 -93 -38) -93] [(-63 65 89 84) -63] [(-69 -49 -4 20) -69] [(-80 99 64 -58) -80] [(17 25 69 -96) -96] [(10 94 -56 7) -56] [(-14 -58 -39 -84) -84] [(-81 -57 -88 18) -88] [(-55 -82 21 77) -82] [(-100 62 37 82) -100] [(-43 13 83 31) -43] [(-4 69 -50 24) -50] [(-70 77 87 -25) -70] [(79 32 72 -80) -80] [(39 86 58 50) 39] [(74 21 -55 -49) -55] [(-33 56 60 81) -33] [(97 20 -50 -90) -90] [(78 100 2 -88) -88] [(-19 85 88 -96) -96] [(1 -71 19 43) -71] [(-6 23 53 -67) -67])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[46 -14 46 46] -14]
Train Case:   6 | Input/Output: [[-100 -100 -100 -31] -100]
Train Case:   7 | Input/Output: [[-36 -36 -36 -12] -36]
Train Case:   8 | Input/Output: [[32 32 32 32] 32]
Train Case:   9 | Input/Output: [[-61 7 -61 -61] -61]
Train Case:  10 | Input/Output: [[-52 -91 -52 -52] -91]
Train Case:  11 | Input/Output: [[-25 -25 59 -25] -25]
Train Case:  12 | Input/Output: [[-22 -22 -22 -19] -22]
Train Case:  13 | Input/Output: [[-12 29 29 29] -12]
Train Case:  14 | Input/Output: [[-33 -33 -33 48] -33]
Train Case:  15 | Input/Output: [(18 18 18 18) 18]
Train Case:  16 | Input/Output: [(56 56 56 56) 56]
Train Case:  17 | Input/Output: [(-69 -69 -69 -69) -69]
Train Case:  18 | Input/Output: [(48 48 48 48) 48]
Train Case:  19 | Input/Output: [(-94 -94 -94 -94) -94]
Train Case:  20 | Input/Output: [(37 73 10 70) 10]
Train Case:  21 | Input/Output: [(77 19 37 94) 19]
Train Case:  22 | Input/Output: [(22 77 97 15) 15]
Train Case:  23 | Input/Output: [(23 57 69 90) 23]
Train Case:  24 | Input/Output: [(6 29 90 93) 6]
Train Case:  25 | Input/Output: [(65 23 81 22) 22]
Train Case:  26 | Input/Output: [(76 27 46 32) 27]
Train Case:  27 | Input/Output: [(48 84 30 77) 30]
Train Case:  28 | Input/Output: [(76 97 39 39) 39]
Train Case:  29 | Input/Output: [(95 67 18 75) 18]
Train Case:  30 | Input/Output: [(62 23 43 51) 23]
Train Case:  31 | Input/Output: [(100 50 20 14) 14]
Train Case:  32 | Input/Output: [(25 13 81 16) 13]
Train Case:  33 | Input/Output: [(29 100 69 37) 29]
Train Case:  34 | Input/Output: [(74 65 72 49) 49]
Train Case:  35 | Input/Output: [(72 32 57 92) 32]
Train Case:  36 | Input/Output: [(68 20 78 65) 20]
Train Case:  37 | Input/Output: [(37 19 41 56) 19]
Train Case:  38 | Input/Output: [(29 3 51 35) 3]
Train Case:  39 | Input/Output: [(52 58 17 99) 17]
Train Case:  40 | Input/Output: [(31 80 73 -46) -46]
Train Case:  41 | Input/Output: [(83 84 36 76) 36]
Train Case:  42 | Input/Output: [(9 74 -73 12) -73]
Train Case:  43 | Input/Output: [(-43 74 15 -16) -43]
Train Case:  44 | Input/Output: [(-20 16 -39 37) -39]
Train Case:  45 | Input/Output: [(76 89 86 -3) -3]
Train Case:  46 | Input/Output: [(-39 35 65 -88) -88]
Train Case:  47 | Input/Output: [(-100 33 -56 -78) -100]
Train Case:  48 | Input/Output: [(-65 46 -74 72) -74]
Train Case:  49 | Input/Output: [(87 -21 51 36) -21]
Train Case:  50 | Input/Output: [(1 -62 69 -88) -88]
Train Case:  51 | Input/Output: [(46 25 -81 -89) -89]
Train Case:  52 | Input/Output: [(22 4 -51 -30) -51]
Train Case:  53 | Input/Output: [(13 78 71 -80) -80]
Train Case:  54 | Input/Output: [(-60 -88 -37 -89) -89]
Train Case:  55 | Input/Output: [(98 25 -7 -59) -59]
Train Case:  56 | Input/Output: [(44 39 -60 35) -60]
Train Case:  57 | Input/Output: [(1 55 83 71) 1]
Train Case:  58 | Input/Output: [(70 8 -27 97) -27]
Train Case:  59 | Input/Output: [(88 -69 100 68) -69]
Train Case:  60 | Input/Output: [(0 45 57 -43) -43]
Train Case:  61 | Input/Output: [(42 -68 -40 -79) -79]
Train Case:  62 | Input/Output: [(-40 19 -78 -74) -78]
Train Case:  63 | Input/Output: [(-75 -88 -43 46) -88]
Train Case:  64 | Input/Output: [(-36 -87 9 86) -87]
Train Case:  65 | Input/Output: [(5 -55 -65 98) -65]
Train Case:  66 | Input/Output: [(-62 60 -41 -33) -62]
Train Case:  67 | Input/Output: [(63 -6 -70 52) -70]
Train Case:  68 | Input/Output: [(-94 -27 -84 -81) -94]
Train Case:  69 | Input/Output: [(50 -26 -4 -87) -87]
Train Case:  70 | Input/Output: [(56 82 -42 -34) -42]
Train Case:  71 | Input/Output: [(-49 -59 -73 -23) -73]
Train Case:  72 | Input/Output: [(76 11 49 -7) -7]
Train Case:  73 | Input/Output: [(18 -33 -65 27) -65]
Train Case:  74 | Input/Output: [(-9 -10 -28 -35) -35]
Train Case:  75 | Input/Output: [(-20 31 -26 -13) -26]
Train Case:  76 | Input/Output: [(-19 -13 7 -9) -19]
Train Case:  77 | Input/Output: [(82 -30 20 5) -30]
Train Case:  78 | Input/Output: [(78 0 -93 -38) -93]
Train Case:  79 | Input/Output: [(-63 65 89 84) -63]
Train Case:  80 | Input/Output: [(-69 -49 -4 20) -69]
Train Case:  81 | Input/Output: [(-80 99 64 -58) -80]
Train Case:  82 | Input/Output: [(17 25 69 -96) -96]
Train Case:  83 | Input/Output: [(10 94 -56 7) -56]
Train Case:  84 | Input/Output: [(-14 -58 -39 -84) -84]
Train Case:  85 | Input/Output: [(-81 -57 -88 18) -88]
Train Case:  86 | Input/Output: [(-55 -82 21 77) -82]
Train Case:  87 | Input/Output: [(-100 62 37 82) -100]
Train Case:  88 | Input/Output: [(-43 13 83 31) -43]
Train Case:  89 | Input/Output: [(-4 69 -50 24) -50]
Train Case:  90 | Input/Output: [(-70 77 87 -25) -70]
Train Case:  91 | Input/Output: [(79 32 72 -80) -80]
Train Case:  92 | Input/Output: [(39 86 58 50) 39]
Train Case:  93 | Input/Output: [(74 21 -55 -49) -55]
Train Case:  94 | Input/Output: [(-33 56 60 81) -33]
Train Case:  95 | Input/Output: [(97 20 -50 -90) -90]
Train Case:  96 | Input/Output: [(78 100 2 -88) -88]
Train Case:  97 | Input/Output: [(-19 85 88 -96) -96]
Train Case:  98 | Input/Output: [(1 -71 19 43) -71]
Train Case:  99 | Input/Output: [(-6 23 53 -67) -67]
Test Case:   0 | Input/Output: [[87 87 87 -36] -36]
Test Case:   1 | Input/Output: [[-32 -16 -32 -32] -32]
Test Case:   2 | Input/Output: [[-55 -54 -55 -55] -55]
Test Case:   3 | Input/Output: [[-43 -89 -89 -89] -89]
Test Case:   4 | Input/Output: [[27 -72 27 27] -72]
Test Case:   5 | Input/Output: [[-75 69 69 69] -75]
Test Case:   6 | Input/Output: [[37 15 15 15] 15]
Test Case:   7 | Input/Output: [[-26 -26 3 -26] -26]
Test Case:   8 | Input/Output: [[-84 -84 -84 -57] -84]
Test Case:   9 | Input/Output: [[-95 -95 -57 -95] -95]
Test Case:  10 | Input/Output: [[53 53 -45 53] -45]
Test Case:  11 | Input/Output: [[-94 -94 60 -94] -94]
Test Case:  12 | Input/Output: [[61 -67 61 61] -67]
Test Case:  13 | Input/Output: [[-21 -21 100 -21] -21]
Test Case:  14 | Input/Output: [[26 26 -81 26] -81]
Test Case:  15 | Input/Output: [[-62 -62 -62 -13] -62]
Test Case:  16 | Input/Output: [[92 27 27 27] 27]
Test Case:  17 | Input/Output: [[66 -84 66 66] -84]
Test Case:  18 | Input/Output: [[-10 -6 -6 -6] -10]
Test Case:  19 | Input/Output: [[9 -8 9 9] -8]
Test Case:  20 | Input/Output: [[-54 -54 -54 -88] -88]
Test Case:  21 | Input/Output: [[-48 -48 -48 42] -48]
Test Case:  22 | Input/Output: [[-78 -78 -78 -17] -78]
Test Case:  23 | Input/Output: [[-48 -48 -63 -48] -63]
Test Case:  24 | Input/Output: [[35 35 35 -6] -6]
Test Case:  25 | Input/Output: [[15 86 86 86] 15]
Test Case:  26 | Input/Output: [[65 65 65 -10] -10]
Test Case:  27 | Input/Output: [[-18 19 19 19] -18]
Test Case:  28 | Input/Output: [[-60 -60 -50 -60] -60]
Test Case:  29 | Input/Output: [[-18 83 -18 -18] -18]
Test Case:  30 | Input/Output: [[57 30 30 30] 30]
Test Case:  31 | Input/Output: [[70 70 -27 70] -27]
Test Case:  32 | Input/Output: [[24 24 50 24] 24]
Test Case:  33 | Input/Output: [[79 79 -59 79] -59]
Test Case:  34 | Input/Output: [[-61 16 16 16] -61]
Test Case:  35 | Input/Output: [[-9 -67 -9 -9] -67]
Test Case:  36 | Input/Output: [[-17 46 46 46] -17]
Test Case:  37 | Input/Output: [[-81 -81 -81 -76] -81]
Test Case:  38 | Input/Output: [[-51 -48 -48 -48] -51]
Test Case:  39 | Input/Output: [[85 36 85 85] 36]
Test Case:  40 | Input/Output: [[-86 16 16 16] -86]
Test Case:  41 | Input/Output: [[-36 -36 -36 -50] -50]
Test Case:  42 | Input/Output: [[-93 40 40 40] -93]
Test Case:  43 | Input/Output: [[23 99 99 99] 23]
Test Case:  44 | Input/Output: [[48 -52 48 48] -52]
Test Case:  45 | Input/Output: [[-13 -13 -33 -13] -33]
Test Case:  46 | Input/Output: [[10 9 9 9] 9]
Test Case:  47 | Input/Output: [[-92 -37 -92 -92] -92]
Test Case:  48 | Input/Output: [[35 35 -45 35] -45]
Test Case:  49 | Input/Output: [[-38 33 -38 -38] -38]
Test Case:  50 | Input/Output: [[-11 82 82 82] -11]
Test Case:  51 | Input/Output: [[-75 -75 -75 2] -75]
Test Case:  52 | Input/Output: [[-85 -90 -85 -85] -90]
Test Case:  53 | Input/Output: [[54 54 -35 54] -35]
Test Case:  54 | Input/Output: [[-2 71 71 71] -2]
Test Case:  55 | Input/Output: [[-3 -3 51 -3] -3]
Test Case:  56 | Input/Output: [[-92 -92 -92 -66] -92]
Test Case:  57 | Input/Output: [[-43 -66 -66 -66] -66]
Test Case:  58 | Input/Output: [[15 -62 15 15] -62]
Test Case:  59 | Input/Output: [[-91 -91 67 -91] -91]
Test Case:  60 | Input/Output: [[97 97 97 76] 76]
Test Case:  61 | Input/Output: [[41 91 91 91] 41]
Test Case:  62 | Input/Output: [[99 99 -24 99] -24]
Test Case:  63 | Input/Output: [[-24 -98 -98 -98] -98]
Test Case:  64 | Input/Output: [[26 26 48 26] 26]
Test Case:  65 | Input/Output: [[29 29 29 29] 29]
Test Case:  66 | Input/Output: [[-89 -1 -1 -1] -89]
Test Case:  67 | Input/Output: [[-89 -89 -41 -89] -89]
Test Case:  68 | Input/Output: [[-81 72 72 72] -81]
Test Case:  69 | Input/Output: [[-78 -65 -65 -65] -78]
Test Case:  70 | Input/Output: [[-84 -77 -84 -84] -84]
Test Case:  71 | Input/Output: [[99 8 99 99] 8]
Test Case:  72 | Input/Output: [[88 -54 88 88] -54]
Test Case:  73 | Input/Output: [[49 49 0 49] 0]
Test Case:  74 | Input/Output: [[72 13 13 13] 13]
Test Case:  75 | Input/Output: [[84 -56 84 84] -56]
Test Case:  76 | Input/Output: [[-2 52 52 52] -2]
Test Case:  77 | Input/Output: [[-46 -46 -46 37] -46]
Test Case:  78 | Input/Output: [[-24 -3 -24 -24] -24]
Test Case:  79 | Input/Output: [[-44 44 44 44] -44]
Test Case:  80 | Input/Output: [[17 17 -18 17] -18]
Test Case:  81 | Input/Output: [[34 10 10 10] 10]
Test Case:  82 | Input/Output: [[48 -75 -75 -75] -75]
Test Case:  83 | Input/Output: [[-23 -67 -67 -67] -67]
Test Case:  84 | Input/Output: [[21 -95 21 21] -95]
Test Case:  85 | Input/Output: [[-96 -96 -10 -96] -96]
Test Case:  86 | Input/Output: [[-42 -72 -42 -42] -72]
Test Case:  87 | Input/Output: [[-89 77 -89 -89] -89]
Test Case:  88 | Input/Output: [[-55 -55 -55 -67] -67]
Test Case:  89 | Input/Output: [[-8 -8 -19 -8] -19]
Test Case:  90 | Input/Output: [[-24 -23 -23 -23] -24]
Test Case:  91 | Input/Output: [[90 90 -21 90] -21]
Test Case:  92 | Input/Output: [[-9 -9 -64 -9] -64]
Test Case:  93 | Input/Output: [[-57 -57 88 -57] -57]
Test Case:  94 | Input/Output: [[-48 -24 -48 -48] -48]
Test Case:  95 | Input/Output: [[71 -58 71 71] -58]
Test Case:  96 | Input/Output: [[80 80 80 14] 14]
Test Case:  97 | Input/Output: [[37 37 -29 37] -29]
Test Case:  98 | Input/Output: [[-71 -71 -57 -71] -71]
Test Case:  99 | Input/Output: [[29 -10 -10 -10] -10]
Test Case: 100 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 101 | Input/Output: [(80 80 80 80) 80]
Test Case: 102 | Input/Output: [(35 35 35 35) 35]
Test Case: 103 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 104 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 105 | Input/Output: [(96 96 96 96) 96]
Test Case: 106 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 107 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 108 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 109 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 110 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 111 | Input/Output: [(60 60 60 60) 60]
Test Case: 112 | Input/Output: [(95 95 95 95) 95]
Test Case: 113 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 114 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 115 | Input/Output: [(94 94 94 94) 94]
Test Case: 116 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 117 | Input/Output: [(89 89 89 89) 89]
Test Case: 118 | Input/Output: [(40 40 40 40) 40]
Test Case: 119 | Input/Output: [(84 84 84 84) 84]
Test Case: 120 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 121 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 122 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 123 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 124 | Input/Output: [(58 58 58 58) 58]
Test Case: 125 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 126 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 127 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 128 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 129 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 130 | Input/Output: [(98 98 98 98) 98]
Test Case: 131 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 132 | Input/Output: [(17 17 17 17) 17]
Test Case: 133 | Input/Output: [(35 35 35 35) 35]
Test Case: 134 | Input/Output: [(33 33 33 33) 33]
Test Case: 135 | Input/Output: [(63 63 63 63) 63]
Test Case: 136 | Input/Output: [(62 62 62 62) 62]
Test Case: 137 | Input/Output: [(49 49 49 49) 49]
Test Case: 138 | Input/Output: [(91 91 91 91) 91]
Test Case: 139 | Input/Output: [(62 62 62 62) 62]
Test Case: 140 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 141 | Input/Output: [(4 4 4 4) 4]
Test Case: 142 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 143 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 144 | Input/Output: [(46 46 46 46) 46]
Test Case: 145 | Input/Output: [(71 71 71 71) 71]
Test Case: 146 | Input/Output: [(25 25 25 25) 25]
Test Case: 147 | Input/Output: [(31 31 31 31) 31]
Test Case: 148 | Input/Output: [(14 14 14 14) 14]
Test Case: 149 | Input/Output: [(66 66 66 66) 66]
Test Case: 150 | Input/Output: [(30 30 30 30) 30]
Test Case: 151 | Input/Output: [(82 82 82 82) 82]
Test Case: 152 | Input/Output: [(0 0 0 0) 0]
Test Case: 153 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 154 | Input/Output: [(16 16 16 16) 16]
Test Case: 155 | Input/Output: [(62 62 62 62) 62]
Test Case: 156 | Input/Output: [(88 88 88 88) 88]
Test Case: 157 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 158 | Input/Output: [(76 76 76 76) 76]
Test Case: 159 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 160 | Input/Output: [(43 43 43 43) 43]
Test Case: 161 | Input/Output: [(83 83 83 83) 83]
Test Case: 162 | Input/Output: [(48 48 48 48) 48]
Test Case: 163 | Input/Output: [(85 85 85 85) 85]
Test Case: 164 | Input/Output: [(50 50 50 50) 50]
Test Case: 165 | Input/Output: [(79 79 79 79) 79]
Test Case: 166 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 167 | Input/Output: [(48 48 48 48) 48]
Test Case: 168 | Input/Output: [(27 27 27 27) 27]
Test Case: 169 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 170 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 171 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 172 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 173 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 174 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 175 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 176 | Input/Output: [(54 54 54 54) 54]
Test Case: 177 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 178 | Input/Output: [(91 91 91 91) 91]
Test Case: 179 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 180 | Input/Output: [(98 98 98 98) 98]
Test Case: 181 | Input/Output: [(27 27 27 27) 27]
Test Case: 182 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 183 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 184 | Input/Output: [(11 11 11 11) 11]
Test Case: 185 | Input/Output: [(6 6 6 6) 6]
Test Case: 186 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 187 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 188 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 189 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 190 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 191 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 192 | Input/Output: [(35 35 35 35) 35]
Test Case: 193 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 194 | Input/Output: [(4 4 4 4) 4]
Test Case: 195 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 196 | Input/Output: [(72 72 72 72) 72]
Test Case: 197 | Input/Output: [(36 36 36 36) 36]
Test Case: 198 | Input/Output: [(20 20 20 20) 20]
Test Case: 199 | Input/Output: [(43 43 43 43) 43]
Test Case: 200 | Input/Output: [(63 81 86 37) 37]
Test Case: 201 | Input/Output: [(35 35 11 63) 11]
Test Case: 202 | Input/Output: [(98 43 81 52) 43]
Test Case: 203 | Input/Output: [(31 68 85 30) 30]
Test Case: 204 | Input/Output: [(38 6 24 41) 6]
Test Case: 205 | Input/Output: [(96 48 90 64) 48]
Test Case: 206 | Input/Output: [(53 12 69 23) 12]
Test Case: 207 | Input/Output: [(70 4 7 15) 4]
Test Case: 208 | Input/Output: [(64 88 75 58) 58]
Test Case: 209 | Input/Output: [(20 33 64 67) 20]
Test Case: 210 | Input/Output: [(15 86 100 57) 15]
Test Case: 211 | Input/Output: [(20 71 70 59) 20]
Test Case: 212 | Input/Output: [(27 37 91 10) 10]
Test Case: 213 | Input/Output: [(39 7 55 96) 7]
Test Case: 214 | Input/Output: [(81 78 7 49) 7]
Test Case: 215 | Input/Output: [(14 65 96 73) 14]
Test Case: 216 | Input/Output: [(22 92 9 37) 9]
Test Case: 217 | Input/Output: [(35 54 85 86) 35]
Test Case: 218 | Input/Output: [(8 73 1 13) 1]
Test Case: 219 | Input/Output: [(27 90 0 22) 0]
Test Case: 220 | Input/Output: [(50 70 74 86) 50]
Test Case: 221 | Input/Output: [(32 100 7 84) 7]
Test Case: 222 | Input/Output: [(12 85 75 36) 12]
Test Case: 223 | Input/Output: [(78 90 99 64) 64]
Test Case: 224 | Input/Output: [(25 36 30 28) 25]
Test Case: 225 | Input/Output: [(89 66 65 31) 31]
Test Case: 226 | Input/Output: [(87 4 99 69) 4]
Test Case: 227 | Input/Output: [(22 97 2 26) 2]
Test Case: 228 | Input/Output: [(67 79 17 8) 8]
Test Case: 229 | Input/Output: [(36 12 75 60) 12]
Test Case: 230 | Input/Output: [(19 92 90 13) 13]
Test Case: 231 | Input/Output: [(33 89 84 5) 5]
Test Case: 232 | Input/Output: [(2 10 96 6) 2]
Test Case: 233 | Input/Output: [(50 66 100 67) 50]
Test Case: 234 | Input/Output: [(91 82 47 99) 47]
Test Case: 235 | Input/Output: [(45 22 79 51) 22]
Test Case: 236 | Input/Output: [(70 84 15 83) 15]
Test Case: 237 | Input/Output: [(6 24 54 97) 6]
Test Case: 238 | Input/Output: [(29 12 0 81) 0]
Test Case: 239 | Input/Output: [(50 36 64 40) 36]
Test Case: 240 | Input/Output: [(82 84 63 92) 63]
Test Case: 241 | Input/Output: [(91 40 17 29) 17]
Test Case: 242 | Input/Output: [(8 83 56 17) 8]
Test Case: 243 | Input/Output: [(27 55 52 38) 27]
Test Case: 244 | Input/Output: [(37 95 54 9) 9]
Test Case: 245 | Input/Output: [(5 88 97 24) 5]
Test Case: 246 | Input/Output: [(99 14 100 100) 14]
Test Case: 247 | Input/Output: [(94 49 79 52) 49]
Test Case: 248 | Input/Output: [(32 36 13 44) 13]
Test Case: 249 | Input/Output: [(18 6 23 93) 6]
Test Case: 250 | Input/Output: [(76 41 67 39) 39]
Test Case: 251 | Input/Output: [(29 73 42 31) 29]
Test Case: 252 | Input/Output: [(97 25 89 38) 25]
Test Case: 253 | Input/Output: [(67 95 44 64) 44]
Test Case: 254 | Input/Output: [(4 50 38 95) 4]
Test Case: 255 | Input/Output: [(20 42 36 41) 20]
Test Case: 256 | Input/Output: [(97 28 71 40) 28]
Test Case: 257 | Input/Output: [(44 42 28 12) 12]
Test Case: 258 | Input/Output: [(25 69 96 87) 25]
Test Case: 259 | Input/Output: [(71 73 48 36) 36]
Test Case: 260 | Input/Output: [(61 79 78 43) 43]
Test Case: 261 | Input/Output: [(63 54 7 24) 7]
Test Case: 262 | Input/Output: [(3 98 96 81) 3]
Test Case: 263 | Input/Output: [(94 91 30 51) 30]
Test Case: 264 | Input/Output: [(91 22 51 10) 10]
Test Case: 265 | Input/Output: [(46 11 60 28) 11]
Test Case: 266 | Input/Output: [(48 47 23 44) 23]
Test Case: 267 | Input/Output: [(77 54 12 2) 2]
Test Case: 268 | Input/Output: [(19 32 34 42) 19]
Test Case: 269 | Input/Output: [(99 59 77 97) 59]
Test Case: 270 | Input/Output: [(18 11 16 86) 11]
Test Case: 271 | Input/Output: [(87 51 90 13) 13]
Test Case: 272 | Input/Output: [(5 100 45 27) 5]
Test Case: 273 | Input/Output: [(91 21 72 81) 21]
Test Case: 274 | Input/Output: [(48 13 22 18) 13]
Test Case: 275 | Input/Output: [(64 83 11 55) 11]
Test Case: 276 | Input/Output: [(31 38 54 32) 31]
Test Case: 277 | Input/Output: [(20 96 82 11) 11]
Test Case: 278 | Input/Output: [(29 56 74 94) 29]
Test Case: 279 | Input/Output: [(12 8 14 95) 8]
Test Case: 280 | Input/Output: [(27 74 54 17) 17]
Test Case: 281 | Input/Output: [(9 20 50 81) 9]
Test Case: 282 | Input/Output: [(69 94 77 10) 10]
Test Case: 283 | Input/Output: [(52 41 29 21) 21]
Test Case: 284 | Input/Output: [(18 64 70 89) 18]
Test Case: 285 | Input/Output: [(45 40 67 55) 40]
Test Case: 286 | Input/Output: [(50 25 7 5) 5]
Test Case: 287 | Input/Output: [(96 70 42 34) 34]
Test Case: 288 | Input/Output: [(29 83 62 1) 1]
Test Case: 289 | Input/Output: [(82 82 10 7) 7]
Test Case: 290 | Input/Output: [(62 100 41 54) 41]
Test Case: 291 | Input/Output: [(36 56 27 65) 27]
Test Case: 292 | Input/Output: [(72 72 36 85) 36]
Test Case: 293 | Input/Output: [(74 39 9 47) 9]
Test Case: 294 | Input/Output: [(50 84 74 39) 39]
Test Case: 295 | Input/Output: [(35 9 27 26) 9]
Test Case: 296 | Input/Output: [(22 85 57 37) 22]
Test Case: 297 | Input/Output: [(25 24 34 43) 24]
Test Case: 298 | Input/Output: [(77 15 91 58) 15]
Test Case: 299 | Input/Output: [(15 100 32 32) 15]
Test Case: 300 | Input/Output: [(44 78 9 34) 9]
Test Case: 301 | Input/Output: [(88 27 5 87) 5]
Test Case: 302 | Input/Output: [(90 65 87 22) 22]
Test Case: 303 | Input/Output: [(19 3 70 1) 1]
Test Case: 304 | Input/Output: [(77 18 16 73) 16]
Test Case: 305 | Input/Output: [(28 18 1 71) 1]
Test Case: 306 | Input/Output: [(19 68 47 56) 19]
Test Case: 307 | Input/Output: [(78 32 76 54) 32]
Test Case: 308 | Input/Output: [(36 82 18 59) 18]
Test Case: 309 | Input/Output: [(61 80 78 58) 58]
Test Case: 310 | Input/Output: [(0 89 0 55) 0]
Test Case: 311 | Input/Output: [(51 27 23 25) 23]
Test Case: 312 | Input/Output: [(5 70 52 59) 5]
Test Case: 313 | Input/Output: [(41 60 81 51) 41]
Test Case: 314 | Input/Output: [(21 84 77 39) 21]
Test Case: 315 | Input/Output: [(75 7 52 87) 7]
Test Case: 316 | Input/Output: [(36 4 100 13) 4]
Test Case: 317 | Input/Output: [(55 67 18 55) 18]
Test Case: 318 | Input/Output: [(67 54 79 3) 3]
Test Case: 319 | Input/Output: [(84 45 30 44) 30]
Test Case: 320 | Input/Output: [(9 86 51 93) 9]
Test Case: 321 | Input/Output: [(82 77 91 65) 65]
Test Case: 322 | Input/Output: [(46 82 94 94) 46]
Test Case: 323 | Input/Output: [(56 81 44 14) 14]
Test Case: 324 | Input/Output: [(73 88 94 92) 73]
Test Case: 325 | Input/Output: [(63 44 38 34) 34]
Test Case: 326 | Input/Output: [(40 96 66 33) 33]
Test Case: 327 | Input/Output: [(93 30 40 14) 14]
Test Case: 328 | Input/Output: [(12 50 65 85) 12]
Test Case: 329 | Input/Output: [(9 2 23 65) 2]
Test Case: 330 | Input/Output: [(73 39 84 91) 39]
Test Case: 331 | Input/Output: [(30 44 100 49) 30]
Test Case: 332 | Input/Output: [(51 0 63 44) 0]
Test Case: 333 | Input/Output: [(27 25 81 28) 25]
Test Case: 334 | Input/Output: [(55 83 18 98) 18]
Test Case: 335 | Input/Output: [(38 81 16 81) 16]
Test Case: 336 | Input/Output: [(25 21 19 88) 19]
Test Case: 337 | Input/Output: [(34 71 9 36) 9]
Test Case: 338 | Input/Output: [(88 78 2 64) 2]
Test Case: 339 | Input/Output: [(24 63 8 72) 8]
Test Case: 340 | Input/Output: [(77 99 11 45) 11]
Test Case: 341 | Input/Output: [(35 33 42 2) 2]
Test Case: 342 | Input/Output: [(79 30 3 0) 0]
Test Case: 343 | Input/Output: [(27 90 26 48) 26]
Test Case: 344 | Input/Output: [(66 63 42 31) 31]
Test Case: 345 | Input/Output: [(81 34 32 20) 20]
Test Case: 346 | Input/Output: [(29 29 26 49) 26]
Test Case: 347 | Input/Output: [(84 64 92 56) 56]
Test Case: 348 | Input/Output: [(16 94 65 85) 16]
Test Case: 349 | Input/Output: [(76 16 53 50) 16]
Test Case: 350 | Input/Output: [(26 2 43 50) 2]
Test Case: 351 | Input/Output: [(36 17 76 4) 4]
Test Case: 352 | Input/Output: [(68 49 47 59) 47]
Test Case: 353 | Input/Output: [(40 93 86 6) 6]
Test Case: 354 | Input/Output: [(41 10 13 38) 10]
Test Case: 355 | Input/Output: [(60 95 98 8) 8]
Test Case: 356 | Input/Output: [(15 45 71 64) 15]
Test Case: 357 | Input/Output: [(97 67 4 98) 4]
Test Case: 358 | Input/Output: [(16 12 68 4) 4]
Test Case: 359 | Input/Output: [(28 2 4 30) 2]
Test Case: 360 | Input/Output: [(16 80 96 93) 16]
Test Case: 361 | Input/Output: [(34 35 64 18) 18]
Test Case: 362 | Input/Output: [(6 79 69 81) 6]
Test Case: 363 | Input/Output: [(94 94 6 79) 6]
Test Case: 364 | Input/Output: [(66 50 96 73) 50]
Test Case: 365 | Input/Output: [(70 55 25 2) 2]
Test Case: 366 | Input/Output: [(4 76 41 74) 4]
Test Case: 367 | Input/Output: [(83 0 39 85) 0]
Test Case: 368 | Input/Output: [(78 79 61 48) 48]
Test Case: 369 | Input/Output: [(87 97 34 79) 34]
Test Case: 370 | Input/Output: [(99 18 10 84) 10]
Test Case: 371 | Input/Output: [(6 73 86 36) 6]
Test Case: 372 | Input/Output: [(40 67 15 32) 15]
Test Case: 373 | Input/Output: [(55 16 53 44) 16]
Test Case: 374 | Input/Output: [(78 46 79 8) 8]
Test Case: 375 | Input/Output: [(50 79 95 51) 50]
Test Case: 376 | Input/Output: [(73 62 38 50) 38]
Test Case: 377 | Input/Output: [(13 54 37 69) 13]
Test Case: 378 | Input/Output: [(14 5 39 53) 5]
Test Case: 379 | Input/Output: [(81 65 40 94) 40]
Test Case: 380 | Input/Output: [(30 87 59 47) 30]
Test Case: 381 | Input/Output: [(67 0 94 4) 0]
Test Case: 382 | Input/Output: [(66 14 53 44) 14]
Test Case: 383 | Input/Output: [(92 30 85 64) 30]
Test Case: 384 | Input/Output: [(1 85 75 70) 1]
Test Case: 385 | Input/Output: [(81 44 44 44) 44]
Test Case: 386 | Input/Output: [(14 38 0 54) 0]
Test Case: 387 | Input/Output: [(59 57 87 73) 57]
Test Case: 388 | Input/Output: [(31 56 99 26) 26]
Test Case: 389 | Input/Output: [(27 7 87 94) 7]
Test Case: 390 | Input/Output: [(91 65 61 92) 61]
Test Case: 391 | Input/Output: [(5 81 19 12) 5]
Test Case: 392 | Input/Output: [(93 38 4 89) 4]
Test Case: 393 | Input/Output: [(19 96 41 58) 19]
Test Case: 394 | Input/Output: [(33 8 72 37) 8]
Test Case: 395 | Input/Output: [(37 87 27 23) 23]
Test Case: 396 | Input/Output: [(30 55 62 78) 30]
Test Case: 397 | Input/Output: [(22 25 5 45) 5]
Test Case: 398 | Input/Output: [(62 47 15 71) 15]
Test Case: 399 | Input/Output: [(18 80 27 49) 18]
Test Case: 400 | Input/Output: [(-68 60 -72 53) -72]
Test Case: 401 | Input/Output: [(-27 67 86 24) -27]
Test Case: 402 | Input/Output: [(31 -79 -36 -97) -97]
Test Case: 403 | Input/Output: [(-66 91 24 -63) -66]
Test Case: 404 | Input/Output: [(-33 24 -78 -42) -78]
Test Case: 405 | Input/Output: [(-69 -25 12 -21) -69]
Test Case: 406 | Input/Output: [(37 99 -35 56) -35]
Test Case: 407 | Input/Output: [(-52 -53 -53 97) -53]
Test Case: 408 | Input/Output: [(-94 35 58 8) -94]
Test Case: 409 | Input/Output: [(7 -4 91 1) -4]
Test Case: 410 | Input/Output: [(-79 -8 8 13) -79]
Test Case: 411 | Input/Output: [(13 33 -32 94) -32]
Test Case: 412 | Input/Output: [(-40 -21 -63 100) -63]
Test Case: 413 | Input/Output: [(-85 -90 -52 22) -90]
Test Case: 414 | Input/Output: [(-72 -49 -63 81) -72]
Test Case: 415 | Input/Output: [(60 100 -54 -8) -54]
Test Case: 416 | Input/Output: [(23 -5 29 -37) -37]
Test Case: 417 | Input/Output: [(59 17 95 -73) -73]
Test Case: 418 | Input/Output: [(30 -40 -90 51) -90]
Test Case: 419 | Input/Output: [(90 89 -44 13) -44]
Test Case: 420 | Input/Output: [(-51 -40 -34 76) -51]
Test Case: 421 | Input/Output: [(-25 53 65 65) -25]
Test Case: 422 | Input/Output: [(7 67 -47 2) -47]
Test Case: 423 | Input/Output: [(89 -63 19 -73) -73]
Test Case: 424 | Input/Output: [(-65 -69 -64 -34) -69]
Test Case: 425 | Input/Output: [(-91 -59 -92 20) -92]
Test Case: 426 | Input/Output: [(-26 -44 -7 -100) -100]
Test Case: 427 | Input/Output: [(-2 25 -33 -87) -87]
Test Case: 428 | Input/Output: [(-67 -31 57 -45) -67]
Test Case: 429 | Input/Output: [(28 86 -99 -35) -99]
Test Case: 430 | Input/Output: [(36 -36 25 26) -36]
Test Case: 431 | Input/Output: [(22 -16 58 66) -16]
Test Case: 432 | Input/Output: [(-93 -97 -70 -24) -97]
Test Case: 433 | Input/Output: [(-39 -100 45 -61) -100]
Test Case: 434 | Input/Output: [(6 56 -40 -1) -40]
Test Case: 435 | Input/Output: [(-91 -35 -21 26) -91]
Test Case: 436 | Input/Output: [(-81 81 49 64) -81]
Test Case: 437 | Input/Output: [(23 -41 5 -27) -41]
Test Case: 438 | Input/Output: [(83 13 -42 64) -42]
Test Case: 439 | Input/Output: [(89 -3 8 -78) -78]
Test Case: 440 | Input/Output: [(12 -92 39 -48) -92]
Test Case: 441 | Input/Output: [(59 21 -25 19) -25]
Test Case: 442 | Input/Output: [(18 67 84 -81) -81]
Test Case: 443 | Input/Output: [(64 -32 55 32) -32]
Test Case: 444 | Input/Output: [(-67 54 -69 95) -69]
Test Case: 445 | Input/Output: [(-9 -13 81 32) -13]
Test Case: 446 | Input/Output: [(-62 80 66 -16) -62]
Test Case: 447 | Input/Output: [(-23 2 -50 -50) -50]
Test Case: 448 | Input/Output: [(-59 -4 21 10) -59]
Test Case: 449 | Input/Output: [(75 -81 -11 -53) -81]
Test Case: 450 | Input/Output: [(-97 37 -5 13) -97]
Test Case: 451 | Input/Output: [(17 47 30 -24) -24]
Test Case: 452 | Input/Output: [(76 -70 88 -23) -70]
Test Case: 453 | Input/Output: [(100 -36 -35 -76) -76]
Test Case: 454 | Input/Output: [(59 67 -40 4) -40]
Test Case: 455 | Input/Output: [(7 10 70 -57) -57]
Test Case: 456 | Input/Output: [(-65 46 24 -72) -72]
Test Case: 457 | Input/Output: [(4 -51 -41 88) -51]
Test Case: 458 | Input/Output: [(73 88 -9 13) -9]
Test Case: 459 | Input/Output: [(9 24 61 95) 9]
Test Case: 460 | Input/Output: [(-87 13 -95 -36) -95]
Test Case: 461 | Input/Output: [(-8 83 23 -41) -41]
Test Case: 462 | Input/Output: [(85 -73 41 -70) -73]
Test Case: 463 | Input/Output: [(-14 -59 12 100) -59]
Test Case: 464 | Input/Output: [(-46 -41 55 48) -46]
Test Case: 465 | Input/Output: [(-50 18 -43 1) -50]
Test Case: 466 | Input/Output: [(66 88 17 93) 17]
Test Case: 467 | Input/Output: [(95 -6 -46 -23) -46]
Test Case: 468 | Input/Output: [(2 30 -37 45) -37]
Test Case: 469 | Input/Output: [(4 80 3 81) 3]
Test Case: 470 | Input/Output: [(71 40 -87 -48) -87]
Test Case: 471 | Input/Output: [(-55 16 2 -81) -81]
Test Case: 472 | Input/Output: [(91 -51 67 60) -51]
Test Case: 473 | Input/Output: [(-27 58 73 12) -27]
Test Case: 474 | Input/Output: [(59 32 88 21) 21]
Test Case: 475 | Input/Output: [(-65 -94 -76 -38) -94]
Test Case: 476 | Input/Output: [(89 7 -4 0) -4]
Test Case: 477 | Input/Output: [(74 -97 29 -5) -97]
Test Case: 478 | Input/Output: [(60 -48 -79 -63) -79]
Test Case: 479 | Input/Output: [(86 -57 -11 -72) -72]
Test Case: 480 | Input/Output: [(-1 -83 60 -4) -83]
Test Case: 481 | Input/Output: [(64 24 -41 -24) -41]
Test Case: 482 | Input/Output: [(14 -34 -85 86) -85]
Test Case: 483 | Input/Output: [(86 -76 -96 -23) -96]
Test Case: 484 | Input/Output: [(-87 36 72 -35) -87]
Test Case: 485 | Input/Output: [(57 5 41 24) 5]
Test Case: 486 | Input/Output: [(-84 13 45 -93) -93]
Test Case: 487 | Input/Output: [(31 83 -17 -6) -17]
Test Case: 488 | Input/Output: [(23 5 88 79) 5]
Test Case: 489 | Input/Output: [(-60 -80 -99 -41) -99]
Test Case: 490 | Input/Output: [(-25 -14 -85 -86) -86]
Test Case: 491 | Input/Output: [(61 -72 -85 26) -85]
Test Case: 492 | Input/Output: [(-67 -90 -15 -92) -92]
Test Case: 493 | Input/Output: [(92 69 -18 -30) -30]
Test Case: 494 | Input/Output: [(-61 -6 94 -39) -61]
Test Case: 495 | Input/Output: [(-91 -20 -56 -41) -91]
Test Case: 496 | Input/Output: [(56 -45 54 -30) -45]
Test Case: 497 | Input/Output: [(-15 -29 84 -79) -79]
Test Case: 498 | Input/Output: [(84 -43 25 90) -43]
Test Case: 499 | Input/Output: [(42 1 83 -100) -100]
Test Case: 500 | Input/Output: [(61 -61 -60 73) -61]
Test Case: 501 | Input/Output: [(-60 99 -99 98) -99]
Test Case: 502 | Input/Output: [(70 87 -72 -49) -72]
Test Case: 503 | Input/Output: [(-17 -15 22 8) -17]
Test Case: 504 | Input/Output: [(29 -21 -52 47) -52]
Test Case: 505 | Input/Output: [(-79 62 -45 24) -79]
Test Case: 506 | Input/Output: [(48 16 27 100) 16]
Test Case: 507 | Input/Output: [(-69 -83 -56 -79) -83]
Test Case: 508 | Input/Output: [(-20 -55 -2 -71) -71]
Test Case: 509 | Input/Output: [(23 -7 -25 -47) -47]
Test Case: 510 | Input/Output: [(56 -87 -94 40) -94]
Test Case: 511 | Input/Output: [(73 32 48 27) 27]
Test Case: 512 | Input/Output: [(53 -90 -98 2) -98]
Test Case: 513 | Input/Output: [(-89 5 -68 -87) -89]
Test Case: 514 | Input/Output: [(-78 67 63 79) -78]
Test Case: 515 | Input/Output: [(-98 8 -32 30) -98]
Test Case: 516 | Input/Output: [(65 -99 39 -92) -99]
Test Case: 517 | Input/Output: [(-68 89 55 3) -68]
Test Case: 518 | Input/Output: [(84 7 -16 -64) -64]
Test Case: 519 | Input/Output: [(-76 20 -3 26) -76]
Test Case: 520 | Input/Output: [(-82 5 -96 64) -96]
Test Case: 521 | Input/Output: [(7 3 -22 41) -22]
Test Case: 522 | Input/Output: [(93 34 25 -26) -26]
Test Case: 523 | Input/Output: [(-79 69 15 78) -79]
Test Case: 524 | Input/Output: [(-52 21 85 -18) -52]
Test Case: 525 | Input/Output: [(61 -75 39 -34) -75]
Test Case: 526 | Input/Output: [(-74 -8 -8 -72) -74]
Test Case: 527 | Input/Output: [(91 70 -91 15) -91]
Test Case: 528 | Input/Output: [(-4 95 56 -45) -45]
Test Case: 529 | Input/Output: [(-79 -17 35 -38) -79]
Test Case: 530 | Input/Output: [(-5 -72 -42 -82) -82]
Test Case: 531 | Input/Output: [(-95 7 39 -12) -95]
Test Case: 532 | Input/Output: [(84 64 -96 -60) -96]
Test Case: 533 | Input/Output: [(-54 -90 75 -84) -90]
Test Case: 534 | Input/Output: [(-25 -2 82 -22) -25]
Test Case: 535 | Input/Output: [(-33 88 98 20) -33]
Test Case: 536 | Input/Output: [(-91 72 90 -87) -91]
Test Case: 537 | Input/Output: [(26 96 47 64) 26]
Test Case: 538 | Input/Output: [(48 -14 -46 3) -46]
Test Case: 539 | Input/Output: [(53 -91 -38 69) -91]
Test Case: 540 | Input/Output: [(-13 -66 -28 -7) -66]
Test Case: 541 | Input/Output: [(74 -40 -57 29) -57]
Test Case: 542 | Input/Output: [(31 -47 -25 -67) -67]
Test Case: 543 | Input/Output: [(35 69 -31 -69) -69]
Test Case: 544 | Input/Output: [(-28 -15 0 -96) -96]
Test Case: 545 | Input/Output: [(-47 29 24 -55) -55]
Test Case: 546 | Input/Output: [(51 -43 -63 39) -63]
Test Case: 547 | Input/Output: [(40 70 42 -71) -71]
Test Case: 548 | Input/Output: [(44 -5 46 -88) -88]
Test Case: 549 | Input/Output: [(-99 -84 -16 -94) -99]
Test Case: 550 | Input/Output: [(-35 -1 44 97) -35]
Test Case: 551 | Input/Output: [(85 -91 42 12) -91]
Test Case: 552 | Input/Output: [(78 -76 8 -92) -92]
Test Case: 553 | Input/Output: [(-75 -59 -52 -36) -75]
Test Case: 554 | Input/Output: [(-43 2 -96 -64) -96]
Test Case: 555 | Input/Output: [(88 -64 23 60) -64]
Test Case: 556 | Input/Output: [(-17 45 55 90) -17]
Test Case: 557 | Input/Output: [(-34 47 2 -82) -82]
Test Case: 558 | Input/Output: [(24 -36 43 -16) -36]
Test Case: 559 | Input/Output: [(-16 72 38 50) -16]
Test Case: 560 | Input/Output: [(58 -42 88 20) -42]
Test Case: 561 | Input/Output: [(84 -94 52 13) -94]
Test Case: 562 | Input/Output: [(41 92 52 44) 41]
Test Case: 563 | Input/Output: [(10 0 -27 -51) -51]
Test Case: 564 | Input/Output: [(85 -96 -97 -37) -97]
Test Case: 565 | Input/Output: [(70 -77 -36 -87) -87]
Test Case: 566 | Input/Output: [(-56 72 -17 100) -56]
Test Case: 567 | Input/Output: [(-3 35 36 -37) -37]
Test Case: 568 | Input/Output: [(-57 57 -14 -64) -64]
Test Case: 569 | Input/Output: [(79 -67 17 70) -67]
Test Case: 570 | Input/Output: [(73 -67 -85 3) -85]
Test Case: 571 | Input/Output: [(-8 13 70 -88) -88]
Test Case: 572 | Input/Output: [(-41 84 9 -72) -72]
Test Case: 573 | Input/Output: [(80 13 -49 -50) -50]
Test Case: 574 | Input/Output: [(51 15 85 62) 15]
Test Case: 575 | Input/Output: [(29 27 -99 -74) -99]
Test Case: 576 | Input/Output: [(-92 -13 9 -52) -92]
Test Case: 577 | Input/Output: [(-18 -70 -19 3) -70]
Test Case: 578 | Input/Output: [(-42 97 11 53) -42]
Test Case: 579 | Input/Output: [(26 53 12 -51) -51]
Test Case: 580 | Input/Output: [(19 -75 67 24) -75]
Test Case: 581 | Input/Output: [(-5 90 77 -46) -46]
Test Case: 582 | Input/Output: [(-63 -14 21 36) -63]
Test Case: 583 | Input/Output: [(50 8 57 8) 8]
Test Case: 584 | Input/Output: [(20 -7 64 9) -7]
Test Case: 585 | Input/Output: [(-56 22 -80 -22) -80]
Test Case: 586 | Input/Output: [(61 -93 52 75) -93]
Test Case: 587 | Input/Output: [(-86 -9 66 93) -86]
Test Case: 588 | Input/Output: [(32 79 38 94) 32]
Test Case: 589 | Input/Output: [(-47 74 75 -41) -47]
Test Case: 590 | Input/Output: [(62 -3 -16 -47) -47]
Test Case: 591 | Input/Output: [(-23 -95 86 -97) -97]
Test Case: 592 | Input/Output: [(-80 27 -26 -56) -80]
Test Case: 593 | Input/Output: [(-78 82 60 -58) -78]
Test Case: 594 | Input/Output: [(-50 22 1 37) -50]
Test Case: 595 | Input/Output: [(-58 -66 -9 -51) -66]
Test Case: 596 | Input/Output: [(-41 89 91 98) -41]
Test Case: 597 | Input/Output: [(79 43 66 87) 43]
Test Case: 598 | Input/Output: [(41 -33 -71 -90) -90]
Test Case: 599 | Input/Output: [(61 38 92 93) 38]
Test Case: 600 | Input/Output: [(-28 61 -6 -97) -97]
Test Case: 601 | Input/Output: [(1 -72 92 -54) -72]
Test Case: 602 | Input/Output: [(96 64 63 93) 63]
Test Case: 603 | Input/Output: [(-39 -4 -3 -55) -55]
Test Case: 604 | Input/Output: [(-73 -67 -90 91) -90]
Test Case: 605 | Input/Output: [(40 11 89 -9) -9]
Test Case: 606 | Input/Output: [(75 37 51 20) 20]
Test Case: 607 | Input/Output: [(30 50 25 60) 25]
Test Case: 608 | Input/Output: [(8 -53 15 -45) -53]
Test Case: 609 | Input/Output: [(-60 29 84 -54) -60]
Test Case: 610 | Input/Output: [(81 -36 -85 87) -85]
Test Case: 611 | Input/Output: [(58 -84 -22 -52) -84]
Test Case: 612 | Input/Output: [(60 -43 88 -81) -81]
Test Case: 613 | Input/Output: [(-95 15 -68 31) -95]
Test Case: 614 | Input/Output: [(-26 85 39 96) -26]
Test Case: 615 | Input/Output: [(71 -20 -75 90) -75]
Test Case: 616 | Input/Output: [(-17 -85 61 39) -85]
Test Case: 617 | Input/Output: [(-56 -78 81 -40) -78]
Test Case: 618 | Input/Output: [(-71 12 4 76) -71]
Test Case: 619 | Input/Output: [(40 41 -50 84) -50]
Test Case: 620 | Input/Output: [(22 85 -77 15) -77]
Test Case: 621 | Input/Output: [(-94 38 99 65) -94]
Test Case: 622 | Input/Output: [(-90 -48 21 49) -90]
Test Case: 623 | Input/Output: [(-32 -59 4 11) -59]
Test Case: 624 | Input/Output: [(-84 -36 -42 -39) -84]
Test Case: 625 | Input/Output: [(-63 -66 -74 30) -74]
Test Case: 626 | Input/Output: [(96 28 2 -23) -23]
Test Case: 627 | Input/Output: [(94 -2 75 -24) -24]
Test Case: 628 | Input/Output: [(22 26 49 9) 9]
Test Case: 629 | Input/Output: [(-69 -45 96 -34) -69]
Test Case: 630 | Input/Output: [(-8 -32 95 -63) -63]
Test Case: 631 | Input/Output: [(-48 -88 86 -42) -88]
Test Case: 632 | Input/Output: [(-9 62 -37 -51) -51]
Test Case: 633 | Input/Output: [(68 -43 3 -82) -82]
Test Case: 634 | Input/Output: [(36 79 100 -68) -68]
Test Case: 635 | Input/Output: [(68 58 -75 -11) -75]
Test Case: 636 | Input/Output: [(69 57 -59 -57) -59]
Test Case: 637 | Input/Output: [(-49 -77 48 -86) -86]
Test Case: 638 | Input/Output: [(-40 65 -10 32) -40]
Test Case: 639 | Input/Output: [(82 -72 21 99) -72]
Test Case: 640 | Input/Output: [(49 39 -12 -67) -67]
Test Case: 641 | Input/Output: [(51 -39 -18 85) -39]
Test Case: 642 | Input/Output: [(-5 21 16 57) -5]
Test Case: 643 | Input/Output: [(-17 -43 -57 -63) -63]
Test Case: 644 | Input/Output: [(55 71 -45 -39) -45]
Test Case: 645 | Input/Output: [(89 64 -10 -43) -43]
Test Case: 646 | Input/Output: [(36 39 62 5) 5]
Test Case: 647 | Input/Output: [(-90 -35 71 7) -90]
Test Case: 648 | Input/Output: [(36 -1 60 44) -1]
Test Case: 649 | Input/Output: [(-17 14 36 55) -17]
Test Case: 650 | Input/Output: [(8 0 38 -79) -79]
Test Case: 651 | Input/Output: [(-19 17 -22 -69) -69]
Test Case: 652 | Input/Output: [(-76 -67 -83 -77) -83]
Test Case: 653 | Input/Output: [(11 50 -45 -63) -63]
Test Case: 654 | Input/Output: [(46 18 -40 -85) -85]
Test Case: 655 | Input/Output: [(34 -43 28 -68) -68]
Test Case: 656 | Input/Output: [(28 40 56 45) 28]
Test Case: 657 | Input/Output: [(4 38 4 80) 4]
Test Case: 658 | Input/Output: [(-46 -57 -63 -28) -63]
Test Case: 659 | Input/Output: [(91 -19 67 -73) -73]
Test Case: 660 | Input/Output: [(-53 42 -46 66) -53]
Test Case: 661 | Input/Output: [(71 29 15 16) 15]
Test Case: 662 | Input/Output: [(-97 82 -3 94) -97]
Test Case: 663 | Input/Output: [(-90 -90 -52 -87) -90]
Test Case: 664 | Input/Output: [(-20 26 -79 -18) -79]
Test Case: 665 | Input/Output: [(-92 -34 -18 54) -92]
Test Case: 666 | Input/Output: [(-7 -9 -2 -80) -80]
Test Case: 667 | Input/Output: [(-38 -80 -58 -72) -80]
Test Case: 668 | Input/Output: [(-84 -72 -42 51) -84]
Test Case: 669 | Input/Output: [(61 66 79 17) 17]
Test Case: 670 | Input/Output: [(40 60 -39 26) -39]
Test Case: 671 | Input/Output: [(-83 75 -29 -92) -92]
Test Case: 672 | Input/Output: [(41 -7 -95 -40) -95]
Test Case: 673 | Input/Output: [(-65 14 3 2) -65]
Test Case: 674 | Input/Output: [(-31 94 5 19) -31]
Test Case: 675 | Input/Output: [(67 79 95 76) 67]
Test Case: 676 | Input/Output: [(-59 80 -25 39) -59]
Test Case: 677 | Input/Output: [(75 32 -68 94) -68]
Test Case: 678 | Input/Output: [(8 -33 64 -16) -33]
Test Case: 679 | Input/Output: [(23 -97 -40 -38) -97]
Test Case: 680 | Input/Output: [(1 -65 -41 -81) -81]
Test Case: 681 | Input/Output: [(-28 27 32 -85) -85]
Test Case: 682 | Input/Output: [(66 -94 68 91) -94]
Test Case: 683 | Input/Output: [(37 -15 -35 22) -35]
Test Case: 684 | Input/Output: [(-35 -14 -69 3) -69]
Test Case: 685 | Input/Output: [(-89 67 -6 23) -89]
Test Case: 686 | Input/Output: [(61 -97 56 -14) -97]
Test Case: 687 | Input/Output: [(34 -31 80 58) -31]
Test Case: 688 | Input/Output: [(22 -27 47 35) -27]
Test Case: 689 | Input/Output: [(-86 68 -90 67) -90]
Test Case: 690 | Input/Output: [(70 21 98 -48) -48]
Test Case: 691 | Input/Output: [(-84 -81 27 12) -84]
Test Case: 692 | Input/Output: [(65 -64 -47 -74) -74]
Test Case: 693 | Input/Output: [(-22 42 70 13) -22]
Test Case: 694 | Input/Output: [(29 36 -2 -14) -14]
Test Case: 695 | Input/Output: [(49 55 -69 42) -69]
Test Case: 696 | Input/Output: [(58 -58 -44 -82) -82]
Test Case: 697 | Input/Output: [(8 -52 -93 -87) -93]
Test Case: 698 | Input/Output: [(-96 -67 12 58) -96]
Test Case: 699 | Input/Output: [(26 -13 -38 -47) -47]
Test Case: 700 | Input/Output: [(60 98 92 96) 60]
Test Case: 701 | Input/Output: [(0 -20 92 15) -20]
Test Case: 702 | Input/Output: [(47 5 97 -61) -61]
Test Case: 703 | Input/Output: [(33 40 -75 -24) -75]
Test Case: 704 | Input/Output: [(-86 14 8 -63) -86]
Test Case: 705 | Input/Output: [(-30 12 70 14) -30]
Test Case: 706 | Input/Output: [(-23 -23 -84 16) -84]
Test Case: 707 | Input/Output: [(-53 -76 54 -44) -76]
Test Case: 708 | Input/Output: [(80 36 -62 -64) -64]
Test Case: 709 | Input/Output: [(73 -66 -16 32) -66]
Test Case: 710 | Input/Output: [(-11 -68 -93 -78) -93]
Test Case: 711 | Input/Output: [(-3 75 -64 -17) -64]
Test Case: 712 | Input/Output: [(-36 97 18 92) -36]
Test Case: 713 | Input/Output: [(-17 60 0 56) -17]
Test Case: 714 | Input/Output: [(-59 89 3 -18) -59]
Test Case: 715 | Input/Output: [(4 -30 -81 1) -81]
Test Case: 716 | Input/Output: [(-12 -80 -41 36) -80]
Test Case: 717 | Input/Output: [(26 67 -46 -36) -46]
Test Case: 718 | Input/Output: [(-49 49 -97 78) -97]
Test Case: 719 | Input/Output: [(-25 68 30 -80) -80]
Test Case: 720 | Input/Output: [(34 -18 -60 71) -60]
Test Case: 721 | Input/Output: [(37 -58 24 38) -58]
Test Case: 722 | Input/Output: [(-57 38 -30 21) -57]
Test Case: 723 | Input/Output: [(-23 -41 90 20) -41]
Test Case: 724 | Input/Output: [(-75 38 -98 -24) -98]
Test Case: 725 | Input/Output: [(-35 -67 -42 -66) -67]
Test Case: 726 | Input/Output: [(-8 -46 -42 -49) -49]
Test Case: 727 | Input/Output: [(-34 63 -58 -2) -58]
Test Case: 728 | Input/Output: [(8 -83 59 55) -83]
Test Case: 729 | Input/Output: [(-35 84 15 9) -35]
Test Case: 730 | Input/Output: [(-21 4 -75 -91) -91]
Test Case: 731 | Input/Output: [(61 63 71 61) 61]
Test Case: 732 | Input/Output: [(85 -28 90 -62) -62]
Test Case: 733 | Input/Output: [(91 65 -20 -47) -47]
Test Case: 734 | Input/Output: [(-52 -32 67 -93) -93]
Test Case: 735 | Input/Output: [(-53 100 17 38) -53]
Test Case: 736 | Input/Output: [(37 19 96 77) 19]
Test Case: 737 | Input/Output: [(32 14 -14 -99) -99]
Test Case: 738 | Input/Output: [(71 -9 -12 87) -12]
Test Case: 739 | Input/Output: [(88 -40 -40 63) -40]
Test Case: 740 | Input/Output: [(-78 -83 -94 -56) -94]
Test Case: 741 | Input/Output: [(12 65 -34 -11) -34]
Test Case: 742 | Input/Output: [(92 -75 -76 -80) -80]
Test Case: 743 | Input/Output: [(46 -43 -9 -46) -46]
Test Case: 744 | Input/Output: [(78 -23 38 81) -23]
Test Case: 745 | Input/Output: [(76 -54 -77 89) -77]
Test Case: 746 | Input/Output: [(7 32 35 -33) -33]
Test Case: 747 | Input/Output: [(60 13 27 -11) -11]
Test Case: 748 | Input/Output: [(-13 32 87 35) -13]
Test Case: 749 | Input/Output: [(5 -33 -87 93) -87]
Test Case: 750 | Input/Output: [(68 53 -68 -86) -86]
Test Case: 751 | Input/Output: [(50 -90 -17 -8) -90]
Test Case: 752 | Input/Output: [(93 88 -81 -66) -81]
Test Case: 753 | Input/Output: [(3 82 -15 98) -15]
Test Case: 754 | Input/Output: [(-70 -91 21 -16) -91]
Test Case: 755 | Input/Output: [(29 -5 5 89) -5]
Test Case: 756 | Input/Output: [(74 81 -2 77) -2]
Test Case: 757 | Input/Output: [(61 -73 47 -98) -98]
Test Case: 758 | Input/Output: [(48 9 30 -22) -22]
Test Case: 759 | Input/Output: [(-98 -19 -80 -65) -98]
Test Case: 760 | Input/Output: [(28 -22 -74 -30) -74]
Test Case: 761 | Input/Output: [(14 -56 88 -5) -56]
Test Case: 762 | Input/Output: [(-22 44 74 95) -22]
Test Case: 763 | Input/Output: [(73 82 -28 -51) -51]
Test Case: 764 | Input/Output: [(7 -27 -95 91) -95]
Test Case: 765 | Input/Output: [(24 69 -5 80) -5]
Test Case: 766 | Input/Output: [(98 -69 10 -56) -69]
Test Case: 767 | Input/Output: [(-80 38 -63 -3) -80]
Test Case: 768 | Input/Output: [(10 8 -28 34) -28]
Test Case: 769 | Input/Output: [(-42 87 69 -93) -93]
Test Case: 770 | Input/Output: [(50 -62 95 18) -62]
Test Case: 771 | Input/Output: [(56 16 -31 82) -31]
Test Case: 772 | Input/Output: [(93 -3 -36 78) -36]
Test Case: 773 | Input/Output: [(36 58 22 -20) -20]
Test Case: 774 | Input/Output: [(79 79 -73 6) -73]
Test Case: 775 | Input/Output: [(-97 -84 27 2) -97]
Test Case: 776 | Input/Output: [(-82 53 38 -74) -82]
Test Case: 777 | Input/Output: [(93 -73 4 88) -73]
Test Case: 778 | Input/Output: [(26 27 -9 75) -9]
Test Case: 779 | Input/Output: [(-50 -82 -54 -6) -82]
Test Case: 780 | Input/Output: [(-49 12 83 -90) -90]
Test Case: 781 | Input/Output: [(-70 -99 62 69) -99]
Test Case: 782 | Input/Output: [(-37 -85 -22 62) -85]
Test Case: 783 | Input/Output: [(22 90 29 78) 22]
Test Case: 784 | Input/Output: [(41 29 -85 27) -85]
Test Case: 785 | Input/Output: [(82 -88 -41 74) -88]
Test Case: 786 | Input/Output: [(-85 -41 7 -31) -85]
Test Case: 787 | Input/Output: [(92 -35 -51 -50) -51]
Test Case: 788 | Input/Output: [(70 94 -99 92) -99]
Test Case: 789 | Input/Output: [(-65 12 3 73) -65]
Test Case: 790 | Input/Output: [(21 43 87 23) 21]
Test Case: 791 | Input/Output: [(39 -72 75 -11) -72]
Test Case: 792 | Input/Output: [(-15 -6 24 60) -15]
Test Case: 793 | Input/Output: [(66 74 -10 28) -10]
Test Case: 794 | Input/Output: [(77 68 -3 49) -3]
Test Case: 795 | Input/Output: [(-48 -56 -36 77) -56]
Test Case: 796 | Input/Output: [(80 -65 41 -17) -65]
Test Case: 797 | Input/Output: [(-86 -64 -26 85) -86]
Test Case: 798 | Input/Output: [(99 -47 29 -2) -47]
Test Case: 799 | Input/Output: [(-3 -86 46 9) -86]
Test Case: 800 | Input/Output: [(17 -72 -92 -47) -92]
Test Case: 801 | Input/Output: [(62 52 83 68) 52]
Test Case: 802 | Input/Output: [(-41 -68 -100 99) -100]
Test Case: 803 | Input/Output: [(20 -65 89 -40) -65]
Test Case: 804 | Input/Output: [(5 -69 -41 -82) -82]
Test Case: 805 | Input/Output: [(-5 -72 81 -29) -72]
Test Case: 806 | Input/Output: [(83 -89 70 -99) -99]
Test Case: 807 | Input/Output: [(81 9 63 59) 9]
Test Case: 808 | Input/Output: [(11 9 -94 51) -94]
Test Case: 809 | Input/Output: [(-85 -51 -10 5) -85]
Test Case: 810 | Input/Output: [(49 11 -83 -93) -93]
Test Case: 811 | Input/Output: [(-92 2 -33 49) -92]
Test Case: 812 | Input/Output: [(-99 47 100 -54) -99]
Test Case: 813 | Input/Output: [(53 -88 56 20) -88]
Test Case: 814 | Input/Output: [(-43 76 47 44) -43]
Test Case: 815 | Input/Output: [(-33 -14 30 -32) -33]
Test Case: 816 | Input/Output: [(-64 -59 -49 31) -64]
Test Case: 817 | Input/Output: [(-59 -44 -89 10) -89]
Test Case: 818 | Input/Output: [(-58 45 52 28) -58]
Test Case: 819 | Input/Output: [(-48 -49 -36 56) -49]
Test Case: 820 | Input/Output: [(13 10 30 12) 10]
Test Case: 821 | Input/Output: [(97 13 -17 34) -17]
Test Case: 822 | Input/Output: [(-66 -95 -55 -16) -95]
Test Case: 823 | Input/Output: [(-76 15 4 -1) -76]
Test Case: 824 | Input/Output: [(-33 -100 -10 84) -100]
Test Case: 825 | Input/Output: [(51 30 -83 -21) -83]
Test Case: 826 | Input/Output: [(-8 -76 87 -58) -76]
Test Case: 827 | Input/Output: [(-14 44 -38 -41) -41]
Test Case: 828 | Input/Output: [(-76 -2 15 -49) -76]
Test Case: 829 | Input/Output: [(-41 -89 -10 -11) -89]
Test Case: 830 | Input/Output: [(-54 -91 -88 39) -91]
Test Case: 831 | Input/Output: [(2 26 -51 -32) -51]
Test Case: 832 | Input/Output: [(-63 -57 24 -5) -63]
Test Case: 833 | Input/Output: [(-85 23 -44 53) -85]
Test Case: 834 | Input/Output: [(-81 87 40 -90) -90]
Test Case: 835 | Input/Output: [(85 41 10 62) 10]
Test Case: 836 | Input/Output: [(-44 -13 92 -71) -71]
Test Case: 837 | Input/Output: [(20 63 75 67) 20]
Test Case: 838 | Input/Output: [(-53 -61 -32 -59) -61]
Test Case: 839 | Input/Output: [(-70 52 -77 65) -77]
Test Case: 840 | Input/Output: [(-48 26 75 26) -48]
Test Case: 841 | Input/Output: [(-100 27 -89 -83) -100]
Test Case: 842 | Input/Output: [(7 28 -40 85) -40]
Test Case: 843 | Input/Output: [(-51 76 0 82) -51]
Test Case: 844 | Input/Output: [(33 85 14 -25) -25]
Test Case: 845 | Input/Output: [(26 97 -43 95) -43]
Test Case: 846 | Input/Output: [(-89 65 27 -76) -89]
Test Case: 847 | Input/Output: [(-96 -14 6 -63) -96]
Test Case: 848 | Input/Output: [(-88 -14 99 19) -88]
Test Case: 849 | Input/Output: [(-53 92 -71 90) -71]
Test Case: 850 | Input/Output: [(-9 5 -84 11) -84]
Test Case: 851 | Input/Output: [(-56 79 70 82) -56]
Test Case: 852 | Input/Output: [(-69 -29 33 -61) -69]
Test Case: 853 | Input/Output: [(58 -70 8 -18) -70]
Test Case: 854 | Input/Output: [(-62 -13 -96 26) -96]
Test Case: 855 | Input/Output: [(7 46 38 58) 7]
Test Case: 856 | Input/Output: [(61 -82 -35 -18) -82]
Test Case: 857 | Input/Output: [(6 46 -19 -52) -52]
Test Case: 858 | Input/Output: [(-12 -61 26 -61) -61]
Test Case: 859 | Input/Output: [(-72 53 -97 39) -97]
Test Case: 860 | Input/Output: [(-10 -79 -43 10) -79]
Test Case: 861 | Input/Output: [(84 -98 -70 -37) -98]
Test Case: 862 | Input/Output: [(42 12 35 68) 12]
Test Case: 863 | Input/Output: [(73 33 16 -78) -78]
Test Case: 864 | Input/Output: [(82 94 -41 -40) -41]
Test Case: 865 | Input/Output: [(-1 81 -67 -74) -74]
Test Case: 866 | Input/Output: [(1 -46 -91 -4) -91]
Test Case: 867 | Input/Output: [(-44 -98 -34 -50) -98]
Test Case: 868 | Input/Output: [(10 -25 98 30) -25]
Test Case: 869 | Input/Output: [(-90 74 88 -74) -90]
Test Case: 870 | Input/Output: [(-47 -56 56 -66) -66]
Test Case: 871 | Input/Output: [(2 20 -61 -45) -61]
Test Case: 872 | Input/Output: [(-6 43 -81 -43) -81]
Test Case: 873 | Input/Output: [(32 94 -39 69) -39]
Test Case: 874 | Input/Output: [(65 -78 -59 -38) -78]
Test Case: 875 | Input/Output: [(40 3 77 74) 3]
Test Case: 876 | Input/Output: [(12 -34 -2 -61) -61]
Test Case: 877 | Input/Output: [(94 5 -10 -44) -44]
Test Case: 878 | Input/Output: [(55 -56 100 33) -56]
Test Case: 879 | Input/Output: [(-47 -61 76 8) -61]
Test Case: 880 | Input/Output: [(-5 86 -34 8) -34]
Test Case: 881 | Input/Output: [(84 89 -99 -67) -99]
Test Case: 882 | Input/Output: [(-52 41 36 55) -52]
Test Case: 883 | Input/Output: [(-25 -19 39 27) -25]
Test Case: 884 | Input/Output: [(95 -79 73 -82) -82]
Test Case: 885 | Input/Output: [(11 -36 21 -51) -51]
Test Case: 886 | Input/Output: [(53 -54 78 76) -54]
Test Case: 887 | Input/Output: [(-83 -87 14 -45) -87]
Test Case: 888 | Input/Output: [(-47 -4 -27 -77) -77]
Test Case: 889 | Input/Output: [(41 44 -61 81) -61]
Test Case: 890 | Input/Output: [(30 92 19 -62) -62]
Test Case: 891 | Input/Output: [(77 -53 93 91) -53]
Test Case: 892 | Input/Output: [(48 -27 67 -78) -78]
Test Case: 893 | Input/Output: [(-91 -81 41 99) -91]
Test Case: 894 | Input/Output: [(-36 53 -16 -65) -65]
Test Case: 895 | Input/Output: [(-11 -94 -17 1) -94]
Test Case: 896 | Input/Output: [(87 0 -14 -4) -14]
Test Case: 897 | Input/Output: [(3 69 -38 -46) -46]
Test Case: 898 | Input/Output: [(10 58 -12 18) -12]
Test Case: 899 | Input/Output: [(63 1 -81 43) -81]
Test Case: 900 | Input/Output: [(-79 -86 44 99) -86]
Test Case: 901 | Input/Output: [(47 71 58 -46) -46]
Test Case: 902 | Input/Output: [(-99 92 64 96) -99]
Test Case: 903 | Input/Output: [(-39 0 90 75) -39]
Test Case: 904 | Input/Output: [(96 21 -75 -54) -75]
Test Case: 905 | Input/Output: [(-77 51 -58 -95) -95]
Test Case: 906 | Input/Output: [(-100 95 9 91) -100]
Test Case: 907 | Input/Output: [(-26 56 -53 51) -53]
Test Case: 908 | Input/Output: [(2 -62 -40 -98) -98]
Test Case: 909 | Input/Output: [(-73 -83 -83 81) -83]
Test Case: 910 | Input/Output: [(-61 65 -63 -90) -90]
Test Case: 911 | Input/Output: [(88 80 77 84) 77]
Test Case: 912 | Input/Output: [(-48 -46 -50 83) -50]
Test Case: 913 | Input/Output: [(-86 56 65 -32) -86]
Test Case: 914 | Input/Output: [(22 48 92 22) 22]
Test Case: 915 | Input/Output: [(32 34 -36 63) -36]
Test Case: 916 | Input/Output: [(16 66 60 -44) -44]
Test Case: 917 | Input/Output: [(88 -44 96 100) -44]
Test Case: 918 | Input/Output: [(-58 -31 -42 -40) -58]
Test Case: 919 | Input/Output: [(48 56 97 90) 48]
Test Case: 920 | Input/Output: [(83 62 97 -76) -76]
Test Case: 921 | Input/Output: [(51 63 25 -20) -20]
Test Case: 922 | Input/Output: [(-36 -74 -80 -87) -87]
Test Case: 923 | Input/Output: [(-17 -13 13 81) -17]
Test Case: 924 | Input/Output: [(-54 69 18 -5) -54]
Test Case: 925 | Input/Output: [(1 58 59 62) 1]
Test Case: 926 | Input/Output: [(-54 -83 -95 -57) -95]
Test Case: 927 | Input/Output: [(-64 46 -35 57) -64]
Test Case: 928 | Input/Output: [(-94 29 22 -48) -94]
Test Case: 929 | Input/Output: [(-92 95 86 -93) -93]
Test Case: 930 | Input/Output: [(32 -38 6 70) -38]
Test Case: 931 | Input/Output: [(37 -8 -77 69) -77]
Test Case: 932 | Input/Output: [(18 93 49 -12) -12]
Test Case: 933 | Input/Output: [(6 82 -3 -60) -60]
Test Case: 934 | Input/Output: [(-91 -70 67 -64) -91]
Test Case: 935 | Input/Output: [(-96 -65 12 -66) -96]
Test Case: 936 | Input/Output: [(-61 -55 73 -15) -61]
Test Case: 937 | Input/Output: [(50 95 76 83) 50]
Test Case: 938 | Input/Output: [(81 -10 -24 30) -24]
Test Case: 939 | Input/Output: [(-93 -63 -65 39) -93]
Test Case: 940 | Input/Output: [(2 66 18 -71) -71]
Test Case: 941 | Input/Output: [(-86 44 -26 -62) -86]
Test Case: 942 | Input/Output: [(99 79 -33 -68) -68]
Test Case: 943 | Input/Output: [(-53 -32 -36 -79) -79]
Test Case: 944 | Input/Output: [(-11 94 -77 -18) -77]
Test Case: 945 | Input/Output: [(11 -13 -95 49) -95]
Test Case: 946 | Input/Output: [(-70 -68 56 23) -70]
Test Case: 947 | Input/Output: [(-88 14 -76 60) -88]
Test Case: 948 | Input/Output: [(-13 -11 16 -60) -60]
Test Case: 949 | Input/Output: [(48 51 46 80) 46]
Test Case: 950 | Input/Output: [(-56 -91 -77 5) -91]
Test Case: 951 | Input/Output: [(45 -5 56 -50) -50]
Test Case: 952 | Input/Output: [(69 -26 78 -75) -75]
Test Case: 953 | Input/Output: [(100 -47 5 -61) -61]
Test Case: 954 | Input/Output: [(94 33 -17 -54) -54]
Test Case: 955 | Input/Output: [(-74 55 82 -51) -74]
Test Case: 956 | Input/Output: [(-35 -28 2 -23) -35]
Test Case: 957 | Input/Output: [(1 85 86 -5) -5]
Test Case: 958 | Input/Output: [(47 -42 -43 19) -43]
Test Case: 959 | Input/Output: [(-43 -18 21 30) -43]
Test Case: 960 | Input/Output: [(96 -25 -37 6) -37]
Test Case: 961 | Input/Output: [(96 10 -48 -23) -48]
Test Case: 962 | Input/Output: [(-76 -67 -68 39) -76]
Test Case: 963 | Input/Output: [(-71 28 -9 -56) -71]
Test Case: 964 | Input/Output: [(-52 96 47 58) -52]
Test Case: 965 | Input/Output: [(-94 40 34 34) -94]
Test Case: 966 | Input/Output: [(83 -74 -53 59) -74]
Test Case: 967 | Input/Output: [(-38 -6 19 81) -38]
Test Case: 968 | Input/Output: [(-11 20 39 49) -11]
Test Case: 969 | Input/Output: [(-71 37 -83 -85) -85]
Test Case: 970 | Input/Output: [(76 91 -36 93) -36]
Test Case: 971 | Input/Output: [(-97 -8 -12 -57) -97]
Test Case: 972 | Input/Output: [(-21 -76 75 -100) -100]
Test Case: 973 | Input/Output: [(-12 31 48 54) -12]
Test Case: 974 | Input/Output: [(35 -33 -26 -35) -35]
Test Case: 975 | Input/Output: [(40 12 10 37) 10]
Test Case: 976 | Input/Output: [(-1 -40 72 41) -40]
Test Case: 977 | Input/Output: [(-34 9 -21 -51) -51]
Test Case: 978 | Input/Output: [(-29 73 9 -96) -96]
Test Case: 979 | Input/Output: [(49 -58 99 68) -58]
Test Case: 980 | Input/Output: [(-20 64 -36 31) -36]
Test Case: 981 | Input/Output: [(68 48 -7 37) -7]
Test Case: 982 | Input/Output: [(13 9 2 95) 2]
Test Case: 983 | Input/Output: [(-32 28 84 75) -32]
Test Case: 984 | Input/Output: [(-69 -44 -39 58) -69]
Test Case: 985 | Input/Output: [(23 -85 -57 69) -85]
Test Case: 986 | Input/Output: [(-20 -94 -28 93) -94]
Test Case: 987 | Input/Output: [(-44 71 77 -24) -44]
Test Case: 988 | Input/Output: [(-43 65 -82 75) -82]
Test Case: 989 | Input/Output: [(92 11 2 85) 2]
Test Case: 990 | Input/Output: [(-40 91 -81 -94) -94]
Test Case: 991 | Input/Output: [(25 43 -89 -94) -94]
Test Case: 992 | Input/Output: [(76 67 -49 56) -49]
Test Case: 993 | Input/Output: [(39 64 79 -19) -19]
Test Case: 994 | Input/Output: [(16 -55 90 -69) -69]
Test Case: 995 | Input/Output: [(-13 46 -81 -57) -81]
Test Case: 996 | Input/Output: [(-69 -12 -96 87) -96]
Test Case: 997 | Input/Output: [(-5 69 20 11) -5]
Test Case: 998 | Input/Output: [(62 -50 13 70) -50]
Test Case: 999 | Input/Output: [(-30 1 -84 -96) -96]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -79 23 -80 109 -122 -4 -106 -28 -14 -94 75 -2 113 -3 -18 82
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[46 -14 46 46] -14] [[-100 -100 -100 -31] -100] [[-36 -36 -36 -12] -36] [[32 32 32 32] 32] [[-61 7 -61 -61] -61] [[-52 -91 -52 -52] -91] [[-25 -25 59 -25] -25] [[-22 -22 -22 -19] -22] [[-12 29 29 29] -12] [[-33 -33 -33 48] -33] [(18 18 18 18) 18] [(56 56 56 56) 56] [(-69 -69 -69 -69) -69] [(48 48 48 48) 48] [(-94 -94 -94 -94) -94] [(37 73 10 70) 10] [(77 19 37 94) 19] [(22 77 97 15) 15] [(23 57 69 90) 23] [(6 29 90 93) 6] [(65 23 81 22) 22] [(76 27 46 32) 27] [(48 84 30 77) 30] [(76 97 39 39) 39] [(95 67 18 75) 18] [(62 23 43 51) 23] [(100 50 20 14) 14] [(25 13 81 16) 13] [(29 100 69 37) 29] [(74 65 72 49) 49] [(72 32 57 92) 32] [(68 20 78 65) 20] [(37 19 41 56) 19] [(29 3 51 35) 3] [(52 58 17 99) 17] [(31 80 73 -46) -46] [(83 84 36 76) 36] [(9 74 -73 12) -73] [(-43 74 15 -16) -43] [(-20 16 -39 37) -39] [(76 89 86 -3) -3] [(-39 35 65 -88) -88] [(-100 33 -56 -78) -100] [(-65 46 -74 72) -74] [(87 -21 51 36) -21] [(1 -62 69 -88) -88] [(46 25 -81 -89) -89] [(22 4 -51 -30) -51] [(13 78 71 -80) -80] [(-60 -88 -37 -89) -89] [(98 25 -7 -59) -59] [(44 39 -60 35) -60] [(1 55 83 71) 1] [(70 8 -27 97) -27] [(88 -69 100 68) -69] [(0 45 57 -43) -43] [(42 -68 -40 -79) -79] [(-40 19 -78 -74) -78] [(-75 -88 -43 46) -88] [(-36 -87 9 86) -87] [(5 -55 -65 98) -65] [(-62 60 -41 -33) -62] [(63 -6 -70 52) -70] [(-94 -27 -84 -81) -94] [(50 -26 -4 -87) -87] [(56 82 -42 -34) -42] [(-49 -59 -73 -23) -73] [(76 11 49 -7) -7] [(18 -33 -65 27) -65] [(-9 -10 -28 -35) -35] [(-20 31 -26 -13) -26] [(-19 -13 7 -9) -19] [(82 -30 20 5) -30] [(78 0 -93 -38) -93] [(-63 65 89 84) -63] [(-69 -49 -4 20) -69] [(-80 99 64 -58) -80] [(17 25 69 -96) -96] [(10 94 -56 7) -56] [(-14 -58 -39 -84) -84] [(-81 -57 -88 18) -88] [(-55 -82 21 77) -82] [(-100 62 37 82) -100] [(-43 13 83 31) -43] [(-4 69 -50 24) -50] [(-70 77 87 -25) -70] [(79 32 72 -80) -80] [(39 86 58 50) 39] [(74 21 -55 -49) -55] [(-33 56 60 81) -33] [(97 20 -50 -90) -90] [(78 100 2 -88) -88] [(-19 85 88 -96) -96] [(1 -71 19 43) -71] [(-6 23 53 -67) -67])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -52                
Correct output: -25                 | Program output: 59                 
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: 29                 
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 37                 
Correct output: 15                  | Program output: 97                 
Correct output: 23                  | Program output: 69                 
Correct output: 6                   | Program output: 90                 
Correct output: 22                  | Program output: 81                 
Correct output: 27                  | Program output: 46                 
Correct output: 30                  | Program output: 30                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 43                 
Correct output: 14                  | Program output: 20                 
Correct output: 13                  | Program output: 81                 
Correct output: 29                  | Program output: 69                 
Correct output: 49                  | Program output: 72                 
Correct output: 32                  | Program output: 57                 
Correct output: 20                  | Program output: 78                 
Correct output: 19                  | Program output: 41                 
Correct output: 3                   | Program output: 51                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: 73                 
Correct output: 36                  | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -43                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -3                  | Program output: 86                 
Correct output: -88                 | Program output: 65                 
Correct output: -100                | Program output: -56                
Correct output: -74                 | Program output: -74                
Correct output: -21                 | Program output: 51                 
Correct output: -88                 | Program output: 69                 
Correct output: -89                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: 71                 
Correct output: -89                 | Program output: -37                
Correct output: -59                 | Program output: -7                 
Correct output: -60                 | Program output: -60                
Correct output: 1                   | Program output: 83                 
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: 100                
Correct output: -43                 | Program output: 57                 
Correct output: -79                 | Program output: -40                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -43                
Correct output: -87                 | Program output: 9                  
Correct output: -65                 | Program output: -65                
Correct output: -62                 | Program output: -41                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -84                
Correct output: -87                 | Program output: -4                 
Correct output: -42                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -7                  | Program output: 49                 
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -28                
Correct output: -26                 | Program output: -26                
Correct output: -19                 | Program output: 7                  
Correct output: -30                 | Program output: 20                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 89                 
Correct output: -69                 | Program output: -4                 
Correct output: -80                 | Program output: 64                 
Correct output: -96                 | Program output: 69                 
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: 21                 
Correct output: -100                | Program output: 37                 
Correct output: -43                 | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 87                 
Correct output: -80                 | Program output: 72                 
Correct output: 39                  | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -33                 | Program output: 60                 
Correct output: -90                 | Program output: -50                
Correct output: -88                 | Program output: 2                  
Correct output: -96                 | Program output: 88                 
Correct output: -71                 | Program output: 19                 
Correct output: -67                 | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 1, :instruction tagged_705} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Lexicase best program: (boolean_dup integer_gt integer_rot in3 integer_add boolean_rot print_boolean boolean_or integer_rot print_integer integer_add integer_add exec_dup (exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank integer_max tagged_705) boolean_and boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () boolean_not 17)
Lexicase best errors: [0 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 1, :instruction tagged_705} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Zero cases best program: (boolean_dup integer_gt integer_rot in3 integer_add boolean_rot print_boolean boolean_or integer_rot print_integer integer_add integer_add exec_dup (exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank integer_max tagged_705) boolean_and boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () boolean_not 17)
Zero cases best errors: [0 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 8 3 2 2 16 3 16 8 2)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (2 8 3 2 2 16 3 16 8 2)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_shove})
Best program: (exec_do*count (exec_eq exec_stackdepth boolean_yankdup exec_rot () () (exec_y_when_autoconstructing (exec_k_when_autoconstructing () (integer_shove boolean_yankdup exec_dup_items) integer_flush in4 integer_swap exec_k (boolean_or integer_add in3 print_integer exec_swap (integer_lte exec_yank) (exec_pop () integer_shove)) ()))))
Errors: [0 1 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 36
Percent parens: 0.361
--- Population Statistics ---
Average total errors in population: 9.938
Median total errors in population: 10
Error averages by case: (0.998 0.992 0.997 0.998 0.998 0.984 0.997 0.984 0.992 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.047
Average program size in population (points): 70.195
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 478308
--- Timings ---
Current time: 1559583257520 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.8 seconds, 31.5%
Fitness Testing:      1.5 seconds, 64.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -52                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: -12                
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 37                 
Correct output: 19                  | Program output: 77                 
Correct output: 15                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 65                 
Correct output: 27                  | Program output: 76                 
Correct output: 30                  | Program output: 48                 
Correct output: 39                  | Program output: 76                 
Correct output: 18                  | Program output: 95                 
Correct output: 23                  | Program output: 62                 
Correct output: 14                  | Program output: 100                
Correct output: 13                  | Program output: 25                 
Correct output: 29                  | Program output: 29                 
Correct output: 49                  | Program output: 74                 
Correct output: 32                  | Program output: 72                 
Correct output: 20                  | Program output: 68                 
Correct output: 19                  | Program output: 37                 
Correct output: 3                   | Program output: 29                 
Correct output: 17                  | Program output: 52                 
Correct output: -46                 | Program output: 31                 
Correct output: 36                  | Program output: 83                 
Correct output: -73                 | Program output: 9                  
Correct output: -43                 | Program output: -43                
Correct output: -39                 | Program output: -20                
Correct output: -3                  | Program output: 76                 
Correct output: -88                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -65                
Correct output: -21                 | Program output: 87                 
Correct output: -88                 | Program output: 1                  
Correct output: -89                 | Program output: 46                 
Correct output: -51                 | Program output: 22                 
Correct output: -80                 | Program output: 13                 
Correct output: -89                 | Program output: -60                
Correct output: -59                 | Program output: 98                 
Correct output: -60                 | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: -27                 | Program output: 70                 
Correct output: -69                 | Program output: 88                 
Correct output: -43                 | Program output: 0                  
Correct output: -79                 | Program output: 42                 
Correct output: -78                 | Program output: -40                
Correct output: -88                 | Program output: -75                
Correct output: -87                 | Program output: -36                
Correct output: -65                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: 50                 
Correct output: -42                 | Program output: 56                 
Correct output: -73                 | Program output: -49                
Correct output: -7                  | Program output: 76                 
Correct output: -65                 | Program output: 18                 
Correct output: -35                 | Program output: -9                 
Correct output: -26                 | Program output: -20                
Correct output: -19                 | Program output: -19                
Correct output: -30                 | Program output: 82                 
Correct output: -93                 | Program output: 78                 
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: 17                 
Correct output: -56                 | Program output: 10                 
Correct output: -84                 | Program output: -14                
Correct output: -88                 | Program output: -81                
Correct output: -82                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -4                 
Correct output: -70                 | Program output: -70                
Correct output: -80                 | Program output: 79                 
Correct output: 39                  | Program output: 39                 
Correct output: -55                 | Program output: 74                 
Correct output: -33                 | Program output: -33                
Correct output: -90                 | Program output: 97                 
Correct output: -88                 | Program output: 78                 
Correct output: -96                 | Program output: -19                
Correct output: -71                 | Program output: 1                  
Correct output: -67                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_172} {:close 0, :instruction tag_boolean_298} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction tagged_695} {:close 1, :instruction exec_do*count} {:close 1, :instruction 64} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline})
Lexicase best program: (integer_sub in1 boolean_or integer_empty exec_y_when_autoconstructing (boolean_frominteger boolean_yankdup integer_shove integer_dup_times) boolean_invert_second_then_and boolean_flush integer_swap tagged_172 tag_boolean_298 integer_dup_times integer_yankdup exec_noop exec_shove (print_integer in1) print_integer boolean_flush exec_rot (integer_yank) (exec_while () exec_dup_items) (integer_add integer_sub in1) exec_do*count (exec_do*while (in3 boolean_dup boolean_dup exec_while (boolean_or boolean_not) boolean_pop) print_boolean integer_yank boolean_shove exec_pop (in1) integer_empty integer_stackdepth exec_while (exec_y (boolean_yank integer_stackdepth exec_swap (exec_eq print_newline integer_mult exec_while ()) (exec_do*range () in2 boolean_flush exec_y_when_autoconstructing (exec_yankdup) tagged_695 exec_do*count () 64) integer_gte print_newline boolean_and integer_dup_times) boolean_empty exec_yank exec_dup (exec_empty exec_dup_times () boolean_stackdepth exec_flush integer_gte print_exec (print_newline)))))
Lexicase best errors: [1 0 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 98
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_172} {:close 0, :instruction tag_boolean_298} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_while} {:close 1, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction tagged_695} {:close 1, :instruction exec_do*count} {:close 1, :instruction 64} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline})
Zero cases best program: (integer_sub in1 boolean_or integer_empty exec_y_when_autoconstructing (boolean_frominteger boolean_yankdup integer_shove integer_dup_times) boolean_invert_second_then_and boolean_flush integer_swap tagged_172 tag_boolean_298 integer_dup_times integer_yankdup exec_noop exec_shove (print_integer in1) print_integer boolean_flush exec_rot (integer_yank) (exec_while () exec_dup_items) (integer_add integer_sub in1) exec_do*count (exec_do*while (in3 boolean_dup boolean_dup exec_while (boolean_or boolean_not) boolean_pop) print_boolean integer_yank boolean_shove exec_pop (in1) integer_empty integer_stackdepth exec_while (exec_y (boolean_yank integer_stackdepth exec_swap (exec_eq print_newline integer_mult exec_while ()) (exec_do*range () in2 boolean_flush exec_y_when_autoconstructing (exec_yankdup) tagged_695 exec_do*count () 64) integer_gte print_newline boolean_and integer_dup_times) boolean_empty exec_yank exec_dup (exec_empty exec_dup_times () boolean_stackdepth exec_flush integer_gte print_exec (print_newline)))))
Zero cases best errors: [1 0 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 98
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (80 531 85 450 80 88 86 620 449 260)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (80 531 85 450 80 88 86 620 449 260)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_172} {:close 0, :instruction tag_boolean_298} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_while} {:close 1, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction tagged_695} {:close 1, :instruction exec_do*count} {:close 1, :instruction 64} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction print_newline})
Best program: (integer_sub in1 boolean_or integer_empty exec_y_when_autoconstructing (boolean_frominteger boolean_yankdup integer_shove integer_dup_times) boolean_invert_second_then_and boolean_flush integer_swap tagged_172 tag_boolean_298 integer_dup_times integer_yankdup exec_noop exec_shove (print_integer in1) print_integer boolean_flush exec_rot (integer_yank) (exec_while () exec_dup_items) (integer_add integer_sub in1) exec_do*count (exec_do*while (in3 boolean_dup boolean_dup exec_while (boolean_or boolean_not) boolean_pop) print_boolean integer_yank boolean_shove exec_pop (in1) integer_empty integer_stackdepth exec_while (exec_y (boolean_yank integer_stackdepth exec_swap (exec_eq print_newline boolean_frominteger exec_while ()) (exec_do*range () in2 boolean_flush exec_y_when_autoconstructing (exec_yankdup) tagged_695 exec_do*count () 64) integer_gte exec_when (boolean_and integer_dup_times) boolean_empty exec_yank exec_dup (exec_empty exec_dup_times () boolean_stackdepth exec_flush integer_gte print_newline print_newline)))))
Errors: [1 0 0 1 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 76
Size: 98
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 7.271
Median total errors in population: 6
Error averages by case: (0.92 0.469 0.915 0.55 0.92 0.912 0.914 0.38 0.551 0.74)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.905
Average program size in population (points): 64.541
Average percent parens in population: 0.241
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.52
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 165
Genome diversity (% unique genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 992176
--- Timings ---
Current time: 1559583260134 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.3 seconds, 47.6%
Fitness Testing:      2.2 seconds, 43.7%
Report:               0.3 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: 46                 
Correct output: -100                | Program output: -31                
Correct output: -36                 | Program output: -12                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -52                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -19                
Correct output: -12                 | Program output: 29                 
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 37                 
Correct output: 15                  | Program output: 97                 
Correct output: 23                  | Program output: 69                 
Correct output: 6                   | Program output: 90                 
Correct output: 22                  | Program output: 81                 
Correct output: 27                  | Program output: 46                 
Correct output: 30                  | Program output: 30                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 43                 
Correct output: 14                  | Program output: 20                 
Correct output: 13                  | Program output: 81                 
Correct output: 29                  | Program output: 69                 
Correct output: 49                  | Program output: 72                 
Correct output: 32                  | Program output: 57                 
Correct output: 20                  | Program output: 78                 
Correct output: 19                  | Program output: 41                 
Correct output: 3                   | Program output: 51                 
Correct output: 17                  | Program output: 1717               
Correct output: -46                 | Program output: -46                
Correct output: 36                  | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -43                 | Program output: -16                
Correct output: -39                 | Program output: -39                
Correct output: -3                  | Program output: -3                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -21                 | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -51                 | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: 1                   | Program output: 83                 
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -74                
Correct output: -88                 | Program output: -43                
Correct output: -87                 | Program output: 9                  
Correct output: -65                 | Program output: -65                
Correct output: -62                 | Program output: -33                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -34                
Correct output: -73                 | Program output: -23                
Correct output: -7                  | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -26                 | Program output: -13                
Correct output: -19                 | Program output: -9                 
Correct output: -30                 | Program output: 20                 
Correct output: -93                 | Program output: -38                
Correct output: -63                 | Program output: 89                 
Correct output: -69                 | Program output: -4                 
Correct output: -80                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: 21                 
Correct output: -100                | Program output: 37                 
Correct output: -43                 | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 58                 
Correct output: -55                 | Program output: -49                
Correct output: -33                 | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: 19                 
Correct output: -67                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_exec_747} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Lexicase best program: (boolean_dup integer_gt integer_rot in3 integer_add boolean_rot print_boolean boolean_or integer_gte exec_dup () in4 exec_do*times (exec_while () print_integer exec_if () (integer_shove tag_exec_747 () exec_yank boolean_pop integer_min) integer_lt in3 exec_yank exec_yankdup boolean_eq boolean_pop) boolean_pop integer_mult tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () boolean_not 17)
Lexicase best errors: [0 1 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_exec_747} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Zero cases best program: (boolean_dup integer_gt integer_rot in3 integer_add boolean_rot print_boolean boolean_or integer_gte exec_dup () in4 exec_do*times (exec_while () print_integer exec_if () (integer_shove tag_exec_747 () exec_yank boolean_pop integer_min) integer_lt in3 exec_yank exec_yankdup boolean_eq boolean_pop) boolean_pop integer_mult tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () boolean_not 17)
Zero cases best errors: [0 1 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (74 343 74 711 760 126 239 129 73 343)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (74 343 74 711 760 126 239 129 73 343)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_exec_747} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Best program: (boolean_dup integer_gt integer_rot in3 integer_add boolean_rot print_boolean boolean_or integer_gte exec_dup () in4 exec_do*times (exec_while () print_integer exec_if () (integer_shove tag_exec_747 () exec_yank boolean_pop integer_min) integer_lt in3 exec_yank exec_yankdup boolean_eq boolean_pop) boolean_pop integer_mult tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () boolean_not 17)
Errors: [0 1 0 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 52
Size: 63
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 7.128
Median total errors in population: 7
Error averages by case: (0.926 0.657 0.926 0.289 0.24 0.874 0.761 0.871 0.927 0.657)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.814
Average program size in population (points): 73.852
Average percent parens in population: 0.225
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.043
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1508955
--- Timings ---
Current time: 1559583263365 milliseconds
Total Time:           8.0 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.4 seconds, 55.2%
Fitness Testing:      2.8 seconds, 34.4%
Report:               0.7 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -52                
Correct output: -25                 | Program output: 59                 
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: 29                 
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 37                 
Correct output: 15                  | Program output: 97                 
Correct output: 23                  | Program output: 69                 
Correct output: 6                   | Program output: 90                 
Correct output: 22                  | Program output: 81                 
Correct output: 27                  | Program output: 46                 
Correct output: 30                  | Program output: 30                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 43                 
Correct output: 14                  | Program output: 20                 
Correct output: 13                  | Program output: 81                 
Correct output: 29                  | Program output: 69                 
Correct output: 49                  | Program output: 72                 
Correct output: 32                  | Program output: 57                 
Correct output: 20                  | Program output: 78                 
Correct output: 19                  | Program output: 41                 
Correct output: 3                   | Program output: 51                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: 73                 
Correct output: 36                  | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -43                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -3                  | Program output: 86                 
Correct output: -88                 | Program output: 65                 
Correct output: -100                | Program output: -56                
Correct output: -74                 | Program output: -74                
Correct output: -21                 | Program output: 51                 
Correct output: -88                 | Program output: 69                 
Correct output: -89                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: 71                 
Correct output: -89                 | Program output: -37                
Correct output: -59                 | Program output: -7                 
Correct output: -60                 | Program output: -60                
Correct output: 1                   | Program output: 83                 
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: 100                
Correct output: -43                 | Program output: 57                 
Correct output: -79                 | Program output: -40                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -43                
Correct output: -87                 | Program output: 9                  
Correct output: -65                 | Program output: -65                
Correct output: -62                 | Program output: -41                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -84                
Correct output: -87                 | Program output: -4                 
Correct output: -42                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -7                  | Program output: 49                 
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -28                
Correct output: -26                 | Program output: -26                
Correct output: -19                 | Program output: 7                  
Correct output: -30                 | Program output: 20                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 89                 
Correct output: -69                 | Program output: -4                 
Correct output: -80                 | Program output: 64                 
Correct output: -96                 | Program output: 69                 
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: 21                 
Correct output: -100                | Program output: 37                 
Correct output: -43                 | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 87                 
Correct output: -80                 | Program output: 72                 
Correct output: 39                  | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -33                 | Program output: 60                 
Correct output: -90                 | Program output: -50                
Correct output: -88                 | Program output: 2                  
Correct output: -96                 | Program output: 88                 
Correct output: -71                 | Program output: 19                 
Correct output: -67                 | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_705} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 3, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Lexicase best program: (boolean_dup integer_gt integer_rot in3 integer_add boolean_rot print_boolean boolean_or integer_rot print_integer integer_add integer_add exec_dup (exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank integer_max tagged_705 boolean_and boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult)) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () boolean_not 17)
Lexicase best errors: [1 0 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_705} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 3, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Zero cases best program: (boolean_dup integer_gt integer_rot in3 integer_add boolean_rot print_boolean boolean_or integer_rot print_integer integer_add integer_add exec_dup (exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank integer_max tagged_705 boolean_and boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult)) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () boolean_not 17)
Zero cases best errors: [1 0 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 65 134 65 227 355 153 333 152 547)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (227 65 134 65 227 355 153 333 152 547)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 1, :instruction tagged_705} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_918} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_exec_770} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_eq} {:close 0, :instruction tagged_408} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_788} {:close 1, :instruction integer_dup_times} {:close 2, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 2, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_dup integer_gt integer_rot in3 integer_add boolean_rot print_boolean boolean_or integer_rot print_integer integer_add integer_add exec_dup (exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank integer_max tagged_705) boolean_and boolean_eq boolean_dup_items tagged_918 exec_while (print_boolean exec_k (exec_when () boolean_yank tag_exec_770 (in4 integer_sub boolean_xor) exec_eq) (tagged_408 boolean_xor integer_dup_items integer_lt tagged_788 integer_dup_times) integer_empty)) print_integer integer_mult integer_mult exec_s_when_autoconstructing (integer_mult) (exec_eq) (boolean_empty exec_s (boolean_frominteger integer_div integer_sub) (boolean_rot boolean_invert_first_then_and in4 exec_dup_items exec_dup_items) (exec_while () integer_min in3 boolean_eq exec_s (integer_gte integer_dec boolean_rot) (exec_do*count (boolean_not exec_k (boolean_empty integer_fromboolean exec_eq integer_div exec_s_when_autoconstructing (boolean_rot in4) () (exec_dup (boolean_invert_first_then_and integer_dup boolean_shove integer_gte) integer_pop integer_fromboolean) exec_y_when_autoconstructing (boolean_yank boolean_dup_items)) (integer_lte exec_flush) exec_dup_items exec_pop (integer_sub integer_yank boolean_yank exec_y_when_autoconstructing ()))) ())))
Errors: [1 0 0 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 93
Size: 122
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.742
Median total errors in population: 8
Error averages by case: (0.773 0.935 0.866 0.935 0.773 0.645 0.847 0.667 0.848 0.453)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.322
Average program size in population (points): 71.321
Average percent parens in population: 0.195
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.449
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2142000
--- Timings ---
Current time: 1559583266601 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.3 seconds, 57.2%
Fitness Testing:      3.3 seconds, 30.2%
Report:               1.3 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 671
Test mean error for best: 0.67100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: 7                  
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: 29                 
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 73                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 77                 
Correct output: 23                  | Program output: 57                 
Correct output: 6                   | Program output: 29                 
Correct output: 22                  | Program output: 23                 
Correct output: 27                  | Program output: 27                 
Correct output: 30                  | Program output: 84                 
Correct output: 39                  | Program output: 97                 
Correct output: 18                  | Program output: 67                 
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 100                
Correct output: 49                  | Program output: 65                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 58                 
Correct output: -46                 | Program output: 80                 
Correct output: 36                  | Program output: 84                 
Correct output: -73                 | Program output: 74                 
Correct output: -43                 | Program output: 74                 
Correct output: -39                 | Program output: 16                 
Correct output: -3                  | Program output: 89                 
Correct output: -88                 | Program output: 35                 
Correct output: -100                | Program output: 33                 
Correct output: -74                 | Program output: 46                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -62                
Correct output: -89                 | Program output: 25                 
Correct output: -51                 | Program output: 4                  
Correct output: -80                 | Program output: 78                 
Correct output: -89                 | Program output: -88                
Correct output: -59                 | Program output: 25                 
Correct output: -60                 | Program output: 39                 
Correct output: 1                   | Program output: 55                 
Correct output: -27                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: 45                 
Correct output: -79                 | Program output: -68                
Correct output: -78                 | Program output: 19                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -55                
Correct output: -62                 | Program output: 60                 
Correct output: -70                 | Program output: -6                 
Correct output: -94                 | Program output: -27                
Correct output: -87                 | Program output: -26                
Correct output: -42                 | Program output: 82                 
Correct output: -73                 | Program output: -59                
Correct output: -7                  | Program output: 11                 
Correct output: -65                 | Program output: -33                
Correct output: -35                 | Program output: -10                
Correct output: -26                 | Program output: 31                 
Correct output: -19                 | Program output: -13                
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: 0                  
Correct output: -63                 | Program output: 65                 
Correct output: -69                 | Program output: -49                
Correct output: -80                 | Program output: 99                 
Correct output: -96                 | Program output: 25                 
Correct output: -56                 | Program output: 94                 
Correct output: -84                 | Program output: -58                
Correct output: -88                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 62                 
Correct output: -43                 | Program output: 13                 
Correct output: -50                 | Program output: 69                 
Correct output: -70                 | Program output: 77                 
Correct output: -80                 | Program output: 32                 
Correct output: 39                  | Program output: 86                 
Correct output: -55                 | Program output: 21                 
Correct output: -33                 | Program output: 56                 
Correct output: -90                 | Program output: 20                 
Correct output: -88                 | Program output: 100                
Correct output: -96                 | Program output: 85                 
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction tag_integer_161} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_eq integer_dec integer_dup_times integer_swap in2 integer_swap integer_gte integer_mod exec_stackdepth integer_dup exec_eq print_newline integer_min tag_integer_161 exec_swap (exec_stackdepth integer_dup_items boolean_frominteger in1 integer_mult exec_empty) (exec_stackdepth exec_eq) exec_swap (boolean_dup) (exec_dup_times () exec_yankdup boolean_shove print_integer exec_swap (integer_mult exec_s (exec_eq boolean_pop boolean_pop) (exec_do*range (integer_dup integer_gt exec_noop) boolean_stackdepth integer_add) (in1 exec_noop integer_lte integer_max integer_shove exec_yank integer_yank boolean_flush boolean_yank print_integer)) (integer_rot boolean_frominteger integer_inc exec_y_when_autoconstructing (boolean_empty integer_lte) in4) integer_dup))
Lexicase best errors: [1 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 72
Percent parens: 0.181
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction tag_integer_161} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_eq integer_dec integer_dup_times integer_swap in2 integer_swap integer_gte integer_mod exec_stackdepth integer_dup exec_eq print_newline integer_min tag_integer_161 exec_swap (exec_stackdepth integer_dup_items boolean_frominteger in1 integer_mult exec_empty) (exec_stackdepth exec_eq) exec_swap (boolean_dup) (exec_dup_times () exec_yankdup boolean_shove print_integer exec_swap (integer_mult exec_s (exec_eq boolean_pop boolean_pop) (exec_do*range (integer_dup integer_gt exec_noop) boolean_stackdepth integer_add) (in1 exec_noop integer_lte integer_max integer_shove exec_yank integer_yank boolean_flush boolean_yank print_integer)) (integer_rot boolean_frominteger integer_inc exec_y_when_autoconstructing (boolean_empty integer_lte) in4) integer_dup))
Zero cases best errors: [1 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 72
Percent parens: 0.181
--- Lexicase Population Statistics ---
Count of elite individuals by case: (31 873 128 620 31 134 622 1 129 31)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (31 873 128 620 31 134 622 1 129 31)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction tag_integer_161} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction integer_dup})
Best program: (boolean_eq integer_dec integer_dup_times integer_swap in2 integer_swap boolean_yankdup integer_mod exec_stackdepth integer_dup exec_eq print_newline integer_min tag_integer_161 exec_swap (exec_stackdepth integer_dup_items boolean_frominteger in1 integer_mult exec_empty) (exec_stackdepth exec_eq) exec_swap (boolean_dup) (exec_dup_times () exec_yankdup boolean_shove print_integer exec_swap (integer_mult exec_s (exec_eq boolean_pop boolean_pop) (exec_do*range (integer_dup integer_gt exec_noop) boolean_stackdepth integer_add) (in1 exec_noop integer_lte integer_max integer_shove exec_yank integer_yank boolean_flush boolean_yank print_integer)) (integer_rot boolean_frominteger integer_inc exec_y_when_autoconstructing (boolean_empty integer_lte) in4) integer_dup))
Errors: [1 0 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 59
Size: 72
Percent parens: 0.181
--- Population Statistics ---
Average total errors in population: 7.4
Median total errors in population: 7
Error averages by case: (0.969 0.127 0.872 0.38 0.969 0.866 0.378 0.999 0.871 0.969)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.392
Average program size in population (points): 53.867
Average percent parens in population: 0.221
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.00025
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3036108
--- Timings ---
Current time: 1559583269561 milliseconds
Total Time:          14.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.2 seconds, 57.1%
Fitness Testing:      4.1 seconds, 28.3%
Report:               2.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 535
Test mean error for best: 0.53500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -52                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: -12                
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 37                 
Correct output: 15                  | Program output: 97                 
Correct output: 23                  | Program output: 69                 
Correct output: 6                   | Program output: 90                 
Correct output: 22                  | Program output: 81                 
Correct output: 27                  | Program output: 46                 
Correct output: 30                  | Program output: 30                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 43                 
Correct output: 14                  | Program output: 20                 
Correct output: 13                  | Program output: 81                 
Correct output: 29                  | Program output: 69                 
Correct output: 49                  | Program output: 72                 
Correct output: 32                  | Program output: 57                 
Correct output: 20                  | Program output: 78                 
Correct output: 19                  | Program output: 41                 
Correct output: 3                   | Program output: 51                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: 73                 
Correct output: 36                  | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -43                 | Program output: -43                
Correct output: -39                 | Program output: -20                
Correct output: -3                  | Program output: 86                 
Correct output: -88                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -65                
Correct output: -21                 | Program output: 51                 
Correct output: -88                 | Program output:                    
Correct output: -89                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: 71                 
Correct output: -89                 | Program output: -60                
Correct output: -59                 | Program output: -7                 
Correct output: -60                 | Program output: -60                
Correct output: 1                   | Program output:                    
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: 100                
Correct output: -43                 | Program output: 0                  
Correct output: -79                 | Program output: -40                
Correct output: -78                 | Program output: -40                
Correct output: -88                 | Program output: -75                
Correct output: -87                 | Program output: -36                
Correct output: -65                 | Program output:                    
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -4                 
Correct output: -42                 | Program output: -42                
Correct output: -73                 | Program output: -49                
Correct output: -7                  | Program output: 49                 
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -9                 
Correct output: -26                 | Program output: -20                
Correct output: -19                 | Program output: -19                
Correct output: -30                 | Program output: 20                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: 69                 
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -14                
Correct output: -88                 | Program output: -81                
Correct output: -82                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -4                 
Correct output: -70                 | Program output: -70                
Correct output: -80                 | Program output: 72                 
Correct output: 39                  | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -33                 | Program output: -33                
Correct output: -90                 | Program output: -50                
Correct output: -88                 | Program output: 2                  
Correct output: -96                 | Program output: -19                
Correct output: -71                 | Program output:                    
Correct output: -67                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_172} {:close 0, :instruction tag_boolean_298} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while})
Lexicase best program: (integer_sub in1 boolean_or integer_empty exec_y_when_autoconstructing (in1 boolean_yankdup integer_shove integer_dup_times) boolean_invert_second_then_and boolean_flush integer_swap tagged_172 tag_boolean_298 integer_dup_times integer_yankdup exec_noop exec_shove (print_integer in1) print_integer boolean_flush exec_rot (integer_yank) (exec_while () exec_dup_items) (integer_add integer_sub in1) exec_do*count (exec_do*while (in3 boolean_dup integer_lte exec_while ())))
Lexicase best errors: [0 0 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_172} {:close 0, :instruction tag_boolean_298} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while})
Zero cases best program: (integer_sub in1 boolean_or integer_empty exec_y_when_autoconstructing (in1 boolean_yankdup integer_shove integer_dup_times) boolean_invert_second_then_and boolean_flush integer_swap tagged_172 tag_boolean_298 integer_dup_times integer_yankdup exec_noop exec_shove (print_integer in1) print_integer boolean_flush exec_rot (integer_yank) (exec_while () exec_dup_items) (integer_add integer_sub in1) exec_do*count (exec_do*while (in3 boolean_dup integer_lte exec_while ())))
Zero cases best errors: [0 0 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (425 112 390 217 165 135 839 314 217 390)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (425 112 390 217 165 135 839 314 217 390)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_172} {:close 0, :instruction tag_boolean_298} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while})
Best program: (integer_sub in1 boolean_or integer_empty exec_y_when_autoconstructing (in1 boolean_yankdup integer_shove integer_dup_times) boolean_invert_second_then_and boolean_flush integer_swap tagged_172 tag_boolean_298 integer_dup_times integer_yankdup exec_noop exec_shove (print_integer in1) print_integer boolean_flush exec_eq exec_swap (boolean_dup boolean_flush exec_rot (integer_yank) (exec_while () exec_dup_items) (integer_add integer_sub in1)) (exec_do*count (exec_do*while (in3 boolean_dup boolean_dup exec_while ()))))
Errors: [0 0 0 1 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 51
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.796
Median total errors in population: 7
Error averages by case: (0.575 0.888 0.61 0.783 0.835 0.865 0.161 0.686 0.783 0.61)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.643
Average program size in population (points): 56.346
Average percent parens in population: 0.213
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.6525625
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3648686
--- Timings ---
Current time: 1559583272198 milliseconds
Total Time:          17.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.1 seconds, 58.8%
Fitness Testing:      4.6 seconds, 26.9%
Report:               2.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -52                
Correct output: -25                 | Program output: 59                 
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: 29                 
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 37                 
Correct output: 15                  | Program output: 97                 
Correct output: 23                  | Program output: 69                 
Correct output: 6                   | Program output: 90                 
Correct output: 22                  | Program output: 81                 
Correct output: 27                  | Program output: 46                 
Correct output: 30                  | Program output: 30                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 43                 
Correct output: 14                  | Program output: 20                 
Correct output: 13                  | Program output: 81                 
Correct output: 29                  | Program output: 69                 
Correct output: 49                  | Program output: 72                 
Correct output: 32                  | Program output: 57                 
Correct output: 20                  | Program output: 78                 
Correct output: 19                  | Program output: 41                 
Correct output: 3                   | Program output: 51                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: 73                 
Correct output: 36                  | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -43                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -3                  | Program output: 86                 
Correct output: -88                 | Program output: 65                 
Correct output: -100                | Program output: -56                
Correct output: -74                 | Program output: -74                
Correct output: -21                 | Program output: 51                 
Correct output: -88                 | Program output: 69                 
Correct output: -89                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: 71                 
Correct output: -89                 | Program output: -37                
Correct output: -59                 | Program output: -7                 
Correct output: -60                 | Program output: -60                
Correct output: 1                   | Program output: 83                 
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: 100                
Correct output: -43                 | Program output: 57                 
Correct output: -79                 | Program output: -40                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -43                
Correct output: -87                 | Program output: 9                  
Correct output: -65                 | Program output: -65                
Correct output: -62                 | Program output: -41                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -84                
Correct output: -87                 | Program output: -4                 
Correct output: -42                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -7                  | Program output: 49                 
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -28                
Correct output: -26                 | Program output: -26                
Correct output: -19                 | Program output: 7                  
Correct output: -30                 | Program output: 20                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 89                 
Correct output: -69                 | Program output: -4                 
Correct output: -80                 | Program output: 64                 
Correct output: -96                 | Program output: 69                 
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: 21                 
Correct output: -100                | Program output: 37                 
Correct output: -43                 | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 87                 
Correct output: -80                 | Program output: 72                 
Correct output: 39                  | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -33                 | Program output: 60                 
Correct output: -90                 | Program output: -50                
Correct output: -88                 | Program output: 2                  
Correct output: -96                 | Program output: 88                 
Correct output: -71                 | Program output: 19                 
Correct output: -67                 | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307})
Lexicase best program: (exec_do*count (exec_eq exec_stackdepth boolean_yankdup exec_rot () () (exec_y_when_autoconstructing (exec_k_when_autoconstructing () (integer_shove boolean_yankdup exec_dup_items) integer_flush in4 integer_swap exec_eq integer_min exec_dup (integer_sub boolean_yank boolean_xor boolean_xor) boolean_or exec_empty boolean_eq integer_fromboolean boolean_empty integer_flush)) exec_when (integer_yankdup in3 integer_dec boolean_dup boolean_yank boolean_eq in2 exec_do*while (boolean_and) integer_empty) print_integer exec_do*times (integer_pop tag_integer_307)))
Lexicase best errors: [1 1 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 53
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307})
Zero cases best program: (exec_do*count (exec_eq exec_stackdepth boolean_yankdup exec_rot () () (exec_y_when_autoconstructing (exec_k_when_autoconstructing () (integer_shove boolean_yankdup exec_dup_items) integer_flush in4 integer_swap exec_eq integer_min exec_dup (integer_sub boolean_yank boolean_xor boolean_xor) boolean_or exec_empty boolean_eq integer_fromboolean boolean_empty integer_flush)) exec_when (integer_yankdup in3 integer_dec boolean_dup boolean_yank boolean_eq in2 exec_do*while (boolean_and) integer_empty) print_integer exec_do*times (integer_pop tag_integer_307)))
Zero cases best errors: [1 1 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 53
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 378 878 542 1000 137 144 144 1000 226)
Population mean number of elite cases: 5.45
Count of perfect (error zero) individuals by case: (0 378 878 542 0 137 144 144 0 226)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_shove})
Best program: (exec_do*count (exec_eq exec_stackdepth boolean_yankdup exec_rot () () (exec_y_when_autoconstructing (exec_k_when_autoconstructing () () integer_shove boolean_yankdup exec_dup_items) integer_flush in4 integer_swap exec_k (boolean_or integer_add in3 print_integer exec_swap (integer_lte exec_yank) (exec_pop () integer_shove)) ())))
Errors: [1 0 0 1 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 23
Size: 36
Percent parens: 0.361
--- Population Statistics ---
Average total errors in population: 7.551
Median total errors in population: 7
Error averages by case: (1.0 0.622 0.122 0.458 1.0 0.863 0.856 0.856 1.0 0.774)
Error minima by case: (1 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 41.35
Average program size in population (points): 52.889
Average percent parens in population: 0.223
Minimum age in population: 6.0
Maximum age in population: 11.09375
Average age in population: 8.9854375
Median age in population: 8.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.004
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4256841
--- Timings ---
Current time: 1559583274744 milliseconds
Total Time:          19.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.9 seconds, 60.3%
Fitness Testing:      5.1 seconds, 26.0%
Report:               2.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -52                
Correct output: -25                 | Program output: 59                 
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: 29                 
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 37                 
Correct output: 15                  | Program output: 97                 
Correct output: 23                  | Program output: 69                 
Correct output: 6                   | Program output: 90                 
Correct output: 22                  | Program output: 81                 
Correct output: 27                  | Program output: 46                 
Correct output: 30                  | Program output: 30                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 43                 
Correct output: 14                  | Program output: 20                 
Correct output: 13                  | Program output: 81                 
Correct output: 29                  | Program output: 69                 
Correct output: 49                  | Program output: 72                 
Correct output: 32                  | Program output: 57                 
Correct output: 20                  | Program output: 78                 
Correct output: 19                  | Program output: 41                 
Correct output: 3                   | Program output: 51                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: 73                 
Correct output: 36                  | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -43                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -3                  | Program output: 86                 
Correct output: -88                 | Program output: 65                 
Correct output: -100                | Program output: -56                
Correct output: -74                 | Program output: -74                
Correct output: -21                 | Program output: 51                 
Correct output: -88                 | Program output: 69                 
Correct output: -89                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: 71                 
Correct output: -89                 | Program output: -37                
Correct output: -59                 | Program output: -7                 
Correct output: -60                 | Program output: -60                
Correct output: 1                   | Program output: 83                 
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: 100                
Correct output: -43                 | Program output: 57                 
Correct output: -79                 | Program output: -40                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -43                
Correct output: -87                 | Program output: 9                  
Correct output: -65                 | Program output: -65                
Correct output: -62                 | Program output: -41                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -84                
Correct output: -87                 | Program output: -4                 
Correct output: -42                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -7                  | Program output: 49                 
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -28                
Correct output: -26                 | Program output: -26                
Correct output: -19                 | Program output: 7                  
Correct output: -30                 | Program output: 20                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 89                 
Correct output: -69                 | Program output: -4                 
Correct output: -80                 | Program output: 64                 
Correct output: -96                 | Program output: 69                 
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: 21                 
Correct output: -100                | Program output: 37                 
Correct output: -43                 | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 87                 
Correct output: -80                 | Program output: 72                 
Correct output: 39                  | Program output: 58                 
Correct output: -55                 | Program output: -55                
Correct output: -33                 | Program output: 60                 
Correct output: -90                 | Program output: -50                
Correct output: -88                 | Program output: 2                  
Correct output: -96                 | Program output: 88                 
Correct output: -71                 | Program output: 19                 
Correct output: -67                 | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_shove})
Lexicase best program: (exec_do*count (exec_do*count (exec_eq exec_stackdepth boolean_yankdup exec_rot () () (exec_y_when_autoconstructing (exec_k_when_autoconstructing (integer_shove boolean_yankdup exec_dup_items) (integer_flush in4 integer_swap exec_k (boolean_or integer_add in3 print_integer exec_swap (integer_lte exec_yank) (exec_pop () integer_shove)) ()))))))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 38
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_shove})
Zero cases best program: (exec_do*count (exec_do*count (exec_eq exec_stackdepth boolean_yankdup exec_rot () () (exec_y_when_autoconstructing (exec_k_when_autoconstructing (integer_shove boolean_yankdup exec_dup_items) (integer_flush in4 integer_swap exec_k (boolean_or integer_add in3 print_integer exec_swap (integer_lte exec_yank) (exec_pop () integer_shove)) ()))))))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 38
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 812 838 241 3 4 805 836 335 3)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (234 812 838 241 3 4 805 836 335 3)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_shove})
Best program: (exec_do*count (exec_eq exec_stackdepth boolean_yankdup exec_rot () () (exec_y_when_autoconstructing (exec_k_when_autoconstructing () (integer_shove boolean_yankdup exec_dup_items) integer_flush in4 integer_swap exec_k (boolean_or integer_gt in3 print_integer exec_swap (integer_lte exec_yank) (exec_pop () integer_shove)) ()))))
Errors: [0 0 0 1 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 23
Size: 36
Percent parens: 0.361
--- Population Statistics ---
Average total errors in population: 5.889
Median total errors in population: 5
Error averages by case: (0.766 0.188 0.162 0.759 0.997 0.996 0.195 0.164 0.665 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.589
Average program size in population (points): 55.568
Average percent parens in population: 0.222
Minimum age in population: 7.0
Maximum age in population: 12.0625
Average age in population: 10.4309375
Median age in population: 10.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4840673
--- Timings ---
Current time: 1559583277392 milliseconds
Total Time:          22.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.9 seconds, 61.9%
Fitness Testing:      5.7 seconds, 25.2%
Report:               2.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 449
Test mean error for best: 0.44900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: 29                 
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 70                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 57                 
Correct output: 6                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 27                  | Program output: 27                 
Correct output: 30                  | Program output: 77                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 67                 
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 37                 
Correct output: 49                  | Program output: 49                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 58                 
Correct output: -46                 | Program output: -46                
Correct output: 36                  | Program output: 76                 
Correct output: -73                 | Program output: 12                 
Correct output: -43                 | Program output: -16                
Correct output: -39                 | Program output: 16                 
Correct output: -3                  | Program output: -3                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -78                
Correct output: -74                 | Program output: 46                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -51                 | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: 35                 
Correct output: 1                   | Program output: 55                 
Correct output: -27                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -74                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -55                
Correct output: -62                 | Program output: -33                
Correct output: -70                 | Program output: -6                 
Correct output: -94                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -34                
Correct output: -73                 | Program output: -59                
Correct output: -7                  | Program output: -7                 
Correct output: -65                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -26                 | Program output: -13                
Correct output: -19                 | Program output: -13                
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -38                
Correct output: -63                 | Program output: 65                 
Correct output: -69                 | Program output: -49                
Correct output: -80                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 62                 
Correct output: -43                 | Program output: 13                 
Correct output: -50                 | Program output: 24                 
Correct output: -70                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 50                 
Correct output: -55                 | Program output: -49                
Correct output: -33                 | Program output: 56                 
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Lexicase best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 exec_s (print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop) (exec_yank exec_stackdepth exec_if () (exec_eq integer_min exec_dup (integer_sub boolean_yank exec_y_when_autoconstructing (boolean_xor) boolean_or exec_empty boolean_eq integer_fromboolean boolean_empty integer_flush)) exec_when (integer_yankdup in3 integer_dec boolean_dup boolean_yank boolean_eq in2) exec_do*while (boolean_and) integer_empty) (print_integer exec_do*times (integer_pop tag_integer_307 integer_lt boolean_frominteger) exec_while (boolean_dup_times exec_y (integer_shove) exec_when () boolean_not) 17))
Lexicase best errors: [1 0 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 70
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Zero cases best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 exec_s (print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop) (exec_yank exec_stackdepth exec_if () (exec_eq integer_min exec_dup (integer_sub boolean_yank exec_y_when_autoconstructing (boolean_xor) boolean_or exec_empty boolean_eq integer_fromboolean boolean_empty integer_flush)) exec_when (integer_yankdup in3 integer_dec boolean_dup boolean_yank boolean_eq in2) exec_do*while (boolean_and) integer_empty) (print_integer exec_do*times (integer_pop tag_integer_307 integer_lt boolean_frominteger) exec_while (boolean_dup_times exec_y (integer_shove) exec_when () boolean_not) 17))
Zero cases best errors: [1 0 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 70
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (43 165 324 160 364 365 364 325 447 529)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (43 165 324 160 364 365 364 325 447 529)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 exec_s (print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop) (exec_yank exec_stackdepth exec_if () (exec_eq integer_min exec_dup (integer_sub boolean_yank exec_y_when_autoconstructing (boolean_xor) boolean_or exec_empty boolean_eq integer_fromboolean boolean_empty integer_flush)) exec_when (integer_yankdup in3 integer_dec boolean_dup boolean_yank boolean_eq in2) exec_do*while (boolean_and) integer_empty) (print_integer exec_do*times (integer_pop tag_integer_307 integer_lt boolean_frominteger) exec_while (boolean_dup_times exec_y (integer_shove) exec_when () boolean_not) 17))
Errors: [1 0 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 56
Size: 70
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.914
Median total errors in population: 6
Error averages by case: (0.957 0.835 0.676 0.84 0.636 0.635 0.636 0.675 0.553 0.471)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.043
Average program size in population (points): 59.801
Average percent parens in population: 0.221
Minimum age in population: 8.0
Maximum age in population: 13.734375
Average age in population: 12.084390625
Median age in population: 12.1640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5448033
--- Timings ---
Current time: 1559583280293 milliseconds
Total Time:          25.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.8 seconds, 63.0%
Fitness Testing:      6.2 seconds, 24.7%
Report:               3.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -52                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: -12-12             
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 1818               
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 37                 
Correct output: 19                  | Program output: 77                 
Correct output: 15                  | Program output: 2222               
Correct output: 23                  | Program output: 2323               
Correct output: 6                   | Program output: 66                 
Correct output: 22                  | Program output: 65                 
Correct output: 27                  | Program output: 76                 
Correct output: 30                  | Program output: 48                 
Correct output: 39                  | Program output: 76                 
Correct output: 18                  | Program output: 95                 
Correct output: 23                  | Program output: 62                 
Correct output: 14                  | Program output: 100                
Correct output: 13                  | Program output: 2525               
Correct output: 29                  | Program output: 29                 
Correct output: 49                  | Program output: 74                 
Correct output: 32                  | Program output: 72                 
Correct output: 20                  | Program output: 68                 
Correct output: 19                  | Program output: 37                 
Correct output: 3                   | Program output: 29                 
Correct output: 17                  | Program output: 52                 
Correct output: -46                 | Program output: -46                
Correct output: 36                  | Program output: 83                 
Correct output: -73                 | Program output: 99                 
Correct output: -43                 | Program output: -43                
Correct output: -39                 | Program output: -20-20             
Correct output: -3                  | Program output: -3                 
Correct output: -88                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -65                
Correct output: -21                 | Program output: 87                 
Correct output: -88                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -51                 | Program output: -30-30             
Correct output: -80                 | Program output: -80-80             
Correct output: -89                 | Program output: -60                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: -27                 | Program output: 70                 
Correct output: -69                 | Program output: 88                 
Correct output: -43                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -40                
Correct output: -88                 | Program output: -75                
Correct output: -87                 | Program output: -36                
Correct output: -65                 | Program output: 55                 
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -34                
Correct output: -73                 | Program output: -49                
Correct output: -7                  | Program output: -7                 
Correct output: -65                 | Program output: 1818               
Correct output: -35                 | Program output: -9                 
Correct output: -26                 | Program output: -20                
Correct output: -19                 | Program output: -19                
Correct output: -30                 | Program output: 82                 
Correct output: -93                 | Program output: -38                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96-96             
Correct output: -56                 | Program output: 1010               
Correct output: -84                 | Program output: -14                
Correct output: -88                 | Program output: -81                
Correct output: -82                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -4-4               
Correct output: -70                 | Program output: -70                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -55                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -19                
Correct output: -71                 | Program output: 1                  
Correct output: -67                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction 17})
Lexicase best program: (integer_sub in1 boolean_or in4 exec_y_when_autoconstructing (in1 boolean_yankdup integer_shove integer_dup_times) boolean_invert_second_then_and boolean_flush in1 integer_rot integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) boolean_and boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq 17)
Lexicase best errors: [0 1 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.134
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction 17})
Zero cases best program: (integer_sub in1 boolean_or in4 exec_y_when_autoconstructing (in1 boolean_yankdup integer_shove integer_dup_times) boolean_invert_second_then_and boolean_flush in1 integer_rot integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) boolean_and boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq 17)
Zero cases best errors: [0 1 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.134
--- Lexicase Population Statistics ---
Count of elite individuals by case: (222 326 263 176 24 635 262 262 231 311)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (222 326 263 176 24 635 262 262 231 311)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction 17})
Best program: (integer_sub in1 boolean_or in4 exec_y_when_autoconstructing (in1 boolean_yankdup integer_shove integer_dup_times) boolean_invert_second_then_and boolean_flush in1 integer_rot integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) boolean_and boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq 17)
Errors: [0 1 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 58
Size: 67
Percent parens: 0.134
--- Population Statistics ---
Average total errors in population: 7.288
Median total errors in population: 8
Error averages by case: (0.778 0.674 0.737 0.824 0.976 0.365 0.738 0.738 0.769 0.689)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.562
Average program size in population (points): 57.497
Average percent parens in population: 0.213
Minimum age in population: 9.984375
Maximum age in population: 15.1953125
Average age in population: 13.6044765625
Median age in population: 13.609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6071174
--- Timings ---
Current time: 1559583283672 milliseconds
Total Time:          27.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.7 seconds, 63.3%
Fitness Testing:      6.8 seconds, 24.3%
Report:               3.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -52                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: -12                
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 37                 
Correct output: 19                  | Program output: 77                 
Correct output: 15                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 22                  | Program output: 65                 
Correct output: 27                  | Program output: 76                 
Correct output: 30                  | Program output: 48                 
Correct output: 39                  | Program output: 76                 
Correct output: 18                  | Program output: 95                 
Correct output: 23                  | Program output: 62                 
Correct output: 14                  | Program output: 100                
Correct output: 13                  | Program output: 25                 
Correct output: 29                  | Program output: 29                 
Correct output: 49                  | Program output: 74                 
Correct output: 32                  | Program output: 72                 
Correct output: 20                  | Program output: 68                 
Correct output: 19                  | Program output: 37                 
Correct output: 3                   | Program output: 29                 
Correct output: 17                  | Program output: 52                 
Correct output: -46                 | Program output: -46                
Correct output: 36                  | Program output: 83                 
Correct output: -73                 | Program output: 9                  
Correct output: -43                 | Program output: -43                
Correct output: -39                 | Program output: -20                
Correct output: -3                  | Program output: -3                 
Correct output: -88                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -65                
Correct output: -21                 | Program output: 87                 
Correct output: -88                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -51                 | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -60                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: -27                 | Program output: 70                 
Correct output: -69                 | Program output: 88                 
Correct output: -43                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -40                
Correct output: -88                 | Program output: -75                
Correct output: -87                 | Program output: -36                
Correct output: -65                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -34                
Correct output: -73                 | Program output: -49                
Correct output: -7                  | Program output: -7                 
Correct output: -65                 | Program output: 18                 
Correct output: -35                 | Program output: -9                 
Correct output: -26                 | Program output: -20                
Correct output: -19                 | Program output: -19                
Correct output: -30                 | Program output: 82                 
Correct output: -93                 | Program output: -38                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: 10                 
Correct output: -84                 | Program output: -14                
Correct output: -88                 | Program output: -81                
Correct output: -82                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -4                 
Correct output: -70                 | Program output: -70                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -55                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -19                
Correct output: -71                 | Program output: 1                  
Correct output: -67                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction 17})
Lexicase best program: (integer_sub in1 boolean_or in4 exec_y_when_autoconstructing (in1 boolean_yankdup integer_shove integer_dup_times) boolean_invert_second_then_and boolean_flush in1 integer_rot integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) boolean_and boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq 17)
Lexicase best errors: [1 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 67
Percent parens: 0.134
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction 17})
Zero cases best program: (integer_sub in1 boolean_or in4 exec_y_when_autoconstructing (in1 boolean_yankdup integer_shove integer_dup_times) boolean_invert_second_then_and boolean_flush in1 integer_rot integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) boolean_and boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq 17)
Zero cases best errors: [1 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 67
Percent parens: 0.134
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 413 448 653 22 120 412 29 444 872)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (291 413 448 653 22 120 412 29 444 872)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while})
Best program: (integer_sub in1 boolean_or in4 exec_y_when_autoconstructing (in1 boolean_yankdup integer_shove integer_dup_times) boolean_invert_second_then_and boolean_flush in1 integer_rot integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (exec_eq) exec_swap (boolean_dup boolean_flush exec_rot (integer_yank) (exec_while () exec_dup_items) (integer_add integer_sub in1)) (exec_do*count (exec_do*while (in3 boolean_dup boolean_dup exec_while ())))))
Errors: [1 0 0 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 43
Size: 57
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 6.296
Median total errors in population: 7
Error averages by case: (0.709 0.587 0.552 0.347 0.978 0.88 0.588 0.971 0.556 0.128)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.383
Average program size in population (points): 58.081
Average percent parens in population: 0.192
Minimum age in population: 12.96875
Maximum age in population: 16.9609375
Average age in population: 15.5665390625
Median age in population: 15.7265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 174
Genome diversity (% unique genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 188
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6871234
--- Timings ---
Current time: 1559583286811 milliseconds
Total Time:          31.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.5 seconds, 61.9%
Fitness Testing:      7.6 seconds, 24.1%
Report:               4.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 449
Test mean error for best: 0.44900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: 29                 
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 70                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 57                 
Correct output: 6                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 27                  | Program output: 27                 
Correct output: 30                  | Program output: 77                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 67                 
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 37                 
Correct output: 49                  | Program output: 49                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 58                 
Correct output: -46                 | Program output: -46                
Correct output: 36                  | Program output: 76                 
Correct output: -73                 | Program output: 12                 
Correct output: -43                 | Program output: -16                
Correct output: -39                 | Program output: 16                 
Correct output: -3                  | Program output: -3                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -78                
Correct output: -74                 | Program output: 46                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -51                 | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: 35                 
Correct output: 1                   | Program output: 55                 
Correct output: -27                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -74                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -55                
Correct output: -62                 | Program output: -33                
Correct output: -70                 | Program output: -6                 
Correct output: -94                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -34                
Correct output: -73                 | Program output: -59                
Correct output: -7                  | Program output: -7                 
Correct output: -65                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -26                 | Program output: -13                
Correct output: -19                 | Program output: -13                
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -38                
Correct output: -63                 | Program output: 65                 
Correct output: -69                 | Program output: -49                
Correct output: -80                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 62                 
Correct output: -43                 | Program output: 13                 
Correct output: -50                 | Program output: 24                 
Correct output: -70                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 50                 
Correct output: -55                 | Program output: -49                
Correct output: -33                 | Program output: 56                 
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Lexicase best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 exec_s (print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop) (exec_yank exec_stackdepth exec_if () (exec_eq integer_min exec_dup (integer_sub boolean_yank exec_y_when_autoconstructing (boolean_xor) boolean_or exec_empty boolean_eq integer_fromboolean boolean_empty integer_flush)) exec_when (integer_yankdup in3 integer_dec boolean_dup boolean_yank boolean_eq in2) exec_do*while (boolean_and) integer_empty) (print_integer exec_do*times (integer_pop tag_integer_307 integer_lt boolean_frominteger) exec_while (boolean_dup_times exec_y (integer_shove) exec_when () boolean_not) 17))
Lexicase best errors: [0 0 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 70
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Zero cases best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 exec_s (print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop) (exec_yank exec_stackdepth exec_if () (exec_eq integer_min exec_dup (integer_sub boolean_yank exec_y_when_autoconstructing (boolean_xor) boolean_or exec_empty boolean_eq integer_fromboolean boolean_empty integer_flush)) exec_when (integer_yankdup in3 integer_dec boolean_dup boolean_yank boolean_eq in2) exec_do*while (boolean_and) integer_empty) (print_integer exec_do*times (integer_pop tag_integer_307 integer_lt boolean_frominteger) exec_while (boolean_dup_times exec_y (integer_shove) exec_when () boolean_not) 17))
Zero cases best errors: [0 0 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 70
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 315 411 300 787 495 317 99 277 100)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (247 315 411 300 787 495 317 99 277 100)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction 44} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 exec_s (print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop) (exec_yank integer_swap exec_if () (exec_eq integer_min exec_dup (integer_sub boolean_yank exec_y_when_autoconstructing (boolean_xor) boolean_or exec_empty boolean_eq integer_fromboolean boolean_empty integer_flush)) exec_when (integer_yankdup in3 integer_dec boolean_dup boolean_yank boolean_eq in2) exec_do*while (boolean_and) integer_empty) (print_integer exec_do*times (integer_pop tag_integer_307 integer_lt boolean_frominteger) exec_while (boolean_dup_times exec_y (44) exec_when () boolean_not) 17))
Errors: [0 0 1 0 0 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 56
Size: 70
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.652
Median total errors in population: 7
Error averages by case: (0.753 0.685 0.589 0.7 0.213 0.505 0.683 0.901 0.723 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.392
Average program size in population (points): 64.014
Average percent parens in population: 0.184
Minimum age in population: 14.78125
Maximum age in population: 18.7265625
Average age in population: 17.0855419921875
Median age in population: 17.1279296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7708101
--- Timings ---
Current time: 1559583289883 milliseconds
Total Time:          34.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.3 seconds, 61.5%
Fitness Testing:      8.4 seconds, 24.3%
Report:               4.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 449
Test mean error for best: 0.44900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: 29                 
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 70                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 57                 
Correct output: 6                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 27                  | Program output: 27                 
Correct output: 30                  | Program output: 77                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 67                 
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 37                 
Correct output: 49                  | Program output: 49                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 58                 
Correct output: -46                 | Program output: -46                
Correct output: 36                  | Program output: 76                 
Correct output: -73                 | Program output: 12                 
Correct output: -43                 | Program output: -16                
Correct output: -39                 | Program output: 16                 
Correct output: -3                  | Program output: -3                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -78                
Correct output: -74                 | Program output: 46                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -51                 | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: 35                 
Correct output: 1                   | Program output: 55                 
Correct output: -27                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -74                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -55                
Correct output: -62                 | Program output: -33                
Correct output: -70                 | Program output: -6                 
Correct output: -94                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -34                
Correct output: -73                 | Program output: -59                
Correct output: -7                  | Program output: -7                 
Correct output: -65                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -26                 | Program output: -13                
Correct output: -19                 | Program output: -13                
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -38                
Correct output: -63                 | Program output: 65                 
Correct output: -69                 | Program output: -49                
Correct output: -80                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 62                 
Correct output: -43                 | Program output: 13                 
Correct output: -50                 | Program output: 24                 
Correct output: -70                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 50                 
Correct output: -55                 | Program output: -49                
Correct output: -33                 | Program output: 56                 
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 exec_s (print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop) (exec_yank exec_stackdepth in1) (print_integer boolean_flush exec_eq) exec_swap (boolean_dup boolean_flush exec_rot (integer_yank) (exec_while () exec_dup_items) (integer_add integer_sub in1)) (exec_do*count (exec_do*while (in3 boolean_dup) in2 exec_while ())))
Lexicase best errors: [0 0 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 51
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 exec_s (print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop) (exec_yank exec_stackdepth in1) (print_integer boolean_flush exec_eq) exec_swap (boolean_dup boolean_flush exec_rot (integer_yank) (exec_while () exec_dup_items) (integer_add integer_sub in1)) (exec_do*count (exec_do*while (in3 boolean_dup) in2 exec_while ())))
Zero cases best errors: [0 0 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 51
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 440 252 262 263 286 745 790 115 245)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (277 440 252 262 263 286 745 790 115 245)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 exec_s (print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop) (exec_yank exec_stackdepth exec_if () (exec_eq integer_min exec_dup (integer_sub boolean_yank exec_y_when_autoconstructing (boolean_xor) boolean_or exec_empty boolean_eq integer_fromboolean boolean_empty integer_flush)) exec_when (integer_yankdup in3 integer_dec boolean_dup boolean_yank boolean_eq in2) exec_do*while (boolean_and) integer_empty) (print_integer exec_do*times (integer_pop tag_integer_307 integer_lt boolean_frominteger) exec_while (boolean_dup_times exec_y (integer_shove) exec_when () boolean_not) 17))
Errors: [0 0 0 1 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 56
Size: 70
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.325
Median total errors in population: 6
Error averages by case: (0.723 0.56 0.748 0.738 0.737 0.714 0.255 0.21 0.885 0.755)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.247
Average program size in population (points): 59.545
Average percent parens in population: 0.211
Minimum age in population: 15.78125
Maximum age in population: 20.48291015625
Average age in population: 18.39362841796875
Median age in population: 18.474609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8441946
--- Timings ---
Current time: 1559583292784 milliseconds
Total Time:          37.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.2 seconds, 61.6%
Fitness Testing:      9.1 seconds, 24.3%
Report:               5.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 449
Test mean error for best: 0.44900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: 29                 
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 70                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 57                 
Correct output: 6                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 27                  | Program output: 27                 
Correct output: 30                  | Program output: 77                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 67                 
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 37                 
Correct output: 49                  | Program output: 49                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 58                 
Correct output: -46                 | Program output: -46                
Correct output: 36                  | Program output: 76                 
Correct output: -73                 | Program output: 12                 
Correct output: -43                 | Program output: -16                
Correct output: -39                 | Program output: 16                 
Correct output: -3                  | Program output: -3                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -78                
Correct output: -74                 | Program output: 46                 
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -51                 | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: 35                 
Correct output: 1                   | Program output: 55                 
Correct output: -27                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -74                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -55                
Correct output: -62                 | Program output: -33                
Correct output: -70                 | Program output: -6                 
Correct output: -94                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -34                
Correct output: -73                 | Program output: -59                
Correct output: -7                  | Program output: -7                 
Correct output: -65                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -26                 | Program output: -13                
Correct output: -19                 | Program output: -13                
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -38                
Correct output: -63                 | Program output: 65                 
Correct output: -69                 | Program output: -49                
Correct output: -80                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -57                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 62                 
Correct output: -43                 | Program output: 13                 
Correct output: -50                 | Program output: 24                 
Correct output: -70                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 50                 
Correct output: -55                 | Program output: -49                
Correct output: -33                 | Program output: 56                 
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Lexicase best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 exec_s (print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop) (exec_yank exec_stackdepth exec_if () (exec_eq integer_min exec_dup (integer_sub boolean_yank exec_y_when_autoconstructing (boolean_xor) boolean_or exec_empty boolean_eq integer_fromboolean boolean_empty integer_flush)) exec_when (boolean_xor in3 integer_dec boolean_dup boolean_yank boolean_eq in1) exec_do*while (boolean_and) integer_empty) (print_integer exec_do*times (integer_pop tag_integer_307 integer_lt boolean_frominteger) exec_while (boolean_dup_times exec_y () integer_shove) exec_when (boolean_not) 17))
Lexicase best errors: [1 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 70
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Zero cases best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 exec_s (print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop) (exec_yank exec_stackdepth exec_if () (exec_eq integer_min exec_dup (integer_sub boolean_yank exec_y_when_autoconstructing (boolean_xor) boolean_or exec_empty boolean_eq integer_fromboolean boolean_empty integer_flush)) exec_when (boolean_xor in3 integer_dec boolean_dup boolean_yank boolean_eq in1) exec_do*while (boolean_and) integer_empty) (print_integer exec_do*times (integer_pop tag_integer_307 integer_lt boolean_frominteger) exec_while (boolean_dup_times exec_y () integer_shove) exec_when (boolean_not) 17))
Zero cases best errors: [1 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 70
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (226 385 226 161 807 405 410 226 804 578)
Population mean number of elite cases: 4.23
Count of perfect (error zero) individuals by case: (226 385 226 161 807 405 410 226 804 578)
Population mean number of perfect (error zero) cases: 4.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction 90} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tagged_748} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 exec_s (exec_s (in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop) (exec_yank exec_stackdepth exec_if () (exec_eq 90 exec_dup (integer_sub boolean_yank exec_y_when_autoconstructing (boolean_xor) boolean_or exec_empty boolean_eq integer_fromboolean boolean_empty integer_flush)) exec_when (integer_yankdup in3 integer_dec boolean_dup boolean_yank boolean_eq in2) exec_do*while (boolean_and) integer_empty) (print_integer exec_do*times (integer_pop tag_integer_307 integer_lt boolean_frominteger) tagged_748 boolean_dup_times exec_y (integer_shove) exec_when () boolean_not) 17) () ())
Errors: [1 0 1 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 56
Size: 72
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.772
Median total errors in population: 5
Error averages by case: (0.774 0.615 0.774 0.839 0.193 0.595 0.59 0.774 0.196 0.422)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.378
Average program size in population (points): 60.428
Average percent parens in population: 0.204
Minimum age in population: 16.78125
Maximum age in population: 21.95751953125
Average age in population: 19.90525439453125
Median age in population: 19.972412109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 9183425
--- Timings ---
Current time: 1559583295891 milliseconds
Total Time:          40.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.0 seconds, 61.7%
Fitness Testing:      9.9 seconds, 24.3%
Report:               5.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -52                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: -12                
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 1818181818181818181818
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 70                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 151515151515       
Correct output: 23                  | Program output: 5757575757         
Correct output: 6                   | Program output: 29292929292929292929292929292929292929292929292929
Correct output: 22                  | Program output: 22                 
Correct output: 27                  | Program output: 27                 
Correct output: 30                  | Program output: 77                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 67                 
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 1313               
Correct output: 29                  | Program output: 37                 
Correct output: 49                  | Program output: 49                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 58                 
Correct output: -46                 | Program output: -46                
Correct output: 36                  | Program output: 76                 
Correct output: -73                 | Program output: 12121212121212121212121212
Correct output: -43                 | Program output: -43                
Correct output: -39                 | Program output: -20                
Correct output: -3                  | Program output: -3                 
Correct output: -88                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -65                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -51                 | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -60                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: -27                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -40                
Correct output: -88                 | Program output: -75                
Correct output: -87                 | Program output: -36                
Correct output: -65                 | Program output: -55                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -6                 
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -34                
Correct output: -73                 | Program output: -49                
Correct output: -7                  | Program output: -7                 
Correct output: -65                 | Program output: -33                
Correct output: -35                 | Program output: -9                 
Correct output: -26                 | Program output: -20                
Correct output: -19                 | Program output: -19                
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -38                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: 77777777           
Correct output: -84                 | Program output: -14                
Correct output: -88                 | Program output: -81                
Correct output: -82                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -4                 
Correct output: -70                 | Program output: -70                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 50                 
Correct output: -55                 | Program output: -49                
Correct output: -33                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -19                
Correct output: -71                 | Program output: 1                  
Correct output: -67                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq})
Lexicase best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop integer_shove integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) integer_swap exec_flush) exec_when () integer_eq)
Lexicase best errors: [0 1 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 75
Percent parens: 0.120
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq})
Zero cases best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop integer_shove integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) integer_swap exec_flush) exec_when () integer_eq)
Zero cases best errors: [0 1 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 75
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 23 837 287 424 550 505 558 283 806)
Population mean number of elite cases: 4.56
Count of perfect (error zero) individuals by case: (283 23 837 287 424 550 505 558 283 806)
Population mean number of perfect (error zero) cases: 4.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_469} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq})
Best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div boolean_invert_second_then_and in4 boolean_yank integer_min boolean_pop integer_shove integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_469 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
Errors: [0 1 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 66
Size: 75
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 5.444
Median total errors in population: 5
Error averages by case: (0.717 0.977 0.163 0.713 0.576 0.45 0.495 0.442 0.717 0.194)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.932
Average program size in population (points): 66.591
Average percent parens in population: 0.193
Minimum age in population: 18.30859375
Maximum age in population: 23.16064453125
Average age in population: 20.9912099609375
Median age in population: 21.1375732421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 10073963
--- Timings ---
Current time: 1559583299369 milliseconds
Total Time:          43.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.8 seconds, 61.3%
Fitness Testing:     10.7 seconds, 24.4%
Report:               6.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 265
Test mean error for best: 0.26500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -52                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: -12                
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18181818181818181818
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 151515151515       
Correct output: 23                  | Program output: 57575757           
Correct output: 6                   | Program output: 29292929292929292929292929292929292929292929292929
Correct output: 22                  | Program output: 22                 
Correct output: 27                  | Program output: 27                 
Correct output: 30                  | Program output: 30                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 1313               
Correct output: 29                  | Program output: 37                 
Correct output: 49                  | Program output: 49                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: -46                
Correct output: 36                  | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -43                 | Program output: -43                
Correct output: -39                 | Program output: -20                
Correct output: -3                  | Program output: -3                 
Correct output: -88                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -65                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -60                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: 1                   | Program output: 1                  
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -40                
Correct output: -88                 | Program output: -75                
Correct output: -87                 | Program output: -36                
Correct output: -65                 | Program output: -65                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -94                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -42                
Correct output: -73                 | Program output: -49                
Correct output: -7                  | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -9                 
Correct output: -26                 | Program output: -20                
Correct output: -19                 | Program output: -19                
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -14                
Correct output: -88                 | Program output: -81                
Correct output: -82                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -50                 | Program output: -4                 
Correct output: -70                 | Program output: -70                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 50                 
Correct output: -55                 | Program output: -55                
Correct output: -33                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -19                
Correct output: -71                 | Program output: 1                  
Correct output: -67                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq})
Lexicase best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 77
Percent parens: 0.117
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq})
Zero cases best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 77
Percent parens: 0.117
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 852 441 11 478 609 15 825 547 541)
Population mean number of elite cases: 4.69
Count of perfect (error zero) individuals by case: (372 852 441 11 478 609 15 825 547 541)
Population mean number of perfect (error zero) cases: 4.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq})
Best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 68
Size: 77
Percent parens: 0.117
--- Population Statistics ---
Average total errors in population: 5.309
Median total errors in population: 5
Error averages by case: (0.628 0.148 0.559 0.989 0.522 0.391 0.985 0.175 0.453 0.459)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.298
Average program size in population (points): 69.302
Average percent parens in population: 0.159
Minimum age in population: 19.30859375
Maximum age in population: 24.22161865234375
Average age in population: 22.59320971679688
Median age in population: 22.63217163085938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.01
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 11061298
--- Timings ---
Current time: 1559583302928 milliseconds
Total Time:          47.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.7 seconds, 60.5%
Fitness Testing:     11.6 seconds, 24.6%
Report:               7.0 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 228
Test mean error for best: 0.22800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: 29                 
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 57                 
Correct output: 6                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 27                  | Program output: 27                 
Correct output: 30                  | Program output: 30                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 37                 
Correct output: 49                  | Program output: 49                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: -46                
Correct output: 36                  | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -43                 | Program output: -16                
Correct output: -39                 | Program output: -39                
Correct output: -3                  | Program output: -3                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: 1                   | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -62                 | Program output: -41                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -7                  | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -26                 | Program output: -26                
Correct output: -19                 | Program output: -13                
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 65                 
Correct output: -69                 | Program output: -49                
Correct output: -80                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 37                 
Correct output: -43                 | Program output: 13                 
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 50                 
Correct output: -55                 | Program output: -55                
Correct output: -33                 | Program output: 56                 
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Lexicase best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_not exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq exec_do*times (integer_pop tag_integer_307 integer_lt boolean_frominteger) exec_while (boolean_empty) exec_y (exec_k () (exec_when () boolean_not) 17))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 62
Percent parens: 0.177
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_307} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction 17})
Zero cases best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_not exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq exec_do*times (integer_pop tag_integer_307 integer_lt boolean_frominteger) exec_while (boolean_empty) exec_y (exec_k () (exec_when () boolean_not) 17))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 62
Percent parens: 0.177
--- Lexicase Population Statistics ---
Count of elite individuals by case: (731 13 917 917 492 819 746 75 823 47)
Population mean number of elite cases: 5.58
Count of perfect (error zero) individuals by case: (731 13 917 917 492 819 746 75 823 47)
Population mean number of perfect (error zero) cases: 5.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq})
Best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot exec_y_when_autoconstructing () boolean_invert_second_then_and boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 68
Size: 78
Percent parens: 0.128
--- Population Statistics ---
Average total errors in population: 4.42
Median total errors in population: 4
Error averages by case: (0.269 0.987 0.083 0.083 0.508 0.181 0.254 0.925 0.177 0.953)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.969
Average program size in population (points): 76.044
Average percent parens in population: 0.133
Minimum age in population: 22.661865234375
Maximum age in population: 25.33343505859375
Average age in population: 23.84613870239258
Median age in population: 23.97222900390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 198
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 209
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.01
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.198
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 12193664
--- Timings ---
Current time: 1559583306233 milliseconds
Total Time:          51.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.5 seconds, 59.8%
Fitness Testing:     12.7 seconds, 24.8%
Report:               7.7 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 228
Test mean error for best: 0.22800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: 29                 
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 57                 
Correct output: 6                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 27                  | Program output: 27                 
Correct output: 30                  | Program output: 30                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 37                 
Correct output: 49                  | Program output: 49                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: -46                
Correct output: 36                  | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -43                 | Program output: -16                
Correct output: -39                 | Program output: -39                
Correct output: -3                  | Program output: -3                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: 1                   | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -62                 | Program output: -41                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -7                  | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -26                 | Program output: -26                
Correct output: -19                 | Program output: -13                
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 65                 
Correct output: -69                 | Program output: -49                
Correct output: -80                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 37                 
Correct output: -43                 | Program output: 13                 
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 50                 
Correct output: -55                 | Program output: -55                
Correct output: -33                 | Program output: 56                 
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq})
Lexicase best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 74
Percent parens: 0.122
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq})
Zero cases best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_dup_times boolean_invert_second_then_and boolean_flush in1 integer_rot in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and) boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 74
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (606 626 807 604 900 621 617 766 906 802)
Population mean number of elite cases: 7.26
Count of perfect (error zero) individuals by case: (606 626 807 604 900 621 617 766 906 802)
Population mean number of perfect (error zero) cases: 7.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_785} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction tagged_563} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction tag_integer_992} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_297} {:close 0, :instruction -42} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq})
Best program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_rot integer_dup_times tagged_563 boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop)) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 64
Size: 73
Percent parens: 0.123
--- Population Statistics ---
Average total errors in population: 2.745
Median total errors in population: 0
Error averages by case: (0.394 0.374 0.193 0.396 0.1 0.379 0.383 0.234 0.094 0.198)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.329
Average program size in population (points): 76.0
Average percent parens in population: 0.128
Minimum age in population: 24.06704711914062
Maximum age in population: 26.47222900390625
Average age in population: 25.51538447570801
Median age in population: 25.47222900390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.01
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 13089032
--- Timings ---
Current time: 1559583309303 milliseconds
Total Time:          54.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.4 seconds, 59.9%
Fitness Testing:     13.5 seconds, 24.9%
Report:               8.1 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 17
Successful program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_rot integer_dup_times tagged_563 boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop)) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 73


Auto-simplifying with starting size: 73
step: 0
program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_rot integer_dup_times tagged_563 boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop)) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 73

step: 500
program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_rot integer_dup_times tagged_563 boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop)) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 73

step: 1000
program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_rot integer_dup_times tagged_563 boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop)) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 73

step: 1500
program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_rot integer_dup_times tagged_563 boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop)) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 73

step: 2000
program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_rot integer_dup_times tagged_563 boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop)) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 73

step: 2500
program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_rot integer_dup_times tagged_563 boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop)) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 73

step: 3000
program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_rot integer_dup_times tagged_563 boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop)) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 73

step: 3500
program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_rot integer_dup_times tagged_563 boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop)) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 73

step: 4000
program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_rot integer_dup_times tagged_563 boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop)) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 73

step: 4500
program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_rot integer_dup_times tagged_563 boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop)) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 73

step: 5000
program: (boolean_eq integer_dec boolean_swap exec_stackdepth tag_integer_785 boolean_shove print_boolean print_boolean in2 boolean_shove boolean_invert_second_then_and integer_div in3 in4 boolean_yank integer_min integer_min boolean_pop integer_shove integer_rot integer_dup_times tagged_563 boolean_flush in1 integer_rot print_integer integer_add exec_y_when_autoconstructing (boolean_dup exec_dup (boolean_and boolean_yank exec_do*range (integer_dup_items) exec_dup_times (boolean_eq print_integer boolean_eq boolean_pop)) boolean_pop integer_mult) tag_integer_992 integer_mod integer_empty integer_min integer_fromboolean exec_empty integer_stackdepth tagged_297 -42 integer_inc integer_mod exec_stackdepth exec_dup_times (boolean_swap integer_mult integer_dup_times exec_y_when_autoconstructing (exec_do*range (integer_sub)) boolean_or exec_flush) exec_when () integer_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 73

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 228
Test mean error for best: 0.22800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -22                 | Program output: -22                
Correct output: -12                 | Program output: 29                 
Correct output: -33                 | Program output: -33                
Correct output: 18                  | Program output: 18                 
Correct output: 56                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: 48                  | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 23                  | Program output: 57                 
Correct output: 6                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 27                  | Program output: 27                 
Correct output: 30                  | Program output: 30                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 37                 
Correct output: 49                  | Program output: 49                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 19                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: -46                
Correct output: 36                  | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -43                 | Program output: -16                
Correct output: -39                 | Program output: -39                
Correct output: -3                  | Program output: -3                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -21                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: 1                   | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -79                 | Program output: -79                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -62                 | Program output: -41                
Correct output: -70                 | Program output: -70                
Correct output: -94                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -42                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -7                  | Program output: -7                 
Correct output: -65                 | Program output: -65                
Correct output: -35                 | Program output: -35                
Correct output: -26                 | Program output: -26                
Correct output: -19                 | Program output: -13                
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 65                 
Correct output: -69                 | Program output: -49                
Correct output: -80                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 37                 
Correct output: -43                 | Program output: 13                 
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -25                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 50                 
Correct output: -55                 | Program output: -55                
Correct output: -33                 | Program output: 56                 
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
;;******************************
