Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[60 -51 -51 -51] -51] [[65 73 73 73] 65] [[100 -74 100 100] -74] [[61 -9 61 61] -9] [[13 13 98 13] 13] [[-27 -81 -81 -81] -81] [[-43 -43 -43 -19] -43] [[-49 -49 -49 18] -49] [[39 -88 39 39] -88] [[14 32 32 32] 14] [(89 89 89 89) 89] [(91 91 91 91) 91] [(-24 -24 -24 -24) -24] [(33 33 33 33) 33] [(9 9 9 9) 9] [(98 15 77 57) 15] [(26 60 2 84) 2] [(28 39 81 73) 28] [(7 67 36 81) 7] [(75 17 46 99) 17] [(2 92 58 18) 2] [(42 27 10 71) 10] [(74 26 82 16) 16] [(37 78 56 91) 37] [(75 92 11 9) 9] [(77 3 54 100) 3] [(28 25 32 6) 6] [(65 78 17 10) 10] [(15 51 24 83) 15] [(1 43 6 56) 1] [(20 4 20 74) 4] [(6 47 20 40) 6] [(34 34 23 68) 23] [(95 68 94 58) 58] [(91 100 76 65) 65] [(-95 93 -74 25) -95] [(-58 -53 8 19) -58] [(-37 27 90 70) -37] [(-64 -71 74 -71) -71] [(49 78 5 -40) -40] [(74 -27 27 -58) -58] [(11 5 2 81) 2] [(75 85 62 49) 49] [(37 45 -75 -11) -75] [(-29 62 -8 -8) -29] [(-75 86 15 93) -75] [(-81 -40 -92 54) -92] [(45 -74 72 24) -74] [(-17 -70 -72 -92) -92] [(6 -57 -34 61) -57] [(-21 75 86 -5) -21] [(-94 100 4 22) -94] [(80 -89 -15 -27) -89] [(-9 -69 -80 -46) -80] [(45 83 0 -4) -4] [(-29 -100 -29 49) -100] [(-81 -2 -15 97) -81] [(15 -60 99 -12) -60] [(87 -44 6 -48) -48] [(-73 2 22 90) -73] [(-32 -49 69 88) -49] [(-39 23 49 62) -39] [(-86 -97 -48 50) -97] [(96 -28 91 -26) -28] [(-26 -85 98 -91) -91] [(-18 76 89 73) -18] [(-82 -20 11 60) -82] [(90 -35 -91 -61) -91] [(-27 -22 -58 72) -58] [(44 20 89 -70) -70] [(55 -24 2 7) -24] [(-28 -12 -11 -33) -33] [(-76 -71 30 -24) -76] [(64 60 87 -26) -26] [(-14 -30 45 53) -30] [(75 28 5 -1) -1] [(-60 -46 29 -57) -60] [(-16 -47 -26 -59) -59] [(5 95 -14 46) -14] [(-17 93 10 88) -17] [(-1 -21 -30 13) -30] [(75 -6 47 69) -6] [(39 25 -60 -20) -60] [(93 -7 26 -87) -87] [(97 -82 25 9) -82] [(39 30 -100 -61) -100] [(69 42 33 79) 33] [(1 41 58 2) 1] [(77 45 91 62) 45] [(-17 95 63 87) -17] [(4 67 46 -48) -48] [(-35 -61 74 -57) -61] [(-19 21 5 38) -19] [(93 25 7 -100) -100] [(-86 62 -58 -95) -95])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[60 -51 -51 -51] -51]
Train Case:   6 | Input/Output: [[65 73 73 73] 65]
Train Case:   7 | Input/Output: [[100 -74 100 100] -74]
Train Case:   8 | Input/Output: [[61 -9 61 61] -9]
Train Case:   9 | Input/Output: [[13 13 98 13] 13]
Train Case:  10 | Input/Output: [[-27 -81 -81 -81] -81]
Train Case:  11 | Input/Output: [[-43 -43 -43 -19] -43]
Train Case:  12 | Input/Output: [[-49 -49 -49 18] -49]
Train Case:  13 | Input/Output: [[39 -88 39 39] -88]
Train Case:  14 | Input/Output: [[14 32 32 32] 14]
Train Case:  15 | Input/Output: [(89 89 89 89) 89]
Train Case:  16 | Input/Output: [(91 91 91 91) 91]
Train Case:  17 | Input/Output: [(-24 -24 -24 -24) -24]
Train Case:  18 | Input/Output: [(33 33 33 33) 33]
Train Case:  19 | Input/Output: [(9 9 9 9) 9]
Train Case:  20 | Input/Output: [(98 15 77 57) 15]
Train Case:  21 | Input/Output: [(26 60 2 84) 2]
Train Case:  22 | Input/Output: [(28 39 81 73) 28]
Train Case:  23 | Input/Output: [(7 67 36 81) 7]
Train Case:  24 | Input/Output: [(75 17 46 99) 17]
Train Case:  25 | Input/Output: [(2 92 58 18) 2]
Train Case:  26 | Input/Output: [(42 27 10 71) 10]
Train Case:  27 | Input/Output: [(74 26 82 16) 16]
Train Case:  28 | Input/Output: [(37 78 56 91) 37]
Train Case:  29 | Input/Output: [(75 92 11 9) 9]
Train Case:  30 | Input/Output: [(77 3 54 100) 3]
Train Case:  31 | Input/Output: [(28 25 32 6) 6]
Train Case:  32 | Input/Output: [(65 78 17 10) 10]
Train Case:  33 | Input/Output: [(15 51 24 83) 15]
Train Case:  34 | Input/Output: [(1 43 6 56) 1]
Train Case:  35 | Input/Output: [(20 4 20 74) 4]
Train Case:  36 | Input/Output: [(6 47 20 40) 6]
Train Case:  37 | Input/Output: [(34 34 23 68) 23]
Train Case:  38 | Input/Output: [(95 68 94 58) 58]
Train Case:  39 | Input/Output: [(91 100 76 65) 65]
Train Case:  40 | Input/Output: [(-95 93 -74 25) -95]
Train Case:  41 | Input/Output: [(-58 -53 8 19) -58]
Train Case:  42 | Input/Output: [(-37 27 90 70) -37]
Train Case:  43 | Input/Output: [(-64 -71 74 -71) -71]
Train Case:  44 | Input/Output: [(49 78 5 -40) -40]
Train Case:  45 | Input/Output: [(74 -27 27 -58) -58]
Train Case:  46 | Input/Output: [(11 5 2 81) 2]
Train Case:  47 | Input/Output: [(75 85 62 49) 49]
Train Case:  48 | Input/Output: [(37 45 -75 -11) -75]
Train Case:  49 | Input/Output: [(-29 62 -8 -8) -29]
Train Case:  50 | Input/Output: [(-75 86 15 93) -75]
Train Case:  51 | Input/Output: [(-81 -40 -92 54) -92]
Train Case:  52 | Input/Output: [(45 -74 72 24) -74]
Train Case:  53 | Input/Output: [(-17 -70 -72 -92) -92]
Train Case:  54 | Input/Output: [(6 -57 -34 61) -57]
Train Case:  55 | Input/Output: [(-21 75 86 -5) -21]
Train Case:  56 | Input/Output: [(-94 100 4 22) -94]
Train Case:  57 | Input/Output: [(80 -89 -15 -27) -89]
Train Case:  58 | Input/Output: [(-9 -69 -80 -46) -80]
Train Case:  59 | Input/Output: [(45 83 0 -4) -4]
Train Case:  60 | Input/Output: [(-29 -100 -29 49) -100]
Train Case:  61 | Input/Output: [(-81 -2 -15 97) -81]
Train Case:  62 | Input/Output: [(15 -60 99 -12) -60]
Train Case:  63 | Input/Output: [(87 -44 6 -48) -48]
Train Case:  64 | Input/Output: [(-73 2 22 90) -73]
Train Case:  65 | Input/Output: [(-32 -49 69 88) -49]
Train Case:  66 | Input/Output: [(-39 23 49 62) -39]
Train Case:  67 | Input/Output: [(-86 -97 -48 50) -97]
Train Case:  68 | Input/Output: [(96 -28 91 -26) -28]
Train Case:  69 | Input/Output: [(-26 -85 98 -91) -91]
Train Case:  70 | Input/Output: [(-18 76 89 73) -18]
Train Case:  71 | Input/Output: [(-82 -20 11 60) -82]
Train Case:  72 | Input/Output: [(90 -35 -91 -61) -91]
Train Case:  73 | Input/Output: [(-27 -22 -58 72) -58]
Train Case:  74 | Input/Output: [(44 20 89 -70) -70]
Train Case:  75 | Input/Output: [(55 -24 2 7) -24]
Train Case:  76 | Input/Output: [(-28 -12 -11 -33) -33]
Train Case:  77 | Input/Output: [(-76 -71 30 -24) -76]
Train Case:  78 | Input/Output: [(64 60 87 -26) -26]
Train Case:  79 | Input/Output: [(-14 -30 45 53) -30]
Train Case:  80 | Input/Output: [(75 28 5 -1) -1]
Train Case:  81 | Input/Output: [(-60 -46 29 -57) -60]
Train Case:  82 | Input/Output: [(-16 -47 -26 -59) -59]
Train Case:  83 | Input/Output: [(5 95 -14 46) -14]
Train Case:  84 | Input/Output: [(-17 93 10 88) -17]
Train Case:  85 | Input/Output: [(-1 -21 -30 13) -30]
Train Case:  86 | Input/Output: [(75 -6 47 69) -6]
Train Case:  87 | Input/Output: [(39 25 -60 -20) -60]
Train Case:  88 | Input/Output: [(93 -7 26 -87) -87]
Train Case:  89 | Input/Output: [(97 -82 25 9) -82]
Train Case:  90 | Input/Output: [(39 30 -100 -61) -100]
Train Case:  91 | Input/Output: [(69 42 33 79) 33]
Train Case:  92 | Input/Output: [(1 41 58 2) 1]
Train Case:  93 | Input/Output: [(77 45 91 62) 45]
Train Case:  94 | Input/Output: [(-17 95 63 87) -17]
Train Case:  95 | Input/Output: [(4 67 46 -48) -48]
Train Case:  96 | Input/Output: [(-35 -61 74 -57) -61]
Train Case:  97 | Input/Output: [(-19 21 5 38) -19]
Train Case:  98 | Input/Output: [(93 25 7 -100) -100]
Train Case:  99 | Input/Output: [(-86 62 -58 -95) -95]
Test Case:   0 | Input/Output: [[-80 -80 -87 -80] -87]
Test Case:   1 | Input/Output: [[-32 -32 -32 23] -32]
Test Case:   2 | Input/Output: [[29 29 29 10] 10]
Test Case:   3 | Input/Output: [[-36 -72 -72 -72] -72]
Test Case:   4 | Input/Output: [[35 12 35 35] 12]
Test Case:   5 | Input/Output: [[-22 82 82 82] -22]
Test Case:   6 | Input/Output: [[-28 -48 -28 -28] -48]
Test Case:   7 | Input/Output: [[75 75 60 75] 60]
Test Case:   8 | Input/Output: [[-50 91 -50 -50] -50]
Test Case:   9 | Input/Output: [[-18 -18 38 -18] -18]
Test Case:  10 | Input/Output: [[-21 -21 -97 -21] -97]
Test Case:  11 | Input/Output: [[-93 57 57 57] -93]
Test Case:  12 | Input/Output: [[31 31 -44 31] -44]
Test Case:  13 | Input/Output: [[-44 -44 -44 66] -44]
Test Case:  14 | Input/Output: [[78 78 -27 78] -27]
Test Case:  15 | Input/Output: [[53 53 53 89] 53]
Test Case:  16 | Input/Output: [[-60 -65 -60 -60] -65]
Test Case:  17 | Input/Output: [[57 29 57 57] 29]
Test Case:  18 | Input/Output: [[89 89 50 89] 50]
Test Case:  19 | Input/Output: [[68 68 68 7] 7]
Test Case:  20 | Input/Output: [[-53 87 -53 -53] -53]
Test Case:  21 | Input/Output: [[39 -20 -20 -20] -20]
Test Case:  22 | Input/Output: [[86 86 86 60] 60]
Test Case:  23 | Input/Output: [[48 20 48 48] 20]
Test Case:  24 | Input/Output: [[-77 62 62 62] -77]
Test Case:  25 | Input/Output: [[-54 -54 -54 -23] -54]
Test Case:  26 | Input/Output: [[-39 -39 67 -39] -39]
Test Case:  27 | Input/Output: [[-73 96 96 96] -73]
Test Case:  28 | Input/Output: [[9 -98 -98 -98] -98]
Test Case:  29 | Input/Output: [[56 56 -97 56] -97]
Test Case:  30 | Input/Output: [[-15 96 96 96] -15]
Test Case:  31 | Input/Output: [[76 76 -16 76] -16]
Test Case:  32 | Input/Output: [[79 0 79 79] 0]
Test Case:  33 | Input/Output: [[100 100 60 100] 60]
Test Case:  34 | Input/Output: [[16 16 58 16] 16]
Test Case:  35 | Input/Output: [[47 47 -56 47] -56]
Test Case:  36 | Input/Output: [[1 72 1 1] 1]
Test Case:  37 | Input/Output: [[-19 -19 -77 -19] -77]
Test Case:  38 | Input/Output: [[-48 -48 -48 52] -48]
Test Case:  39 | Input/Output: [[-22 -22 77 -22] -22]
Test Case:  40 | Input/Output: [[-96 74 -96 -96] -96]
Test Case:  41 | Input/Output: [[68 68 68 -39] -39]
Test Case:  42 | Input/Output: [[-32 -32 -86 -32] -86]
Test Case:  43 | Input/Output: [[69 69 69 -95] -95]
Test Case:  44 | Input/Output: [[-36 -7 -7 -7] -36]
Test Case:  45 | Input/Output: [[-85 -64 -85 -85] -85]
Test Case:  46 | Input/Output: [[85 85 85 -42] -42]
Test Case:  47 | Input/Output: [[16 16 39 16] 16]
Test Case:  48 | Input/Output: [[-66 -66 -66 85] -66]
Test Case:  49 | Input/Output: [[58 -35 58 58] -35]
Test Case:  50 | Input/Output: [[99 99 99 -53] -53]
Test Case:  51 | Input/Output: [[-78 -78 -78 -96] -96]
Test Case:  52 | Input/Output: [[87 -33 87 87] -33]
Test Case:  53 | Input/Output: [[73 73 73 13] 13]
Test Case:  54 | Input/Output: [[46 46 85 46] 46]
Test Case:  55 | Input/Output: [[-85 -85 -85 -6] -85]
Test Case:  56 | Input/Output: [[51 51 51 44] 44]
Test Case:  57 | Input/Output: [[-45 77 -45 -45] -45]
Test Case:  58 | Input/Output: [[-7 -7 -7 60] -7]
Test Case:  59 | Input/Output: [[-94 -23 -94 -94] -94]
Test Case:  60 | Input/Output: [[-52 5 -52 -52] -52]
Test Case:  61 | Input/Output: [[-77 -77 -77 -37] -77]
Test Case:  62 | Input/Output: [[-62 -62 65 -62] -62]
Test Case:  63 | Input/Output: [[-35 -35 25 -35] -35]
Test Case:  64 | Input/Output: [[67 67 3 67] 3]
Test Case:  65 | Input/Output: [[-43 -3 -43 -43] -43]
Test Case:  66 | Input/Output: [[-20 -20 -75 -20] -75]
Test Case:  67 | Input/Output: [[-65 20 20 20] -65]
Test Case:  68 | Input/Output: [[-2 -92 -2 -2] -92]
Test Case:  69 | Input/Output: [[-35 -35 -35 67] -35]
Test Case:  70 | Input/Output: [[-30 -70 -30 -30] -70]
Test Case:  71 | Input/Output: [[-47 -74 -74 -74] -74]
Test Case:  72 | Input/Output: [[20 20 63 20] 20]
Test Case:  73 | Input/Output: [[80 42 80 80] 42]
Test Case:  74 | Input/Output: [[91 91 -79 91] -79]
Test Case:  75 | Input/Output: [[-40 -40 -40 34] -40]
Test Case:  76 | Input/Output: [[-44 22 22 22] -44]
Test Case:  77 | Input/Output: [[21 -59 21 21] -59]
Test Case:  78 | Input/Output: [[-74 99 -74 -74] -74]
Test Case:  79 | Input/Output: [[-100 29 -100 -100] -100]
Test Case:  80 | Input/Output: [[-53 -100 -53 -53] -100]
Test Case:  81 | Input/Output: [[-69 53 53 53] -69]
Test Case:  82 | Input/Output: [[86 86 -41 86] -41]
Test Case:  83 | Input/Output: [[1 1 40 1] 1]
Test Case:  84 | Input/Output: [[-31 -31 51 -31] -31]
Test Case:  85 | Input/Output: [[-27 -87 -87 -87] -87]
Test Case:  86 | Input/Output: [[-4 -4 96 -4] -4]
Test Case:  87 | Input/Output: [[77 -5 77 77] -5]
Test Case:  88 | Input/Output: [[-42 -46 -46 -46] -46]
Test Case:  89 | Input/Output: [[29 29 29 87] 29]
Test Case:  90 | Input/Output: [[45 41 45 45] 41]
Test Case:  91 | Input/Output: [[33 33 -56 33] -56]
Test Case:  92 | Input/Output: [[-89 43 -89 -89] -89]
Test Case:  93 | Input/Output: [[-22 -22 -22 15] -22]
Test Case:  94 | Input/Output: [[12 17 12 12] 12]
Test Case:  95 | Input/Output: [[89 83 89 89] 83]
Test Case:  96 | Input/Output: [[-35 -35 58 -35] -35]
Test Case:  97 | Input/Output: [[82 82 82 -6] -6]
Test Case:  98 | Input/Output: [[-30 11 11 11] -30]
Test Case:  99 | Input/Output: [[-39 -28 -28 -28] -39]
Test Case: 100 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 101 | Input/Output: [(27 27 27 27) 27]
Test Case: 102 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 103 | Input/Output: [(30 30 30 30) 30]
Test Case: 104 | Input/Output: [(81 81 81 81) 81]
Test Case: 105 | Input/Output: [(33 33 33 33) 33]
Test Case: 106 | Input/Output: [(41 41 41 41) 41]
Test Case: 107 | Input/Output: [(89 89 89 89) 89]
Test Case: 108 | Input/Output: [(84 84 84 84) 84]
Test Case: 109 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 110 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 111 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 112 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 113 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 114 | Input/Output: [(64 64 64 64) 64]
Test Case: 115 | Input/Output: [(28 28 28 28) 28]
Test Case: 116 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 117 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 118 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 119 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 120 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 121 | Input/Output: [(95 95 95 95) 95]
Test Case: 122 | Input/Output: [(34 34 34 34) 34]
Test Case: 123 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 124 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 125 | Input/Output: [(65 65 65 65) 65]
Test Case: 126 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 127 | Input/Output: [(87 87 87 87) 87]
Test Case: 128 | Input/Output: [(6 6 6 6) 6]
Test Case: 129 | Input/Output: [(12 12 12 12) 12]
Test Case: 130 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 131 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 132 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 133 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 134 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 135 | Input/Output: [(37 37 37 37) 37]
Test Case: 136 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 137 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 138 | Input/Output: [(5 5 5 5) 5]
Test Case: 139 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 140 | Input/Output: [(73 73 73 73) 73]
Test Case: 141 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 142 | Input/Output: [(22 22 22 22) 22]
Test Case: 143 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 144 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 145 | Input/Output: [(99 99 99 99) 99]
Test Case: 146 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 147 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 148 | Input/Output: [(3 3 3 3) 3]
Test Case: 149 | Input/Output: [(54 54 54 54) 54]
Test Case: 150 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 151 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 152 | Input/Output: [(79 79 79 79) 79]
Test Case: 153 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 154 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 155 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 156 | Input/Output: [(62 62 62 62) 62]
Test Case: 157 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 158 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 159 | Input/Output: [(18 18 18 18) 18]
Test Case: 160 | Input/Output: [(87 87 87 87) 87]
Test Case: 161 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 162 | Input/Output: [(54 54 54 54) 54]
Test Case: 163 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 164 | Input/Output: [(45 45 45 45) 45]
Test Case: 165 | Input/Output: [(76 76 76 76) 76]
Test Case: 166 | Input/Output: [(59 59 59 59) 59]
Test Case: 167 | Input/Output: [(15 15 15 15) 15]
Test Case: 168 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 169 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 170 | Input/Output: [(63 63 63 63) 63]
Test Case: 171 | Input/Output: [(86 86 86 86) 86]
Test Case: 172 | Input/Output: [(38 38 38 38) 38]
Test Case: 173 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 174 | Input/Output: [(76 76 76 76) 76]
Test Case: 175 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 176 | Input/Output: [(10 10 10 10) 10]
Test Case: 177 | Input/Output: [(19 19 19 19) 19]
Test Case: 178 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 179 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 180 | Input/Output: [(9 9 9 9) 9]
Test Case: 181 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 182 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 183 | Input/Output: [(51 51 51 51) 51]
Test Case: 184 | Input/Output: [(76 76 76 76) 76]
Test Case: 185 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 186 | Input/Output: [(84 84 84 84) 84]
Test Case: 187 | Input/Output: [(77 77 77 77) 77]
Test Case: 188 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 189 | Input/Output: [(94 94 94 94) 94]
Test Case: 190 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 191 | Input/Output: [(6 6 6 6) 6]
Test Case: 192 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 193 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 194 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 195 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 196 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 197 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 198 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 199 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 200 | Input/Output: [(47 4 42 62) 4]
Test Case: 201 | Input/Output: [(71 86 29 32) 29]
Test Case: 202 | Input/Output: [(40 45 91 60) 40]
Test Case: 203 | Input/Output: [(35 56 88 68) 35]
Test Case: 204 | Input/Output: [(98 34 7 81) 7]
Test Case: 205 | Input/Output: [(12 64 93 70) 12]
Test Case: 206 | Input/Output: [(6 48 14 97) 6]
Test Case: 207 | Input/Output: [(75 11 87 9) 9]
Test Case: 208 | Input/Output: [(27 5 0 33) 0]
Test Case: 209 | Input/Output: [(40 80 94 23) 23]
Test Case: 210 | Input/Output: [(7 89 80 27) 7]
Test Case: 211 | Input/Output: [(17 28 19 73) 17]
Test Case: 212 | Input/Output: [(29 7 59 89) 7]
Test Case: 213 | Input/Output: [(68 44 10 34) 10]
Test Case: 214 | Input/Output: [(57 79 22 50) 22]
Test Case: 215 | Input/Output: [(52 66 56 16) 16]
Test Case: 216 | Input/Output: [(42 99 20 62) 20]
Test Case: 217 | Input/Output: [(93 67 42 55) 42]
Test Case: 218 | Input/Output: [(66 74 55 8) 8]
Test Case: 219 | Input/Output: [(97 31 82 56) 31]
Test Case: 220 | Input/Output: [(63 53 92 51) 51]
Test Case: 221 | Input/Output: [(60 78 49 88) 49]
Test Case: 222 | Input/Output: [(46 36 60 70) 36]
Test Case: 223 | Input/Output: [(81 73 53 36) 36]
Test Case: 224 | Input/Output: [(24 45 13 29) 13]
Test Case: 225 | Input/Output: [(59 7 16 79) 7]
Test Case: 226 | Input/Output: [(75 97 61 39) 39]
Test Case: 227 | Input/Output: [(84 13 80 7) 7]
Test Case: 228 | Input/Output: [(97 50 52 68) 50]
Test Case: 229 | Input/Output: [(68 90 58 22) 22]
Test Case: 230 | Input/Output: [(29 68 57 52) 29]
Test Case: 231 | Input/Output: [(65 57 50 92) 50]
Test Case: 232 | Input/Output: [(76 62 20 58) 20]
Test Case: 233 | Input/Output: [(33 59 34 52) 33]
Test Case: 234 | Input/Output: [(49 45 46 18) 18]
Test Case: 235 | Input/Output: [(42 76 90 1) 1]
Test Case: 236 | Input/Output: [(31 54 29 62) 29]
Test Case: 237 | Input/Output: [(14 36 13 82) 13]
Test Case: 238 | Input/Output: [(49 82 64 2) 2]
Test Case: 239 | Input/Output: [(30 89 86 16) 16]
Test Case: 240 | Input/Output: [(63 100 17 94) 17]
Test Case: 241 | Input/Output: [(81 41 95 53) 41]
Test Case: 242 | Input/Output: [(39 61 63 38) 38]
Test Case: 243 | Input/Output: [(34 52 75 6) 6]
Test Case: 244 | Input/Output: [(0 100 19 67) 0]
Test Case: 245 | Input/Output: [(15 91 17 36) 15]
Test Case: 246 | Input/Output: [(81 3 15 1) 1]
Test Case: 247 | Input/Output: [(93 82 49 62) 49]
Test Case: 248 | Input/Output: [(84 45 33 68) 33]
Test Case: 249 | Input/Output: [(50 74 41 96) 41]
Test Case: 250 | Input/Output: [(92 16 46 21) 16]
Test Case: 251 | Input/Output: [(34 56 54 70) 34]
Test Case: 252 | Input/Output: [(8 63 70 58) 8]
Test Case: 253 | Input/Output: [(14 75 52 14) 14]
Test Case: 254 | Input/Output: [(58 85 71 21) 21]
Test Case: 255 | Input/Output: [(67 73 68 27) 27]
Test Case: 256 | Input/Output: [(83 64 99 54) 54]
Test Case: 257 | Input/Output: [(76 47 17 31) 17]
Test Case: 258 | Input/Output: [(94 80 74 12) 12]
Test Case: 259 | Input/Output: [(18 60 83 4) 4]
Test Case: 260 | Input/Output: [(50 38 98 24) 24]
Test Case: 261 | Input/Output: [(66 37 62 41) 37]
Test Case: 262 | Input/Output: [(95 8 33 39) 8]
Test Case: 263 | Input/Output: [(3 67 39 6) 3]
Test Case: 264 | Input/Output: [(46 53 82 61) 46]
Test Case: 265 | Input/Output: [(70 44 15 92) 15]
Test Case: 266 | Input/Output: [(19 74 21 93) 19]
Test Case: 267 | Input/Output: [(11 15 84 72) 11]
Test Case: 268 | Input/Output: [(16 34 82 25) 16]
Test Case: 269 | Input/Output: [(42 39 92 62) 39]
Test Case: 270 | Input/Output: [(27 74 8 78) 8]
Test Case: 271 | Input/Output: [(32 63 36 82) 32]
Test Case: 272 | Input/Output: [(2 2 72 77) 2]
Test Case: 273 | Input/Output: [(71 45 74 12) 12]
Test Case: 274 | Input/Output: [(63 4 98 40) 4]
Test Case: 275 | Input/Output: [(0 69 4 25) 0]
Test Case: 276 | Input/Output: [(13 81 7 53) 7]
Test Case: 277 | Input/Output: [(85 84 0 97) 0]
Test Case: 278 | Input/Output: [(57 26 13 48) 13]
Test Case: 279 | Input/Output: [(47 22 59 79) 22]
Test Case: 280 | Input/Output: [(1 25 40 35) 1]
Test Case: 281 | Input/Output: [(89 47 100 13) 13]
Test Case: 282 | Input/Output: [(84 44 60 51) 44]
Test Case: 283 | Input/Output: [(48 23 8 5) 5]
Test Case: 284 | Input/Output: [(32 86 43 16) 16]
Test Case: 285 | Input/Output: [(21 81 56 15) 15]
Test Case: 286 | Input/Output: [(71 81 33 37) 33]
Test Case: 287 | Input/Output: [(97 0 34 58) 0]
Test Case: 288 | Input/Output: [(34 68 95 97) 34]
Test Case: 289 | Input/Output: [(96 62 81 2) 2]
Test Case: 290 | Input/Output: [(84 41 99 1) 1]
Test Case: 291 | Input/Output: [(36 28 9 93) 9]
Test Case: 292 | Input/Output: [(60 10 53 88) 10]
Test Case: 293 | Input/Output: [(88 91 45 67) 45]
Test Case: 294 | Input/Output: [(63 10 83 81) 10]
Test Case: 295 | Input/Output: [(26 18 48 85) 18]
Test Case: 296 | Input/Output: [(45 73 41 49) 41]
Test Case: 297 | Input/Output: [(100 63 48 38) 38]
Test Case: 298 | Input/Output: [(52 75 48 49) 48]
Test Case: 299 | Input/Output: [(40 90 54 66) 40]
Test Case: 300 | Input/Output: [(18 66 9 10) 9]
Test Case: 301 | Input/Output: [(59 61 12 58) 12]
Test Case: 302 | Input/Output: [(2 55 80 59) 2]
Test Case: 303 | Input/Output: [(0 48 74 51) 0]
Test Case: 304 | Input/Output: [(59 17 90 25) 17]
Test Case: 305 | Input/Output: [(5 8 12 88) 5]
Test Case: 306 | Input/Output: [(86 76 6 74) 6]
Test Case: 307 | Input/Output: [(99 37 28 23) 23]
Test Case: 308 | Input/Output: [(85 91 82 58) 58]
Test Case: 309 | Input/Output: [(13 54 68 50) 13]
Test Case: 310 | Input/Output: [(32 40 72 27) 27]
Test Case: 311 | Input/Output: [(80 66 94 21) 21]
Test Case: 312 | Input/Output: [(8 51 89 95) 8]
Test Case: 313 | Input/Output: [(9 68 33 54) 9]
Test Case: 314 | Input/Output: [(79 45 11 7) 7]
Test Case: 315 | Input/Output: [(79 92 12 47) 12]
Test Case: 316 | Input/Output: [(65 18 30 77) 18]
Test Case: 317 | Input/Output: [(23 53 36 37) 23]
Test Case: 318 | Input/Output: [(21 24 85 70) 21]
Test Case: 319 | Input/Output: [(46 83 57 65) 46]
Test Case: 320 | Input/Output: [(13 82 42 48) 13]
Test Case: 321 | Input/Output: [(65 78 85 70) 65]
Test Case: 322 | Input/Output: [(34 36 26 76) 26]
Test Case: 323 | Input/Output: [(13 66 0 90) 0]
Test Case: 324 | Input/Output: [(87 15 32 61) 15]
Test Case: 325 | Input/Output: [(63 35 11 17) 11]
Test Case: 326 | Input/Output: [(66 51 91 62) 51]
Test Case: 327 | Input/Output: [(4 10 57 85) 4]
Test Case: 328 | Input/Output: [(74 61 95 35) 35]
Test Case: 329 | Input/Output: [(17 81 6 98) 6]
Test Case: 330 | Input/Output: [(41 51 79 35) 35]
Test Case: 331 | Input/Output: [(19 83 10 77) 10]
Test Case: 332 | Input/Output: [(89 40 29 16) 16]
Test Case: 333 | Input/Output: [(37 38 3 21) 3]
Test Case: 334 | Input/Output: [(22 19 21 21) 19]
Test Case: 335 | Input/Output: [(12 93 12 45) 12]
Test Case: 336 | Input/Output: [(16 41 56 18) 16]
Test Case: 337 | Input/Output: [(38 35 46 30) 30]
Test Case: 338 | Input/Output: [(1 98 52 27) 1]
Test Case: 339 | Input/Output: [(78 62 45 10) 10]
Test Case: 340 | Input/Output: [(33 14 79 77) 14]
Test Case: 341 | Input/Output: [(8 26 59 85) 8]
Test Case: 342 | Input/Output: [(83 5 82 92) 5]
Test Case: 343 | Input/Output: [(22 90 27 64) 22]
Test Case: 344 | Input/Output: [(58 3 38 73) 3]
Test Case: 345 | Input/Output: [(82 53 87 71) 53]
Test Case: 346 | Input/Output: [(63 94 48 44) 44]
Test Case: 347 | Input/Output: [(12 78 24 1) 1]
Test Case: 348 | Input/Output: [(95 12 84 36) 12]
Test Case: 349 | Input/Output: [(83 47 40 29) 29]
Test Case: 350 | Input/Output: [(15 43 87 48) 15]
Test Case: 351 | Input/Output: [(45 67 50 19) 19]
Test Case: 352 | Input/Output: [(12 20 61 26) 12]
Test Case: 353 | Input/Output: [(55 41 78 27) 27]
Test Case: 354 | Input/Output: [(26 15 85 21) 15]
Test Case: 355 | Input/Output: [(92 16 9 3) 3]
Test Case: 356 | Input/Output: [(48 72 11 23) 11]
Test Case: 357 | Input/Output: [(82 22 56 41) 22]
Test Case: 358 | Input/Output: [(76 21 0 4) 0]
Test Case: 359 | Input/Output: [(56 30 35 26) 26]
Test Case: 360 | Input/Output: [(100 12 50 90) 12]
Test Case: 361 | Input/Output: [(18 48 12 77) 12]
Test Case: 362 | Input/Output: [(80 77 0 59) 0]
Test Case: 363 | Input/Output: [(57 3 37 18) 3]
Test Case: 364 | Input/Output: [(99 21 84 58) 21]
Test Case: 365 | Input/Output: [(6 98 66 50) 6]
Test Case: 366 | Input/Output: [(25 33 9 24) 9]
Test Case: 367 | Input/Output: [(10 46 38 95) 10]
Test Case: 368 | Input/Output: [(7 18 30 13) 7]
Test Case: 369 | Input/Output: [(84 21 40 100) 21]
Test Case: 370 | Input/Output: [(27 22 0 99) 0]
Test Case: 371 | Input/Output: [(85 14 94 100) 14]
Test Case: 372 | Input/Output: [(98 96 2 70) 2]
Test Case: 373 | Input/Output: [(41 75 15 72) 15]
Test Case: 374 | Input/Output: [(21 57 78 48) 21]
Test Case: 375 | Input/Output: [(79 24 78 20) 20]
Test Case: 376 | Input/Output: [(17 34 0 100) 0]
Test Case: 377 | Input/Output: [(87 72 47 22) 22]
Test Case: 378 | Input/Output: [(10 10 63 28) 10]
Test Case: 379 | Input/Output: [(59 84 69 93) 59]
Test Case: 380 | Input/Output: [(96 36 89 6) 6]
Test Case: 381 | Input/Output: [(36 98 13 21) 13]
Test Case: 382 | Input/Output: [(21 28 64 97) 21]
Test Case: 383 | Input/Output: [(96 45 97 52) 45]
Test Case: 384 | Input/Output: [(20 84 98 5) 5]
Test Case: 385 | Input/Output: [(9 77 95 42) 9]
Test Case: 386 | Input/Output: [(11 40 61 89) 11]
Test Case: 387 | Input/Output: [(100 42 53 34) 34]
Test Case: 388 | Input/Output: [(30 74 48 17) 17]
Test Case: 389 | Input/Output: [(42 66 4 23) 4]
Test Case: 390 | Input/Output: [(19 0 41 39) 0]
Test Case: 391 | Input/Output: [(24 89 27 9) 9]
Test Case: 392 | Input/Output: [(99 67 20 64) 20]
Test Case: 393 | Input/Output: [(91 1 86 100) 1]
Test Case: 394 | Input/Output: [(7 35 56 88) 7]
Test Case: 395 | Input/Output: [(86 53 41 53) 41]
Test Case: 396 | Input/Output: [(53 62 83 53) 53]
Test Case: 397 | Input/Output: [(64 62 40 18) 18]
Test Case: 398 | Input/Output: [(33 99 58 62) 33]
Test Case: 399 | Input/Output: [(97 94 32 33) 32]
Test Case: 400 | Input/Output: [(28 60 92 57) 28]
Test Case: 401 | Input/Output: [(77 -51 -31 -92) -92]
Test Case: 402 | Input/Output: [(96 -97 31 6) -97]
Test Case: 403 | Input/Output: [(-91 20 92 -43) -91]
Test Case: 404 | Input/Output: [(-80 -15 27 15) -80]
Test Case: 405 | Input/Output: [(-55 85 46 -36) -55]
Test Case: 406 | Input/Output: [(49 -69 41 94) -69]
Test Case: 407 | Input/Output: [(-4 66 30 18) -4]
Test Case: 408 | Input/Output: [(7 6 8 10) 6]
Test Case: 409 | Input/Output: [(-91 -62 12 4) -91]
Test Case: 410 | Input/Output: [(73 66 -95 -79) -95]
Test Case: 411 | Input/Output: [(13 30 92 -19) -19]
Test Case: 412 | Input/Output: [(-17 -83 89 -93) -93]
Test Case: 413 | Input/Output: [(-23 -19 51 75) -23]
Test Case: 414 | Input/Output: [(-55 -95 98 -10) -95]
Test Case: 415 | Input/Output: [(-4 75 -72 30) -72]
Test Case: 416 | Input/Output: [(7 65 5 74) 5]
Test Case: 417 | Input/Output: [(-42 -86 -74 -89) -89]
Test Case: 418 | Input/Output: [(67 -23 42 78) -23]
Test Case: 419 | Input/Output: [(22 -37 -84 61) -84]
Test Case: 420 | Input/Output: [(66 78 84 -42) -42]
Test Case: 421 | Input/Output: [(6 -82 78 37) -82]
Test Case: 422 | Input/Output: [(54 57 -39 -91) -91]
Test Case: 423 | Input/Output: [(14 54 -96 90) -96]
Test Case: 424 | Input/Output: [(26 -58 98 5) -58]
Test Case: 425 | Input/Output: [(-69 -89 -89 94) -89]
Test Case: 426 | Input/Output: [(-76 -74 61 -69) -76]
Test Case: 427 | Input/Output: [(-50 2 88 8) -50]
Test Case: 428 | Input/Output: [(-28 64 -80 9) -80]
Test Case: 429 | Input/Output: [(15 -30 5 -22) -30]
Test Case: 430 | Input/Output: [(40 40 46 -38) -38]
Test Case: 431 | Input/Output: [(0 25 75 -79) -79]
Test Case: 432 | Input/Output: [(0 11 58 -1) -1]
Test Case: 433 | Input/Output: [(54 -46 88 79) -46]
Test Case: 434 | Input/Output: [(67 87 56 51) 51]
Test Case: 435 | Input/Output: [(-9 26 2 27) -9]
Test Case: 436 | Input/Output: [(48 0 88 -29) -29]
Test Case: 437 | Input/Output: [(-96 -8 -76 -57) -96]
Test Case: 438 | Input/Output: [(19 10 -36 97) -36]
Test Case: 439 | Input/Output: [(-4 -16 -92 5) -92]
Test Case: 440 | Input/Output: [(24 85 -70 24) -70]
Test Case: 441 | Input/Output: [(-46 -41 11 100) -46]
Test Case: 442 | Input/Output: [(-40 76 -68 -50) -68]
Test Case: 443 | Input/Output: [(1 -50 -97 21) -97]
Test Case: 444 | Input/Output: [(19 -16 -93 72) -93]
Test Case: 445 | Input/Output: [(65 -79 81 -99) -99]
Test Case: 446 | Input/Output: [(40 -90 5 1) -90]
Test Case: 447 | Input/Output: [(80 -92 70 36) -92]
Test Case: 448 | Input/Output: [(84 -5 -92 85) -92]
Test Case: 449 | Input/Output: [(-91 9 27 45) -91]
Test Case: 450 | Input/Output: [(100 -38 61 38) -38]
Test Case: 451 | Input/Output: [(-62 -39 -27 -78) -78]
Test Case: 452 | Input/Output: [(-46 25 96 -23) -46]
Test Case: 453 | Input/Output: [(-27 73 37 59) -27]
Test Case: 454 | Input/Output: [(98 5 -99 12) -99]
Test Case: 455 | Input/Output: [(80 -8 -74 3) -74]
Test Case: 456 | Input/Output: [(-33 -12 34 -70) -70]
Test Case: 457 | Input/Output: [(25 -84 4 32) -84]
Test Case: 458 | Input/Output: [(36 -63 24 -88) -88]
Test Case: 459 | Input/Output: [(-74 -25 6 -14) -74]
Test Case: 460 | Input/Output: [(62 -29 50 -72) -72]
Test Case: 461 | Input/Output: [(-43 -44 89 -5) -44]
Test Case: 462 | Input/Output: [(-85 11 45 41) -85]
Test Case: 463 | Input/Output: [(-28 -50 92 69) -50]
Test Case: 464 | Input/Output: [(20 -35 37 84) -35]
Test Case: 465 | Input/Output: [(56 69 76 92) 56]
Test Case: 466 | Input/Output: [(-43 -31 -2 -32) -43]
Test Case: 467 | Input/Output: [(73 -54 -31 -93) -93]
Test Case: 468 | Input/Output: [(-70 -58 53 -73) -73]
Test Case: 469 | Input/Output: [(36 96 -23 -54) -54]
Test Case: 470 | Input/Output: [(-29 28 -77 -11) -77]
Test Case: 471 | Input/Output: [(-92 45 41 19) -92]
Test Case: 472 | Input/Output: [(-15 81 -67 54) -67]
Test Case: 473 | Input/Output: [(93 -51 -68 -77) -77]
Test Case: 474 | Input/Output: [(-45 40 -68 63) -68]
Test Case: 475 | Input/Output: [(92 58 12 -60) -60]
Test Case: 476 | Input/Output: [(27 -94 -36 -55) -94]
Test Case: 477 | Input/Output: [(20 99 96 -63) -63]
Test Case: 478 | Input/Output: [(-84 95 -39 -51) -84]
Test Case: 479 | Input/Output: [(-4 -82 87 44) -82]
Test Case: 480 | Input/Output: [(-28 89 86 76) -28]
Test Case: 481 | Input/Output: [(-65 -87 -60 71) -87]
Test Case: 482 | Input/Output: [(97 67 53 -62) -62]
Test Case: 483 | Input/Output: [(82 -36 -39 83) -39]
Test Case: 484 | Input/Output: [(-28 -28 -69 71) -69]
Test Case: 485 | Input/Output: [(-10 62 6 1) -10]
Test Case: 486 | Input/Output: [(-100 -9 -59 85) -100]
Test Case: 487 | Input/Output: [(4 33 -41 15) -41]
Test Case: 488 | Input/Output: [(0 -97 95 64) -97]
Test Case: 489 | Input/Output: [(-76 40 -81 96) -81]
Test Case: 490 | Input/Output: [(-27 -83 93 -30) -83]
Test Case: 491 | Input/Output: [(95 100 38 -12) -12]
Test Case: 492 | Input/Output: [(74 44 8 53) 8]
Test Case: 493 | Input/Output: [(-62 -62 -75 -68) -75]
Test Case: 494 | Input/Output: [(9 86 49 70) 9]
Test Case: 495 | Input/Output: [(-41 40 89 -57) -57]
Test Case: 496 | Input/Output: [(-72 -90 18 29) -90]
Test Case: 497 | Input/Output: [(-89 -70 74 2) -89]
Test Case: 498 | Input/Output: [(-9 82 -28 7) -28]
Test Case: 499 | Input/Output: [(20 1 30 -18) -18]
Test Case: 500 | Input/Output: [(-13 99 -90 -62) -90]
Test Case: 501 | Input/Output: [(8 -69 51 -2) -69]
Test Case: 502 | Input/Output: [(30 11 -41 60) -41]
Test Case: 503 | Input/Output: [(-20 -21 -60 -39) -60]
Test Case: 504 | Input/Output: [(38 -69 -67 46) -69]
Test Case: 505 | Input/Output: [(36 92 -87 1) -87]
Test Case: 506 | Input/Output: [(14 -38 87 89) -38]
Test Case: 507 | Input/Output: [(-80 20 62 -86) -86]
Test Case: 508 | Input/Output: [(23 30 -73 -17) -73]
Test Case: 509 | Input/Output: [(-97 -49 -40 16) -97]
Test Case: 510 | Input/Output: [(-100 -98 1 -18) -100]
Test Case: 511 | Input/Output: [(-99 24 41 19) -99]
Test Case: 512 | Input/Output: [(26 -16 79 28) -16]
Test Case: 513 | Input/Output: [(-49 -46 20 39) -49]
Test Case: 514 | Input/Output: [(84 -36 2 -48) -48]
Test Case: 515 | Input/Output: [(49 -43 -6 -32) -43]
Test Case: 516 | Input/Output: [(-11 21 -4 26) -11]
Test Case: 517 | Input/Output: [(44 51 55 -63) -63]
Test Case: 518 | Input/Output: [(-69 76 -59 63) -69]
Test Case: 519 | Input/Output: [(-5 31 -11 96) -11]
Test Case: 520 | Input/Output: [(-84 90 14 26) -84]
Test Case: 521 | Input/Output: [(-44 72 -28 72) -44]
Test Case: 522 | Input/Output: [(76 47 -61 -93) -93]
Test Case: 523 | Input/Output: [(49 65 55 7) 7]
Test Case: 524 | Input/Output: [(53 24 51 36) 24]
Test Case: 525 | Input/Output: [(-50 -99 85 -3) -99]
Test Case: 526 | Input/Output: [(-82 -69 21 68) -82]
Test Case: 527 | Input/Output: [(45 -40 88 -85) -85]
Test Case: 528 | Input/Output: [(75 44 -24 73) -24]
Test Case: 529 | Input/Output: [(-31 -69 51 54) -69]
Test Case: 530 | Input/Output: [(84 -26 -56 -89) -89]
Test Case: 531 | Input/Output: [(22 55 81 22) 22]
Test Case: 532 | Input/Output: [(26 -43 -29 50) -43]
Test Case: 533 | Input/Output: [(69 99 -29 -92) -92]
Test Case: 534 | Input/Output: [(-10 -22 -32 43) -32]
Test Case: 535 | Input/Output: [(-56 -77 12 -69) -77]
Test Case: 536 | Input/Output: [(13 -11 90 -35) -35]
Test Case: 537 | Input/Output: [(-82 95 -55 45) -82]
Test Case: 538 | Input/Output: [(-79 -60 -75 -84) -84]
Test Case: 539 | Input/Output: [(12 0 -11 -53) -53]
Test Case: 540 | Input/Output: [(-99 17 12 -85) -99]
Test Case: 541 | Input/Output: [(46 -67 86 -27) -67]
Test Case: 542 | Input/Output: [(-75 -74 -48 87) -75]
Test Case: 543 | Input/Output: [(71 2 -26 89) -26]
Test Case: 544 | Input/Output: [(-44 53 -47 -90) -90]
Test Case: 545 | Input/Output: [(54 74 39 -67) -67]
Test Case: 546 | Input/Output: [(14 4 -11 79) -11]
Test Case: 547 | Input/Output: [(-69 17 -8 93) -69]
Test Case: 548 | Input/Output: [(30 75 -88 -100) -100]
Test Case: 549 | Input/Output: [(-65 35 -28 45) -65]
Test Case: 550 | Input/Output: [(-96 -66 52 -7) -96]
Test Case: 551 | Input/Output: [(99 -49 10 -10) -49]
Test Case: 552 | Input/Output: [(-11 -22 0 -86) -86]
Test Case: 553 | Input/Output: [(-17 -6 -44 46) -44]
Test Case: 554 | Input/Output: [(-98 -94 42 -59) -98]
Test Case: 555 | Input/Output: [(98 29 52 44) 29]
Test Case: 556 | Input/Output: [(69 36 93 67) 36]
Test Case: 557 | Input/Output: [(20 -51 -83 -47) -83]
Test Case: 558 | Input/Output: [(-43 -73 -99 -44) -99]
Test Case: 559 | Input/Output: [(-22 69 -2 1) -22]
Test Case: 560 | Input/Output: [(3 -75 -33 46) -75]
Test Case: 561 | Input/Output: [(-95 -80 -11 -24) -95]
Test Case: 562 | Input/Output: [(5 61 66 92) 5]
Test Case: 563 | Input/Output: [(62 8 -17 8) -17]
Test Case: 564 | Input/Output: [(7 64 -66 63) -66]
Test Case: 565 | Input/Output: [(-56 -31 33 -41) -56]
Test Case: 566 | Input/Output: [(42 45 -88 15) -88]
Test Case: 567 | Input/Output: [(91 -23 33 -83) -83]
Test Case: 568 | Input/Output: [(21 -72 19 -14) -72]
Test Case: 569 | Input/Output: [(-67 19 -4 -27) -67]
Test Case: 570 | Input/Output: [(-84 56 -65 50) -84]
Test Case: 571 | Input/Output: [(72 83 31 -54) -54]
Test Case: 572 | Input/Output: [(15 25 -30 23) -30]
Test Case: 573 | Input/Output: [(41 -49 -77 59) -77]
Test Case: 574 | Input/Output: [(-17 -78 20 -95) -95]
Test Case: 575 | Input/Output: [(5 -52 -39 -82) -82]
Test Case: 576 | Input/Output: [(88 31 39 15) 15]
Test Case: 577 | Input/Output: [(-63 -39 26 25) -63]
Test Case: 578 | Input/Output: [(-68 41 -13 29) -68]
Test Case: 579 | Input/Output: [(-72 15 11 84) -72]
Test Case: 580 | Input/Output: [(-32 -6 74 -21) -32]
Test Case: 581 | Input/Output: [(89 -97 11 -25) -97]
Test Case: 582 | Input/Output: [(12 -23 19 25) -23]
Test Case: 583 | Input/Output: [(-7 -77 -61 64) -77]
Test Case: 584 | Input/Output: [(-10 90 2 -45) -45]
Test Case: 585 | Input/Output: [(-48 83 -28 8) -48]
Test Case: 586 | Input/Output: [(-34 30 -51 10) -51]
Test Case: 587 | Input/Output: [(-27 15 -18 -84) -84]
Test Case: 588 | Input/Output: [(86 78 -43 60) -43]
Test Case: 589 | Input/Output: [(17 -100 91 41) -100]
Test Case: 590 | Input/Output: [(-42 -100 12 28) -100]
Test Case: 591 | Input/Output: [(8 -67 67 -31) -67]
Test Case: 592 | Input/Output: [(55 6 57 -39) -39]
Test Case: 593 | Input/Output: [(-87 2 77 -60) -87]
Test Case: 594 | Input/Output: [(-4 -100 50 44) -100]
Test Case: 595 | Input/Output: [(90 -77 65 79) -77]
Test Case: 596 | Input/Output: [(92 51 -47 85) -47]
Test Case: 597 | Input/Output: [(4 -82 19 68) -82]
Test Case: 598 | Input/Output: [(63 -46 41 47) -46]
Test Case: 599 | Input/Output: [(43 -86 -51 -49) -86]
Test Case: 600 | Input/Output: [(54 57 -30 86) -30]
Test Case: 601 | Input/Output: [(27 -86 -29 -48) -86]
Test Case: 602 | Input/Output: [(-83 13 78 40) -83]
Test Case: 603 | Input/Output: [(32 54 83 -94) -94]
Test Case: 604 | Input/Output: [(47 90 -49 12) -49]
Test Case: 605 | Input/Output: [(-9 2 -74 -34) -74]
Test Case: 606 | Input/Output: [(-82 51 -66 -44) -82]
Test Case: 607 | Input/Output: [(77 -6 80 16) -6]
Test Case: 608 | Input/Output: [(1 -19 11 69) -19]
Test Case: 609 | Input/Output: [(68 63 62 -48) -48]
Test Case: 610 | Input/Output: [(75 -45 -74 67) -74]
Test Case: 611 | Input/Output: [(-21 32 -20 45) -21]
Test Case: 612 | Input/Output: [(-68 -5 9 -6) -68]
Test Case: 613 | Input/Output: [(73 67 -90 -69) -90]
Test Case: 614 | Input/Output: [(-17 33 -24 -95) -95]
Test Case: 615 | Input/Output: [(49 -45 -15 15) -45]
Test Case: 616 | Input/Output: [(-7 39 37 58) -7]
Test Case: 617 | Input/Output: [(73 3 -31 92) -31]
Test Case: 618 | Input/Output: [(-29 -11 53 -33) -33]
Test Case: 619 | Input/Output: [(20 -66 -80 2) -80]
Test Case: 620 | Input/Output: [(99 54 -54 -7) -54]
Test Case: 621 | Input/Output: [(-32 58 -85 4) -85]
Test Case: 622 | Input/Output: [(85 -41 -54 76) -54]
Test Case: 623 | Input/Output: [(55 38 11 -84) -84]
Test Case: 624 | Input/Output: [(-18 -65 15 0) -65]
Test Case: 625 | Input/Output: [(95 29 -18 24) -18]
Test Case: 626 | Input/Output: [(-64 -82 -4 -100) -100]
Test Case: 627 | Input/Output: [(-74 -65 4 -76) -76]
Test Case: 628 | Input/Output: [(-81 88 -25 81) -81]
Test Case: 629 | Input/Output: [(29 -96 -52 -54) -96]
Test Case: 630 | Input/Output: [(-45 -24 -43 -79) -79]
Test Case: 631 | Input/Output: [(-12 -98 -65 64) -98]
Test Case: 632 | Input/Output: [(-60 -95 19 -33) -95]
Test Case: 633 | Input/Output: [(-56 -99 62 25) -99]
Test Case: 634 | Input/Output: [(-45 -33 23 55) -45]
Test Case: 635 | Input/Output: [(97 22 -3 96) -3]
Test Case: 636 | Input/Output: [(12 82 -1 -80) -80]
Test Case: 637 | Input/Output: [(-56 -21 -1 -16) -56]
Test Case: 638 | Input/Output: [(-81 3 65 -82) -82]
Test Case: 639 | Input/Output: [(-66 -18 25 44) -66]
Test Case: 640 | Input/Output: [(-51 81 -75 -56) -75]
Test Case: 641 | Input/Output: [(-25 -45 -85 8) -85]
Test Case: 642 | Input/Output: [(-12 -1 -5 54) -12]
Test Case: 643 | Input/Output: [(39 69 -76 60) -76]
Test Case: 644 | Input/Output: [(62 89 -20 33) -20]
Test Case: 645 | Input/Output: [(43 -95 -95 -70) -95]
Test Case: 646 | Input/Output: [(-40 30 -74 51) -74]
Test Case: 647 | Input/Output: [(-88 -27 12 -94) -94]
Test Case: 648 | Input/Output: [(-20 -3 -72 -23) -72]
Test Case: 649 | Input/Output: [(74 -22 75 54) -22]
Test Case: 650 | Input/Output: [(53 -44 -46 -21) -46]
Test Case: 651 | Input/Output: [(12 83 -4 98) -4]
Test Case: 652 | Input/Output: [(-76 -54 43 41) -76]
Test Case: 653 | Input/Output: [(-34 34 -20 37) -34]
Test Case: 654 | Input/Output: [(-96 -47 -38 84) -96]
Test Case: 655 | Input/Output: [(-6 -53 -62 32) -62]
Test Case: 656 | Input/Output: [(79 66 51 18) 18]
Test Case: 657 | Input/Output: [(-32 -13 -39 62) -39]
Test Case: 658 | Input/Output: [(20 -26 11 -7) -26]
Test Case: 659 | Input/Output: [(-2 8 -98 -48) -98]
Test Case: 660 | Input/Output: [(73 32 -25 -95) -95]
Test Case: 661 | Input/Output: [(-24 -14 44 -65) -65]
Test Case: 662 | Input/Output: [(-63 39 -21 -7) -63]
Test Case: 663 | Input/Output: [(-16 -37 50 -29) -37]
Test Case: 664 | Input/Output: [(-4 -32 44 95) -32]
Test Case: 665 | Input/Output: [(-71 41 22 75) -71]
Test Case: 666 | Input/Output: [(-68 4 6 38) -68]
Test Case: 667 | Input/Output: [(-92 -28 -17 -97) -97]
Test Case: 668 | Input/Output: [(23 32 -6 -61) -61]
Test Case: 669 | Input/Output: [(73 -88 81 18) -88]
Test Case: 670 | Input/Output: [(-17 -55 91 -5) -55]
Test Case: 671 | Input/Output: [(-78 89 -2 -88) -88]
Test Case: 672 | Input/Output: [(80 -98 72 32) -98]
Test Case: 673 | Input/Output: [(78 -43 24 -2) -43]
Test Case: 674 | Input/Output: [(-98 86 -77 -53) -98]
Test Case: 675 | Input/Output: [(-47 -56 -80 -38) -80]
Test Case: 676 | Input/Output: [(-85 -20 38 -81) -85]
Test Case: 677 | Input/Output: [(32 13 23 5) 5]
Test Case: 678 | Input/Output: [(-60 82 -96 56) -96]
Test Case: 679 | Input/Output: [(-28 91 -27 -72) -72]
Test Case: 680 | Input/Output: [(-30 -89 39 -46) -89]
Test Case: 681 | Input/Output: [(36 38 69 -40) -40]
Test Case: 682 | Input/Output: [(56 -94 21 -52) -94]
Test Case: 683 | Input/Output: [(64 26 88 10) 10]
Test Case: 684 | Input/Output: [(-50 -94 -69 -7) -94]
Test Case: 685 | Input/Output: [(34 96 -58 -70) -70]
Test Case: 686 | Input/Output: [(88 -89 -85 -79) -89]
Test Case: 687 | Input/Output: [(-44 10 -20 -48) -48]
Test Case: 688 | Input/Output: [(-58 10 33 -61) -61]
Test Case: 689 | Input/Output: [(-61 76 -51 -58) -61]
Test Case: 690 | Input/Output: [(-95 25 54 20) -95]
Test Case: 691 | Input/Output: [(-19 81 19 -84) -84]
Test Case: 692 | Input/Output: [(-49 7 -43 20) -49]
Test Case: 693 | Input/Output: [(-54 25 -12 50) -54]
Test Case: 694 | Input/Output: [(-6 -21 -6 19) -21]
Test Case: 695 | Input/Output: [(46 94 -3 -59) -59]
Test Case: 696 | Input/Output: [(-2 -73 -45 -83) -83]
Test Case: 697 | Input/Output: [(-55 56 -37 -97) -97]
Test Case: 698 | Input/Output: [(-55 -97 -56 -48) -97]
Test Case: 699 | Input/Output: [(97 32 93 -52) -52]
Test Case: 700 | Input/Output: [(82 36 -53 -7) -53]
Test Case: 701 | Input/Output: [(40 45 67 87) 40]
Test Case: 702 | Input/Output: [(-30 -28 -19 -13) -30]
Test Case: 703 | Input/Output: [(44 50 -95 100) -95]
Test Case: 704 | Input/Output: [(31 43 7 -98) -98]
Test Case: 705 | Input/Output: [(-67 -24 -58 -93) -93]
Test Case: 706 | Input/Output: [(-93 56 65 -12) -93]
Test Case: 707 | Input/Output: [(25 -43 14 31) -43]
Test Case: 708 | Input/Output: [(74 -3 58 -33) -33]
Test Case: 709 | Input/Output: [(-49 -42 -67 69) -67]
Test Case: 710 | Input/Output: [(34 93 93 -11) -11]
Test Case: 711 | Input/Output: [(-73 71 -71 15) -73]
Test Case: 712 | Input/Output: [(-59 88 72 40) -59]
Test Case: 713 | Input/Output: [(-78 23 -52 97) -78]
Test Case: 714 | Input/Output: [(-1 -47 80 -67) -67]
Test Case: 715 | Input/Output: [(-63 -87 -22 -54) -87]
Test Case: 716 | Input/Output: [(14 -40 79 78) -40]
Test Case: 717 | Input/Output: [(6 87 85 -29) -29]
Test Case: 718 | Input/Output: [(-88 42 40 -82) -88]
Test Case: 719 | Input/Output: [(66 82 -74 -28) -74]
Test Case: 720 | Input/Output: [(-69 -59 68 -86) -86]
Test Case: 721 | Input/Output: [(-84 8 -43 99) -84]
Test Case: 722 | Input/Output: [(-92 -91 0 48) -92]
Test Case: 723 | Input/Output: [(44 34 88 100) 34]
Test Case: 724 | Input/Output: [(86 94 2 -98) -98]
Test Case: 725 | Input/Output: [(-95 -94 -66 57) -95]
Test Case: 726 | Input/Output: [(-39 78 -57 -30) -57]
Test Case: 727 | Input/Output: [(-74 48 14 -17) -74]
Test Case: 728 | Input/Output: [(-66 46 -69 -57) -69]
Test Case: 729 | Input/Output: [(4 26 6 -32) -32]
Test Case: 730 | Input/Output: [(69 25 -93 -62) -93]
Test Case: 731 | Input/Output: [(-60 -44 6 10) -60]
Test Case: 732 | Input/Output: [(-55 49 44 -6) -55]
Test Case: 733 | Input/Output: [(8 97 -26 40) -26]
Test Case: 734 | Input/Output: [(91 -26 -99 -100) -100]
Test Case: 735 | Input/Output: [(82 -94 -67 14) -94]
Test Case: 736 | Input/Output: [(-38 2 -15 70) -38]
Test Case: 737 | Input/Output: [(61 -17 15 -36) -36]
Test Case: 738 | Input/Output: [(-15 -66 -19 -78) -78]
Test Case: 739 | Input/Output: [(25 0 12 65) 0]
Test Case: 740 | Input/Output: [(-65 31 -46 50) -65]
Test Case: 741 | Input/Output: [(-94 -70 94 -21) -94]
Test Case: 742 | Input/Output: [(-83 31 24 6) -83]
Test Case: 743 | Input/Output: [(-43 39 64 14) -43]
Test Case: 744 | Input/Output: [(-30 96 20 67) -30]
Test Case: 745 | Input/Output: [(-45 -63 97 -83) -83]
Test Case: 746 | Input/Output: [(-65 92 -66 -87) -87]
Test Case: 747 | Input/Output: [(22 -67 9 -24) -67]
Test Case: 748 | Input/Output: [(-36 91 54 -41) -41]
Test Case: 749 | Input/Output: [(75 -4 93 -48) -48]
Test Case: 750 | Input/Output: [(43 45 -57 33) -57]
Test Case: 751 | Input/Output: [(-57 -48 5 -95) -95]
Test Case: 752 | Input/Output: [(84 -65 67 47) -65]
Test Case: 753 | Input/Output: [(-39 -71 -80 -62) -80]
Test Case: 754 | Input/Output: [(-81 48 63 28) -81]
Test Case: 755 | Input/Output: [(84 5 9 -26) -26]
Test Case: 756 | Input/Output: [(-84 72 43 70) -84]
Test Case: 757 | Input/Output: [(-89 69 -86 -67) -89]
Test Case: 758 | Input/Output: [(34 5 -38 -78) -78]
Test Case: 759 | Input/Output: [(-70 74 14 -3) -70]
Test Case: 760 | Input/Output: [(24 20 -76 -68) -76]
Test Case: 761 | Input/Output: [(-83 -22 93 56) -83]
Test Case: 762 | Input/Output: [(34 23 -95 -83) -95]
Test Case: 763 | Input/Output: [(70 3 76 43) 3]
Test Case: 764 | Input/Output: [(41 12 -89 -21) -89]
Test Case: 765 | Input/Output: [(-53 -6 79 -60) -60]
Test Case: 766 | Input/Output: [(-2 -76 77 -48) -76]
Test Case: 767 | Input/Output: [(-2 -39 -17 -74) -74]
Test Case: 768 | Input/Output: [(-32 -86 47 -95) -95]
Test Case: 769 | Input/Output: [(-4 43 -98 31) -98]
Test Case: 770 | Input/Output: [(-70 -74 72 -3) -74]
Test Case: 771 | Input/Output: [(0 46 80 -62) -62]
Test Case: 772 | Input/Output: [(10 -10 35 -2) -10]
Test Case: 773 | Input/Output: [(-33 -56 -87 57) -87]
Test Case: 774 | Input/Output: [(67 -61 95 -5) -61]
Test Case: 775 | Input/Output: [(-97 -61 -62 -35) -97]
Test Case: 776 | Input/Output: [(-60 85 9 29) -60]
Test Case: 777 | Input/Output: [(4 -19 67 -20) -20]
Test Case: 778 | Input/Output: [(-10 -79 -41 -74) -79]
Test Case: 779 | Input/Output: [(64 -75 -3 24) -75]
Test Case: 780 | Input/Output: [(30 83 -64 24) -64]
Test Case: 781 | Input/Output: [(0 59 -71 81) -71]
Test Case: 782 | Input/Output: [(-52 35 -37 57) -52]
Test Case: 783 | Input/Output: [(19 64 60 -8) -8]
Test Case: 784 | Input/Output: [(26 38 26 -83) -83]
Test Case: 785 | Input/Output: [(-78 -49 -19 7) -78]
Test Case: 786 | Input/Output: [(-48 96 58 55) -48]
Test Case: 787 | Input/Output: [(20 -99 43 5) -99]
Test Case: 788 | Input/Output: [(-82 49 36 40) -82]
Test Case: 789 | Input/Output: [(68 55 49 -66) -66]
Test Case: 790 | Input/Output: [(55 52 -37 -29) -37]
Test Case: 791 | Input/Output: [(-6 -3 -29 52) -29]
Test Case: 792 | Input/Output: [(-97 42 -44 81) -97]
Test Case: 793 | Input/Output: [(99 -54 -59 65) -59]
Test Case: 794 | Input/Output: [(91 -88 -22 64) -88]
Test Case: 795 | Input/Output: [(99 73 -98 -35) -98]
Test Case: 796 | Input/Output: [(77 -89 -17 -92) -92]
Test Case: 797 | Input/Output: [(-93 60 -40 48) -93]
Test Case: 798 | Input/Output: [(-37 51 70 41) -37]
Test Case: 799 | Input/Output: [(42 -5 -15 -53) -53]
Test Case: 800 | Input/Output: [(-64 46 -86 -11) -86]
Test Case: 801 | Input/Output: [(58 79 -100 66) -100]
Test Case: 802 | Input/Output: [(-93 -80 -74 -36) -93]
Test Case: 803 | Input/Output: [(-98 44 -76 -73) -98]
Test Case: 804 | Input/Output: [(-3 99 69 -8) -8]
Test Case: 805 | Input/Output: [(13 -65 23 16) -65]
Test Case: 806 | Input/Output: [(98 4 -57 53) -57]
Test Case: 807 | Input/Output: [(56 -97 -7 61) -97]
Test Case: 808 | Input/Output: [(7 41 82 -53) -53]
Test Case: 809 | Input/Output: [(39 95 48 -90) -90]
Test Case: 810 | Input/Output: [(55 -87 -67 37) -87]
Test Case: 811 | Input/Output: [(39 -31 -25 17) -31]
Test Case: 812 | Input/Output: [(46 -11 -69 -67) -69]
Test Case: 813 | Input/Output: [(-95 4 -68 79) -95]
Test Case: 814 | Input/Output: [(69 12 52 54) 12]
Test Case: 815 | Input/Output: [(75 -43 -45 -59) -59]
Test Case: 816 | Input/Output: [(-72 -65 -27 -96) -96]
Test Case: 817 | Input/Output: [(93 62 86 92) 62]
Test Case: 818 | Input/Output: [(23 -20 -20 11) -20]
Test Case: 819 | Input/Output: [(-46 -56 64 13) -56]
Test Case: 820 | Input/Output: [(-76 -8 -19 -91) -91]
Test Case: 821 | Input/Output: [(71 -73 -66 31) -73]
Test Case: 822 | Input/Output: [(-24 -19 19 -4) -24]
Test Case: 823 | Input/Output: [(-53 25 39 54) -53]
Test Case: 824 | Input/Output: [(13 57 98 7) 7]
Test Case: 825 | Input/Output: [(-83 73 -23 36) -83]
Test Case: 826 | Input/Output: [(46 -86 40 12) -86]
Test Case: 827 | Input/Output: [(-74 -19 64 -79) -79]
Test Case: 828 | Input/Output: [(-62 -30 59 74) -62]
Test Case: 829 | Input/Output: [(-90 -25 -38 -40) -90]
Test Case: 830 | Input/Output: [(14 28 84 75) 14]
Test Case: 831 | Input/Output: [(7 40 -77 -20) -77]
Test Case: 832 | Input/Output: [(72 10 -94 -19) -94]
Test Case: 833 | Input/Output: [(-26 98 -5 -50) -50]
Test Case: 834 | Input/Output: [(58 -89 2 92) -89]
Test Case: 835 | Input/Output: [(90 42 14 43) 14]
Test Case: 836 | Input/Output: [(-97 51 -62 -79) -97]
Test Case: 837 | Input/Output: [(-44 0 -46 -14) -46]
Test Case: 838 | Input/Output: [(-51 87 59 30) -51]
Test Case: 839 | Input/Output: [(-95 61 -16 69) -95]
Test Case: 840 | Input/Output: [(19 71 -95 -88) -95]
Test Case: 841 | Input/Output: [(-67 40 -59 -38) -67]
Test Case: 842 | Input/Output: [(-24 26 92 -3) -24]
Test Case: 843 | Input/Output: [(-38 -5 -57 -54) -57]
Test Case: 844 | Input/Output: [(84 16 -77 18) -77]
Test Case: 845 | Input/Output: [(43 -4 16 91) -4]
Test Case: 846 | Input/Output: [(-4 -70 71 56) -70]
Test Case: 847 | Input/Output: [(-28 38 -47 83) -47]
Test Case: 848 | Input/Output: [(98 31 39 -41) -41]
Test Case: 849 | Input/Output: [(87 -94 -54 -74) -94]
Test Case: 850 | Input/Output: [(23 60 -87 -1) -87]
Test Case: 851 | Input/Output: [(14 -45 52 -88) -88]
Test Case: 852 | Input/Output: [(-70 100 63 -98) -98]
Test Case: 853 | Input/Output: [(-85 29 -75 -92) -92]
Test Case: 854 | Input/Output: [(-27 90 -67 64) -67]
Test Case: 855 | Input/Output: [(-89 -6 -16 36) -89]
Test Case: 856 | Input/Output: [(-78 60 -37 -66) -78]
Test Case: 857 | Input/Output: [(-17 -88 -21 -49) -88]
Test Case: 858 | Input/Output: [(-52 -34 50 49) -52]
Test Case: 859 | Input/Output: [(29 -6 -38 -72) -72]
Test Case: 860 | Input/Output: [(-76 31 -30 12) -76]
Test Case: 861 | Input/Output: [(80 96 -47 -25) -47]
Test Case: 862 | Input/Output: [(-29 16 30 28) -29]
Test Case: 863 | Input/Output: [(-69 62 50 -32) -69]
Test Case: 864 | Input/Output: [(-78 8 61 -71) -78]
Test Case: 865 | Input/Output: [(66 43 -84 -75) -84]
Test Case: 866 | Input/Output: [(-4 70 -60 45) -60]
Test Case: 867 | Input/Output: [(72 -89 -39 -64) -89]
Test Case: 868 | Input/Output: [(89 28 91 50) 28]
Test Case: 869 | Input/Output: [(-47 -78 50 -50) -78]
Test Case: 870 | Input/Output: [(-39 73 -2 -48) -48]
Test Case: 871 | Input/Output: [(75 -92 9 3) -92]
Test Case: 872 | Input/Output: [(-65 -57 -70 67) -70]
Test Case: 873 | Input/Output: [(37 49 77 -93) -93]
Test Case: 874 | Input/Output: [(59 -71 -31 -49) -71]
Test Case: 875 | Input/Output: [(-67 34 -67 59) -67]
Test Case: 876 | Input/Output: [(95 -20 -73 -54) -73]
Test Case: 877 | Input/Output: [(95 1 23 53) 1]
Test Case: 878 | Input/Output: [(59 46 -50 72) -50]
Test Case: 879 | Input/Output: [(82 -81 69 -27) -81]
Test Case: 880 | Input/Output: [(87 -93 76 -20) -93]
Test Case: 881 | Input/Output: [(-13 -48 -5 -32) -48]
Test Case: 882 | Input/Output: [(-38 51 74 13) -38]
Test Case: 883 | Input/Output: [(-34 29 -30 -45) -45]
Test Case: 884 | Input/Output: [(-46 -95 -88 46) -95]
Test Case: 885 | Input/Output: [(-64 42 95 14) -64]
Test Case: 886 | Input/Output: [(-73 60 52 64) -73]
Test Case: 887 | Input/Output: [(-51 89 47 85) -51]
Test Case: 888 | Input/Output: [(29 -34 16 69) -34]
Test Case: 889 | Input/Output: [(-66 -34 -68 -99) -99]
Test Case: 890 | Input/Output: [(27 -5 64 14) -5]
Test Case: 891 | Input/Output: [(-1 24 -97 46) -97]
Test Case: 892 | Input/Output: [(-46 87 -17 -68) -68]
Test Case: 893 | Input/Output: [(91 -85 35 -28) -85]
Test Case: 894 | Input/Output: [(-75 -63 -97 26) -97]
Test Case: 895 | Input/Output: [(-31 98 34 -58) -58]
Test Case: 896 | Input/Output: [(-37 -1 -79 -96) -96]
Test Case: 897 | Input/Output: [(81 -80 -76 61) -80]
Test Case: 898 | Input/Output: [(19 -20 -83 56) -83]
Test Case: 899 | Input/Output: [(46 -98 -51 87) -98]
Test Case: 900 | Input/Output: [(-15 -91 99 -86) -91]
Test Case: 901 | Input/Output: [(14 57 -21 17) -21]
Test Case: 902 | Input/Output: [(-20 -89 56 18) -89]
Test Case: 903 | Input/Output: [(12 -14 -88 9) -88]
Test Case: 904 | Input/Output: [(-86 -92 -17 2) -92]
Test Case: 905 | Input/Output: [(5 -17 -38 27) -38]
Test Case: 906 | Input/Output: [(79 -15 -96 69) -96]
Test Case: 907 | Input/Output: [(9 43 86 -48) -48]
Test Case: 908 | Input/Output: [(35 -5 9 -27) -27]
Test Case: 909 | Input/Output: [(-86 -22 -20 48) -86]
Test Case: 910 | Input/Output: [(-48 -99 45 -69) -99]
Test Case: 911 | Input/Output: [(-29 -99 27 -45) -99]
Test Case: 912 | Input/Output: [(34 35 -71 70) -71]
Test Case: 913 | Input/Output: [(44 15 3 -27) -27]
Test Case: 914 | Input/Output: [(29 -7 -80 5) -80]
Test Case: 915 | Input/Output: [(35 -50 7 -69) -69]
Test Case: 916 | Input/Output: [(-2 -15 57 -29) -29]
Test Case: 917 | Input/Output: [(91 22 -56 67) -56]
Test Case: 918 | Input/Output: [(-3 -91 -72 -95) -95]
Test Case: 919 | Input/Output: [(7 20 -26 -76) -76]
Test Case: 920 | Input/Output: [(-23 66 -72 -32) -72]
Test Case: 921 | Input/Output: [(62 18 -62 49) -62]
Test Case: 922 | Input/Output: [(62 32 49 49) 32]
Test Case: 923 | Input/Output: [(77 52 86 -98) -98]
Test Case: 924 | Input/Output: [(-42 -78 -25 -70) -78]
Test Case: 925 | Input/Output: [(83 -67 -48 90) -67]
Test Case: 926 | Input/Output: [(86 26 54 -34) -34]
Test Case: 927 | Input/Output: [(-21 -83 100 -47) -83]
Test Case: 928 | Input/Output: [(11 -54 54 11) -54]
Test Case: 929 | Input/Output: [(-78 -78 -53 -81) -81]
Test Case: 930 | Input/Output: [(-7 44 -59 -81) -81]
Test Case: 931 | Input/Output: [(12 65 0 -51) -51]
Test Case: 932 | Input/Output: [(96 72 72 7) 7]
Test Case: 933 | Input/Output: [(-64 91 28 87) -64]
Test Case: 934 | Input/Output: [(35 55 84 72) 35]
Test Case: 935 | Input/Output: [(-35 44 91 -97) -97]
Test Case: 936 | Input/Output: [(-92 6 52 89) -92]
Test Case: 937 | Input/Output: [(-88 -78 -20 -25) -88]
Test Case: 938 | Input/Output: [(49 50 -67 10) -67]
Test Case: 939 | Input/Output: [(80 66 10 71) 10]
Test Case: 940 | Input/Output: [(-14 -29 -56 98) -56]
Test Case: 941 | Input/Output: [(-83 -22 55 -79) -83]
Test Case: 942 | Input/Output: [(6 -94 88 -63) -94]
Test Case: 943 | Input/Output: [(5 -9 -46 9) -46]
Test Case: 944 | Input/Output: [(42 5 87 -46) -46]
Test Case: 945 | Input/Output: [(7 -55 75 -57) -57]
Test Case: 946 | Input/Output: [(-80 -89 -78 -11) -89]
Test Case: 947 | Input/Output: [(65 1 4 32) 1]
Test Case: 948 | Input/Output: [(-27 34 -2 -45) -45]
Test Case: 949 | Input/Output: [(-9 24 98 14) -9]
Test Case: 950 | Input/Output: [(-85 -14 45 66) -85]
Test Case: 951 | Input/Output: [(89 95 -1 -80) -80]
Test Case: 952 | Input/Output: [(-13 63 75 58) -13]
Test Case: 953 | Input/Output: [(-77 22 88 23) -77]
Test Case: 954 | Input/Output: [(-5 31 -88 -52) -88]
Test Case: 955 | Input/Output: [(71 -38 34 -49) -49]
Test Case: 956 | Input/Output: [(70 -18 93 34) -18]
Test Case: 957 | Input/Output: [(-11 -53 33 59) -53]
Test Case: 958 | Input/Output: [(-31 63 -54 -57) -57]
Test Case: 959 | Input/Output: [(19 -54 -25 94) -54]
Test Case: 960 | Input/Output: [(-68 -94 40 97) -94]
Test Case: 961 | Input/Output: [(83 39 -83 -80) -83]
Test Case: 962 | Input/Output: [(7 53 23 46) 7]
Test Case: 963 | Input/Output: [(90 64 -51 65) -51]
Test Case: 964 | Input/Output: [(99 62 66 7) 7]
Test Case: 965 | Input/Output: [(-31 1 19 20) -31]
Test Case: 966 | Input/Output: [(-31 -67 -7 -31) -67]
Test Case: 967 | Input/Output: [(-38 -9 -88 77) -88]
Test Case: 968 | Input/Output: [(-23 43 90 -7) -23]
Test Case: 969 | Input/Output: [(33 41 77 58) 33]
Test Case: 970 | Input/Output: [(-98 61 81 70) -98]
Test Case: 971 | Input/Output: [(33 47 65 -21) -21]
Test Case: 972 | Input/Output: [(-6 9 -46 90) -46]
Test Case: 973 | Input/Output: [(-1 -30 83 8) -30]
Test Case: 974 | Input/Output: [(8 -27 -46 -80) -80]
Test Case: 975 | Input/Output: [(68 47 -94 0) -94]
Test Case: 976 | Input/Output: [(87 6 75 -90) -90]
Test Case: 977 | Input/Output: [(66 48 75 -73) -73]
Test Case: 978 | Input/Output: [(45 -13 -98 -69) -98]
Test Case: 979 | Input/Output: [(-82 91 79 75) -82]
Test Case: 980 | Input/Output: [(14 85 -82 -60) -82]
Test Case: 981 | Input/Output: [(-57 -63 44 45) -63]
Test Case: 982 | Input/Output: [(51 -4 -55 -35) -55]
Test Case: 983 | Input/Output: [(-81 22 -28 -76) -81]
Test Case: 984 | Input/Output: [(35 -1 88 -79) -79]
Test Case: 985 | Input/Output: [(-20 2 97 -76) -76]
Test Case: 986 | Input/Output: [(57 -43 57 70) -43]
Test Case: 987 | Input/Output: [(-83 87 80 -11) -83]
Test Case: 988 | Input/Output: [(-78 74 20 -83) -83]
Test Case: 989 | Input/Output: [(57 -24 -42 -23) -42]
Test Case: 990 | Input/Output: [(-32 -37 -40 -52) -52]
Test Case: 991 | Input/Output: [(-32 -99 -31 66) -99]
Test Case: 992 | Input/Output: [(64 -32 -94 84) -94]
Test Case: 993 | Input/Output: [(69 -95 84 -59) -95]
Test Case: 994 | Input/Output: [(-47 3 25 65) -47]
Test Case: 995 | Input/Output: [(-98 -76 10 -61) -98]
Test Case: 996 | Input/Output: [(91 -34 -59 86) -59]
Test Case: 997 | Input/Output: [(99 -59 20 -15) -59]
Test Case: 998 | Input/Output: [(90 -28 -29 -52) -52]
Test Case: 999 | Input/Output: [(77 -85 -54 -59) -85]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 85 -8 -109 -6 122 -67 9 -72 -17 -65 -58 49 116 95 48 99
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[60 -51 -51 -51] -51] [[65 73 73 73] 65] [[100 -74 100 100] -74] [[61 -9 61 61] -9] [[13 13 98 13] 13] [[-27 -81 -81 -81] -81] [[-43 -43 -43 -19] -43] [[-49 -49 -49 18] -49] [[39 -88 39 39] -88] [[14 32 32 32] 14] [(89 89 89 89) 89] [(91 91 91 91) 91] [(-24 -24 -24 -24) -24] [(33 33 33 33) 33] [(9 9 9 9) 9] [(98 15 77 57) 15] [(26 60 2 84) 2] [(28 39 81 73) 28] [(7 67 36 81) 7] [(75 17 46 99) 17] [(2 92 58 18) 2] [(42 27 10 71) 10] [(74 26 82 16) 16] [(37 78 56 91) 37] [(75 92 11 9) 9] [(77 3 54 100) 3] [(28 25 32 6) 6] [(65 78 17 10) 10] [(15 51 24 83) 15] [(1 43 6 56) 1] [(20 4 20 74) 4] [(6 47 20 40) 6] [(34 34 23 68) 23] [(95 68 94 58) 58] [(91 100 76 65) 65] [(-95 93 -74 25) -95] [(-58 -53 8 19) -58] [(-37 27 90 70) -37] [(-64 -71 74 -71) -71] [(49 78 5 -40) -40] [(74 -27 27 -58) -58] [(11 5 2 81) 2] [(75 85 62 49) 49] [(37 45 -75 -11) -75] [(-29 62 -8 -8) -29] [(-75 86 15 93) -75] [(-81 -40 -92 54) -92] [(45 -74 72 24) -74] [(-17 -70 -72 -92) -92] [(6 -57 -34 61) -57] [(-21 75 86 -5) -21] [(-94 100 4 22) -94] [(80 -89 -15 -27) -89] [(-9 -69 -80 -46) -80] [(45 83 0 -4) -4] [(-29 -100 -29 49) -100] [(-81 -2 -15 97) -81] [(15 -60 99 -12) -60] [(87 -44 6 -48) -48] [(-73 2 22 90) -73] [(-32 -49 69 88) -49] [(-39 23 49 62) -39] [(-86 -97 -48 50) -97] [(96 -28 91 -26) -28] [(-26 -85 98 -91) -91] [(-18 76 89 73) -18] [(-82 -20 11 60) -82] [(90 -35 -91 -61) -91] [(-27 -22 -58 72) -58] [(44 20 89 -70) -70] [(55 -24 2 7) -24] [(-28 -12 -11 -33) -33] [(-76 -71 30 -24) -76] [(64 60 87 -26) -26] [(-14 -30 45 53) -30] [(75 28 5 -1) -1] [(-60 -46 29 -57) -60] [(-16 -47 -26 -59) -59] [(5 95 -14 46) -14] [(-17 93 10 88) -17] [(-1 -21 -30 13) -30] [(75 -6 47 69) -6] [(39 25 -60 -20) -60] [(93 -7 26 -87) -87] [(97 -82 25 9) -82] [(39 30 -100 -61) -100] [(69 42 33 79) 33] [(1 41 58 2) 1] [(77 45 91 62) 45] [(-17 95 63 87) -17] [(4 67 46 -48) -48] [(-35 -61 74 -57) -61] [(-19 21 5 38) -19] [(93 25 7 -100) -100] [(-86 62 -58 -95) -95])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: 60                 
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 98                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 74                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 75                 
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 28                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 95                 
Correct output: 65                  | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 49                 
Correct output: -58                 | Program output: 74                 
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 75                 
Correct output: -75                 | Program output: 37                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: 45                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: 6                  
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 80                 
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 45                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: 15                 
Correct output: -48                 | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: 96                 
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 90                 
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 44                 
Correct output: -24                 | Program output: 55                 
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 64                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 75                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: 75                 
Correct output: -60                 | Program output: 39                 
Correct output: -87                 | Program output: 93                 
Correct output: -82                 | Program output: 97                 
Correct output: -100                | Program output: 39                 
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 77                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 4                  
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop})
Lexicase best program: (boolean_and exec_do*while () boolean_and exec_eq boolean_empty boolean_invert_second_then_and exec_empty integer_fromboolean integer_mod exec_dup (exec_yankdup exec_empty integer_yankdup boolean_or exec_y_when_autoconstructing (boolean_yank print_integer integer_rot exec_do*times (integer_gt integer_dec boolean_shove boolean_not boolean_yankdup exec_eq print_newline integer_dup exec_s (boolean_and) (print_integer integer_max) (in1 boolean_rot) integer_pop integer_fromboolean integer_add exec_do*times (exec_y (exec_noop exec_dup (boolean_empty integer_lt boolean_swap exec_y_when_autoconstructing (integer_lte exec_y (exec_dup_items integer_inc) exec_if () (exec_y_when_autoconstructing (integer_gt boolean_dup_times exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_do*while (boolean_swap exec_rot (boolean_invert_second_then_and) (integer_pop) ())) ()))))))))))
Lexicase best errors: [1 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 82
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop})
Zero cases best program: (boolean_and exec_do*while () boolean_and exec_eq boolean_empty boolean_invert_second_then_and exec_empty integer_fromboolean integer_mod exec_dup (exec_yankdup exec_empty integer_yankdup boolean_or exec_y_when_autoconstructing (boolean_yank print_integer integer_rot exec_do*times (integer_gt integer_dec boolean_shove boolean_not boolean_yankdup exec_eq print_newline integer_dup exec_s (boolean_and) (print_integer integer_max) (in1 boolean_rot) integer_pop integer_fromboolean integer_add exec_do*times (exec_y (exec_noop exec_dup (boolean_empty integer_lt boolean_swap exec_y_when_autoconstructing (integer_lte exec_y (exec_dup_items integer_inc) exec_if () (exec_y_when_autoconstructing (integer_gt boolean_dup_times exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_do*while (boolean_swap exec_rot (boolean_invert_second_then_and) (integer_pop) ())) ()))))))))))
Zero cases best errors: [1 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 82
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 4 3 3 4 4 4 3 4 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (4 4 3 3 4 4 4 3 4 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tag_boolean_569} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec})
Best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup boolean_dup in1 print_integer boolean_dup) boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush) (exec_dup_items tag_boolean_569) (integer_inc print_integer integer_inc exec_flush in3 exec_do*times () integer_min boolean_not boolean_flush boolean_dup_items print_exec ()))
Errors: [1 0 1 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 9.963
Median total errors in population: 10
Error averages by case: (0.996 0.996 0.997 0.997 0.996 0.996 0.996 0.997 0.996 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.127
Average program size in population (points): 71.603
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 507225
--- Timings ---
Current time: 1559584655132 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.8 seconds, 34.6%
Fitness Testing:      1.5 seconds, 61.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -58                 | Program output: -53                
Correct output: -37                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: 62                 
Correct output: -75                 | Program output: 86                 
Correct output: -92                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: 75                 
Correct output: -94                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -69                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -2                 
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -39                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -85                
Correct output: -18                 | Program output: 76                 
Correct output: -82                 | Program output: -20                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -22                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -12                
Correct output: -76                 | Program output: -71                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -30                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -46                
Correct output: -59                 | Program output: -47                
Correct output: -14                 | Program output: 95                 
Correct output: -17                 | Program output: 93                 
Correct output: -30                 | Program output: -21                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 95                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -61                
Correct output: -19                 | Program output: 21                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () boolean_dup in1 integer_dup_times) (exec_do*count ()) exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (boolean_pop exec_s (boolean_flush integer_flush) (boolean_flush) (in1) exec_yank exec_k (integer_yank) (boolean_yank integer_lte exec_empty print_newline) exec_swap (boolean_dup boolean_xor) (boolean_swap integer_lte integer_min integer_max integer_swap integer_mult boolean_dup_times) boolean_dup) boolean_pop exec_y_when_autoconstructing (boolean_dup_times boolean_or) boolean_pop) (boolean_stackdepth print_integer exec_s_when_autoconstructing (exec_empty integer_empty integer_sub exec_flush) (boolean_and integer_eq boolean_shove integer_dup_items) () integer_stackdepth integer_empty integer_eq integer_yank boolean_eq in3 integer_div boolean_or) exec_pop (integer_max integer_dec) exec_do*range (integer_lte exec_shove (exec_do*times (exec_shove () integer_gte))))
Lexicase best errors: [1 0 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 120
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () boolean_dup in1 integer_dup_times) (exec_do*count ()) exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (boolean_pop exec_s (boolean_flush integer_flush) (boolean_flush) (in1) exec_yank exec_k (integer_yank) (boolean_yank integer_lte exec_empty print_newline) exec_swap (boolean_dup boolean_xor) (boolean_swap integer_lte integer_min integer_max integer_swap integer_mult boolean_dup_times) boolean_dup) boolean_pop exec_y_when_autoconstructing (boolean_dup_times boolean_or) boolean_pop) (boolean_stackdepth print_integer exec_s_when_autoconstructing (exec_empty integer_empty integer_sub exec_flush) (boolean_and integer_eq boolean_shove integer_dup_items) () integer_stackdepth integer_empty integer_eq integer_yank boolean_eq in3 integer_div boolean_or) exec_pop (integer_max integer_dec) exec_do*range (integer_lte exec_shove (exec_do*times (exec_shove () integer_gte))))
Zero cases best errors: [1 0 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 120
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 855 1000 861 520 788 859 67 263 520)
Population mean number of elite cases: 6.00
Count of perfect (error zero) individuals by case: (263 855 0 861 520 788 859 67 263 520)
Population mean number of perfect (error zero) cases: 5.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_shove})
Best program: (exec_noop boolean_eq integer_rot integer_stackdepth integer_stackdepth integer_lte in2 print_integer integer_dec exec_shove ())
Errors: [0 0 1 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 5.004
Median total errors in population: 4
Error averages by case: (0.737 0.145 1.0 0.139 0.48 0.212 0.141 0.933 0.737 0.48)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 51.103
Average program size in population (points): 68.917
Average percent parens in population: 0.247
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.487
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1295620
--- Timings ---
Current time: 1559584657816 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 44.6%
Fitness Testing:      2.4 seconds, 44.7%
Report:               0.5 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -58                 | Program output: -53                
Correct output: -37                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: 62                 
Correct output: -75                 | Program output: 86                 
Correct output: -92                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: 75                 
Correct output: -94                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -69                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -2                 
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -39                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -85                
Correct output: -18                 | Program output: 76                 
Correct output: -82                 | Program output: -20                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -22                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -12                
Correct output: -76                 | Program output: -71                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -30                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -46                
Correct output: -59                 | Program output: -47                
Correct output: -14                 | Program output: 95                 
Correct output: -17                 | Program output: 93                 
Correct output: -30                 | Program output: -21                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 95                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -61                
Correct output: -19                 | Program output: 21                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_882} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap in2 boolean_invert_second_then_and exec_if (print_integer integer_div boolean_flush exec_if (print_integer integer_div boolean_dup_items tag_exec_882 (integer_yank exec_k_when_autoconstructing (exec_eq) (exec_y_when_autoconstructing (boolean_shove exec_yankdup integer_dup_items exec_flush boolean_invert_second_then_and) exec_if (exec_dup_items exec_k_when_autoconstructing () (print_integer boolean_invert_second_then_and) exec_do*range (boolean_empty exec_do*times (exec_yankdup boolean_not print_newline integer_min exec_while ()))) ()))) ()) ())
Lexicase best errors: [0 1 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_882} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap in2 boolean_invert_second_then_and exec_if (print_integer integer_div boolean_flush exec_if (print_integer integer_div boolean_dup_items tag_exec_882 (integer_yank exec_k_when_autoconstructing (exec_eq) (exec_y_when_autoconstructing (boolean_shove exec_yankdup integer_dup_items exec_flush boolean_invert_second_then_and) exec_if (exec_dup_items exec_k_when_autoconstructing () (print_integer boolean_invert_second_then_and) exec_do*range (boolean_empty exec_do*times (exec_yankdup boolean_not print_newline integer_min exec_while ()))) ()))) ()) ())
Zero cases best errors: [0 1 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (368 166 1000 1000 352 368 350 1000 886 368)
Population mean number of elite cases: 5.86
Count of perfect (error zero) individuals by case: (368 166 0 0 352 368 350 0 886 368)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_shove})
Best program: (exec_noop boolean_eq integer_rot integer_stackdepth integer_stackdepth integer_lte in2 print_integer integer_dec exec_shove ())
Errors: [0 1 1 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.142
Median total errors in population: 7
Error averages by case: (0.632 0.834 1.0 1.0 0.648 0.632 0.65 1.0 0.114 0.632)
Error minima by case: (0 0 1 1 0 0 0 1 0 0)
Average genome size in population (length): 44.461
Average program size in population (points): 59.973
Average percent parens in population: 0.243
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.959
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1961493
--- Timings ---
Current time: 1559584661122 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.7 seconds, 54.4%
Fitness Testing:      3.2 seconds, 36.5%
Report:               0.7 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: 60                 
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 98                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 74                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 75                 
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 28                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 95                 
Correct output: 65                  | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 49                 
Correct output: -58                 | Program output: 74                 
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 75                 
Correct output: -75                 | Program output: 37                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: 45                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: 6                  
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 80                 
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 45                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: 15                 
Correct output: -48                 | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: 96                 
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 90                 
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 44                 
Correct output: -24                 | Program output: 55                 
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 64                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 75                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: 75                 
Correct output: -60                 | Program output: 39                 
Correct output: -87                 | Program output: 93                 
Correct output: -82                 | Program output: 97                 
Correct output: -100                | Program output: 39                 
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 77                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 4                  
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () boolean_dup in1 integer_dup_times) (exec_do*count ()) exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (boolean_pop exec_s (boolean_flush integer_flush) (boolean_flush) (in1 exec_yank exec_k (integer_yank) (boolean_yank integer_lte exec_empty print_newline) exec_swap (boolean_dup boolean_xor) (boolean_swap integer_lte integer_min integer_max integer_swap integer_mult boolean_dup_times) boolean_dup) boolean_pop exec_y_when_autoconstructing (boolean_dup_times boolean_or) boolean_pop) boolean_stackdepth) (print_integer exec_s_when_autoconstructing (exec_empty integer_empty integer_sub exec_flush boolean_and integer_eq boolean_shove integer_dup_items) (integer_stackdepth integer_empty integer_eq integer_yank boolean_eq in3 integer_div boolean_or) (exec_pop (integer_max integer_dec) exec_do*range (integer_lte exec_shove (exec_if (exec_shove () integer_gte) ())))))
Lexicase best errors: [1 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 121
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () boolean_dup in1 integer_dup_times) (exec_do*count ()) exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (boolean_pop exec_s (boolean_flush integer_flush) (boolean_flush) (in1 exec_yank exec_k (integer_yank) (boolean_yank integer_lte exec_empty print_newline) exec_swap (boolean_dup boolean_xor) (boolean_swap integer_lte integer_min integer_max integer_swap integer_mult boolean_dup_times) boolean_dup) boolean_pop exec_y_when_autoconstructing (boolean_dup_times boolean_or) boolean_pop) boolean_stackdepth) (print_integer exec_s_when_autoconstructing (exec_empty integer_empty integer_sub exec_flush boolean_and integer_eq boolean_shove integer_dup_items) (integer_stackdepth integer_empty integer_eq integer_yank boolean_eq in3 integer_div boolean_or) (exec_pop (integer_max integer_dec) exec_do*range (integer_lte exec_shove (exec_if (exec_shove () integer_gte) ())))))
Zero cases best errors: [1 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 121
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 880 1 441 880 879 166 273 273 166)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (1 880 1 441 880 879 166 273 273 166)
Population mean number of perfect (error zero) cases: 3.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_items exec_eq exec_do*range (integer_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () boolean_dup in1 integer_dup_times) (exec_do*count ()) exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (boolean_pop exec_s (boolean_flush integer_flush) (boolean_flush) (in1 exec_yank exec_k (integer_yank) (boolean_yank integer_lte exec_empty print_newline) exec_swap (boolean_dup boolean_xor) (boolean_swap integer_lte integer_min exec_shove (integer_swap integer_mult boolean_dup_times) boolean_dup) boolean_pop exec_y_when_autoconstructing (boolean_dup_times boolean_or) boolean_pop) boolean_stackdepth) print_integer exec_s_when_autoconstructing (exec_empty integer_empty integer_sub exec_flush boolean_and integer_eq boolean_shove integer_dup_items) (integer_sub integer_empty integer_eq exec_empty boolean_eq in3 integer_div boolean_or) (exec_pop (integer_max integer_dec) boolean_shove)) ())
Errors: [1 0 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 85
Size: 112
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 6.04
Median total errors in population: 6
Error averages by case: (0.999 0.12 0.999 0.559 0.12 0.121 0.834 0.727 0.727 0.834)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.028
Average program size in population (points): 55.471
Average percent parens in population: 0.245
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4695
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2557176
--- Timings ---
Current time: 1559584664840 milliseconds
Total Time:          11.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.7 seconds, 58.5%
Fitness Testing:      3.8 seconds, 32.8%
Report:               0.9 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -58                 | Program output: -53                
Correct output: -37                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: 62                 
Correct output: -75                 | Program output: 86                 
Correct output: -92                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: 75                 
Correct output: -94                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -69                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -2                 
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -39                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -85                
Correct output: -18                 | Program output: 76                 
Correct output: -82                 | Program output: -20                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -22                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -12                
Correct output: -76                 | Program output: -71                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -30                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -46                
Correct output: -59                 | Program output: -47                
Correct output: -14                 | Program output: 95                 
Correct output: -17                 | Program output: 93                 
Correct output: -30                 | Program output: -21                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 95                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -61                
Correct output: -19                 | Program output: 21                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_882} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap})
Lexicase best program: (boolean_swap in2 boolean_invert_second_then_and exec_if (print_integer integer_div boolean_dup_items tag_exec_882 (integer_yank exec_eq exec_eq) exec_y_when_autoconstructing (boolean_shove exec_yankdup integer_dup_items exec_flush boolean_invert_second_then_and) exec_if (exec_dup_items exec_k_when_autoconstructing () (print_integer boolean_invert_second_then_and) exec_do*range (integer_mod boolean_shove integer_div exec_flush exec_while (integer_inc boolean_dup integer_shove boolean_empty) boolean_not integer_flush) integer_dec) (boolean_yank exec_swap () ())) ())
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 50
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_882} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap})
Zero cases best program: (boolean_swap in2 boolean_invert_second_then_and exec_if (print_integer integer_div boolean_dup_items tag_exec_882 (integer_yank exec_eq exec_eq) exec_y_when_autoconstructing (boolean_shove exec_yankdup integer_dup_items exec_flush boolean_invert_second_then_and) exec_if (exec_dup_items exec_k_when_autoconstructing () (print_integer boolean_invert_second_then_and) exec_do*range (integer_mod boolean_shove integer_div exec_flush exec_while (integer_inc boolean_dup integer_shove boolean_empty) boolean_not integer_flush) integer_dec) (boolean_yank exec_swap () ())) ())
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 50
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 267 134 134 134 245 645 134 134 672)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (134 267 134 134 134 245 645 134 134 672)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_882} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while})
Best program: (boolean_swap in2 boolean_invert_second_then_and exec_if (print_integer integer_div boolean_dup_items tag_exec_882 (integer_yank exec_eq boolean_swap) exec_y_when_autoconstructing (boolean_shove exec_yankdup integer_dup_items exec_flush boolean_invert_second_then_and) exec_if (exec_dup_items exec_k_when_autoconstructing () (print_integer boolean_invert_second_then_and) exec_do*range (boolean_empty exec_do*times (exec_yankdup exec_dup_items print_newline integer_min exec_while ()))) ()) ())
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.367
Median total errors in population: 8
Error averages by case: (0.866 0.733 0.866 0.866 0.866 0.755 0.355 0.866 0.866 0.328)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.501
Average program size in population (points): 56.512
Average percent parens in population: 0.258
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 6.096125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 159
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3391855
--- Timings ---
Current time: 1559584668062 milliseconds
Total Time:          15.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.9 seconds, 57.2%
Fitness Testing:      4.6 seconds, 29.3%
Report:               2.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -58                 | Program output: -53                
Correct output: -37                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: 62                 
Correct output: -75                 | Program output: 86                 
Correct output: -92                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: 75                 
Correct output: -94                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -69                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -2                 
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -39                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -85                
Correct output: -18                 | Program output: 76                 
Correct output: -82                 | Program output: -20                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -22                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -12                
Correct output: -76                 | Program output: -71                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -30                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -46                
Correct output: -59                 | Program output: -47                
Correct output: -14                 | Program output: 95                 
Correct output: -17                 | Program output: 93                 
Correct output: -30                 | Program output: -21                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 95                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -61                
Correct output: -19                 | Program output: 21                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 1, :instruction tagged_291} {:close 1, :instruction print_exec} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot})
Lexicase best program: (boolean_not in2 integer_yankdup exec_k (boolean_empty integer_swap integer_mult exec_y (print_integer boolean_yank integer_add boolean_swap exec_when (integer_gte integer_dup exec_swap (boolean_invert_second_then_and) (integer_eq integer_add) exec_dup_times (integer_lte exec_y (integer_stackdepth integer_gt boolean_yank exec_empty tag_exec_222 (exec_do*times (exec_rot (integer_lte) (integer_inc boolean_shove) (integer_shove exec_eq in3) boolean_frominteger exec_flush) exec_s_when_autoconstructing (exec_pop () exec_stackdepth) (integer_dup in3 tagged_291) (print_exec () exec_swap (print_boolean exec_rot (exec_y (in2) integer_mult boolean_frominteger exec_rot () () ()) () ()) ()))))))) ())
Lexicase best errors: [1 1 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 80
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 1, :instruction tagged_291} {:close 1, :instruction print_exec} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot})
Zero cases best program: (boolean_not in2 integer_yankdup exec_k (boolean_empty integer_swap integer_mult exec_y (print_integer boolean_yank integer_add boolean_swap exec_when (integer_gte integer_dup exec_swap (boolean_invert_second_then_and) (integer_eq integer_add) exec_dup_times (integer_lte exec_y (integer_stackdepth integer_gt boolean_yank exec_empty tag_exec_222 (exec_do*times (exec_rot (integer_lte) (integer_inc boolean_shove) (integer_shove exec_eq in3) boolean_frominteger exec_flush) exec_s_when_autoconstructing (exec_pop () exec_stackdepth) (integer_dup in3 tagged_291) (print_exec () exec_swap (print_boolean exec_rot (exec_y (in2) integer_mult boolean_frominteger exec_rot () () ()) () ()) ()))))))) ())
Zero cases best errors: [1 1 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 80
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 1000 828 710 829 710 710 1000 103 1000)
Population mean number of elite cases: 6.99
Count of perfect (error zero) individuals by case: (103 0 828 710 829 710 710 0 103 0)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_shove})
Best program: (exec_noop boolean_eq integer_rot integer_stackdepth integer_stackdepth integer_lte in2 print_integer integer_dec exec_shove ())
Errors: [1 1 0 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.007
Median total errors in population: 5
Error averages by case: (0.897 1.0 0.172 0.29 0.171 0.29 0.29 1.0 0.897 1.0)
Error minima by case: (0 1 0 0 0 0 0 1 0 1)
Average genome size in population (length): 31.445
Average program size in population (points): 43.86
Average percent parens in population: 0.258
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.5205625
Median age in population: 7.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.539
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 193
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3961128
--- Timings ---
Current time: 1559584671179 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.3 seconds, 60.2%
Fitness Testing:      5.2 seconds, 27.5%
Report:               2.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -58                 | Program output: -53                
Correct output: -37                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: 62                 
Correct output: -75                 | Program output: 86                 
Correct output: -92                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: 75                 
Correct output: -94                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -69                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -2                 
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -39                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -85                
Correct output: -18                 | Program output: 76                 
Correct output: -82                 | Program output: -20                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -22                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -12                
Correct output: -76                 | Program output: -71                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -30                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -46                
Correct output: -59                 | Program output: -47                
Correct output: -14                 | Program output: 95                 
Correct output: -17                 | Program output: 93                 
Correct output: -30                 | Program output: -21                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 95                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -61                
Correct output: -19                 | Program output: 21                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_shove})
Lexicase best program: (exec_noop boolean_eq integer_rot integer_stackdepth integer_stackdepth integer_lte in2 print_integer integer_dec exec_shove ())
Lexicase best errors: [1 1 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 12
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_shove})
Zero cases best program: (exec_noop boolean_eq integer_rot integer_stackdepth integer_stackdepth integer_lte in2 print_integer integer_dec exec_shove ())
Zero cases best errors: [1 1 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 12
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 240 668 1000 233 1000 240 668 668 1000)
Population mean number of elite cases: 6.72
Count of perfect (error zero) individuals by case: (0 240 668 0 233 0 240 668 668 0)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_shove})
Best program: (exec_noop boolean_eq integer_rot integer_stackdepth integer_stackdepth integer_lte in2 print_integer integer_dec exec_shove ())
Errors: [1 1 0 1 1 1 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.283
Median total errors in population: 7
Error averages by case: (1.0 0.76 0.332 1.0 0.767 1.0 0.76 0.332 0.332 1.0)
Error minima by case: (1 0 0 1 0 1 0 0 0 1)
Average genome size in population (length): 33.475
Average program size in population (points): 45.742
Average percent parens in population: 0.246
Minimum age in population: 6.0
Maximum age in population: 11.0625
Average age in population: 8.97590625
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 144
Genome diversity (% unique genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 201
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4504169
--- Timings ---
Current time: 1559584673577 milliseconds
Total Time:          21.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.0 seconds, 61.5%
Fitness Testing:      5.7 seconds, 26.8%
Report:               2.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: 60                 
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 98                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 74                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 75                 
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 28                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 95                 
Correct output: 65                  | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 49                 
Correct output: -58                 | Program output: 74                 
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 75                 
Correct output: -75                 | Program output: 37                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: 45                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: 6                  
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 80                 
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 45                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: 15                 
Correct output: -48                 | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: 96                 
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 90                 
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 44                 
Correct output: -24                 | Program output: 55                 
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 64                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 75                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: 75                 
Correct output: -60                 | Program output: 39                 
Correct output: -87                 | Program output: 93                 
Correct output: -82                 | Program output: 97                 
Correct output: -100                | Program output: 39                 
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 77                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 4                  
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap})
Lexicase best program: (exec_while (in1 exec_shove (integer_dec boolean_eq exec_yankdup) exec_empty integer_mult integer_pop) integer_fromboolean exec_if (boolean_dup_items) (integer_eq in2 integer_yankdup boolean_dup in1 print_integer boolean_dup) boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max exec_y (integer_flush) integer_dec) (boolean_yank exec_swap () ()) ())
Lexicase best errors: [0 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap})
Zero cases best program: (exec_while (in1 exec_shove (integer_dec boolean_eq exec_yankdup) exec_empty integer_mult integer_pop) integer_fromboolean exec_if (boolean_dup_items) (integer_eq in2 integer_yankdup boolean_dup in1 print_integer boolean_dup) boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max exec_y (integer_flush) integer_dec) (boolean_yank exec_swap () ()) ())
Zero cases best errors: [0 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (896 408 1000 401 399 402 1000 1000 1000 409)
Population mean number of elite cases: 6.91
Count of perfect (error zero) individuals by case: (896 408 0 401 399 402 0 0 0 409)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean})
Best program: (boolean_and exec_do*while () boolean_and exec_eq boolean_empty boolean_invert_second_then_and boolean_swap integer_fromboolean integer_mod exec_dup (exec_yankdup exec_empty integer_yankdup boolean_or exec_y_when_autoconstructing (print_integer print_integer integer_rot exec_do*times (integer_gt integer_dec boolean_shove boolean_not boolean_yankdup exec_eq print_newline integer_dup exec_s (boolean_and) (print_integer integer_max) (in1 boolean_rot) integer_pop integer_fromboolean integer_add exec_do*times (exec_y (exec_noop exec_dup (boolean_empty integer_lt boolean_swap exec_y_when_autoconstructing (integer_lte exec_y (exec_dup_items integer_inc) exec_if () (exec_y_when_autoconstructing (integer_gt boolean_dup_times exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_do*while (boolean_swap exec_rot (boolean_invert_second_then_and integer_fromboolean) () ())) ()))))))))))
Errors: [0 0 1 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 59
Size: 82
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.085
Median total errors in population: 9
Error averages by case: (0.104 0.592 1.0 0.599 0.601 0.598 1.0 1.0 1.0 0.591)
Error minima by case: (0 0 1 0 0 0 1 1 1 0)
Average genome size in population (length): 36.704
Average program size in population (points): 49.862
Average percent parens in population: 0.247
Minimum age in population: 7.5
Maximum age in population: 12.6875
Average age in population: 10.464359375
Median age in population: 10.5234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5139169
--- Timings ---
Current time: 1559584676624 milliseconds
Total Time:          23.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.7 seconds, 62.3%
Fitness Testing:      6.2 seconds, 26.4%
Report:               2.6 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: 60                 
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 98                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 74                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 75                 
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 28                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 95                 
Correct output: 65                  | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 49                 
Correct output: -58                 | Program output: 74                 
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 75                 
Correct output: -75                 | Program output: 37                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: 45                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: 6                  
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 80                 
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 45                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: 15                 
Correct output: -48                 | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: 96                 
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 90                 
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 44                 
Correct output: -24                 | Program output: 55                 
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 64                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 75                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: 75                 
Correct output: -60                 | Program output: 39                 
Correct output: -87                 | Program output: 93                 
Correct output: -82                 | Program output: 97                 
Correct output: -100                | Program output: 39                 
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 77                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 4                  
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max})
Lexicase best program: (integer_lt exec_empty integer_mult integer_sub integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup boolean_dup in1 print_integer boolean_dup) boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max) () ())
Lexicase best errors: [0 0 1 1 1 1 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max})
Zero cases best program: (integer_lt exec_empty integer_mult integer_sub integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup boolean_dup in1 print_integer boolean_dup) boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max) () ())
Zero cases best errors: [0 0 1 1 1 1 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (872 870 1000 1000 1 1000 1000 1000 1000 2)
Population mean number of elite cases: 7.74
Count of perfect (error zero) individuals by case: (872 870 0 0 1 0 0 0 0 2)
Population mean number of perfect (error zero) cases: 1.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction tag_boolean_569} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 1, :instruction tagged_291} {:close 1, :instruction print_exec} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot})
Best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup boolean_dup in1 print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush exec_dup_items tag_boolean_569) () (integer_inc integer_stackdepth integer_gt boolean_yank exec_empty tag_exec_222 (exec_do*times (exec_rot (integer_lte) (integer_inc boolean_shove) (integer_shove exec_eq integer_dup_times) boolean_frominteger exec_flush exec_s_when_autoconstructing (exec_pop () exec_stackdepth) (integer_dup in3 tagged_291) (print_exec () exec_swap (print_boolean exec_rot (integer_sub in2 integer_mult boolean_frominteger exec_rot () () ()) () ()) ()))))))
Errors: [0 0 1 1 1 1 1 1 1 1]
Total: 8
Mean: 0.8
Genome size: 59
Size: 85
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 8.255
Median total errors in population: 8
Error averages by case: (0.128 0.13 1.0 1.0 0.999 1.0 1.0 1.0 1.0 0.998)
Error minima by case: (0 0 1 1 0 1 1 1 1 0)
Average genome size in population (length): 47.96
Average program size in population (points): 65.168
Average percent parens in population: 0.260
Minimum age in population: 8.5
Maximum age in population: 14.03125
Average age in population: 11.929015625
Median age in population: 11.984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6141377
--- Timings ---
Current time: 1559584679584 milliseconds
Total Time:          27.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.5 seconds, 61.0%
Fitness Testing:      7.0 seconds, 26.1%
Report:               3.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -58                 | Program output: -53                
Correct output: -37                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: 62                 
Correct output: -75                 | Program output: 86                 
Correct output: -92                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: 75                 
Correct output: -94                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -69                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -2                 
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -39                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -85                
Correct output: -18                 | Program output: 76                 
Correct output: -82                 | Program output: -20                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -22                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -12                
Correct output: -76                 | Program output: -71                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -30                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -46                
Correct output: -59                 | Program output: -47                
Correct output: -14                 | Program output: 95                 
Correct output: -17                 | Program output: 93                 
Correct output: -30                 | Program output: -21                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 95                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -61                
Correct output: -19                 | Program output: 21                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup boolean_dup exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (boolean_pop exec_s (boolean_flush boolean_shove) (boolean_flush) (in1 exec_yank exec_k (integer_yank) (boolean_yank integer_lte exec_empty print_newline) exec_swap (boolean_dup boolean_xor) (boolean_swap integer_lte integer_min integer_max integer_swap integer_mult boolean_dup_times) boolean_dup) boolean_pop exec_y_when_autoconstructing ())) ()))
Lexicase best errors: [1 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 82
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup boolean_dup exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (boolean_pop exec_s (boolean_flush boolean_shove) (boolean_flush) (in1 exec_yank exec_k (integer_yank) (boolean_yank integer_lte exec_empty print_newline) exec_swap (boolean_dup boolean_xor) (boolean_swap integer_lte integer_min integer_max integer_swap integer_mult boolean_dup_times) boolean_dup) boolean_pop exec_y_when_autoconstructing ())) ()))
Zero cases best errors: [1 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 82
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 878 434 451 429 1000 428 1000 1000 429)
Population mean number of elite cases: 7.05
Count of perfect (error zero) individuals by case: (0 878 434 451 429 0 428 0 0 429)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup boolean_dup exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (boolean_pop exec_s (boolean_flush boolean_shove) (boolean_flush) (in1 exec_yank exec_k (integer_yank) (boolean_yank integer_lte exec_empty print_newline) exec_swap (boolean_dup boolean_xor) (boolean_swap integer_gte integer_min integer_max integer_swap integer_mult boolean_dup_times) boolean_dup) boolean_pop exec_y_when_autoconstructing ())) ()))
Errors: [1 0 1 1 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 61
Size: 82
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.951
Median total errors in population: 7
Error averages by case: (1.0 0.122 0.566 0.549 0.571 1.0 0.572 1.0 1.0 0.571)
Error minima by case: (1 0 0 0 0 1 0 1 1 0)
Average genome size in population (length): 52.693
Average program size in population (points): 71.189
Average percent parens in population: 0.258
Minimum age in population: 9.5
Maximum age in population: 15.421875
Average age in population: 13.62691015625
Median age in population: 13.607421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 175
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 7392567
--- Timings ---
Current time: 1559584683181 milliseconds
Total Time:          29.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.9 seconds, 60.2%
Fitness Testing:      8.0 seconds, 26.9%
Report:               3.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: 18                 
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 84                 
Correct output: 28                  | Program output: 73                 
Correct output: 7                   | Program output: 81                 
Correct output: 17                  | Program output: 99                 
Correct output: 2                   | Program output: 18                 
Correct output: 10                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 83                 
Correct output: 1                   | Program output: 56                 
Correct output: 4                   | Program output: 74                 
Correct output: 6                   | Program output: 40                 
Correct output: 23                  | Program output: 68                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: 25                 
Correct output: -58                 | Program output: 19                 
Correct output: -37                 | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 81                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: 93                 
Correct output: -92                 | Program output: 54                 
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 61                 
Correct output: -21                 | Program output: -5                 
Correct output: -94                 | Program output: 22                 
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: 49                 
Correct output: -81                 | Program output: 97                 
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: 90                 
Correct output: -49                 | Program output: 88                 
Correct output: -39                 | Program output: 62                 
Correct output: -97                 | Program output: 50                 
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: 73                 
Correct output: -82                 | Program output: 60                 
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: 53                 
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: 46                 
Correct output: -17                 | Program output: 88                 
Correct output: -30                 | Program output: 13                 
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 79                 
Correct output: 1                   | Program output: 2                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: 87                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: 38                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () boolean_dup in4 integer_dup_times) (exec_do*count ()) exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank) ()) ())
Lexicase best errors: [1 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () boolean_dup in4 integer_dup_times) (exec_do*count ()) exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank) ()) ())
Zero cases best errors: [1 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 353 344 875 533 2 2 2 528 2)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (0 353 344 875 533 2 2 2 528 2)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () integer_empty) (in4 exec_y (print_integer boolean_yank integer_add boolean_swap integer_yankdup integer_gte integer_dup exec_swap (boolean_invert_second_then_and) (integer_eq integer_add) exec_dup_times (integer_lte exec_y (integer_stackdepth integer_gt) boolean_yank exec_empty tag_exec_222 (exec_do*times (exec_rot (integer_lte) (integer_inc boolean_shove) ()))))))
Errors: [1 1 1 0 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 37
Size: 52
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 7.359
Median total errors in population: 7
Error averages by case: (1.0 0.647 0.656 0.125 0.467 0.998 0.998 0.998 0.472 0.998)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.996
Average program size in population (points): 72.948
Average percent parens in population: 0.258
Minimum age in population: 11.0
Maximum age in population: 17.236328125
Average age in population: 15.112064453125
Median age in population: 15.267578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 8710229
--- Timings ---
Current time: 1559584686929 milliseconds
Total Time:          33.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.8 seconds, 58.5%
Fitness Testing:      9.1 seconds, 26.8%
Report:               4.9 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: 18                 
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 84                 
Correct output: 28                  | Program output: 73                 
Correct output: 7                   | Program output: 81                 
Correct output: 17                  | Program output: 99                 
Correct output: 2                   | Program output: 18                 
Correct output: 10                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 83                 
Correct output: 1                   | Program output: 56                 
Correct output: 4                   | Program output: 74                 
Correct output: 6                   | Program output: 40                 
Correct output: 23                  | Program output: 68                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: 25                 
Correct output: -58                 | Program output: 19                 
Correct output: -37                 | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 81                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: 93                 
Correct output: -92                 | Program output: 54                 
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 61                 
Correct output: -21                 | Program output: -5                 
Correct output: -94                 | Program output: 22                 
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: 49                 
Correct output: -81                 | Program output: 97                 
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: 90                 
Correct output: -49                 | Program output: 88                 
Correct output: -39                 | Program output: 62                 
Correct output: -97                 | Program output: 50                 
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: 73                 
Correct output: -82                 | Program output: 60                 
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: 53                 
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: 46                 
Correct output: -17                 | Program output: 88                 
Correct output: -30                 | Program output: 13                 
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 79                 
Correct output: 1                   | Program output: 2                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: 87                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: 38                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 2, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when (integer_empty)) (in4 exec_y (print_integer boolean_yank integer_add boolean_swap integer_yankdup integer_gte integer_dup exec_swap (boolean_invert_second_then_and integer_eq integer_add) (exec_dup_times (integer_lte exec_y (integer_stackdepth integer_gt) boolean_yank exec_empty tag_exec_222 (exec_do*times () exec_rot (integer_lte) (integer_inc boolean_shove) ()))))))
Lexicase best errors: [0 1 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 2, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when (integer_empty)) (in4 exec_y (print_integer boolean_yank integer_add boolean_swap integer_yankdup integer_gte integer_dup exec_swap (boolean_invert_second_then_and integer_eq integer_add) (exec_dup_times (integer_lte exec_y (integer_stackdepth integer_gt) boolean_yank exec_empty tag_exec_222 (exec_do*times () exec_rot (integer_lte) (integer_inc boolean_shove) ()))))))
Zero cases best errors: [0 1 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (535 1000 199 535 528 199 535 195 1000 195)
Population mean number of elite cases: 4.92
Count of perfect (error zero) individuals by case: (535 0 199 535 528 199 535 195 0 195)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () integer_empty) (in4 exec_y (print_integer boolean_yank integer_add boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) exec_do*times (exec_rot (integer_lte) (integer_inc boolean_shove) ())))
Errors: [0 1 1 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 37
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.079
Median total errors in population: 6
Error averages by case: (0.465 1.0 0.801 0.465 0.472 0.801 0.465 0.805 1.0 0.805)
Error minima by case: (0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.862
Average program size in population (points): 55.615
Average percent parens in population: 0.286
Minimum age in population: 13.53125
Maximum age in population: 18.3701171875
Average age in population: 16.8709013671875
Median age in population: 16.7861328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 9977296
--- Timings ---
Current time: 1559584690956 milliseconds
Total Time:          37.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.7 seconds, 57.7%
Fitness Testing:     10.1 seconds, 26.8%
Report:               5.7 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: 18                 
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 84                 
Correct output: 28                  | Program output: 73                 
Correct output: 7                   | Program output: 81                 
Correct output: 17                  | Program output: 99                 
Correct output: 2                   | Program output: 18                 
Correct output: 10                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 83                 
Correct output: 1                   | Program output: 56                 
Correct output: 4                   | Program output: 74                 
Correct output: 6                   | Program output: 40                 
Correct output: 23                  | Program output: 68                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: 25                 
Correct output: -58                 | Program output: 19                 
Correct output: -37                 | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 81                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: 93                 
Correct output: -92                 | Program output: 54                 
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 61                 
Correct output: -21                 | Program output: -5                 
Correct output: -94                 | Program output: 22                 
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: 49                 
Correct output: -81                 | Program output: 97                 
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: 90                 
Correct output: -49                 | Program output: 88                 
Correct output: -39                 | Program output: 62                 
Correct output: -97                 | Program output: 50                 
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: 73                 
Correct output: -82                 | Program output: 60                 
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: 53                 
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: 46                 
Correct output: -17                 | Program output: 88                 
Correct output: -30                 | Program output: 13                 
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 79                 
Correct output: 1                   | Program output: 2                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: 87                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: 38                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () boolean_dup in4 integer_dup_times) (exec_do*count ()) exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank) ()) ())
Lexicase best errors: [1 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () boolean_dup in4 integer_dup_times) (exec_do*count ()) exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank) ()) ())
Zero cases best errors: [1 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (404 1 402 466 471 471 865 1000 875 2)
Population mean number of elite cases: 4.96
Count of perfect (error zero) individuals by case: (404 1 402 466 471 471 865 0 875 2)
Population mean number of perfect (error zero) cases: 3.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () integer_empty) (in4 exec_y (print_integer boolean_yank integer_add boolean_swap integer_yankdup integer_gte integer_dup exec_swap (boolean_invert_second_then_and) (integer_eq integer_add) exec_dup_times (integer_lte exec_y (integer_stackdepth integer_gt) boolean_yank exec_empty tag_exec_222 (exec_do*times (exec_rot (integer_lte) (integer_inc boolean_shove) ()))))))
Errors: [1 1 1 0 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 37
Size: 52
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.043
Median total errors in population: 6
Error averages by case: (0.596 0.999 0.598 0.534 0.529 0.529 0.135 1.0 0.125 0.998)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 39.151
Average program size in population (points): 54.329
Average percent parens in population: 0.279
Minimum age in population: 15.72265625
Maximum age in population: 19.8603515625
Average age in population: 18.3280283203125
Median age in population: 18.4853515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 11111577
--- Timings ---
Current time: 1559584694690 milliseconds
Total Time:          41.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.7 seconds, 56.9%
Fitness Testing:     11.0 seconds, 26.5%
Report:               6.8 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -58                 | Program output: -53                
Correct output: -37                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: 62                 
Correct output: -75                 | Program output: 86                 
Correct output: -92                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: 75                 
Correct output: -94                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -69                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -2                 
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -39                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -85                
Correct output: -18                 | Program output: 76                 
Correct output: -82                 | Program output: -20                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -22                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -12                
Correct output: -76                 | Program output: -71                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -30                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -46                
Correct output: -59                 | Program output: -47                
Correct output: -14                 | Program output: 95                 
Correct output: -17                 | Program output: 93                 
Correct output: -30                 | Program output: -21                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 95                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -61                
Correct output: -19                 | Program output: 21                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div})
Lexicase best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush) (exec_dup_items integer_shove exec_do*range (integer_add exec_k (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (integer_lte exec_s (boolean_flush integer_flush) (boolean_flush) (in1 exec_yank exec_k (integer_yank) () exec_s_when_autoconstructing (integer_lte exec_empty print_newline) (exec_swap (exec_y (boolean_xor) boolean_or integer_lte integer_min integer_max integer_swap integer_mult boolean_dup_times) (exec_do*times () boolean_pop exec_y_when_autoconstructing (boolean_dup_times boolean_or) boolean_pop boolean_stackdepth) print_integer exec_s_when_autoconstructing (exec_empty integer_empty integer_sub boolean_dup boolean_and integer_eq boolean_shove integer_dup_items) (integer_stackdepth integer_empty integer_add integer_yank boolean_eq in3 integer_div) ()) ())))) ()))
Lexicase best errors: [1 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 108
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div})
Zero cases best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush) (exec_dup_items integer_shove exec_do*range (integer_add exec_k (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (integer_lte exec_s (boolean_flush integer_flush) (boolean_flush) (in1 exec_yank exec_k (integer_yank) () exec_s_when_autoconstructing (integer_lte exec_empty print_newline) (exec_swap (exec_y (boolean_xor) boolean_or integer_lte integer_min integer_max integer_swap integer_mult boolean_dup_times) (exec_do*times () boolean_pop exec_y_when_autoconstructing (boolean_dup_times boolean_or) boolean_pop boolean_stackdepth) print_integer exec_s_when_autoconstructing (exec_empty integer_empty integer_sub boolean_dup boolean_and integer_eq boolean_shove integer_dup_items) (integer_stackdepth integer_empty integer_add integer_yank boolean_eq in3 integer_div) ()) ())))) ()))
Zero cases best errors: [1 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 108
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (363 255 366 266 255 255 264 266 363 255)
Population mean number of elite cases: 2.91
Count of perfect (error zero) individuals by case: (363 255 366 266 255 255 264 266 363 255)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div})
Best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_dup_items boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush) exec_dup_items integer_shove exec_do*range (integer_add exec_k (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (integer_lte exec_s (boolean_flush integer_flush) (boolean_flush) (in1 exec_yank exec_k (integer_yank) () exec_s_when_autoconstructing (integer_lte exec_empty print_newline) (exec_swap (exec_y (boolean_xor) boolean_or integer_lte integer_min integer_max integer_swap integer_mult boolean_dup_times) (boolean_dup) boolean_pop exec_y_when_autoconstructing (boolean_dup_times boolean_or) boolean_pop boolean_stackdepth) (print_integer exec_s_when_autoconstructing (exec_empty integer_empty integer_sub boolean_dup boolean_and integer_eq boolean_shove integer_dup_items) (integer_stackdepth integer_empty integer_add integer_yank boolean_eq in3 integer_div) ())))))
Errors: [1 0 1 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 81
Size: 104
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 7.092
Median total errors in population: 7
Error averages by case: (0.637 0.745 0.634 0.734 0.745 0.745 0.736 0.734 0.637 0.745)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.612
Average program size in population (points): 66.218
Average percent parens in population: 0.271
Minimum age in population: 17.525390625
Maximum age in population: 21.42626953125
Average age in population: 19.6741806640625
Median age in population: 19.7545166015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 12010343
--- Timings ---
Current time: 1559584697564 milliseconds
Total Time:          45.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.5 seconds, 56.6%
Fitness Testing:     11.8 seconds, 26.2%
Report:               7.7 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: 60                 
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 98                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 74                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 75                 
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 28                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 95                 
Correct output: 65                  | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 49                 
Correct output: -58                 | Program output: 74                 
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 75                 
Correct output: -75                 | Program output: 37                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: 45                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: 6                  
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 80                 
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 45                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: 15                 
Correct output: -48                 | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: 96                 
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 90                 
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 44                 
Correct output: -24                 | Program output: 55                 
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 64                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 75                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: 75                 
Correct output: -60                 | Program output: 39                 
Correct output: -87                 | Program output: 93                 
Correct output: -82                 | Program output: 97                 
Correct output: -100                | Program output: 39                 
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 77                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 4                  
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () boolean_dup in1 integer_dup_times) (exec_do*count ()) exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger print_integer) integer_add boolean_swap integer_yankdup integer_gte in1 integer_dup_times) (exec_do*count ()) exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger print_integer) exec_dup (exec_s (boolean_flush) (boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (boolean_pop)) ())) ())
Lexicase best errors: [1 1 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 73
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () boolean_dup in1 integer_dup_times) (exec_do*count ()) exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger print_integer) integer_add boolean_swap integer_yankdup integer_gte in1 integer_dup_times) (exec_do*count ()) exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger print_integer) exec_dup (exec_s (boolean_flush) (boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (boolean_pop)) ())) ())
Zero cases best errors: [1 1 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 73
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 248 247 1000 247 276 341 275 277 275)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (247 248 247 0 247 276 341 275 277 275)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max})
Best program: (exec_while (in1 exec_shove (exec_dup_items integer_lt exec_empty integer_mult integer_sub)) integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2) integer_shove boolean_dup in1 print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max) () ())
Errors: [1 1 1 1 1 0 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.567
Median total errors in population: 6
Error averages by case: (0.753 0.752 0.753 1.0 0.753 0.724 0.659 0.725 0.723 0.725)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 51.668
Average program size in population (points): 70.051
Average percent parens in population: 0.265
Minimum age in population: 19.27490234375
Maximum age in population: 22.83154296875
Average age in population: 21.11172436523438
Median age in population: 21.1607666015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 12787785
--- Timings ---
Current time: 1559584700555 milliseconds
Total Time:          48.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.6 seconds, 57.3%
Fitness Testing:     12.5 seconds, 25.9%
Report:               7.9 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: 60                 
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 98                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 74                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 75                 
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 28                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 95                 
Correct output: 65                  | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 49                 
Correct output: -58                 | Program output: 74                 
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 75                 
Correct output: -75                 | Program output: 37                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: 45                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: 6                  
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 80                 
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 45                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: 15                 
Correct output: -48                 | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: 96                 
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 90                 
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 44                 
Correct output: -24                 | Program output: 55                 
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 64                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 75                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: 75                 
Correct output: -60                 | Program output: 39                 
Correct output: -87                 | Program output: 93                 
Correct output: -82                 | Program output: 97                 
Correct output: -100                | Program output: 39                 
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 77                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 4                  
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_dup_items exec_eq integer_flush boolean_shove boolean_flush integer_mod exec_dup (exec_yankdup) exec_empty integer_yankdup boolean_or exec_y_when_autoconstructing (boolean_yank print_integer integer_rot exec_do*times (integer_gt integer_dec boolean_shove boolean_not boolean_yankdup exec_eq print_newline integer_dup exec_s (boolean_and) (print_integer integer_mod) (in1 boolean_rot) integer_pop integer_fromboolean integer_add exec_do*times (exec_y (exec_eq exec_dup (boolean_empty integer_lt boolean_swap exec_y_when_autoconstructing (integer_lte exec_y (exec_dup_items integer_swap))))))))
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 57
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_dup_items exec_eq integer_flush boolean_shove boolean_flush integer_mod exec_dup (exec_yankdup) exec_empty integer_yankdup boolean_or exec_y_when_autoconstructing (boolean_yank print_integer integer_rot exec_do*times (integer_gt integer_dec boolean_shove boolean_not boolean_yankdup exec_eq print_newline integer_dup exec_s (boolean_and) (print_integer integer_mod) (in1 boolean_rot) integer_pop integer_fromboolean integer_add exec_do*times (exec_y (exec_eq exec_dup (boolean_empty integer_lt boolean_swap exec_y_when_autoconstructing (integer_lte exec_y (exec_dup_items integer_swap))))))))
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 57
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (399 399 91 399 398 874 397 1000 399 489)
Population mean number of elite cases: 4.84
Count of perfect (error zero) individuals by case: (399 399 91 399 398 874 397 0 399 489)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k})
Best program: (integer_lt exec_yankdup boolean_yank integer_mult exec_do*range () integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup boolean_dup in1 print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush) (exec_dup_items integer_shove exec_do*range (integer_add exec_k (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (integer_lte exec_s (boolean_flush integer_flush) (boolean_flush) (in1 exec_yank exec_k () ())))) ()))
Errors: [0 0 1 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 40
Size: 55
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.155
Median total errors in population: 9
Error averages by case: (0.601 0.601 0.909 0.601 0.602 0.126 0.603 1.0 0.601 0.511)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 41.406
Average program size in population (points): 56.914
Average percent parens in population: 0.272
Minimum age in population: 20.27490234375
Maximum age in population: 24.588134765625
Average age in population: 22.65452429199219
Median age in population: 22.70223999023438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 13747977
--- Timings ---
Current time: 1559584703974 milliseconds
Total Time:          51.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.8 seconds, 58.0%
Fitness Testing:     13.3 seconds, 25.9%
Report:               8.2 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: 60                 
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 98                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 74                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 75                 
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 28                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 95                 
Correct output: 65                  | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 49                 
Correct output: -58                 | Program output: 74                 
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 75                 
Correct output: -75                 | Program output: 37                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: 45                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: 6                  
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 80                 
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 45                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: 15                 
Correct output: -48                 | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: 96                 
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 90                 
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 44                 
Correct output: -24                 | Program output: 55                 
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 64                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 75                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: 75                 
Correct output: -60                 | Program output: 39                 
Correct output: -87                 | Program output: 93                 
Correct output: -82                 | Program output: 97                 
Correct output: -100                | Program output: 39                 
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 77                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 4                  
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 3, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult})
Lexicase best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () boolean_dup in1 integer_dup_times) (exec_do*count ()) exec_if (integer_gt exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult) ())
Lexicase best errors: [0 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 3, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult})
Zero cases best program: (integer_dup_items exec_eq exec_do*range (boolean_shove boolean_flush) exec_swap (integer_div integer_swap integer_gt exec_when () boolean_dup in1 integer_dup_times) (exec_do*count ()) exec_if (integer_gt exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult) ())
Zero cases best errors: [0 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (728 730 865 141 725 729 1000 729 724 1000)
Population mean number of elite cases: 7.37
Count of perfect (error zero) individuals by case: (728 730 865 141 725 729 0 729 724 0)
Population mean number of perfect (error zero) cases: 5.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tag_boolean_569} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range})
Best program: (exec_while (in1 exec_shove (exec_dup_items boolean_yankdup) exec_pop () exec_empty integer_mult) integer_sub integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup boolean_dup in1 print_integer boolean_dup) exec_k_when_autoconstructing (exec_s (boolean_dup_times boolean_dup_items boolean_rot integer_max integer_flush) (exec_dup_items tag_boolean_569) (integer_inc print_integer integer_inc exec_flush) exec_k_when_autoconstructing () (exec_do*times () integer_min boolean_not boolean_flush integer_gt exec_do*range ())) ())
Errors: [0 0 0 1 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 54
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 4.629
Median total errors in population: 3
Error averages by case: (0.272 0.27 0.135 0.859 0.275 0.271 1.0 0.271 0.276 1.0)
Error minima by case: (0 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 43.714
Average program size in population (points): 58.962
Average percent parens in population: 0.254
Minimum age in population: 21.27490234375
Maximum age in population: 26.10739135742188
Average age in population: 24.13525784301758
Median age in population: 24.19436645507812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 14447285
--- Timings ---
Current time: 1559584706924 milliseconds
Total Time:          54.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.9 seconds, 58.6%
Fitness Testing:     13.9 seconds, 25.6%
Report:               8.5 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: 60                 
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 98                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 74                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 75                 
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 28                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 95                 
Correct output: 65                  | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 49                 
Correct output: -58                 | Program output: 74                 
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 75                 
Correct output: -75                 | Program output: 37                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: 45                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: 6                  
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 80                 
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 45                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: 15                 
Correct output: -48                 | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: 96                 
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 90                 
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 44                 
Correct output: -24                 | Program output: 55                 
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 64                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 75                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: 75                 
Correct output: -60                 | Program output: 39                 
Correct output: -87                 | Program output: 93                 
Correct output: -82                 | Program output: 97                 
Correct output: -100                | Program output: 39                 
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 77                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 4                  
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_while (in1 exec_shove (exec_dup_items integer_mod exec_yankdup) integer_gte integer_mult integer_sub) integer_fromboolean exec_if (boolean_not boolean_yankdup exec_eq print_newline integer_dup exec_s (boolean_and) (print_integer integer_max) (in1 boolean_rot) integer_pop integer_fromboolean integer_add integer_dup_times) ())
Lexicase best errors: [0 0 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_while (in1 exec_shove (exec_dup_items integer_mod exec_yankdup) integer_gte integer_mult integer_sub) integer_fromboolean exec_if (boolean_not boolean_yankdup exec_eq print_newline integer_dup exec_s (boolean_and) (print_integer integer_max) (in1 boolean_rot) integer_pop integer_fromboolean integer_add integer_dup_times) ())
Zero cases best errors: [0 0 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (744 742 1000 870 1000 739 1000 125 125 864)
Population mean number of elite cases: 7.21
Count of perfect (error zero) individuals by case: (744 742 0 870 0 739 0 125 125 864)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_367} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tag_boolean_763} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items})
Best program: (exec_while (in1 exec_shove (exec_dup_items boolean_or exec_yankdup exec_empty integer_mult integer_sub)) integer_fromboolean tag_boolean_367 in1 print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items) (integer_dup integer_max integer_flush) (exec_dup_items tag_boolean_763) integer_inc print_integer integer_inc exec_flush in3 exec_do*times () integer_min boolean_not boolean_flush boolean_dup_items)
Errors: [0 0 1 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 40
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 5.791
Median total errors in population: 5
Error averages by case: (0.256 0.258 1.0 0.13 1.0 0.261 1.0 0.875 0.875 0.136)
Error minima by case: (0 0 1 0 1 0 1 0 0 0)
Average genome size in population (length): 41.98
Average program size in population (points): 56.535
Average percent parens in population: 0.253
Minimum age in population: 22.8623046875
Maximum age in population: 27.61770629882812
Average age in population: 25.68808853149414
Median age in population: 25.75093078613281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 15139193
--- Timings ---
Current time: 1559584709530 milliseconds
Total Time:          57.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.6 seconds, 59.0%
Fitness Testing:     14.5 seconds, 25.5%
Report:               8.7 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -58                 | Program output: -53                
Correct output: -37                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: 62                 
Correct output: -75                 | Program output: 86                 
Correct output: -92                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: 75                 
Correct output: -94                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -69                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -2                 
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -39                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -85                
Correct output: -18                 | Program output: 76                 
Correct output: -82                 | Program output: -20                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -22                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -12                
Correct output: -76                 | Program output: -71                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -30                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -46                
Correct output: -59                 | Program output: -47                
Correct output: -14                 | Program output: 95                 
Correct output: -17                 | Program output: 93                 
Correct output: -30                 | Program output: -21                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 95                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -61                
Correct output: -19                 | Program output: 21                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max})
Lexicase best program: (exec_while (integer_lt exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty) integer_mult integer_sub exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup boolean_dup boolean_invert_second_then_and print_integer boolean_dup) boolean_frominteger exec_s (boolean_dup_times boolean_dup_items boolean_yank integer_max) () ())
Lexicase best errors: [0 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max})
Zero cases best program: (exec_while (integer_lt exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty) integer_mult integer_sub exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup boolean_dup boolean_invert_second_then_and print_integer boolean_dup) boolean_frominteger exec_s (boolean_dup_times boolean_dup_items boolean_yank integer_max) () ())
Zero cases best errors: [0 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (360 360 360 536 537 1 898 360 898 898)
Population mean number of elite cases: 5.21
Count of perfect (error zero) individuals by case: (360 360 360 536 537 1 898 360 898 898)
Population mean number of perfect (error zero) cases: 5.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq boolean_invert_first_then_and) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush) (exec_dup_items integer_shove exec_do*range (integer_add exec_k (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (exec_flush exec_s (boolean_flush integer_flush) (boolean_flush) (in1 exec_yank exec_k (integer_yank) () exec_s_when_autoconstructing (integer_lte exec_empty print_newline) (exec_swap (exec_y (boolean_xor) boolean_or integer_lte integer_min integer_max integer_swap integer_mult boolean_dup_times) (boolean_dup) boolean_pop exec_y_when_autoconstructing (boolean_dup_times)) ())))) ()))
Errors: [0 0 0 1 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 61
Size: 84
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 4.792
Median total errors in population: 5
Error averages by case: (0.64 0.64 0.64 0.464 0.463 0.999 0.102 0.64 0.102 0.102)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.713
Average program size in population (points): 57.795
Average percent parens in population: 0.257
Minimum age in population: 24.3623046875
Maximum age in population: 29.06154632568359
Average age in population: 27.18156823730469
Median age in population: 27.24650192260742
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 15744049
--- Timings ---
Current time: 1559584712379 milliseconds
Total Time:          59.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.7 seconds, 59.6%
Fitness Testing:     15.1 seconds, 25.2%
Report:               9.0 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: 60                 
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 98                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 74                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 75                 
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 28                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 95                 
Correct output: 65                  | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 49                 
Correct output: -58                 | Program output: 74                 
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 75                 
Correct output: -75                 | Program output: 37                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: 45                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: 6                  
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 80                 
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 45                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: 15                 
Correct output: -48                 | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: 96                 
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 90                 
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 44                 
Correct output: -24                 | Program output: 55                 
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 64                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 75                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: 75                 
Correct output: -60                 | Program output: 39                 
Correct output: -87                 | Program output: 93                 
Correct output: -82                 | Program output: 97                 
Correct output: -100                | Program output: 39                 
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 77                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 4                  
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tag_boolean_569} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_shove} {:close 1, :instruction print_exec} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_or in1 exec_shove (exec_dup_items boolean_eq integer_max exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items exec_dup_times (in2 integer_yankdup boolean_dup_items in1 print_integer integer_pop boolean_frominteger exec_dup_items tag_boolean_569) integer_inc print_integer integer_inc exec_flush in3 exec_do*times () integer_min boolean_not in1 exec_yank exec_k (integer_pop) (boolean_yank boolean_shove) print_exec () exec_swap (print_boolean exec_rot (exec_k_when_autoconstructing (in2) (integer_mult) integer_dup_times) () ()) ()) ())
Lexicase best errors: [1 0 0 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 60
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tag_boolean_569} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_shove} {:close 1, :instruction print_exec} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_or in1 exec_shove (exec_dup_items boolean_eq integer_max exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items exec_dup_times (in2 integer_yankdup boolean_dup_items in1 print_integer integer_pop boolean_frominteger exec_dup_items tag_boolean_569) integer_inc print_integer integer_inc exec_flush in3 exec_do*times () integer_min boolean_not in1 exec_yank exec_k (integer_pop) (boolean_yank boolean_shove) print_exec () exec_swap (print_boolean exec_rot (exec_k_when_autoconstructing (in2) (integer_mult) integer_dup_times) () ()) ()) ())
Zero cases best errors: [1 0 0 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (534 242 244 1000 127 126 535 1000 1000 243)
Population mean number of elite cases: 5.05
Count of perfect (error zero) individuals by case: (534 242 244 0 127 126 535 0 0 243)
Population mean number of perfect (error zero) cases: 2.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc})
Best program: (integer_dup_items exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup boolean_dup exec_if (exec_y (exec_while (boolean_yank print_integer boolean_frominteger integer_flush) exec_s (boolean_and) (print_integer integer_max) (in1 boolean_rot) integer_pop integer_fromboolean integer_add exec_do*times () integer_mod in2 integer_add boolean_empty integer_lt boolean_swap exec_y_when_autoconstructing (integer_lte exec_y (exec_dup_items integer_inc)))) ()) ())
Errors: [1 0 0 1 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 43
Size: 57
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 7.949
Median total errors in population: 8
Error averages by case: (0.466 0.758 0.756 1.0 0.873 0.874 0.465 1.0 1.0 0.757)
Error minima by case: (0 0 0 1 0 0 0 1 1 0)
Average genome size in population (length): 41.704
Average program size in population (points): 56.059
Average percent parens in population: 0.250
Minimum age in population: 25.482666015625
Maximum age in population: 30.57971572875977
Average age in population: 28.67713277435303
Median age in population: 28.71343803405762
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 16224065
--- Timings ---
Current time: 1559584715323 milliseconds
Total Time:          62.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.4 seconds, 60.0%
Fitness Testing:     15.5 seconds, 24.9%
Report:               9.3 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: 18                 
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 84                 
Correct output: 28                  | Program output: 73                 
Correct output: 7                   | Program output: 81                 
Correct output: 17                  | Program output: 99                 
Correct output: 2                   | Program output: 18                 
Correct output: 10                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 83                 
Correct output: 1                   | Program output: 56                 
Correct output: 4                   | Program output: 74                 
Correct output: 6                   | Program output: 40                 
Correct output: 23                  | Program output: 68                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: 25                 
Correct output: -58                 | Program output: 19                 
Correct output: -37                 | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 81                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: 93                 
Correct output: -92                 | Program output: 54                 
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 61                 
Correct output: -21                 | Program output: -5                 
Correct output: -94                 | Program output: 22                 
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: 49                 
Correct output: -81                 | Program output: 97                 
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: 90                 
Correct output: -49                 | Program output: 88                 
Correct output: -39                 | Program output: 62                 
Correct output: -97                 | Program output: 50                 
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: 73                 
Correct output: -82                 | Program output: 60                 
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: 53                 
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: 46                 
Correct output: -17                 | Program output: 88                 
Correct output: -30                 | Program output: 13                 
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 79                 
Correct output: 1                   | Program output: 2                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: 87                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: 38                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_763} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup boolean_dup in4 print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items) (integer_dup integer_max integer_flush) (exec_dup_items tag_boolean_763 integer_inc print_integer integer_inc exec_flush) in3 exec_do*times () integer_min boolean_not) (boolean_flush boolean_dup_items))
Lexicase best errors: [0 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 45
Percent parens: 0.178
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_763} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup boolean_dup in4 print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items) (integer_dup integer_max integer_flush) (exec_dup_items tag_boolean_763 integer_inc print_integer integer_inc exec_flush) in3 exec_do*times () integer_min boolean_not) (boolean_flush boolean_dup_items))
Zero cases best errors: [0 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 45
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 387 252 526 914 251 661 1000 252 912)
Population mean number of elite cases: 5.41
Count of perfect (error zero) individuals by case: (252 387 252 526 914 251 661 0 252 912)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tag_boolean_763} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items})
Best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup boolean_dup in4 print_integer boolean_dup boolean_frominteger exec_s (exec_s (boolean_dup_times boolean_dup_items) (integer_dup integer_max exec_y_when_autoconstructing () exec_dup_items tag_boolean_763) (integer_inc print_integer integer_inc exec_flush) in3 exec_do*times () integer_min boolean_not) (boolean_flush boolean_dup_items) ()) ())
Errors: [0 1 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 38
Size: 50
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 5.593
Median total errors in population: 6
Error averages by case: (0.748 0.613 0.748 0.474 0.086 0.749 0.339 1.0 0.748 0.088)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 40.369
Average program size in population (points): 53.262
Average percent parens in population: 0.236
Minimum age in population: 26.482666015625
Maximum age in population: 31.99125289916992
Average age in population: 30.17649360275269
Median age in population: 30.25700855255127
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 16747152
--- Timings ---
Current time: 1559584717993 milliseconds
Total Time:          65.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.3 seconds, 60.1%
Fitness Testing:     16.0 seconds, 24.4%
Report:              10.1 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: 60                 
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 98                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 74                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 75                 
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 28                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 95                 
Correct output: 65                  | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 49                 
Correct output: -58                 | Program output: 74                 
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 75                 
Correct output: -75                 | Program output: 37                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: 45                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: 6                  
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 80                 
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 45                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: 15                 
Correct output: -48                 | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: 96                 
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 90                 
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 44                 
Correct output: -24                 | Program output: 55                 
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 64                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 75                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: 75                 
Correct output: -60                 | Program output: 39                 
Correct output: -87                 | Program output: 93                 
Correct output: -82                 | Program output: 97                 
Correct output: -100                | Program output: 39                 
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 77                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 4                  
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_40} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tag_boolean_763} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_while () exec_do*while () exec_while (integer_lt in1 exec_dup_items tagged_40 exec_yankdup) exec_empty integer_mult integer_sub integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup integer_gte in1 print_integer exec_y () integer_yankdup in4 print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items) (integer_dup integer_max integer_flush) (exec_dup_items tag_boolean_763) integer_inc print_integer integer_inc exec_flush) in3 exec_do*times () integer_min boolean_not boolean_flush boolean_dup_items)
Lexicase best errors: [0 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_40} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tag_boolean_763} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_while () exec_do*while () exec_while (integer_lt in1 exec_dup_items tagged_40 exec_yankdup) exec_empty integer_mult integer_sub integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup integer_gte in1 print_integer exec_y () integer_yankdup in4 print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items) (integer_dup integer_max integer_flush) (exec_dup_items tag_boolean_763) integer_inc print_integer integer_inc exec_flush) in3 exec_do*times () integer_min boolean_not boolean_flush boolean_dup_items)
Zero cases best errors: [0 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 659 178 175 905 71 71 888 727 1000)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (179 659 178 175 905 71 71 888 727 0)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tag_boolean_569} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 1, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_when})
Best program: (exec_while (in1 boolean_dup_times exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup integer_pop in1 print_integer boolean_dup) boolean_frominteger exec_s () (boolean_dup_times boolean_dup_items integer_dup boolean_shove integer_flush) (exec_dup_items tag_boolean_569) integer_inc print_integer integer_inc exec_flush in3 exec_do*times () integer_min boolean_not boolean_flush integer_inc exec_when ())
Errors: [0 1 0 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 39
Size: 48
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 6.147
Median total errors in population: 6
Error averages by case: (0.821 0.341 0.822 0.825 0.095 0.929 0.929 0.112 0.273 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 37.746
Average program size in population (points): 47.664
Average percent parens in population: 0.204
Minimum age in population: 27.9114990234375
Maximum age in population: 33.53479385375977
Average age in population: 31.72108075618744
Median age in population: 31.78595066070557
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 165
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 17156838
--- Timings ---
Current time: 1559584720740 milliseconds
Total Time:          68.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.4 seconds, 60.7%
Fitness Testing:     16.4 seconds, 24.0%
Report:              10.4 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -58                 | Program output: -53                
Correct output: -37                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: 62                 
Correct output: -75                 | Program output: 86                 
Correct output: -92                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: 75                 
Correct output: -94                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -69                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -2                 
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -39                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -85                
Correct output: -18                 | Program output: 76                 
Correct output: -82                 | Program output: -20                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -22                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -12                
Correct output: -76                 | Program output: -71                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -30                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -46                
Correct output: -59                 | Program output: -47                
Correct output: -14                 | Program output: 95                 
Correct output: -17                 | Program output: 93                 
Correct output: -30                 | Program output: -21                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 95                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -61                
Correct output: -19                 | Program output: 21                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq integer_rot) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup print_integer boolean_dup_items integer_dup integer_shove integer_flush) (exec_dup_items print_boolean boolean_eq integer_add exec_k (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (integer_lte exec_s (boolean_flush integer_flush) (boolean_flush) (in1 exec_yank exec_k (integer_yank) () exec_s_when_autoconstructing (integer_lte exec_empty print_newline) (exec_swap (boolean_dup_items integer_lte integer_min integer_max integer_swap integer_mult boolean_dup_times) (boolean_dup) boolean_pop exec_y_when_autoconstructing (boolean_dup_times boolean_or) boolean_pop boolean_stackdepth) (print_integer exec_s_when_autoconstructing () (exec_empty integer_empty in4 boolean_dup boolean_and) ())))))
Lexicase best errors: [0 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 86
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq integer_rot) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup print_integer boolean_dup_items integer_dup integer_shove integer_flush) (exec_dup_items print_boolean boolean_eq integer_add exec_k (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (integer_lte exec_s (boolean_flush integer_flush) (boolean_flush) (in1 exec_yank exec_k (integer_yank) () exec_s_when_autoconstructing (integer_lte exec_empty print_newline) (exec_swap (boolean_dup_items integer_lte integer_min integer_max integer_swap integer_mult boolean_dup_times) (boolean_dup) boolean_pop exec_y_when_autoconstructing (boolean_dup_times boolean_or) boolean_pop boolean_stackdepth) (print_integer exec_s_when_autoconstructing () (exec_empty integer_empty in4 boolean_dup boolean_and) ())))))
Zero cases best errors: [0 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 86
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (320 1000 319 203 1000 204 382 319 381 320)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (320 0 319 203 0 204 382 319 381 320)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_exec_970} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank})
Best program: (exec_while (exec_while (in1 exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub)) integer_fromboolean) exec_if (boolean_dup_items integer_dup_times in2) (integer_yankdup print_integer boolean_dup) boolean_frominteger exec_do*count () exec_if (exec_y (exec_while () boolean_yank print_integer boolean_frominteger tag_exec_970 () integer_mult integer_lte boolean_flush) boolean_dup integer_lte exec_rot (boolean_flush) (boolean_yank boolean_yank) ()) ())
Errors: [0 1 0 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 38
Size: 54
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.552
Median total errors in population: 8
Error averages by case: (0.68 1.0 0.681 0.797 1.0 0.796 0.618 0.681 0.619 0.68)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 38.225
Average program size in population (points): 50.172
Average percent parens in population: 0.234
Minimum age in population: 29.68009948730469
Maximum age in population: 35.0022873878479
Average age in population: 33.13115406847
Median age in population: 33.20907235145569
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 17620964
--- Timings ---
Current time: 1559584724034 milliseconds
Total Time:          70.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.2 seconds, 61.1%
Fitness Testing:     16.8 seconds, 23.7%
Report:              10.6 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -58                 | Program output: -53                
Correct output: -37                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: 62                 
Correct output: -75                 | Program output: 86                 
Correct output: -92                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: 75                 
Correct output: -94                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -69                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -2                 
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -39                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -85                
Correct output: -18                 | Program output: 76                 
Correct output: -82                 | Program output: -20                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -22                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -12                
Correct output: -76                 | Program output: -71                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -30                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -46                
Correct output: -59                 | Program output: -47                
Correct output: -14                 | Program output: 95                 
Correct output: -17                 | Program output: 93                 
Correct output: -30                 | Program output: -21                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 95                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -61                
Correct output: -19                 | Program output: 21                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup print_integer integer_inc exec_flush in3 exec_do*times () integer_min boolean_not in1 exec_yank exec_k (integer_yank) (boolean_yank boolean_shove)) ())
Lexicase best errors: [1 1 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup print_integer integer_inc exec_flush in3 exec_do*times () integer_min boolean_not in1 exec_yank exec_k (integer_yank) (boolean_yank boolean_shove)) ())
Zero cases best errors: [1 1 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 231 1000 694 212 461 460 677 1000 914)
Population mean number of elite cases: 5.88
Count of perfect (error zero) individuals by case: (234 231 0 694 212 461 460 677 0 914)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove})
Best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup print_integer integer_inc exec_flush in3 exec_do*times () integer_min boolean_not in1 exec_yank exec_k (integer_yank) (boolean_yank boolean_shove)) ())
Errors: [1 1 1 0 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.117
Median total errors in population: 6
Error averages by case: (0.766 0.769 1.0 0.306 0.788 0.539 0.54 0.323 1.0 0.086)
Error minima by case: (0 0 1 0 0 0 0 0 1 0)
Average genome size in population (length): 38.091
Average program size in population (points): 49.952
Average percent parens in population: 0.234
Minimum age in population: 31.93617153167725
Maximum age in population: 36.33816432952881
Average age in population: 34.60743034553528
Median age in population: 34.68249034881592
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 18048301
--- Timings ---
Current time: 1559584726646 milliseconds
Total Time:          74.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.2 seconds, 61.0%
Fitness Testing:     17.1 seconds, 23.1%
Report:              11.7 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 674
Test mean error for best: 0.67400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92()true           
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 43()true           
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output:                    
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -58                 | Program output: -53                
Correct output: -37                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: 62                 
Correct output: -75                 | Program output: 86                 
Correct output: -92                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -70                
Correct output: -57                 | Program output:                    
Correct output: -21                 | Program output: 75                 
Correct output: -94                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -69                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -2                 
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -39                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -85                
Correct output: -18                 | Program output: 76                 
Correct output: -82                 | Program output: -20                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -22                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -12                
Correct output: -76                 | Program output: -71                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -30                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -46                
Correct output: -59                 | Program output: -47                
Correct output: -14                 | Program output:                    
Correct output: -17                 | Program output: 93                 
Correct output: -30                 | Program output: -21                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 41()true           
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 95                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -61                
Correct output: -19                 | Program output: 21                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction tag_boolean_955} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq integer_rot) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup print_integer boolean_dup_items integer_dup integer_max integer_flush) (exec_dup_items integer_shove exec_do*range (integer_add exec_k (boolean_yank boolean_yank integer_lte tag_boolean_955) (integer_inc print_integer integer_inc exec_flush) in3 exec_do*times () integer_min boolean_not) boolean_flush boolean_dup_items))
Lexicase best errors: [1 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction tag_boolean_955} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq integer_rot) exec_empty integer_mult integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup print_integer boolean_dup_items integer_dup integer_max integer_flush) (exec_dup_items integer_shove exec_do*range (integer_add exec_k (boolean_yank boolean_yank integer_lte tag_boolean_955) (integer_inc print_integer integer_inc exec_flush) in3 exec_do*times () integer_min boolean_not) boolean_flush boolean_dup_items))
Zero cases best errors: [1 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 418 302 904 181 419 418 176 180 724)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (180 418 302 904 181 419 418 176 180 724)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot})
Best program: (in1 exec_shove (exec_dup_items boolean_eq integer_mult exec_yankdup exec_empty integer_mult integer_sub) integer_fromboolean boolean_swap boolean_dup_items integer_dup_times in2 integer_yankdup print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items exec_do*times () integer_min boolean_not in1 exec_yank exec_k (integer_yank) (boolean_yank boolean_shove print_exec () exec_do*while (print_boolean exec_rot (boolean_dup_times integer_pop integer_mult integer_dup_times exec_rot () () ()) () ()))) () ())
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 55
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 6.098
Median total errors in population: 5
Error averages by case: (0.82 0.582 0.698 0.096 0.819 0.581 0.582 0.824 0.82 0.276)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.151
Average program size in population (points): 50.31
Average percent parens in population: 0.238
Minimum age in population: 32.93617153167725
Maximum age in population: 37.99524223804474
Average age in population: 36.09375178349018
Median age in population: 36.15931248664856
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 18493703
--- Timings ---
Current time: 1559584729190 milliseconds
Total Time:          76.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.1 seconds, 61.4%
Fitness Testing:     17.6 seconds, 22.9%
Report:              11.9 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -58                 | Program output: -53                
Correct output: -37                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: 62                 
Correct output: -75                 | Program output: 86                 
Correct output: -92                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: 75                 
Correct output: -94                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -69                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -2                 
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -39                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -85                
Correct output: -18                 | Program output: 76                 
Correct output: -82                 | Program output: -20                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -22                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -12                
Correct output: -76                 | Program output: -71                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -30                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -46                
Correct output: -59                 | Program output: -47                
Correct output: -14                 | Program output: 95                 
Correct output: -17                 | Program output: 93                 
Correct output: -30                 | Program output: -21                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 95                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -61                
Correct output: -19                 | Program output: 21                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub) exec_rot () (exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup print_integer integer_inc exec_flush in3 exec_do*times () integer_min boolean_not in1 exec_yank exec_k (integer_yank) (boolean_yank boolean_shove)) ()) ())
Lexicase best errors: [1 1 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_while (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub) exec_rot () (exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup print_integer integer_inc exec_flush in3 exec_do*times () integer_min boolean_not in1 exec_yank exec_k (integer_yank) (boolean_yank boolean_shove)) ()) ())
Zero cases best errors: [1 1 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (117 115 371 428 913 913 371 427 370 487)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (117 115 371 428 913 913 371 427 370 487)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult})
Best program: (integer_mod boolean_shove exec_if (integer_swap integer_dup_times in2 integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max boolean_dup_items) (integer_dup_items integer_flush) (exec_dup_items integer_shove exec_do*range (integer_add exec_k (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (integer_lte exec_s (boolean_flush integer_flush) (boolean_flush) (in1 exec_yank exec_k (integer_yank) () exec_s_when_autoconstructing (integer_mult) () ()))))))
Errors: [1 1 0 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 56
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 5.488
Median total errors in population: 6
Error averages by case: (0.883 0.885 0.629 0.572 0.087 0.087 0.629 0.573 0.63 0.513)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.008
Average program size in population (points): 49.424
Average percent parens in population: 0.227
Minimum age in population: 34.63992500305176
Maximum age in population: 39.74581652879715
Average age in population: 37.63352693426609
Median age in population: 37.71973621845245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 18922248
--- Timings ---
Current time: 1559584731995 milliseconds
Total Time:          79.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.2 seconds, 61.9%
Fitness Testing:     17.9 seconds, 22.6%
Report:              12.2 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: 60                 
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 98                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 74                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 75                 
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 28                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 95                 
Correct output: 65                  | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 49                 
Correct output: -58                 | Program output: 74                 
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 75                 
Correct output: -75                 | Program output: 37                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: 45                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: 6                  
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 80                 
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 45                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: 15                 
Correct output: -48                 | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: 96                 
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 90                 
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 44                 
Correct output: -24                 | Program output: 55                 
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 64                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 75                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: 75                 
Correct output: -60                 | Program output: 39                 
Correct output: -87                 | Program output: 93                 
Correct output: -82                 | Program output: 97                 
Correct output: -100                | Program output: 39                 
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 77                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 4                  
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tag_boolean_569} {:close 0, :instruction integer_inc})
Lexicase best program: (exec_while (in1 integer_max boolean_and boolean_eq boolean_dup_items) exec_empty integer_mult integer_sub integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup) (boolean_dup in1 print_integer boolean_dup) boolean_frominteger exec_noop boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush exec_dup_items tag_boolean_569 integer_inc)
Lexicase best errors: [0 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.121
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tag_boolean_569} {:close 0, :instruction integer_inc})
Zero cases best program: (exec_while (in1 integer_max boolean_and boolean_eq boolean_dup_items) exec_empty integer_mult integer_sub integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup) (boolean_dup in1 print_integer boolean_dup) boolean_frominteger exec_noop boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush exec_dup_items tag_boolean_569 integer_inc)
Zero cases best errors: [0 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.121
--- Lexicase Population Statistics ---
Count of elite individuals by case: (248 249 218 249 248 249 445 445 1 443)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (248 249 218 249 248 249 445 445 1 443)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_shove})
Best program: (exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult integer_sub integer_fromboolean exec_when () boolean_dup_items integer_dup_times in2 integer_yankdup boolean_dup in1 print_integer boolean_dup boolean_frominteger exec_s (exec_dup_items integer_shove exec_do*range (boolean_frominteger exec_k (boolean_yank boolean_yank integer_lte integer_dup_items integer_add integer_mult exec_eq) (boolean_flush exec_shove ()))) () ())
Errors: [0 0 1 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 43
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.205
Median total errors in population: 7
Error averages by case: (0.752 0.751 0.782 0.751 0.752 0.751 0.555 0.555 0.999 0.557)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.088
Average program size in population (points): 48.854
Average percent parens in population: 0.237
Minimum age in population: 36.36674690246582
Maximum age in population: 41.22067904472351
Average age in population: 39.098340087533
Median age in population: 39.15885108709335
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 19369848
--- Timings ---
Current time: 1559584734540 milliseconds
Total Time:          82.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.0 seconds, 62.2%
Fitness Testing:     18.3 seconds, 22.4%
Report:              12.5 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output:                    
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: 8                  
Correct output: -37                 | Program output: 90                 
Correct output: -71                 | Program output: 74                 
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -72                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: 86                 
Correct output: -94                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 22                 
Correct output: -49                 | Program output: 69                 
Correct output: -39                 | Program output: 49                 
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 98                 
Correct output: -18                 | Program output: 89                 
Correct output: -82                 | Program output: 11                 
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -11                
Correct output: -76                 | Program output: 30                 
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: 45                 
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: 29                 
Correct output: -59                 | Program output: -26                
Correct output: -14                 | Program output: 95                 
Correct output: -17                 | Program output: 10                 
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output:                    
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 63                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: 74                 
Correct output: -19                 | Program output: 5                  
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_763} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction tag_boolean_569} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min})
Lexicase best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup boolean_dup integer_shove print_integer boolean_dup boolean_frominteger exec_s (exec_swap (boolean_dup_items) (integer_dup integer_max integer_flush)) (exec_dup_items tag_boolean_763 integer_inc print_integer integer_inc tag_boolean_569) (integer_inc print_integer exec_do*times () integer_inc print_integer integer_inc integer_min)) ())
Lexicase best errors: [1 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_763} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction tag_boolean_569} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min})
Zero cases best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup boolean_dup integer_shove print_integer boolean_dup boolean_frominteger exec_s (exec_swap (boolean_dup_items) (integer_dup integer_max integer_flush)) (exec_dup_items tag_boolean_763 integer_inc print_integer integer_inc tag_boolean_569) (integer_inc print_integer exec_do*times () integer_inc print_integer integer_inc integer_min)) ())
Zero cases best errors: [1 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (84 289 283 892 439 281 96 440 439 96)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (84 289 283 892 439 281 96 440 439 96)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_763} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction tag_boolean_569} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min})
Best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup boolean_dup integer_shove print_integer boolean_dup boolean_frominteger exec_s (exec_swap (boolean_dup_items) (integer_dup integer_max integer_flush)) (exec_dup_items tag_boolean_763 integer_inc print_integer integer_inc tag_boolean_569) (integer_inc print_integer exec_do*times () integer_inc print_integer integer_inc integer_min)) ())
Errors: [1 0 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 48
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.661
Median total errors in population: 6
Error averages by case: (0.916 0.711 0.717 0.108 0.561 0.719 0.904 0.56 0.561 0.904)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.792
Average program size in population (points): 46.851
Average percent parens in population: 0.232
Minimum age in population: 37.56988763809204
Maximum age in population: 42.79482287168503
Average age in population: 40.75225191628933
Median age in population: 40.83291073143482
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 19829838
--- Timings ---
Current time: 1559584737636 milliseconds
Total Time:          85.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.4 seconds, 62.8%
Fitness Testing:     18.7 seconds, 22.1%
Report:              12.8 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -58                 | Program output: -53                
Correct output: -37                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: 62                 
Correct output: -75                 | Program output: 86                 
Correct output: -92                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -70                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: 75                 
Correct output: -94                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -69                
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -2                 
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -39                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -85                
Correct output: -18                 | Program output: 76                 
Correct output: -82                 | Program output: -20                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -22                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -12                
Correct output: -76                 | Program output: -71                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -30                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -46                
Correct output: -59                 | Program output: -47                
Correct output: -14                 | Program output: 95                 
Correct output: -17                 | Program output: 93                 
Correct output: -30                 | Program output: -21                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: 95                 
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -61                
Correct output: -19                 | Program output: 21                 
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline})
Lexicase best program: (exec_while (in1 exec_shove (exec_dup_items integer_dup_items exec_eq) exec_do*range (boolean_shove integer_sub)) integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup boolean_dup integer_add print_integer boolean_dup) boolean_frominteger exec_s (exec_if (exec_y (exec_eq integer_shove integer_flush) exec_dup_items print_boolean boolean_eq integer_add exec_k (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (integer_lte exec_s (boolean_flush integer_flush) (boolean_flush) (in1 exec_yank exec_k (integer_yank) () exec_s_when_autoconstructing (integer_lte exec_empty print_newline) () ()))) ()) () ())
Lexicase best errors: [0 1 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 71
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline})
Zero cases best program: (exec_while (in1 exec_shove (exec_dup_items integer_dup_items exec_eq) exec_do*range (boolean_shove integer_sub)) integer_fromboolean exec_if (boolean_dup_items) (integer_dup_times in2 integer_yankdup boolean_dup integer_add print_integer boolean_dup) boolean_frominteger exec_s (exec_if (exec_y (exec_eq integer_shove integer_flush) exec_dup_items print_boolean boolean_eq integer_add exec_k (boolean_yank boolean_yank integer_lte integer_dup_items boolean_frominteger) (integer_lte exec_s (boolean_flush integer_flush) (boolean_flush) (in1 exec_yank exec_k (integer_yank) () exec_s_when_autoconstructing (integer_lte exec_empty print_newline) () ()))) ()) () ())
Zero cases best errors: [0 1 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 71
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (496 400 206 207 20 496 20 388 924 496)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (496 400 206 207 20 496 20 388 924 496)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction tag_boolean_763} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items})
Best program: (in1 exec_while (in1 exec_shove (exec_dup_items exec_shove (exec_dup_items boolean_eq exec_yankdup) exec_empty integer_mult boolean_eq exec_yankdup) integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times in2 integer_yankdup boolean_dup integer_shove print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items) (integer_dup integer_max integer_flush) () exec_dup_items tag_boolean_763) (integer_inc print_integer integer_inc exec_flush) in3 exec_do*times () integer_min boolean_not boolean_flush boolean_dup_items)
Errors: [0 1 0 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 43
Size: 53
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 6.347
Median total errors in population: 7
Error averages by case: (0.504 0.6 0.794 0.793 0.98 0.504 0.98 0.612 0.076 0.504)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.845
Average program size in population (points): 49.484
Average percent parens in population: 0.232
Minimum age in population: 38.56988763809204
Maximum age in population: 44.28026601672173
Average age in population: 42.42350345049798
Median age in population: 42.73276203125715
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 201
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 20360605
--- Timings ---
Current time: 1559584740222 milliseconds
Total Time:          87.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.2 seconds, 63.0%
Fitness Testing:     19.2 seconds, 21.9%
Report:              13.2 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 561
Test mean error for best: 0.56100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: 18                 
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 84                 
Correct output: 28                  | Program output: 73                 
Correct output: 7                   | Program output: 81                 
Correct output: 17                  | Program output: 99                 
Correct output: 2                   | Program output: 18                 
Correct output: 10                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 83                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 74                 
Correct output: 6                   | Program output: 40                 
Correct output: 23                  | Program output: 68                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 19                 
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 81                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: 54                 
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: 49                 
Correct output: -81                 | Program output: 97                 
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: 88                 
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: 50                 
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: 60                 
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: 53                 
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: 46                 
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: 13                 
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (in1 exec_shove (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty exec_while (in1 exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) boolean_dup in1 integer_dup_times) boolean_pop) in4 boolean_and in2 integer_yankdup print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush) (exec_dup_items integer_shove exec_do*range (exec_do*while (exec_k (boolean_yank integer_gt) (boolean_yank exec_empty tag_exec_222 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))))) ())
Lexicase best errors: [0 0 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (in1 exec_shove (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty exec_while (in1 exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) boolean_dup in1 integer_dup_times) boolean_pop) in4 boolean_and in2 integer_yankdup print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush) (exec_dup_items integer_shove exec_do*range (exec_do*while (exec_k (boolean_yank integer_gt) (boolean_yank exec_empty tag_exec_222 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))))) ())
Zero cases best errors: [0 0 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (258 21 1 316 193 258 1 457 1 316)
Population mean number of elite cases: 1.82
Count of perfect (error zero) individuals by case: (258 21 1 316 193 258 1 457 1 316)
Population mean number of perfect (error zero) cases: 1.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (in1 exec_shove (exec_empty exec_while (in1 exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in2 integer_yankdup print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush) (exec_dup_items integer_shove exec_do*range (exec_do*while (exec_k (boolean_yank integer_gt) (boolean_yank exec_empty tag_exec_222 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))))) ())
Errors: [0 0 1 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 44
Size: 59
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 8.178
Median total errors in population: 9
Error averages by case: (0.742 0.979 0.999 0.684 0.807 0.742 0.999 0.543 0.999 0.684)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.906
Average program size in population (points): 53.466
Average percent parens in population: 0.252
Minimum age in population: 39.56988763809204
Maximum age in population: 45.50075351074338
Average age in population: 43.88744979399443
Median age in population: 43.88808524608612
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 20823490
--- Timings ---
Current time: 1559584742979 milliseconds
Total Time:          90.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.2 seconds, 63.3%
Fitness Testing:     19.6 seconds, 21.7%
Report:              13.4 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 551
Test mean error for best: 0.55100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 60                 
Correct output: 28                  | Program output: 39                 
Correct output: 7                   | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 78                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 47                 
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 55                 
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 44                 
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty exec_while (in1 exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) boolean_dup in1 integer_dup_times) boolean_pop integer_swap boolean_and in2 integer_yankdup print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup boolean_xor integer_flush) (exec_dup_items integer_shove exec_do*range (exec_do*while (exec_k (boolean_yank integer_gt) (boolean_yank exec_empty tag_exec_222 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))))) ())
Lexicase best errors: [1 1 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 62
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty exec_while (in1 exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) boolean_dup in1 integer_dup_times) boolean_pop integer_swap boolean_and in2 integer_yankdup print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup boolean_xor integer_flush) (exec_dup_items integer_shove exec_do*range (exec_do*while (exec_k (boolean_yank integer_gt) (boolean_yank exec_empty tag_exec_222 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))))) ())
Zero cases best errors: [1 1 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 62
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (339 479 101 101 103 101 16 1000 950 88)
Population mean number of elite cases: 3.28
Count of perfect (error zero) individuals by case: (339 479 101 101 103 101 16 0 950 88)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty exec_while (in1 exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) boolean_dup in1 integer_dup_times) boolean_pop integer_swap boolean_and in2 integer_yankdup print_integer boolean_not boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup boolean_xor boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush) (exec_dup_items integer_shove exec_do*range (exec_do*while (exec_k (boolean_yank integer_gt) (boolean_yank exec_empty tag_exec_222 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))))) ()) ())
Errors: [1 1 0 0 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 54
Size: 72
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.722
Median total errors in population: 8
Error averages by case: (0.661 0.521 0.899 0.899 0.897 0.899 0.984 1.0 0.05 0.912)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 49.04
Average program size in population (points): 65.163
Average percent parens in population: 0.247
Minimum age in population: 44.88808524608612
Maximum age in population: 46.88808524608612
Average age in population: 45.99359863778949
Median age in population: 45.88808524608612
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 21430403
--- Timings ---
Current time: 1559584745808 milliseconds
Total Time:          93.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.1 seconds, 63.4%
Fitness Testing:     20.2 seconds, 21.7%
Report:              13.8 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: 60                 
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 98                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 6767               
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 74                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 75                 
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 28                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 43                 
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 4747               
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 95                 
Correct output: 65                  | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 49                 
Correct output: -58                 | Program output: 74                 
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 75                 
Correct output: -75                 | Program output: 37                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: 45                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: -57-57             
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 80                 
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 45                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: 15                 
Correct output: -48                 | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: 96                 
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 90                 
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 44                 
Correct output: -24                 | Program output: 55                 
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 64                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 75                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 9595               
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: 75                 
Correct output: -60                 | Program output: 39                 
Correct output: -87                 | Program output: 93                 
Correct output: -82                 | Program output: 97                 
Correct output: -100                | Program output: 39                 
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 41                 
Correct output: 45                  | Program output: 77                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 67                 
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (in1 exec_shove (exec_dup_items boolean_eq) exec_swap (exec_empty exec_while (exec_yankdup exec_empty exec_while (in1) exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) boolean_dup in1 integer_dup_times) (boolean_pop) integer_swap boolean_and in2 integer_yankdup print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup boolean_xor integer_flush) (exec_dup_items integer_shove exec_do*range (exec_do*while (exec_k (boolean_yank integer_gt) (boolean_yank exec_empty tag_exec_222 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))))) ())
Lexicase best errors: [0 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 68
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (in1 exec_shove (exec_dup_items boolean_eq) exec_swap (exec_empty exec_while (exec_yankdup exec_empty exec_while (in1) exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) boolean_dup in1 integer_dup_times) (boolean_pop) integer_swap boolean_and in2 integer_yankdup print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup boolean_xor integer_flush) (exec_dup_items integer_shove exec_do*range (exec_do*while (exec_k (boolean_yank integer_gt) (boolean_yank exec_empty tag_exec_222 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))))) ())
Zero cases best errors: [0 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 68
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (408 288 491 407 131 2 491 463 945 280)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (408 288 491 407 131 2 491 463 945 280)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_exec_222} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_yank})
Best program: (in1 exec_shove (exec_dup_items boolean_eq) exec_swap (exec_empty exec_while (in1 exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) boolean_dup in1 integer_dup_times) (boolean_pop) in4 boolean_and boolean_dup boolean_frominteger in2 integer_yankdup print_integer boolean_dup boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_flush) (exec_dup_items integer_shove exec_do*range (exec_do*while (exec_k (boolean_yank integer_gt) (boolean_yank exec_empty tag_exec_222 () exec_do*times (exec_rot (boolean_and) (integer_inc integer_yank) ()))))) ())
Errors: [0 0 0 0 1 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 49
Size: 66
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.094
Median total errors in population: 7
Error averages by case: (0.592 0.712 0.509 0.593 0.869 0.998 0.509 0.537 0.055 0.72)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.696
Average program size in population (points): 61.628
Average percent parens in population: 0.242
Minimum age in population: 46.22739677876234
Maximum age in population: 48.86385423690081
Average age in population: 47.79524604253843
Median age in population: 47.83962322771549
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 21792625
--- Timings ---
Current time: 1559584748437 milliseconds
Total Time:          95.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.0 seconds, 63.7%
Fitness Testing:     20.5 seconds, 21.4%
Report:              14.2 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: 18                 
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 99                 
Correct output: 15                  | Program output: 77                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 81                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 82                 
Correct output: 37                  | Program output: 56                 
Correct output: 9                   | Program output: 11                 
Correct output: 3                   | Program output: 54                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 17                 
Correct output: 15                  | Program output: 24                 
Correct output: 1                   | Program output: 6                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 2020               
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 94                 
Correct output: 65                  | Program output: 76                 
Correct output: -95                 | Program output: 25                 
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: 70                 
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 5                  
Correct output: -58                 | Program output: 27                 
Correct output: 2                   | Program output: 111111             
Correct output: 49                  | Program output: 62                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: 93                 
Correct output: -92                 | Program output: 54                 
Correct output: -74                 | Program output: 72                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -5                 
Correct output: -94                 | Program output: 22                 
Correct output: -89                 | Program output: -15                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: 0                  
Correct output: -100                | Program output: 49                 
Correct output: -81                 | Program output: 97                 
Correct output: -60                 | Program output: 99                 
Correct output: -48                 | Program output: 6                  
Correct output: -73                 | Program output: 90                 
Correct output: -49                 | Program output: 88                 
Correct output: -39                 | Program output: 62                 
Correct output: -97                 | Program output: 50                 
Correct output: -28                 | Program output: 91                 
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: 73                 
Correct output: -82                 | Program output:                    
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: 72                 
Correct output: -70                 | Program output: 89                 
Correct output: -24                 | Program output: 2                  
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: 87                 
Correct output: -30                 | Program output: 53                 
Correct output: -1                  | Program output: 5                  
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: 88                 
Correct output: -30                 | Program output: 13                 
Correct output: -6                  | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 26                 
Correct output: -82                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 58                 
Correct output: 45                  | Program output: 91                 
Correct output: -17                 | Program output: 87                 
Correct output: -48                 | Program output: 46                 
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: 38                 
Correct output: -100                | Program output: 7                  
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop exec_s_when_autoconstructing (boolean_and in1 integer_dup_times) (boolean_pop) () in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) (boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ()))) ()))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 66
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop exec_s_when_autoconstructing (boolean_and in1 integer_dup_times) (boolean_pop) () in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) (boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ()))) ()))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 66
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (795 25 8 112 909 25 232 722 241 609)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (795 25 8 112 909 25 232 722 241 609)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop exec_s_when_autoconstructing (boolean_and in1 integer_dup_times) (boolean_pop) () in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) (boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ()))) ()))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 49
Size: 66
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.322
Median total errors in population: 6
Error averages by case: (0.205 0.975 0.992 0.888 0.091 0.975 0.768 0.278 0.759 0.391)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.033
Average program size in population (points): 61.674
Average percent parens in population: 0.238
Minimum age in population: 47.22739677876234
Maximum age in population: 50.69420685991645
Average age in population: 49.53785714530014
Median age in population: 49.4993956387043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.01
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 22187385
--- Timings ---
Current time: 1559584751143 milliseconds
Total Time:          98.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.8 seconds, 63.8%
Fitness Testing:     20.9 seconds, 21.2%
Report:              14.6 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 536
Test mean error for best: 0.53600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 1313               
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 143214             
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 0                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 81                 
Correct output: 7                   | Program output: 36                 
Correct output: 17                  | Program output: 46                 
Correct output: 2                   | Program output: 0                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 54                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 151515             
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -72                
Correct output: -57                 | Program output: 6                  
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48-48             
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -95                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) (boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ()))) ()))
Lexicase best errors: [0 1 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 70
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) (boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ()))) ()))
Zero cases best errors: [0 1 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 70
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 1000 199 2 768 844 195 1 845 150)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (200 0 199 2 768 844 195 1 845 150)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) (boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ()))) ()))
Errors: [0 1 0 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 54
Size: 70
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.796
Median total errors in population: 7
Error averages by case: (0.8 1.0 0.801 0.998 0.232 0.156 0.805 0.999 0.155 0.85)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.406
Average program size in population (points): 67.235
Average percent parens in population: 0.251
Minimum age in population: 50.36385423690081
Maximum age in population: 52.19868212006986
Average age in population: 50.89559563105926
Median age in population: 51.19868212006986
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 361
Genome diversity (% unique genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 365
Syntactic diversity (% unique Push programs):	 0.525
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.184
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 22675567
--- Timings ---
Current time: 1559584754000 milliseconds
Total Time:         101.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.7 seconds, 63.9%
Fitness Testing:     21.4 seconds, 21.1%
Report:              15.1 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 560
Test mean error for best: 0.56000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 99                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 676767             
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 92                 
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 26                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 25                 
Correct output: 10                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 474747             
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 68                 
Correct output: 65                  | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 78                 
Correct output: -58                 | Program output: -27                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 85                 
Correct output: -75                 | Program output: 45                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: 83                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -35                
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 60                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 28                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 959595             
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: 25                 
Correct output: -87                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 30                 
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 67636359           
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 25                 
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in1 integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt in2) (boolean_dup in1 integer_dup_times) boolean_pop exec_s_when_autoconstructing (boolean_and in1 integer_dup_times) (boolean_pop) () in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) (boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ()))) ()))
Lexicase best errors: [1 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 66
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in1 integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt in2) (boolean_dup in1 integer_dup_times) boolean_pop exec_s_when_autoconstructing (boolean_and in1 integer_dup_times) (boolean_pop) () in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) (boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ()))) ()))
Zero cases best errors: [1 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 66
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (35 420 331 377 433 40 53 842 438 428)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (35 420 331 377 433 40 53 842 438 428)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in1 integer_sub) integer_fromboolean exec_if (boolean_dup_items integer_dup_times exec_stackdepth integer_yank boolean_eq integer_div exec_yank integer_gt in2) (boolean_dup in1 integer_dup_times) boolean_pop exec_s_when_autoconstructing (boolean_and in1 integer_dup_times) (boolean_pop) () in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) (boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ()))) ()))
Errors: [1 0 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 49
Size: 66
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.603
Median total errors in population: 6
Error averages by case: (0.965 0.58 0.669 0.623 0.567 0.96 0.947 0.158 0.562 0.572)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.359
Average program size in population (points): 67.825
Average percent parens in population: 0.243
Minimum age in population: 51.36385423690081
Maximum age in population: 53.36385423690081
Average age in population: 52.60169354843348
Median age in population: 52.36385423690081
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 248
Genome diversity (% unique genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 252
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.007
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 23176520
--- Timings ---
Current time: 1559584756853 milliseconds
Total Time:         104.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.5 seconds, 63.9%
Fitness Testing:     21.9 seconds, 21.0%
Report:              15.6 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -72                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 67
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 67
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 445 721 5 172 758 377 489 377 580)
Population mean number of elite cases: 4.13
Count of perfect (error zero) individuals by case: (206 445 721 5 172 758 377 489 377 580)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 54
Size: 67
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 5.87
Median total errors in population: 6
Error averages by case: (0.794 0.555 0.279 0.995 0.828 0.242 0.623 0.511 0.623 0.42)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.887
Average program size in population (points): 68.775
Average percent parens in population: 0.245
Minimum age in population: 52.36385423690081
Maximum age in population: 55.36385423690081
Average age in population: 54.29951557618869
Median age in population: 54.36385423690081
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 117
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.009
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.25
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 23720206
--- Timings ---
Current time: 1559584759718 milliseconds
Total Time:         107.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.4 seconds, 63.9%
Fitness Testing:     22.4 seconds, 21.0%
Report:              16.1 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -72                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 67
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 67
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (20 474 422 808 262 727 418 538 665 550)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (20 474 422 808 262 727 418 538 665 550)
Population mean number of perfect (error zero) cases: 4.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 54
Size: 67
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 5.116
Median total errors in population: 6
Error averages by case: (0.98 0.526 0.578 0.192 0.738 0.273 0.582 0.462 0.335 0.45)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.458
Average program size in population (points): 70.977
Average percent parens in population: 0.231
Minimum age in population: 53.36385423690081
Maximum age in population: 57.23885423690081
Average age in population: 55.06060423690081
Median age in population: 55.36385423690081
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 191
Genome diversity (% unique genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 205
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.009
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 24262157
--- Timings ---
Current time: 1559584762605 milliseconds
Total Time:         109.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.2 seconds, 63.9%
Fitness Testing:     22.9 seconds, 20.9%
Report:              16.6 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -72                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank) (integer_gt integer_eq) boolean_dup in1 integer_dup_times boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 67
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank) (integer_gt integer_eq) boolean_dup in1 integer_dup_times boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 67
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (355 750 567 678 14 549 687 546 606 495)
Population mean number of elite cases: 5.25
Count of perfect (error zero) individuals by case: (355 750 567 678 14 549 687 546 606 495)
Population mean number of perfect (error zero) cases: 5.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 54
Size: 67
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 4.753
Median total errors in population: 5
Error averages by case: (0.645 0.25 0.433 0.322 0.986 0.451 0.313 0.454 0.394 0.505)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.502
Average program size in population (points): 72.836
Average percent parens in population: 0.234
Minimum age in population: 54.36385423690081
Maximum age in population: 58.98885423690081
Average age in population: 56.45447923690081
Median age in population: 56.48885423690081
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.009
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 24788445
--- Timings ---
Current time: 1559584765458 milliseconds
Total Time:         112.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.1 seconds, 63.9%
Fitness Testing:     23.5 seconds, 20.8%
Report:              17.1 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 495
Test mean error for best: 0.49500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output:                    
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 0                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 81                 
Correct output: 7                   | Program output: 36                 
Correct output: 17                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 54                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 20                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 22                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -72                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output:                    
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -26                
Correct output: -14                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (in1 exec_shove (exec_dup_items boolean_eq exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean) exec_if (exec_empty in3 integer_sub) (integer_fromboolean) exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div boolean_yankdup integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 71
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (in1 exec_shove (exec_dup_items boolean_eq exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean) exec_if (exec_empty in3 integer_sub) (integer_fromboolean) exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div boolean_yankdup integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 71
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 814 770 51 865 865 781 389 20 325)
Population mean number of elite cases: 5.13
Count of perfect (error zero) individuals by case: (247 814 770 51 865 865 781 389 20 325)
Population mean number of perfect (error zero) cases: 5.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 3, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (in1 exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_if (exec_empty in3 integer_sub) () integer_fromboolean) () exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div boolean_yankdup integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop in4 boolean_and in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Errors: [0 0 0 1 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 55
Size: 70
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 4.873
Median total errors in population: 4
Error averages by case: (0.753 0.186 0.23 0.949 0.135 0.135 0.219 0.611 0.98 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.712
Average program size in population (points): 74.623
Average percent parens in population: 0.200
Minimum age in population: 55.36385423690081
Maximum age in population: 59.83260423690081
Average age in population: 57.81847923690081
Median age in population: 58.05135423690081
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.009
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.22
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 25470097
--- Timings ---
Current time: 1559584768545 milliseconds
Total Time:         115.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.9 seconds, 63.9%
Fitness Testing:     24.2 seconds, 20.9%
Report:              17.5 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output:                    
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 77                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 81                 
Correct output: 7                   | Program output:                    
Correct output: 17                  | Program output: 46                 
Correct output: 2                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 82                 
Correct output: 37                  | Program output: 56                 
Correct output: 9                   | Program output: 11                 
Correct output: 3                   | Program output: 54                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 17                 
Correct output: 15                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 94                 
Correct output: 65                  | Program output: 76                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: 5                  
Correct output: -58                 | Program output: 27                 
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 62                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 72                 
Correct output: -92                 | Program output: -72                
Correct output: -57                 | Program output: 6                  
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: 0                  
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: 99                 
Correct output: -48                 | Program output: 6                  
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: 91                 
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: 89                 
Correct output: -24                 | Program output: 2                  
Correct output: -33                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: 87                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 5                  
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 26                 
Correct output: -82                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 91                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 04                 
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 7                  
Correct output: -95                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (in1 exec_shove (exec_dup_items boolean_eq exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub)) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank in1 integer_dup_times) (boolean_pop) in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Lexicase best errors: [0 0 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 60
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (in1 exec_shove (exec_dup_items boolean_eq exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub)) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank in1 integer_dup_times) (boolean_pop) in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Zero cases best errors: [0 0 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 60
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (443 745 1000 871 362 1000 239 431 445 1000)
Population mean number of elite cases: 6.54
Count of perfect (error zero) individuals by case: (443 745 0 871 362 0 239 431 445 0)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and})
Best program: (in1 exec_shove (exec_dup_items boolean_eq exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty in3 integer_sub)) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div boolean_yankdup integer_gt integer_eq) (boolean_dup in1 integer_dup_times) boolean_pop exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger exec_s (boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) (boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (exec_do*times (exec_rot (boolean_and) () ())) ()))) ()))
Errors: [0 0 1 0 0 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 51
Size: 72
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.464
Median total errors in population: 6
Error averages by case: (0.557 0.255 1.0 0.129 0.638 1.0 0.761 0.569 0.555 1.0)
Error minima by case: (0 0 1 0 0 1 0 0 0 1)
Average genome size in population (length): 56.525
Average program size in population (points): 71.063
Average percent parens in population: 0.205
Minimum age in population: 57.73885423690081
Maximum age in population: 60.87947923690081
Average age in population: 59.39257298690081
Median age in population: 59.39510423690081
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.007
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 26226110
--- Timings ---
Current time: 1559584771783 milliseconds
Total Time:         118.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.7 seconds, 63.7%
Fitness Testing:     24.9 seconds, 21.0%
Report:              18.1 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 84                 
Correct output: 28                  | Program output: 73                 
Correct output: 7                   | Program output: 81                 
Correct output: 17                  | Program output: 99                 
Correct output: 2                   | Program output: 22                 
Correct output: 10                  | Program output: 71                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 100                
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 83                 
Correct output: 1                   | Program output: 11                 
Correct output: 4                   | Program output: 74                 
Correct output: 6                   | Program output: 40                 
Correct output: 23                  | Program output: 68                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 81                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -81                
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -81                
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -86                
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: 46                 
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -1                 
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (in1 exec_shove (exec_dup_items boolean_eq exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty integer_dup_times boolean_flush integer_yank boolean_eq integer_div boolean_yankdup in1 integer_dup_times) boolean_pop) in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 49
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (in1 exec_shove (exec_dup_items boolean_eq exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty integer_dup_times boolean_flush integer_yank boolean_eq integer_div boolean_yankdup in1 integer_dup_times) boolean_pop) in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 49
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 755 757 754 648 111 319 453 198 198)
Population mean number of elite cases: 5.19
Count of perfect (error zero) individuals by case: (0 755 757 754 648 111 319 453 198 198)
Population mean number of perfect (error zero) cases: 4.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (in1 exec_shove (exec_dup_items boolean_eq exec_shove (exec_dup_items boolean_eq exec_yankdup exec_empty integer_dup_times boolean_flush integer_yank boolean_eq integer_div boolean_yankdup in1 integer_dup_times) boolean_pop) in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max integer_gt) boolean_yank exec_empty tag_exec_223 (exec_do*times (exec_rot (boolean_and) (integer_inc boolean_shove) ())))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 5.807
Median total errors in population: 5
Error averages by case: (1.0 0.245 0.243 0.246 0.352 0.889 0.681 0.547 0.802 0.802)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.105
Average program size in population (points): 68.0
Average percent parens in population: 0.218
Minimum age in population: 59.14510423690081
Maximum age in population: 62.80135423690081
Average age in population: 60.96855736190081
Median age in population: 60.99666673690081
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.009
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.236
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 26921879
--- Timings ---
Current time: 1559584774524 milliseconds
Total Time:         121.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.5 seconds, 63.5%
Fitness Testing:     25.6 seconds, 21.0%
Report:              18.8 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 453
Test mean error for best: 0.45300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ()))
Lexicase best errors: [0 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 70
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ()))
Zero cases best errors: [0 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 70
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (699 1 1 704 809 808 644 886 24 665)
Population mean number of elite cases: 5.24
Count of perfect (error zero) individuals by case: (699 1 1 704 809 808 644 886 24 665)
Population mean number of perfect (error zero) cases: 5.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ()))
Errors: [0 1 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 55
Size: 70
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 4.759
Median total errors in population: 5
Error averages by case: (0.301 0.999 0.999 0.296 0.191 0.192 0.356 0.114 0.976 0.335)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.404
Average program size in population (points): 56.879
Average percent parens in population: 0.202
Minimum age in population: 60.85604173690081
Maximum age in population: 64.3013542369008
Average age in population: 63.27170970565081
Median age in population: 63.30135423690081
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 308
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 314
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.009
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 27397830
--- Timings ---
Current time: 1559584777203 milliseconds
Total Time:         124.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.2 seconds, 63.7%
Fitness Testing:     26.0 seconds, 20.9%
Report:              19.1 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 505
Test mean error for best: 0.50500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 77                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 11                 
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 94                 
Correct output: 65                  | Program output: 76                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 5                  
Correct output: -58                 | Program output: 27                 
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 62                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 72                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -15                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: 0                  
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: 99                 
Correct output: -48                 | Program output: 6                  
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: 91                 
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: 89                 
Correct output: -24                 | Program output: 2                  
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: 87                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 5                  
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 26                 
Correct output: -82                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 91                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 46                 
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 7                  
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_flush integer_yank integer_gte integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (tagged_741) (boolean_pop) in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 97
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_flush integer_yank integer_gte integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (tagged_741) (boolean_pop) in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 97
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (634 605 32 618 606 587 227 617 611 638)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (634 605 32 618 606 587 227 617 611 638)
Population mean number of perfect (error zero) cases: 5.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 55
Size: 70
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 4.825
Median total errors in population: 2
Error averages by case: (0.366 0.395 0.968 0.382 0.394 0.413 0.773 0.383 0.389 0.362)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.004
Average program size in population (points): 67.496
Average percent parens in population: 0.215
Minimum age in population: 64.4732292369008
Maximum age in population: 66.2193229869008
Average age in population: 65.1301413462758
Median age in population: 65.2193229869008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 320
Genome diversity (% unique genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 329
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.01
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 27949002
--- Timings ---
Current time: 1559584779914 milliseconds
Total Time:         127.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.0 seconds, 63.7%
Fitness Testing:     26.5 seconds, 20.8%
Report:              19.6 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ()))
Lexicase best errors: [0 1 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ()))
Zero cases best errors: [0 1 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (600 1000 26 1000 801 1000 620 446 836 1000)
Population mean number of elite cases: 7.33
Count of perfect (error zero) individuals by case: (600 0 26 0 801 0 620 446 836 0)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ()))
Errors: [0 1 1 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 57
Size: 72
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.671
Median total errors in population: 6
Error averages by case: (0.4 1.0 0.974 1.0 0.199 1.0 0.38 0.554 0.164 1.0)
Error minima by case: (0 1 0 1 0 1 0 0 0 1)
Average genome size in population (length): 60.236
Average program size in population (points): 76.622
Average percent parens in population: 0.214
Minimum age in population: 65.4732292369008
Maximum age in population: 67.6597526744008
Average age in population: 66.50008665877581
Median age in population: 66.4732292369008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 198
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.006
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 28486011
--- Timings ---
Current time: 1559584782692 milliseconds
Total Time:         129.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.7 seconds, 63.7%
Fitness Testing:     27.0 seconds, 20.8%
Report:              20.1 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 65                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_gt) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (tagged_741) (boolean_pop) in4 boolean_and exec_noop in1 integer_dup_times boolean_pop exec_do*while (boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_shove)))
Lexicase best errors: [1 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 63
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_gt) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (tagged_741) (boolean_pop) in4 boolean_and exec_noop in1 integer_dup_times boolean_pop exec_do*while (boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_shove)))
Zero cases best errors: [1 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 63
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 17 584 583 831 595 572 889 817 844)
Population mean number of elite cases: 6.03
Count of perfect (error zero) individuals by case: (297 17 584 583 831 595 572 889 817 844)
Population mean number of perfect (error zero) cases: 6.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt boolean_invert_first_then_and) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (exec_rot (boolean_shove) () ()) ())) ()))
Errors: [1 1 0 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 62
Size: 80
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 3.971
Median total errors in population: 3
Error averages by case: (0.703 0.983 0.416 0.417 0.169 0.405 0.428 0.111 0.183 0.156)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.232
Average program size in population (points): 77.909
Average percent parens in population: 0.213
Minimum age in population: 66.9732292369008
Maximum age in population: 69.4732292369008
Average age in population: 68.18397923690081
Median age in population: 68.2232292369008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.009
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 29025475
--- Timings ---
Current time: 1559584785566 milliseconds
Total Time:         132.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.5 seconds, 63.7%
Fitness Testing:     27.5 seconds, 20.7%
Report:              20.6 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 474
Test mean error for best: 0.47400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 81                 
Correct output: 7                   | Program output: 36                 
Correct output: 17                  | Program output: 46                 
Correct output: 2                   | Program output: 58                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 54                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 24                 
Correct output: 1                   | Program output: 6                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 20                 
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 58                 
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_741} {:close 1, :instruction integer_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (tagged_741) (integer_dup_times) integer_max in4 boolean_and exec_if (tagged_741) (boolean_pop) in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Lexicase best errors: [0 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 103
Percent parens: 0.223
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_741} {:close 1, :instruction integer_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (tagged_741) (integer_dup_times) integer_max in4 boolean_and exec_if (tagged_741) (boolean_pop) in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Zero cases best errors: [0 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 103
Percent parens: 0.223
--- Lexicase Population Statistics ---
Count of elite individuals by case: (531 529 1000 527 549 526 167 599 1000 478)
Population mean number of elite cases: 5.91
Count of perfect (error zero) individuals by case: (531 529 0 527 549 526 167 599 0 478)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_716} {:close 1, :instruction integer_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (tagged_716) (integer_dup_times) integer_max in4 boolean_and exec_if (tagged_741) (boolean_pop) in4 boolean_and exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Errors: [0 1 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 80
Size: 103
Percent parens: 0.223
--- Population Statistics ---
Average total errors in population: 6.094
Median total errors in population: 6
Error averages by case: (0.469 0.471 1.0 0.473 0.451 0.474 0.833 0.401 1.0 0.522)
Error minima by case: (0 0 1 0 0 0 0 0 1 0)
Average genome size in population (length): 65.027
Average program size in population (points): 82.931
Average percent parens in population: 0.215
Minimum age in population: 67.9732292369008
Maximum age in population: 71.0982292369008
Average age in population: 69.8728542369008
Median age in population: 69.9732292369008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.007
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.204
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 29596168
--- Timings ---
Current time: 1559584788513 milliseconds
Total Time:         135.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.3 seconds, 63.6%
Fitness Testing:     28.0 seconds, 20.7%
Report:              21.2 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 485
Test mean error for best: 0.48500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 77                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 82                 
Correct output: 37                  | Program output: 56                 
Correct output: 9                   | Program output: 11                 
Correct output: 3                   | Program output: 54                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 17                 
Correct output: 15                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 76                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 5                  
Correct output: -58                 | Program output: 27                 
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 62                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 72                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -15                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: 0                  
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: 15                 
Correct output: -48                 | Program output: 6                  
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: 91                 
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: 44                 
Correct output: -24                 | Program output: 2                  
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: 87                 
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: 5                  
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 26                 
Correct output: -82                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 91                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: 4                  
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 7                  
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ()))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 74
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ()))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 74
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (516 290 815 890 1000 762 526 503 880 1000)
Population mean number of elite cases: 7.18
Count of perfect (error zero) individuals by case: (516 290 815 890 0 762 526 503 880 0)
Population mean number of perfect (error zero) cases: 5.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup})
Best program: (integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_dec exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop exec_noop boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_eq exec_rot (boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc integer_dup) ())) ())) ())) () ())
Errors: [0 0 0 0 1 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 71
Size: 93
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 4.818
Median total errors in population: 4
Error averages by case: (0.484 0.71 0.185 0.11 1.0 0.238 0.474 0.497 0.12 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 69.483
Average program size in population (points): 88.519
Average percent parens in population: 0.214
Minimum age in population: 68.9732292369008
Maximum age in population: 72.7232292369008
Average age in population: 71.3662917369008
Median age in population: 71.4732292369008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.008
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.174
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 30201616
--- Timings ---
Current time: 1559584791462 milliseconds
Total Time:         138.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.1 seconds, 63.6%
Fitness Testing:     28.6 seconds, 20.6%
Report:              21.8 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 54                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 34                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -15                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 7                  
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 69                 
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (exec_dup_items integer_min integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub)) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (tagged_741) (in4 tag_integer_533 exec_noop in1 integer_dup_times) boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 99
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (exec_dup_items integer_min integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub)) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (tagged_741) (in4 tag_integer_533 exec_noop in1 integer_dup_times) boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 99
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (808 2 578 839 913 838 620 54 1 1)
Population mean number of elite cases: 4.65
Count of perfect (error zero) individuals by case: (808 2 578 839 913 838 620 54 1 1)
Population mean number of perfect (error zero) cases: 4.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (exec_dup_items integer_min integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub)) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (tagged_741) (in4 tag_integer_533 exec_noop in1 integer_dup_times) boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Errors: [0 1 0 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 77
Size: 99
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.346
Median total errors in population: 5
Error averages by case: (0.192 0.998 0.422 0.161 0.087 0.162 0.38 0.946 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.689
Average program size in population (points): 88.492
Average percent parens in population: 0.211
Minimum age in population: 70.5982292369008
Maximum age in population: 74.5357292369008
Average age in population: 73.08607298690082
Median age in population: 73.2857292369008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.008
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 30798610
--- Timings ---
Current time: 1559584794372 milliseconds
Total Time:         141.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.9 seconds, 63.5%
Fitness Testing:     29.1 seconds, 20.6%
Report:              22.4 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 349
Test mean error for best: 0.34900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 54                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -72                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 2                  
Correct output: -33                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (exec_dup_items integer_min integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub)) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 97
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (exec_dup_items integer_min integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub)) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 97
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (487 384 510 860 481 41 481 475 48 520)
Population mean number of elite cases: 4.29
Count of perfect (error zero) individuals by case: (487 384 510 860 481 41 481 475 48 520)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (exec_dup_items integer_min integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub)) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 77
Size: 97
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 5.713
Median total errors in population: 6
Error averages by case: (0.513 0.616 0.49 0.14 0.519 0.959 0.519 0.525 0.952 0.48)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.861
Average program size in population (points): 90.577
Average percent parens in population: 0.216
Minimum age in population: 73.6607292369008
Maximum age in population: 75.6607292369008
Average age in population: 74.65616673690081
Median age in population: 74.6607292369008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 170
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.01
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 31405705
--- Timings ---
Current time: 1559584797295 milliseconds
Total Time:         144.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.7 seconds, 63.5%
Fitness Testing:     29.7 seconds, 20.6%
Report:              23.0 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 349
Test mean error for best: 0.34900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 54                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -75                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: 24                 
Correct output: -92                 | Program output: -72                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -12                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 2                  
Correct output: -33                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: 9                  
Correct output: -100                | Program output: -100               
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 62                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_eq) boolean_dup in1 tagged_741 boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Lexicase best errors: [0 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 95
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 integer_eq) boolean_dup in1 tagged_741 boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Zero cases best errors: [0 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 95
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (862 3 5 378 387 886 640 659 765 652)
Population mean number of elite cases: 5.24
Count of perfect (error zero) individuals by case: (862 3 5 378 387 886 640 659 765 652)
Population mean number of perfect (error zero) cases: 5.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (exec_dup_items integer_min integer_dup_items exec_shove (exec_dup_items integer_min exec_yankdup exec_empty in3 integer_sub)) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Errors: [0 1 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 77
Size: 97
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 4.763
Median total errors in population: 4
Error averages by case: (0.138 0.997 0.995 0.622 0.613 0.114 0.36 0.341 0.235 0.348)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.628
Average program size in population (points): 93.687
Average percent parens in population: 0.214
Minimum age in population: 75.3482292369008
Maximum age in population: 77.6607292369008
Average age in population: 76.85816673690081
Median age in population: 77.0044792369008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.008
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 32025479
--- Timings ---
Current time: 1559584800315 milliseconds
Total Time:         147.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.5 seconds, 63.4%
Fitness Testing:     30.3 seconds, 20.5%
Report:              23.6 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 322
Test mean error for best: 0.32200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 14                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 81                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 2                  
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 103
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 103
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (260 138 438 461 255 921 125 444 380 393)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (260 138 438 461 255 921 125 444 380 393)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop in4 boolean_and exec_noop boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 82
Size: 103
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 6.185
Median total errors in population: 6
Error averages by case: (0.74 0.862 0.562 0.539 0.745 0.079 0.875 0.556 0.62 0.607)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.629
Average program size in population (points): 95.67
Average percent parens in population: 0.219
Minimum age in population: 76.6763542369008
Maximum age in population: 79.4966667369008
Average age in population: 78.52517454940082
Median age in population: 78.4107292369008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.01
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.191
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 32661002
--- Timings ---
Current time: 1559584803370 milliseconds
Total Time:         150.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.3 seconds, 63.3%
Fitness Testing:     30.8 seconds, 20.5%
Report:              24.2 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 341
Test mean error for best: 0.34100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -9                  | Program output: -9                 
Correct output: 13                  | Program output: 98                 
Correct output: -81                 | Program output: -27                
Correct output: -43                 | Program output: -43                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 81                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 27                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 5                  
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -17                
Correct output: -57                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -9                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -59                 | Program output: -16                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: 1                   | Program output: 2                  
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop boolean_empty boolean_and exec_noop boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 103
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction tagged_741} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 tagged_741) boolean_pop boolean_empty boolean_and exec_noop boolean_pop in4 in3 exec_noop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 103
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (581 926 877 346 829 587 585 527 95 801)
Population mean number of elite cases: 6.15
Count of perfect (error zero) individuals by case: (581 926 877 346 829 587 585 527 95 801)
Population mean number of perfect (error zero) cases: 6.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 83
Size: 104
Percent parens: 0.202
--- Population Statistics ---
Average total errors in population: 3.846
Median total errors in population: 2
Error averages by case: (0.419 0.074 0.123 0.654 0.171 0.413 0.415 0.473 0.905 0.199)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 78.489
Average program size in population (points): 100.104
Average percent parens in population: 0.216
Minimum age in population: 78.8326042369008
Maximum age in population: 81.3326042369008
Average age in population: 79.73644798690081
Median age in population: 79.8326042369008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.01
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 33320450
--- Timings ---
Current time: 1559584806500 milliseconds
Total Time:         153.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.1 seconds, 63.2%
Fitness Testing:     31.5 seconds, 20.5%
Report:              24.9 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 359
Test mean error for best: 0.35900
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 81                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 54                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 2                  
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_min integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and integer_rot integer_yankdup print_integer boolean_dup boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 102
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_min integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop boolean_yank boolean_and integer_rot integer_yankdup print_integer boolean_dup boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 102
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (865 57 700 789 743 865 753 802 690 789)
Population mean number of elite cases: 7.05
Count of perfect (error zero) individuals by case: (865 57 700 789 743 865 753 802 690 789)
Population mean number of perfect (error zero) cases: 7.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 2, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_741} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_533} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_exec_223} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 83
Size: 104
Percent parens: 0.202
--- Population Statistics ---
Average total errors in population: 2.947
Median total errors in population: 1
Error averages by case: (0.135 0.943 0.3 0.211 0.257 0.135 0.247 0.198 0.31 0.211)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 81.002
Average program size in population (points): 102.438
Average percent parens in population: 0.209
Minimum age in population: 79.8326042369008
Maximum age in population: 82.8755729869008
Average age in population: 80.89722923690081
Median age in population: 80.8326042369008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.011
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 34009169
--- Timings ---
Current time: 1559584809702 milliseconds
Total Time:         156.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.9 seconds, 63.1%
Fitness Testing:     32.2 seconds, 20.5%
Report:              25.6 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 52
Successful program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 104


Auto-simplifying with starting size: 104
step: 0
program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 500
program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 1000
program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 1500
program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 2000
program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 2500
program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 3000
program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 3500
program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 4000
program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 4500
program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

step: 5000
program: (integer_dup_items exec_shove (boolean_invert_second_then_and integer_min exec_yankdup exec_empty in3 integer_sub) integer_fromboolean exec_if (exec_empty in3 integer_sub) () integer_fromboolean exec_if (boolean_dup_items integer_dup_times boolean_flush integer_yank boolean_eq integer_div exec_yank integer_gt integer_eq) (boolean_dup in1 in4 boolean_and exec_noop boolean_pop) in4 in3 exec_noop in1 integer_dup_times boolean_pop in1 integer_dup_times boolean_pop boolean_invert_second_then_and boolean_and exec_if (in2 boolean_pop) () in4 boolean_and integer_min tagged_741 in4 tag_integer_533 exec_noop in1 integer_dup_times boolean_pop in4 boolean_and exec_if (integer_yankdup print_integer boolean_dup) (boolean_frominteger integer_lt boolean_dup_times boolean_dup_items integer_dup integer_max exec_s () (boolean_yank integer_yank tag_exec_223 (print_newline integer_gt integer_dup integer_max exec_s () (boolean_yank exec_empty tag_exec_223 (print_newline exec_rot (boolean_and) (integer_inc boolean_shove) ())) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 104

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 359
Test mean error for best: 0.35900
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -51                 | Program output: -51                
Correct output: 65                  | Program output: 73                 
Correct output: -74                 | Program output: 100                
Correct output: -9                  | Program output: 61                 
Correct output: 13                  | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -19                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: 39                 
Correct output: 14                  | Program output: 32                 
Correct output: 89                  | Program output: 89                 
Correct output: 91                  | Program output: 91                 
Correct output: -24                 | Program output: -24                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 26                 
Correct output: 28                  | Program output: 81                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 54                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 23                  | Program output: 23                 
Correct output: 58                  | Program output: 58                 
Correct output: 65                  | Program output: 65                 
Correct output: -95                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: 2                   | Program output: 11                 
Correct output: 49                  | Program output: 49                 
Correct output: -75                 | Program output: -11                
Correct output: -29                 | Program output: -8                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -34                
Correct output: -21                 | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -29                
Correct output: -81                 | Program output: -15                
Correct output: -60                 | Program output: -60                
Correct output: -48                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -32                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -48                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -61                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -76                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -30                 | Program output: -14                
Correct output: -1                  | Program output: -1                 
Correct output: -60                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -14                 | Program output: -14                
Correct output: -17                 | Program output: -17                
Correct output: -30                 | Program output: -30                
Correct output: -6                  | Program output: -6                 
Correct output: -60                 | Program output: -20                
Correct output: -87                 | Program output: -87                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -61                
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 2                  
Correct output: 45                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
;;******************************
