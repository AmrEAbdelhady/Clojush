Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-22 -22 31 -22] -22] [[65 -8 65 65] -8] [[-76 49 49 49] -76] [[96 96 96 84] 84] [[-18 -18 -18 54] -18] [[-100 -100 -100 18] -100] [[36 -42 36 36] -42] [[93 -63 -63 -63] -63] [[29 29 29 -79] -79] [[74 -73 -73 -73] -73] [(46 46 46 46) 46] [(10 10 10 10) 10] [(4 4 4 4) 4] [(-26 -26 -26 -26) -26] [(75 75 75 75) 75] [(90 48 55 48) 48] [(4 42 58 68) 4] [(70 2 65 75) 2] [(49 33 45 76) 33] [(49 97 45 9) 9] [(1 65 73 55) 1] [(5 31 36 57) 5] [(18 26 57 41) 18] [(74 14 81 60) 14] [(30 96 2 14) 2] [(86 92 31 40) 31] [(98 24 49 25) 24] [(5 11 26 93) 5] [(60 79 54 25) 25] [(75 96 46 28) 28] [(23 97 55 45) 23] [(68 39 5 24) 5] [(19 80 67 65) 19] [(72 32 37 46) 32] [(54 1 13 6) 1] [(-44 64 48 -90) -90] [(16 16 98 22) 16] [(90 -16 -84 -74) -84] [(56 38 60 65) 38] [(-71 14 18 61) -71] [(-97 13 72 64) -97] [(-45 12 -12 63) -45] [(-38 -87 27 69) -87] [(-28 100 87 -90) -90] [(73 -58 96 -55) -58] [(57 72 59 -52) -52] [(82 46 -47 69) -47] [(34 -31 -4 83) -31] [(-72 -32 7 72) -72] [(-92 13 -54 -54) -92] [(-98 -25 -53 19) -98] [(76 61 38 -22) -22] [(-3 1 -92 83) -92] [(-52 33 -61 41) -61] [(-89 -29 -56 11) -89] [(28 27 23 22) 22] [(29 -86 -95 67) -95] [(-23 75 -30 -92) -92] [(-8 77 65 67) -8] [(98 49 -3 -36) -36] [(-36 -74 -38 78) -74] [(22 -73 -75 72) -75] [(84 -98 -10 28) -98] [(-30 86 14 8) -30] [(24 -76 79 -55) -76] [(-56 96 6 18) -56] [(41 71 48 -1) -1] [(9 -47 28 99) -47] [(52 -9 70 -21) -21] [(-62 -3 -28 68) -62] [(79 -21 68 -12) -21] [(94 66 -42 -30) -42] [(-82 -72 80 17) -82] [(-65 -49 -44 -14) -65] [(32 -13 -79 62) -79] [(34 45 52 -6) -6] [(48 -50 -62 97) -62] [(-23 5 44 59) -23] [(-67 -31 -69 35) -69] [(-55 -30 -28 -41) -55] [(64 34 -88 -69) -88] [(-8 84 8 52) -8] [(67 -7 88 4) -7] [(-72 41 24 -94) -94] [(67 -88 -11 -21) -88] [(-22 36 3 -7) -22] [(23 59 38 54) 23] [(100 -5 -98 70) -98] [(93 -69 66 82) -69] [(82 94 -87 -30) -87] [(-6 -17 12 21) -17] [(38 -59 -33 64) -59] [(63 -84 -39 -27) -84] [(21 -71 32 -33) -71] [(98 -31 -86 -73) -86])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-22 -22 31 -22] -22]
Train Case:   6 | Input/Output: [[65 -8 65 65] -8]
Train Case:   7 | Input/Output: [[-76 49 49 49] -76]
Train Case:   8 | Input/Output: [[96 96 96 84] 84]
Train Case:   9 | Input/Output: [[-18 -18 -18 54] -18]
Train Case:  10 | Input/Output: [[-100 -100 -100 18] -100]
Train Case:  11 | Input/Output: [[36 -42 36 36] -42]
Train Case:  12 | Input/Output: [[93 -63 -63 -63] -63]
Train Case:  13 | Input/Output: [[29 29 29 -79] -79]
Train Case:  14 | Input/Output: [[74 -73 -73 -73] -73]
Train Case:  15 | Input/Output: [(46 46 46 46) 46]
Train Case:  16 | Input/Output: [(10 10 10 10) 10]
Train Case:  17 | Input/Output: [(4 4 4 4) 4]
Train Case:  18 | Input/Output: [(-26 -26 -26 -26) -26]
Train Case:  19 | Input/Output: [(75 75 75 75) 75]
Train Case:  20 | Input/Output: [(90 48 55 48) 48]
Train Case:  21 | Input/Output: [(4 42 58 68) 4]
Train Case:  22 | Input/Output: [(70 2 65 75) 2]
Train Case:  23 | Input/Output: [(49 33 45 76) 33]
Train Case:  24 | Input/Output: [(49 97 45 9) 9]
Train Case:  25 | Input/Output: [(1 65 73 55) 1]
Train Case:  26 | Input/Output: [(5 31 36 57) 5]
Train Case:  27 | Input/Output: [(18 26 57 41) 18]
Train Case:  28 | Input/Output: [(74 14 81 60) 14]
Train Case:  29 | Input/Output: [(30 96 2 14) 2]
Train Case:  30 | Input/Output: [(86 92 31 40) 31]
Train Case:  31 | Input/Output: [(98 24 49 25) 24]
Train Case:  32 | Input/Output: [(5 11 26 93) 5]
Train Case:  33 | Input/Output: [(60 79 54 25) 25]
Train Case:  34 | Input/Output: [(75 96 46 28) 28]
Train Case:  35 | Input/Output: [(23 97 55 45) 23]
Train Case:  36 | Input/Output: [(68 39 5 24) 5]
Train Case:  37 | Input/Output: [(19 80 67 65) 19]
Train Case:  38 | Input/Output: [(72 32 37 46) 32]
Train Case:  39 | Input/Output: [(54 1 13 6) 1]
Train Case:  40 | Input/Output: [(-44 64 48 -90) -90]
Train Case:  41 | Input/Output: [(16 16 98 22) 16]
Train Case:  42 | Input/Output: [(90 -16 -84 -74) -84]
Train Case:  43 | Input/Output: [(56 38 60 65) 38]
Train Case:  44 | Input/Output: [(-71 14 18 61) -71]
Train Case:  45 | Input/Output: [(-97 13 72 64) -97]
Train Case:  46 | Input/Output: [(-45 12 -12 63) -45]
Train Case:  47 | Input/Output: [(-38 -87 27 69) -87]
Train Case:  48 | Input/Output: [(-28 100 87 -90) -90]
Train Case:  49 | Input/Output: [(73 -58 96 -55) -58]
Train Case:  50 | Input/Output: [(57 72 59 -52) -52]
Train Case:  51 | Input/Output: [(82 46 -47 69) -47]
Train Case:  52 | Input/Output: [(34 -31 -4 83) -31]
Train Case:  53 | Input/Output: [(-72 -32 7 72) -72]
Train Case:  54 | Input/Output: [(-92 13 -54 -54) -92]
Train Case:  55 | Input/Output: [(-98 -25 -53 19) -98]
Train Case:  56 | Input/Output: [(76 61 38 -22) -22]
Train Case:  57 | Input/Output: [(-3 1 -92 83) -92]
Train Case:  58 | Input/Output: [(-52 33 -61 41) -61]
Train Case:  59 | Input/Output: [(-89 -29 -56 11) -89]
Train Case:  60 | Input/Output: [(28 27 23 22) 22]
Train Case:  61 | Input/Output: [(29 -86 -95 67) -95]
Train Case:  62 | Input/Output: [(-23 75 -30 -92) -92]
Train Case:  63 | Input/Output: [(-8 77 65 67) -8]
Train Case:  64 | Input/Output: [(98 49 -3 -36) -36]
Train Case:  65 | Input/Output: [(-36 -74 -38 78) -74]
Train Case:  66 | Input/Output: [(22 -73 -75 72) -75]
Train Case:  67 | Input/Output: [(84 -98 -10 28) -98]
Train Case:  68 | Input/Output: [(-30 86 14 8) -30]
Train Case:  69 | Input/Output: [(24 -76 79 -55) -76]
Train Case:  70 | Input/Output: [(-56 96 6 18) -56]
Train Case:  71 | Input/Output: [(41 71 48 -1) -1]
Train Case:  72 | Input/Output: [(9 -47 28 99) -47]
Train Case:  73 | Input/Output: [(52 -9 70 -21) -21]
Train Case:  74 | Input/Output: [(-62 -3 -28 68) -62]
Train Case:  75 | Input/Output: [(79 -21 68 -12) -21]
Train Case:  76 | Input/Output: [(94 66 -42 -30) -42]
Train Case:  77 | Input/Output: [(-82 -72 80 17) -82]
Train Case:  78 | Input/Output: [(-65 -49 -44 -14) -65]
Train Case:  79 | Input/Output: [(32 -13 -79 62) -79]
Train Case:  80 | Input/Output: [(34 45 52 -6) -6]
Train Case:  81 | Input/Output: [(48 -50 -62 97) -62]
Train Case:  82 | Input/Output: [(-23 5 44 59) -23]
Train Case:  83 | Input/Output: [(-67 -31 -69 35) -69]
Train Case:  84 | Input/Output: [(-55 -30 -28 -41) -55]
Train Case:  85 | Input/Output: [(64 34 -88 -69) -88]
Train Case:  86 | Input/Output: [(-8 84 8 52) -8]
Train Case:  87 | Input/Output: [(67 -7 88 4) -7]
Train Case:  88 | Input/Output: [(-72 41 24 -94) -94]
Train Case:  89 | Input/Output: [(67 -88 -11 -21) -88]
Train Case:  90 | Input/Output: [(-22 36 3 -7) -22]
Train Case:  91 | Input/Output: [(23 59 38 54) 23]
Train Case:  92 | Input/Output: [(100 -5 -98 70) -98]
Train Case:  93 | Input/Output: [(93 -69 66 82) -69]
Train Case:  94 | Input/Output: [(82 94 -87 -30) -87]
Train Case:  95 | Input/Output: [(-6 -17 12 21) -17]
Train Case:  96 | Input/Output: [(38 -59 -33 64) -59]
Train Case:  97 | Input/Output: [(63 -84 -39 -27) -84]
Train Case:  98 | Input/Output: [(21 -71 32 -33) -71]
Train Case:  99 | Input/Output: [(98 -31 -86 -73) -86]
Test Case:   0 | Input/Output: [[-16 14 -16 -16] -16]
Test Case:   1 | Input/Output: [[77 77 -18 77] -18]
Test Case:   2 | Input/Output: [[-78 -75 -78 -78] -78]
Test Case:   3 | Input/Output: [[50 50 -40 50] -40]
Test Case:   4 | Input/Output: [[44 44 44 60] 44]
Test Case:   5 | Input/Output: [[-40 -40 -28 -40] -40]
Test Case:   6 | Input/Output: [[54 -46 54 54] -46]
Test Case:   7 | Input/Output: [[-65 -65 -65 -88] -88]
Test Case:   8 | Input/Output: [[82 -43 -43 -43] -43]
Test Case:   9 | Input/Output: [[-83 -83 29 -83] -83]
Test Case:  10 | Input/Output: [[44 85 85 85] 44]
Test Case:  11 | Input/Output: [[43 -22 43 43] -22]
Test Case:  12 | Input/Output: [[-23 69 -23 -23] -23]
Test Case:  13 | Input/Output: [[-9 -9 31 -9] -9]
Test Case:  14 | Input/Output: [[52 52 77 52] 52]
Test Case:  15 | Input/Output: [[70 70 -93 70] -93]
Test Case:  16 | Input/Output: [[-25 -25 -100 -25] -100]
Test Case:  17 | Input/Output: [[64 29 29 29] 29]
Test Case:  18 | Input/Output: [[79 73 73 73] 73]
Test Case:  19 | Input/Output: [[60 60 -26 60] -26]
Test Case:  20 | Input/Output: [[-18 83 83 83] -18]
Test Case:  21 | Input/Output: [[69 -80 -80 -80] -80]
Test Case:  22 | Input/Output: [[80 80 47 80] 47]
Test Case:  23 | Input/Output: [[-12 -26 -26 -26] -26]
Test Case:  24 | Input/Output: [[-7 -7 -7 43] -7]
Test Case:  25 | Input/Output: [[-78 -82 -78 -78] -82]
Test Case:  26 | Input/Output: [[-81 -81 -81 -58] -81]
Test Case:  27 | Input/Output: [[-37 82 82 82] -37]
Test Case:  28 | Input/Output: [[35 35 35 19] 19]
Test Case:  29 | Input/Output: [[35 35 35 24] 24]
Test Case:  30 | Input/Output: [[94 94 94 24] 24]
Test Case:  31 | Input/Output: [[-83 36 36 36] -83]
Test Case:  32 | Input/Output: [[34 34 -3 34] -3]
Test Case:  33 | Input/Output: [[-39 -2 -2 -2] -39]
Test Case:  34 | Input/Output: [[-96 -60 -60 -60] -96]
Test Case:  35 | Input/Output: [[-37 -37 -37 -69] -69]
Test Case:  36 | Input/Output: [[-8 -8 -8 -3] -8]
Test Case:  37 | Input/Output: [[40 100 40 40] 40]
Test Case:  38 | Input/Output: [[-29 82 -29 -29] -29]
Test Case:  39 | Input/Output: [[-78 -18 -18 -18] -78]
Test Case:  40 | Input/Output: [[89 89 89 12] 12]
Test Case:  41 | Input/Output: [[99 62 99 99] 62]
Test Case:  42 | Input/Output: [[42 42 42 91] 42]
Test Case:  43 | Input/Output: [[-1 -1 -1 -11] -11]
Test Case:  44 | Input/Output: [[-10 -58 -10 -10] -58]
Test Case:  45 | Input/Output: [[-48 7 7 7] -48]
Test Case:  46 | Input/Output: [[63 -49 63 63] -49]
Test Case:  47 | Input/Output: [[-100 -100 -97 -100] -100]
Test Case:  48 | Input/Output: [[40 65 40 40] 40]
Test Case:  49 | Input/Output: [[-87 48 -87 -87] -87]
Test Case:  50 | Input/Output: [[-75 29 -75 -75] -75]
Test Case:  51 | Input/Output: [[28 15 15 15] 15]
Test Case:  52 | Input/Output: [[0 71 0 0] 0]
Test Case:  53 | Input/Output: [[92 23 92 92] 23]
Test Case:  54 | Input/Output: [[80 11 80 80] 11]
Test Case:  55 | Input/Output: [[20 20 -74 20] -74]
Test Case:  56 | Input/Output: [[33 33 33 93] 33]
Test Case:  57 | Input/Output: [[23 63 23 23] 23]
Test Case:  58 | Input/Output: [[-16 -16 -16 47] -16]
Test Case:  59 | Input/Output: [[-48 -48 95 -48] -48]
Test Case:  60 | Input/Output: [[42 42 38 42] 38]
Test Case:  61 | Input/Output: [[20 20 81 20] 20]
Test Case:  62 | Input/Output: [[99 99 99 67] 67]
Test Case:  63 | Input/Output: [[97 -64 -64 -64] -64]
Test Case:  64 | Input/Output: [[-9 -31 -9 -9] -31]
Test Case:  65 | Input/Output: [[73 73 73 -17] -17]
Test Case:  66 | Input/Output: [[74 74 74 30] 30]
Test Case:  67 | Input/Output: [[-28 -99 -28 -28] -99]
Test Case:  68 | Input/Output: [[-53 20 20 20] -53]
Test Case:  69 | Input/Output: [[-9 36 -9 -9] -9]
Test Case:  70 | Input/Output: [[-65 -65 -69 -65] -69]
Test Case:  71 | Input/Output: [[76 76 76 -90] -90]
Test Case:  72 | Input/Output: [[-18 -18 -5 -18] -18]
Test Case:  73 | Input/Output: [[22 89 89 89] 22]
Test Case:  74 | Input/Output: [[5 5 -88 5] -88]
Test Case:  75 | Input/Output: [[30 33 30 30] 30]
Test Case:  76 | Input/Output: [[79 22 79 79] 22]
Test Case:  77 | Input/Output: [[-26 -26 -26 33] -26]
Test Case:  78 | Input/Output: [[76 2 76 76] 2]
Test Case:  79 | Input/Output: [[-96 -91 -91 -91] -96]
Test Case:  80 | Input/Output: [[-49 -37 -49 -49] -49]
Test Case:  81 | Input/Output: [[-58 19 -58 -58] -58]
Test Case:  82 | Input/Output: [[95 95 95 -26] -26]
Test Case:  83 | Input/Output: [[100 24 100 100] 24]
Test Case:  84 | Input/Output: [[-74 -100 -74 -74] -100]
Test Case:  85 | Input/Output: [[-24 -24 -24 50] -24]
Test Case:  86 | Input/Output: [[-33 -33 -33 88] -33]
Test Case:  87 | Input/Output: [[-12 -25 -25 -25] -25]
Test Case:  88 | Input/Output: [[9 61 61 61] 9]
Test Case:  89 | Input/Output: [[4 40 4 4] 4]
Test Case:  90 | Input/Output: [[62 2 62 62] 2]
Test Case:  91 | Input/Output: [[-80 -80 -80 3] -80]
Test Case:  92 | Input/Output: [[-62 -62 -62 -41] -62]
Test Case:  93 | Input/Output: [[-88 -51 -88 -88] -88]
Test Case:  94 | Input/Output: [[66 66 33 66] 33]
Test Case:  95 | Input/Output: [[9 9 9 -44] -44]
Test Case:  96 | Input/Output: [[-18 -18 74 -18] -18]
Test Case:  97 | Input/Output: [[37 99 37 37] 37]
Test Case:  98 | Input/Output: [[-80 -80 82 -80] -80]
Test Case:  99 | Input/Output: [[-40 -40 -52 -40] -52]
Test Case: 100 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 101 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 102 | Input/Output: [(78 78 78 78) 78]
Test Case: 103 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 104 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 105 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 106 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 107 | Input/Output: [(75 75 75 75) 75]
Test Case: 108 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 109 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 110 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 111 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 112 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 113 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 114 | Input/Output: [(79 79 79 79) 79]
Test Case: 115 | Input/Output: [(31 31 31 31) 31]
Test Case: 116 | Input/Output: [(94 94 94 94) 94]
Test Case: 117 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 118 | Input/Output: [(67 67 67 67) 67]
Test Case: 119 | Input/Output: [(4 4 4 4) 4]
Test Case: 120 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 121 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 122 | Input/Output: [(48 48 48 48) 48]
Test Case: 123 | Input/Output: [(72 72 72 72) 72]
Test Case: 124 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 125 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 126 | Input/Output: [(99 99 99 99) 99]
Test Case: 127 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 128 | Input/Output: [(83 83 83 83) 83]
Test Case: 129 | Input/Output: [(58 58 58 58) 58]
Test Case: 130 | Input/Output: [(69 69 69 69) 69]
Test Case: 131 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 132 | Input/Output: [(24 24 24 24) 24]
Test Case: 133 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 134 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 135 | Input/Output: [(7 7 7 7) 7]
Test Case: 136 | Input/Output: [(44 44 44 44) 44]
Test Case: 137 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 138 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 139 | Input/Output: [(58 58 58 58) 58]
Test Case: 140 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 141 | Input/Output: [(68 68 68 68) 68]
Test Case: 142 | Input/Output: [(87 87 87 87) 87]
Test Case: 143 | Input/Output: [(38 38 38 38) 38]
Test Case: 144 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 145 | Input/Output: [(0 0 0 0) 0]
Test Case: 146 | Input/Output: [(20 20 20 20) 20]
Test Case: 147 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 148 | Input/Output: [(20 20 20 20) 20]
Test Case: 149 | Input/Output: [(5 5 5 5) 5]
Test Case: 150 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 151 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 152 | Input/Output: [(34 34 34 34) 34]
Test Case: 153 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 154 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 155 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 156 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 157 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 158 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 159 | Input/Output: [(24 24 24 24) 24]
Test Case: 160 | Input/Output: [(37 37 37 37) 37]
Test Case: 161 | Input/Output: [(18 18 18 18) 18]
Test Case: 162 | Input/Output: [(35 35 35 35) 35]
Test Case: 163 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 164 | Input/Output: [(59 59 59 59) 59]
Test Case: 165 | Input/Output: [(74 74 74 74) 74]
Test Case: 166 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 167 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 168 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 169 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 170 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 171 | Input/Output: [(1 1 1 1) 1]
Test Case: 172 | Input/Output: [(26 26 26 26) 26]
Test Case: 173 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 174 | Input/Output: [(88 88 88 88) 88]
Test Case: 175 | Input/Output: [(26 26 26 26) 26]
Test Case: 176 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 177 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 178 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 179 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 180 | Input/Output: [(44 44 44 44) 44]
Test Case: 181 | Input/Output: [(11 11 11 11) 11]
Test Case: 182 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 183 | Input/Output: [(84 84 84 84) 84]
Test Case: 184 | Input/Output: [(77 77 77 77) 77]
Test Case: 185 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 186 | Input/Output: [(74 74 74 74) 74]
Test Case: 187 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 188 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 189 | Input/Output: [(84 84 84 84) 84]
Test Case: 190 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 191 | Input/Output: [(17 17 17 17) 17]
Test Case: 192 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 193 | Input/Output: [(8 8 8 8) 8]
Test Case: 194 | Input/Output: [(89 89 89 89) 89]
Test Case: 195 | Input/Output: [(35 35 35 35) 35]
Test Case: 196 | Input/Output: [(90 90 90 90) 90]
Test Case: 197 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 198 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 199 | Input/Output: [(31 31 31 31) 31]
Test Case: 200 | Input/Output: [(58 49 28 45) 28]
Test Case: 201 | Input/Output: [(76 30 36 95) 30]
Test Case: 202 | Input/Output: [(52 80 13 45) 13]
Test Case: 203 | Input/Output: [(41 13 35 20) 13]
Test Case: 204 | Input/Output: [(32 75 36 29) 29]
Test Case: 205 | Input/Output: [(67 49 18 74) 18]
Test Case: 206 | Input/Output: [(79 86 34 44) 34]
Test Case: 207 | Input/Output: [(14 69 46 77) 14]
Test Case: 208 | Input/Output: [(28 62 49 62) 28]
Test Case: 209 | Input/Output: [(88 18 24 88) 18]
Test Case: 210 | Input/Output: [(49 25 79 92) 25]
Test Case: 211 | Input/Output: [(82 15 16 15) 15]
Test Case: 212 | Input/Output: [(37 79 40 42) 37]
Test Case: 213 | Input/Output: [(83 77 5 79) 5]
Test Case: 214 | Input/Output: [(92 100 34 23) 23]
Test Case: 215 | Input/Output: [(50 87 88 42) 42]
Test Case: 216 | Input/Output: [(85 17 74 32) 17]
Test Case: 217 | Input/Output: [(90 34 76 29) 29]
Test Case: 218 | Input/Output: [(29 54 99 56) 29]
Test Case: 219 | Input/Output: [(5 26 62 76) 5]
Test Case: 220 | Input/Output: [(44 38 78 69) 38]
Test Case: 221 | Input/Output: [(66 88 97 67) 66]
Test Case: 222 | Input/Output: [(95 89 43 44) 43]
Test Case: 223 | Input/Output: [(87 67 100 10) 10]
Test Case: 224 | Input/Output: [(65 79 50 95) 50]
Test Case: 225 | Input/Output: [(8 18 92 74) 8]
Test Case: 226 | Input/Output: [(88 52 80 83) 52]
Test Case: 227 | Input/Output: [(2 16 54 27) 2]
Test Case: 228 | Input/Output: [(95 57 49 25) 25]
Test Case: 229 | Input/Output: [(59 56 100 89) 56]
Test Case: 230 | Input/Output: [(72 90 83 86) 72]
Test Case: 231 | Input/Output: [(5 47 81 52) 5]
Test Case: 232 | Input/Output: [(31 45 87 76) 31]
Test Case: 233 | Input/Output: [(90 82 65 7) 7]
Test Case: 234 | Input/Output: [(74 25 76 23) 23]
Test Case: 235 | Input/Output: [(14 10 79 82) 10]
Test Case: 236 | Input/Output: [(27 12 9 31) 9]
Test Case: 237 | Input/Output: [(6 6 68 65) 6]
Test Case: 238 | Input/Output: [(87 50 97 13) 13]
Test Case: 239 | Input/Output: [(74 49 13 65) 13]
Test Case: 240 | Input/Output: [(66 19 24 91) 19]
Test Case: 241 | Input/Output: [(20 78 90 32) 20]
Test Case: 242 | Input/Output: [(61 30 92 68) 30]
Test Case: 243 | Input/Output: [(0 87 46 82) 0]
Test Case: 244 | Input/Output: [(44 12 19 100) 12]
Test Case: 245 | Input/Output: [(43 63 88 23) 23]
Test Case: 246 | Input/Output: [(86 3 21 99) 3]
Test Case: 247 | Input/Output: [(35 39 83 19) 19]
Test Case: 248 | Input/Output: [(30 68 21 81) 21]
Test Case: 249 | Input/Output: [(30 5 100 77) 5]
Test Case: 250 | Input/Output: [(86 27 40 81) 27]
Test Case: 251 | Input/Output: [(14 58 12 12) 12]
Test Case: 252 | Input/Output: [(50 92 80 79) 50]
Test Case: 253 | Input/Output: [(89 49 67 70) 49]
Test Case: 254 | Input/Output: [(8 92 74 100) 8]
Test Case: 255 | Input/Output: [(74 48 26 92) 26]
Test Case: 256 | Input/Output: [(74 80 11 41) 11]
Test Case: 257 | Input/Output: [(91 55 48 26) 26]
Test Case: 258 | Input/Output: [(7 59 67 15) 7]
Test Case: 259 | Input/Output: [(9 75 13 22) 9]
Test Case: 260 | Input/Output: [(77 98 34 87) 34]
Test Case: 261 | Input/Output: [(35 69 45 34) 34]
Test Case: 262 | Input/Output: [(78 71 70 98) 70]
Test Case: 263 | Input/Output: [(72 75 0 19) 0]
Test Case: 264 | Input/Output: [(100 35 23 64) 23]
Test Case: 265 | Input/Output: [(37 76 21 93) 21]
Test Case: 266 | Input/Output: [(71 95 46 15) 15]
Test Case: 267 | Input/Output: [(39 23 62 44) 23]
Test Case: 268 | Input/Output: [(89 14 77 27) 14]
Test Case: 269 | Input/Output: [(10 80 0 54) 0]
Test Case: 270 | Input/Output: [(31 98 27 33) 27]
Test Case: 271 | Input/Output: [(85 91 13 97) 13]
Test Case: 272 | Input/Output: [(32 7 39 23) 7]
Test Case: 273 | Input/Output: [(2 100 84 36) 2]
Test Case: 274 | Input/Output: [(92 33 90 58) 33]
Test Case: 275 | Input/Output: [(82 89 39 7) 7]
Test Case: 276 | Input/Output: [(92 15 55 31) 15]
Test Case: 277 | Input/Output: [(19 50 5 37) 5]
Test Case: 278 | Input/Output: [(50 38 73 28) 28]
Test Case: 279 | Input/Output: [(91 76 50 60) 50]
Test Case: 280 | Input/Output: [(87 59 32 55) 32]
Test Case: 281 | Input/Output: [(82 83 15 2) 2]
Test Case: 282 | Input/Output: [(81 91 66 92) 66]
Test Case: 283 | Input/Output: [(80 23 96 21) 21]
Test Case: 284 | Input/Output: [(89 23 56 94) 23]
Test Case: 285 | Input/Output: [(51 6 0 7) 0]
Test Case: 286 | Input/Output: [(83 78 91 38) 38]
Test Case: 287 | Input/Output: [(74 42 33 27) 27]
Test Case: 288 | Input/Output: [(59 92 6 30) 6]
Test Case: 289 | Input/Output: [(9 59 22 62) 9]
Test Case: 290 | Input/Output: [(31 50 68 68) 31]
Test Case: 291 | Input/Output: [(4 99 87 6) 4]
Test Case: 292 | Input/Output: [(42 83 94 36) 36]
Test Case: 293 | Input/Output: [(32 28 60 47) 28]
Test Case: 294 | Input/Output: [(21 60 26 27) 21]
Test Case: 295 | Input/Output: [(40 45 55 85) 40]
Test Case: 296 | Input/Output: [(1 83 68 14) 1]
Test Case: 297 | Input/Output: [(93 53 84 14) 14]
Test Case: 298 | Input/Output: [(31 57 14 41) 14]
Test Case: 299 | Input/Output: [(90 95 9 84) 9]
Test Case: 300 | Input/Output: [(45 89 100 37) 37]
Test Case: 301 | Input/Output: [(75 63 44 96) 44]
Test Case: 302 | Input/Output: [(40 39 84 52) 39]
Test Case: 303 | Input/Output: [(76 76 29 7) 7]
Test Case: 304 | Input/Output: [(68 26 70 64) 26]
Test Case: 305 | Input/Output: [(69 85 97 61) 61]
Test Case: 306 | Input/Output: [(100 68 1 27) 1]
Test Case: 307 | Input/Output: [(28 24 85 12) 12]
Test Case: 308 | Input/Output: [(62 6 14 95) 6]
Test Case: 309 | Input/Output: [(40 42 39 76) 39]
Test Case: 310 | Input/Output: [(40 66 50 75) 40]
Test Case: 311 | Input/Output: [(71 59 42 34) 34]
Test Case: 312 | Input/Output: [(8 3 100 60) 3]
Test Case: 313 | Input/Output: [(16 82 67 76) 16]
Test Case: 314 | Input/Output: [(37 60 76 99) 37]
Test Case: 315 | Input/Output: [(95 85 47 37) 37]
Test Case: 316 | Input/Output: [(46 32 53 58) 32]
Test Case: 317 | Input/Output: [(53 39 37 11) 11]
Test Case: 318 | Input/Output: [(33 67 72 81) 33]
Test Case: 319 | Input/Output: [(10 30 50 91) 10]
Test Case: 320 | Input/Output: [(74 75 58 12) 12]
Test Case: 321 | Input/Output: [(52 49 94 53) 49]
Test Case: 322 | Input/Output: [(51 70 29 7) 7]
Test Case: 323 | Input/Output: [(99 77 57 11) 11]
Test Case: 324 | Input/Output: [(5 30 85 83) 5]
Test Case: 325 | Input/Output: [(13 42 100 57) 13]
Test Case: 326 | Input/Output: [(12 36 83 28) 12]
Test Case: 327 | Input/Output: [(30 47 14 1) 1]
Test Case: 328 | Input/Output: [(45 48 48 10) 10]
Test Case: 329 | Input/Output: [(35 27 7 35) 7]
Test Case: 330 | Input/Output: [(37 30 51 26) 26]
Test Case: 331 | Input/Output: [(65 45 32 73) 32]
Test Case: 332 | Input/Output: [(23 23 54 32) 23]
Test Case: 333 | Input/Output: [(59 3 48 27) 3]
Test Case: 334 | Input/Output: [(9 39 43 11) 9]
Test Case: 335 | Input/Output: [(40 89 22 92) 22]
Test Case: 336 | Input/Output: [(71 82 56 91) 56]
Test Case: 337 | Input/Output: [(9 15 76 76) 9]
Test Case: 338 | Input/Output: [(6 48 69 79) 6]
Test Case: 339 | Input/Output: [(89 92 24 0) 0]
Test Case: 340 | Input/Output: [(91 99 34 9) 9]
Test Case: 341 | Input/Output: [(43 28 56 92) 28]
Test Case: 342 | Input/Output: [(12 99 0 47) 0]
Test Case: 343 | Input/Output: [(96 97 57 46) 46]
Test Case: 344 | Input/Output: [(37 77 84 24) 24]
Test Case: 345 | Input/Output: [(82 50 74 58) 50]
Test Case: 346 | Input/Output: [(53 71 11 84) 11]
Test Case: 347 | Input/Output: [(18 6 23 38) 6]
Test Case: 348 | Input/Output: [(24 66 10 40) 10]
Test Case: 349 | Input/Output: [(52 71 94 10) 10]
Test Case: 350 | Input/Output: [(91 42 84 18) 18]
Test Case: 351 | Input/Output: [(85 11 29 14) 11]
Test Case: 352 | Input/Output: [(30 21 70 53) 21]
Test Case: 353 | Input/Output: [(26 10 58 0) 0]
Test Case: 354 | Input/Output: [(99 40 63 19) 19]
Test Case: 355 | Input/Output: [(59 8 82 63) 8]
Test Case: 356 | Input/Output: [(34 47 14 64) 14]
Test Case: 357 | Input/Output: [(16 36 22 93) 16]
Test Case: 358 | Input/Output: [(77 0 100 45) 0]
Test Case: 359 | Input/Output: [(48 89 77 45) 45]
Test Case: 360 | Input/Output: [(52 33 3 40) 3]
Test Case: 361 | Input/Output: [(65 94 60 58) 58]
Test Case: 362 | Input/Output: [(76 87 58 99) 58]
Test Case: 363 | Input/Output: [(12 23 88 69) 12]
Test Case: 364 | Input/Output: [(82 93 84 2) 2]
Test Case: 365 | Input/Output: [(25 7 52 7) 7]
Test Case: 366 | Input/Output: [(68 2 5 1) 1]
Test Case: 367 | Input/Output: [(98 63 65 41) 41]
Test Case: 368 | Input/Output: [(46 48 86 96) 46]
Test Case: 369 | Input/Output: [(23 22 88 31) 22]
Test Case: 370 | Input/Output: [(85 11 27 34) 11]
Test Case: 371 | Input/Output: [(45 67 28 46) 28]
Test Case: 372 | Input/Output: [(17 74 49 77) 17]
Test Case: 373 | Input/Output: [(68 36 45 28) 28]
Test Case: 374 | Input/Output: [(78 25 22 33) 22]
Test Case: 375 | Input/Output: [(57 92 14 52) 14]
Test Case: 376 | Input/Output: [(1 10 5 29) 1]
Test Case: 377 | Input/Output: [(24 49 75 0) 0]
Test Case: 378 | Input/Output: [(95 3 84 34) 3]
Test Case: 379 | Input/Output: [(33 89 43 85) 33]
Test Case: 380 | Input/Output: [(57 28 42 53) 28]
Test Case: 381 | Input/Output: [(98 25 21 91) 21]
Test Case: 382 | Input/Output: [(89 71 62 82) 62]
Test Case: 383 | Input/Output: [(74 21 10 72) 10]
Test Case: 384 | Input/Output: [(67 29 41 8) 8]
Test Case: 385 | Input/Output: [(42 22 41 15) 15]
Test Case: 386 | Input/Output: [(32 45 93 6) 6]
Test Case: 387 | Input/Output: [(23 45 5 5) 5]
Test Case: 388 | Input/Output: [(97 2 85 87) 2]
Test Case: 389 | Input/Output: [(86 80 98 24) 24]
Test Case: 390 | Input/Output: [(52 69 53 25) 25]
Test Case: 391 | Input/Output: [(67 21 49 73) 21]
Test Case: 392 | Input/Output: [(25 71 59 66) 25]
Test Case: 393 | Input/Output: [(26 70 41 85) 26]
Test Case: 394 | Input/Output: [(33 34 52 37) 33]
Test Case: 395 | Input/Output: [(19 37 6 29) 6]
Test Case: 396 | Input/Output: [(11 41 60 68) 11]
Test Case: 397 | Input/Output: [(49 20 43 72) 20]
Test Case: 398 | Input/Output: [(1 63 86 52) 1]
Test Case: 399 | Input/Output: [(56 38 70 12) 12]
Test Case: 400 | Input/Output: [(-4 -80 17 66) -80]
Test Case: 401 | Input/Output: [(-66 37 96 87) -66]
Test Case: 402 | Input/Output: [(-80 -24 36 -96) -96]
Test Case: 403 | Input/Output: [(33 -44 -33 55) -44]
Test Case: 404 | Input/Output: [(-27 -35 55 -60) -60]
Test Case: 405 | Input/Output: [(44 -97 0 50) -97]
Test Case: 406 | Input/Output: [(73 -82 -72 54) -82]
Test Case: 407 | Input/Output: [(48 29 7 -53) -53]
Test Case: 408 | Input/Output: [(51 -85 70 -77) -85]
Test Case: 409 | Input/Output: [(58 -46 51 -87) -87]
Test Case: 410 | Input/Output: [(-96 -60 20 78) -96]
Test Case: 411 | Input/Output: [(86 -6 -35 91) -35]
Test Case: 412 | Input/Output: [(-50 24 73 -26) -50]
Test Case: 413 | Input/Output: [(86 47 54 54) 47]
Test Case: 414 | Input/Output: [(18 82 -40 54) -40]
Test Case: 415 | Input/Output: [(98 84 83 -62) -62]
Test Case: 416 | Input/Output: [(82 98 -2 48) -2]
Test Case: 417 | Input/Output: [(92 -47 26 -42) -47]
Test Case: 418 | Input/Output: [(-99 -27 58 -47) -99]
Test Case: 419 | Input/Output: [(-15 -68 -2 2) -68]
Test Case: 420 | Input/Output: [(-44 69 -84 -6) -84]
Test Case: 421 | Input/Output: [(3 -99 76 15) -99]
Test Case: 422 | Input/Output: [(-61 89 -33 -14) -61]
Test Case: 423 | Input/Output: [(43 36 -93 95) -93]
Test Case: 424 | Input/Output: [(13 83 74 3) 3]
Test Case: 425 | Input/Output: [(6 -30 -88 45) -88]
Test Case: 426 | Input/Output: [(1 52 41 -98) -98]
Test Case: 427 | Input/Output: [(-63 -88 15 79) -88]
Test Case: 428 | Input/Output: [(5 89 -54 -28) -54]
Test Case: 429 | Input/Output: [(-34 62 -92 -27) -92]
Test Case: 430 | Input/Output: [(-48 -85 -82 -43) -85]
Test Case: 431 | Input/Output: [(80 9 26 -16) -16]
Test Case: 432 | Input/Output: [(82 58 -25 -94) -94]
Test Case: 433 | Input/Output: [(-93 -97 -23 -19) -97]
Test Case: 434 | Input/Output: [(-57 28 92 26) -57]
Test Case: 435 | Input/Output: [(-95 -26 -31 -20) -95]
Test Case: 436 | Input/Output: [(-48 -84 -49 82) -84]
Test Case: 437 | Input/Output: [(-37 -82 -43 78) -82]
Test Case: 438 | Input/Output: [(-73 93 -82 85) -82]
Test Case: 439 | Input/Output: [(24 -36 38 100) -36]
Test Case: 440 | Input/Output: [(-63 93 51 13) -63]
Test Case: 441 | Input/Output: [(84 70 -43 88) -43]
Test Case: 442 | Input/Output: [(-45 -74 68 -36) -74]
Test Case: 443 | Input/Output: [(-30 25 76 -49) -49]
Test Case: 444 | Input/Output: [(49 56 26 86) 26]
Test Case: 445 | Input/Output: [(69 -25 -42 77) -42]
Test Case: 446 | Input/Output: [(36 -54 47 -100) -100]
Test Case: 447 | Input/Output: [(57 -25 73 60) -25]
Test Case: 448 | Input/Output: [(-38 -90 -100 -43) -100]
Test Case: 449 | Input/Output: [(82 93 -51 -18) -51]
Test Case: 450 | Input/Output: [(-5 87 84 -94) -94]
Test Case: 451 | Input/Output: [(-93 -91 -92 60) -93]
Test Case: 452 | Input/Output: [(-4 46 55 -44) -44]
Test Case: 453 | Input/Output: [(-72 -7 -46 18) -72]
Test Case: 454 | Input/Output: [(-58 53 0 34) -58]
Test Case: 455 | Input/Output: [(-57 -89 -32 56) -89]
Test Case: 456 | Input/Output: [(2 -58 -94 -59) -94]
Test Case: 457 | Input/Output: [(54 47 40 -51) -51]
Test Case: 458 | Input/Output: [(75 -83 -54 72) -83]
Test Case: 459 | Input/Output: [(65 20 42 -61) -61]
Test Case: 460 | Input/Output: [(77 12 -5 42) -5]
Test Case: 461 | Input/Output: [(-52 -80 72 -77) -80]
Test Case: 462 | Input/Output: [(48 -37 42 -70) -70]
Test Case: 463 | Input/Output: [(-4 -30 -43 -13) -43]
Test Case: 464 | Input/Output: [(27 91 -39 -83) -83]
Test Case: 465 | Input/Output: [(37 -31 -36 97) -36]
Test Case: 466 | Input/Output: [(-71 -39 -77 31) -77]
Test Case: 467 | Input/Output: [(0 -22 -65 19) -65]
Test Case: 468 | Input/Output: [(93 -16 4 -55) -55]
Test Case: 469 | Input/Output: [(73 25 8 7) 7]
Test Case: 470 | Input/Output: [(98 -72 36 -73) -73]
Test Case: 471 | Input/Output: [(-19 -8 -38 -60) -60]
Test Case: 472 | Input/Output: [(88 40 -85 32) -85]
Test Case: 473 | Input/Output: [(12 -42 -68 -95) -95]
Test Case: 474 | Input/Output: [(-38 -9 98 9) -38]
Test Case: 475 | Input/Output: [(-43 -83 43 -51) -83]
Test Case: 476 | Input/Output: [(74 25 13 22) 13]
Test Case: 477 | Input/Output: [(5 61 -65 99) -65]
Test Case: 478 | Input/Output: [(-86 -67 -87 -66) -87]
Test Case: 479 | Input/Output: [(72 55 85 -62) -62]
Test Case: 480 | Input/Output: [(32 5 94 -65) -65]
Test Case: 481 | Input/Output: [(31 -9 -24 -41) -41]
Test Case: 482 | Input/Output: [(47 -63 -55 92) -63]
Test Case: 483 | Input/Output: [(31 -50 -39 -98) -98]
Test Case: 484 | Input/Output: [(93 -80 -50 98) -80]
Test Case: 485 | Input/Output: [(-62 -65 -23 90) -65]
Test Case: 486 | Input/Output: [(98 90 -76 -55) -76]
Test Case: 487 | Input/Output: [(-95 45 -74 -93) -95]
Test Case: 488 | Input/Output: [(-22 -42 72 -39) -42]
Test Case: 489 | Input/Output: [(-2 -38 -42 30) -42]
Test Case: 490 | Input/Output: [(-36 -1 8 82) -36]
Test Case: 491 | Input/Output: [(-65 -50 -69 -41) -69]
Test Case: 492 | Input/Output: [(-98 84 62 86) -98]
Test Case: 493 | Input/Output: [(55 47 23 99) 23]
Test Case: 494 | Input/Output: [(-96 74 83 -7) -96]
Test Case: 495 | Input/Output: [(-59 16 -49 -15) -59]
Test Case: 496 | Input/Output: [(79 -22 58 85) -22]
Test Case: 497 | Input/Output: [(-48 -39 57 -70) -70]
Test Case: 498 | Input/Output: [(-71 -89 -45 3) -89]
Test Case: 499 | Input/Output: [(-53 -84 -20 -74) -84]
Test Case: 500 | Input/Output: [(91 -37 75 4) -37]
Test Case: 501 | Input/Output: [(-37 83 -55 -43) -55]
Test Case: 502 | Input/Output: [(28 -37 -29 -85) -85]
Test Case: 503 | Input/Output: [(51 65 -91 39) -91]
Test Case: 504 | Input/Output: [(63 -76 31 -79) -79]
Test Case: 505 | Input/Output: [(-43 -68 46 -38) -68]
Test Case: 506 | Input/Output: [(-66 60 -66 89) -66]
Test Case: 507 | Input/Output: [(-78 10 -98 -12) -98]
Test Case: 508 | Input/Output: [(53 -40 38 64) -40]
Test Case: 509 | Input/Output: [(-93 -70 61 -25) -93]
Test Case: 510 | Input/Output: [(22 91 -40 -22) -40]
Test Case: 511 | Input/Output: [(47 47 -93 60) -93]
Test Case: 512 | Input/Output: [(90 -27 26 -95) -95]
Test Case: 513 | Input/Output: [(-74 72 41 -88) -88]
Test Case: 514 | Input/Output: [(-64 -35 31 28) -64]
Test Case: 515 | Input/Output: [(-27 -76 81 -50) -76]
Test Case: 516 | Input/Output: [(-26 -1 -53 31) -53]
Test Case: 517 | Input/Output: [(-49 -78 99 50) -78]
Test Case: 518 | Input/Output: [(29 -71 35 -76) -76]
Test Case: 519 | Input/Output: [(28 51 44 98) 28]
Test Case: 520 | Input/Output: [(-20 74 27 -73) -73]
Test Case: 521 | Input/Output: [(-41 19 -32 -7) -41]
Test Case: 522 | Input/Output: [(-43 89 31 -80) -80]
Test Case: 523 | Input/Output: [(10 6 -52 -86) -86]
Test Case: 524 | Input/Output: [(-54 94 -15 23) -54]
Test Case: 525 | Input/Output: [(90 60 41 48) 41]
Test Case: 526 | Input/Output: [(49 -79 87 74) -79]
Test Case: 527 | Input/Output: [(74 -21 98 -94) -94]
Test Case: 528 | Input/Output: [(62 77 5 -59) -59]
Test Case: 529 | Input/Output: [(87 -58 -24 15) -58]
Test Case: 530 | Input/Output: [(-91 4 32 -6) -91]
Test Case: 531 | Input/Output: [(9 -1 -98 -24) -98]
Test Case: 532 | Input/Output: [(-25 -2 78 3) -25]
Test Case: 533 | Input/Output: [(-29 -36 43 68) -36]
Test Case: 534 | Input/Output: [(-52 -75 -85 54) -85]
Test Case: 535 | Input/Output: [(34 22 19 -16) -16]
Test Case: 536 | Input/Output: [(82 26 -92 -53) -92]
Test Case: 537 | Input/Output: [(-24 -59 20 -69) -69]
Test Case: 538 | Input/Output: [(4 15 -17 -22) -22]
Test Case: 539 | Input/Output: [(92 54 83 38) 38]
Test Case: 540 | Input/Output: [(93 92 38 -94) -94]
Test Case: 541 | Input/Output: [(11 -89 -94 34) -94]
Test Case: 542 | Input/Output: [(-75 44 21 -85) -85]
Test Case: 543 | Input/Output: [(-38 83 43 -44) -44]
Test Case: 544 | Input/Output: [(99 44 -26 -65) -65]
Test Case: 545 | Input/Output: [(-27 58 -61 83) -61]
Test Case: 546 | Input/Output: [(49 -21 81 -79) -79]
Test Case: 547 | Input/Output: [(-15 44 -49 -14) -49]
Test Case: 548 | Input/Output: [(-7 52 -32 43) -32]
Test Case: 549 | Input/Output: [(-58 8 -16 -11) -58]
Test Case: 550 | Input/Output: [(64 -87 96 -47) -87]
Test Case: 551 | Input/Output: [(29 -67 8 -27) -67]
Test Case: 552 | Input/Output: [(16 42 18 -10) -10]
Test Case: 553 | Input/Output: [(-86 -69 87 -85) -86]
Test Case: 554 | Input/Output: [(44 10 45 -53) -53]
Test Case: 555 | Input/Output: [(43 43 38 -38) -38]
Test Case: 556 | Input/Output: [(-83 -90 27 -29) -90]
Test Case: 557 | Input/Output: [(96 45 46 -8) -8]
Test Case: 558 | Input/Output: [(-85 -9 35 -24) -85]
Test Case: 559 | Input/Output: [(-73 -11 33 30) -73]
Test Case: 560 | Input/Output: [(11 -22 40 89) -22]
Test Case: 561 | Input/Output: [(-18 14 -48 -86) -86]
Test Case: 562 | Input/Output: [(-28 -69 -58 83) -69]
Test Case: 563 | Input/Output: [(30 -92 25 82) -92]
Test Case: 564 | Input/Output: [(-74 -99 -28 -73) -99]
Test Case: 565 | Input/Output: [(84 -15 -19 -91) -91]
Test Case: 566 | Input/Output: [(-3 34 -71 -2) -71]
Test Case: 567 | Input/Output: [(-14 52 -46 -33) -46]
Test Case: 568 | Input/Output: [(83 -99 -55 -89) -99]
Test Case: 569 | Input/Output: [(80 -67 60 63) -67]
Test Case: 570 | Input/Output: [(7 -3 -41 -23) -41]
Test Case: 571 | Input/Output: [(-94 -68 60 35) -94]
Test Case: 572 | Input/Output: [(-23 92 41 -50) -50]
Test Case: 573 | Input/Output: [(62 -16 37 -28) -28]
Test Case: 574 | Input/Output: [(-41 -96 -74 67) -96]
Test Case: 575 | Input/Output: [(86 -16 -28 50) -28]
Test Case: 576 | Input/Output: [(81 -70 -67 -41) -70]
Test Case: 577 | Input/Output: [(74 -11 63 -50) -50]
Test Case: 578 | Input/Output: [(22 -53 -10 -48) -53]
Test Case: 579 | Input/Output: [(-95 78 20 -32) -95]
Test Case: 580 | Input/Output: [(-59 -75 27 82) -75]
Test Case: 581 | Input/Output: [(-16 27 -65 -62) -65]
Test Case: 582 | Input/Output: [(85 -62 83 10) -62]
Test Case: 583 | Input/Output: [(-28 -4 100 -54) -54]
Test Case: 584 | Input/Output: [(36 83 38 -57) -57]
Test Case: 585 | Input/Output: [(78 -91 46 -58) -91]
Test Case: 586 | Input/Output: [(48 -18 -63 24) -63]
Test Case: 587 | Input/Output: [(-71 77 -26 61) -71]
Test Case: 588 | Input/Output: [(-28 64 -79 -70) -79]
Test Case: 589 | Input/Output: [(46 -31 -41 -17) -41]
Test Case: 590 | Input/Output: [(-51 -100 89 69) -100]
Test Case: 591 | Input/Output: [(17 -66 38 -84) -84]
Test Case: 592 | Input/Output: [(-73 -53 -33 62) -73]
Test Case: 593 | Input/Output: [(-9 -98 52 -46) -98]
Test Case: 594 | Input/Output: [(-80 67 -42 -46) -80]
Test Case: 595 | Input/Output: [(9 -40 21 -89) -89]
Test Case: 596 | Input/Output: [(-84 -3 -81 47) -84]
Test Case: 597 | Input/Output: [(-25 -7 94 75) -25]
Test Case: 598 | Input/Output: [(72 10 62 97) 10]
Test Case: 599 | Input/Output: [(60 -40 -44 -79) -79]
Test Case: 600 | Input/Output: [(-99 -88 -4 53) -99]
Test Case: 601 | Input/Output: [(67 -85 89 -75) -85]
Test Case: 602 | Input/Output: [(-60 77 80 5) -60]
Test Case: 603 | Input/Output: [(50 -13 6 38) -13]
Test Case: 604 | Input/Output: [(28 -23 41 51) -23]
Test Case: 605 | Input/Output: [(63 -16 77 79) -16]
Test Case: 606 | Input/Output: [(14 20 83 45) 14]
Test Case: 607 | Input/Output: [(-92 63 61 21) -92]
Test Case: 608 | Input/Output: [(33 82 18 81) 18]
Test Case: 609 | Input/Output: [(30 88 62 88) 30]
Test Case: 610 | Input/Output: [(77 24 90 -45) -45]
Test Case: 611 | Input/Output: [(-53 -36 -70 -16) -70]
Test Case: 612 | Input/Output: [(-96 74 89 73) -96]
Test Case: 613 | Input/Output: [(-35 -51 17 43) -51]
Test Case: 614 | Input/Output: [(8 62 81 -22) -22]
Test Case: 615 | Input/Output: [(-17 28 -23 33) -23]
Test Case: 616 | Input/Output: [(26 53 56 65) 26]
Test Case: 617 | Input/Output: [(37 27 84 70) 27]
Test Case: 618 | Input/Output: [(-68 -25 9 -69) -69]
Test Case: 619 | Input/Output: [(-1 38 -54 -84) -84]
Test Case: 620 | Input/Output: [(-6 53 58 -7) -7]
Test Case: 621 | Input/Output: [(22 -42 -96 -74) -96]
Test Case: 622 | Input/Output: [(34 39 21 69) 21]
Test Case: 623 | Input/Output: [(-19 -82 89 -56) -82]
Test Case: 624 | Input/Output: [(63 94 -79 21) -79]
Test Case: 625 | Input/Output: [(100 -56 -91 75) -91]
Test Case: 626 | Input/Output: [(96 -47 -32 -60) -60]
Test Case: 627 | Input/Output: [(-72 -96 64 42) -96]
Test Case: 628 | Input/Output: [(-2 92 62 43) -2]
Test Case: 629 | Input/Output: [(3 -19 -60 -98) -98]
Test Case: 630 | Input/Output: [(68 92 -81 56) -81]
Test Case: 631 | Input/Output: [(83 46 93 43) 43]
Test Case: 632 | Input/Output: [(93 -73 10 -32) -73]
Test Case: 633 | Input/Output: [(-35 88 -69 98) -69]
Test Case: 634 | Input/Output: [(-70 47 56 -84) -84]
Test Case: 635 | Input/Output: [(-53 58 -82 66) -82]
Test Case: 636 | Input/Output: [(-35 -82 -97 73) -97]
Test Case: 637 | Input/Output: [(-68 -94 26 75) -94]
Test Case: 638 | Input/Output: [(-32 -80 -91 88) -91]
Test Case: 639 | Input/Output: [(-9 -89 -55 -80) -89]
Test Case: 640 | Input/Output: [(75 -59 -39 43) -59]
Test Case: 641 | Input/Output: [(13 -34 67 64) -34]
Test Case: 642 | Input/Output: [(94 -8 -6 2) -8]
Test Case: 643 | Input/Output: [(29 40 -6 13) -6]
Test Case: 644 | Input/Output: [(-1 -90 -19 -70) -90]
Test Case: 645 | Input/Output: [(-34 -36 -9 99) -36]
Test Case: 646 | Input/Output: [(58 79 90 -20) -20]
Test Case: 647 | Input/Output: [(88 88 62 7) 7]
Test Case: 648 | Input/Output: [(-82 62 -21 54) -82]
Test Case: 649 | Input/Output: [(49 3 38 -18) -18]
Test Case: 650 | Input/Output: [(41 5 6 15) 5]
Test Case: 651 | Input/Output: [(52 -61 -34 -97) -97]
Test Case: 652 | Input/Output: [(91 -24 33 65) -24]
Test Case: 653 | Input/Output: [(-75 -5 79 91) -75]
Test Case: 654 | Input/Output: [(94 -58 20 -6) -58]
Test Case: 655 | Input/Output: [(67 -41 84 -72) -72]
Test Case: 656 | Input/Output: [(43 44 91 16) 16]
Test Case: 657 | Input/Output: [(92 83 77 -60) -60]
Test Case: 658 | Input/Output: [(75 56 82 9) 9]
Test Case: 659 | Input/Output: [(-78 -71 -29 -49) -78]
Test Case: 660 | Input/Output: [(55 7 -63 97) -63]
Test Case: 661 | Input/Output: [(-5 95 79 -29) -29]
Test Case: 662 | Input/Output: [(74 -51 -84 17) -84]
Test Case: 663 | Input/Output: [(88 -34 82 41) -34]
Test Case: 664 | Input/Output: [(83 7 87 63) 7]
Test Case: 665 | Input/Output: [(-60 -11 55 -96) -96]
Test Case: 666 | Input/Output: [(-88 77 -1 -88) -88]
Test Case: 667 | Input/Output: [(72 19 13 88) 13]
Test Case: 668 | Input/Output: [(76 64 66 57) 57]
Test Case: 669 | Input/Output: [(88 -18 -31 8) -31]
Test Case: 670 | Input/Output: [(6 69 -18 14) -18]
Test Case: 671 | Input/Output: [(-4 1 -72 -100) -100]
Test Case: 672 | Input/Output: [(-56 36 92 13) -56]
Test Case: 673 | Input/Output: [(-64 -40 -26 -37) -64]
Test Case: 674 | Input/Output: [(-36 25 -84 95) -84]
Test Case: 675 | Input/Output: [(-61 84 42 5) -61]
Test Case: 676 | Input/Output: [(15 -85 -21 100) -85]
Test Case: 677 | Input/Output: [(70 -28 -67 11) -67]
Test Case: 678 | Input/Output: [(-87 50 -32 -76) -87]
Test Case: 679 | Input/Output: [(100 93 -46 -33) -46]
Test Case: 680 | Input/Output: [(95 31 -82 -97) -97]
Test Case: 681 | Input/Output: [(50 53 -92 43) -92]
Test Case: 682 | Input/Output: [(54 -56 -75 1) -75]
Test Case: 683 | Input/Output: [(45 -84 -65 -94) -94]
Test Case: 684 | Input/Output: [(-23 92 -4 75) -23]
Test Case: 685 | Input/Output: [(-68 -32 -5 -78) -78]
Test Case: 686 | Input/Output: [(28 -19 -94 -42) -94]
Test Case: 687 | Input/Output: [(42 -77 -3 16) -77]
Test Case: 688 | Input/Output: [(-8 40 41 -53) -53]
Test Case: 689 | Input/Output: [(-36 -52 45 -24) -52]
Test Case: 690 | Input/Output: [(-29 11 -96 32) -96]
Test Case: 691 | Input/Output: [(-80 90 31 -8) -80]
Test Case: 692 | Input/Output: [(35 30 22 -72) -72]
Test Case: 693 | Input/Output: [(83 -74 -82 -86) -86]
Test Case: 694 | Input/Output: [(-7 -80 49 -12) -80]
Test Case: 695 | Input/Output: [(-49 14 -88 90) -88]
Test Case: 696 | Input/Output: [(45 -56 92 17) -56]
Test Case: 697 | Input/Output: [(-27 12 14 45) -27]
Test Case: 698 | Input/Output: [(-56 -28 -21 49) -56]
Test Case: 699 | Input/Output: [(43 -56 93 10) -56]
Test Case: 700 | Input/Output: [(-9 -31 27 21) -31]
Test Case: 701 | Input/Output: [(-14 -56 25 92) -56]
Test Case: 702 | Input/Output: [(-54 -20 -84 4) -84]
Test Case: 703 | Input/Output: [(28 20 -57 -70) -70]
Test Case: 704 | Input/Output: [(13 -85 -33 80) -85]
Test Case: 705 | Input/Output: [(16 -48 -52 -28) -52]
Test Case: 706 | Input/Output: [(-68 64 15 79) -68]
Test Case: 707 | Input/Output: [(-91 -42 51 84) -91]
Test Case: 708 | Input/Output: [(88 -65 90 -53) -65]
Test Case: 709 | Input/Output: [(-54 45 -28 -43) -54]
Test Case: 710 | Input/Output: [(-47 -81 33 -18) -81]
Test Case: 711 | Input/Output: [(65 -12 31 59) -12]
Test Case: 712 | Input/Output: [(98 23 -23 -13) -23]
Test Case: 713 | Input/Output: [(-22 -61 88 71) -61]
Test Case: 714 | Input/Output: [(3 -78 83 50) -78]
Test Case: 715 | Input/Output: [(-27 -55 -36 -71) -71]
Test Case: 716 | Input/Output: [(21 51 0 83) 0]
Test Case: 717 | Input/Output: [(-63 -90 -28 31) -90]
Test Case: 718 | Input/Output: [(26 38 -92 24) -92]
Test Case: 719 | Input/Output: [(71 -74 17 -12) -74]
Test Case: 720 | Input/Output: [(-67 26 -37 -27) -67]
Test Case: 721 | Input/Output: [(32 100 77 15) 15]
Test Case: 722 | Input/Output: [(14 55 37 67) 14]
Test Case: 723 | Input/Output: [(83 -3 -11 -9) -11]
Test Case: 724 | Input/Output: [(63 6 -44 -29) -44]
Test Case: 725 | Input/Output: [(-38 -63 59 43) -63]
Test Case: 726 | Input/Output: [(94 25 71 36) 25]
Test Case: 727 | Input/Output: [(40 79 -84 -33) -84]
Test Case: 728 | Input/Output: [(-82 54 28 31) -82]
Test Case: 729 | Input/Output: [(-73 11 -48 -23) -73]
Test Case: 730 | Input/Output: [(59 -20 32 69) -20]
Test Case: 731 | Input/Output: [(-87 -86 -20 -97) -97]
Test Case: 732 | Input/Output: [(40 42 -99 -80) -99]
Test Case: 733 | Input/Output: [(50 29 -93 -86) -93]
Test Case: 734 | Input/Output: [(-30 19 -72 -72) -72]
Test Case: 735 | Input/Output: [(75 -23 73 -86) -86]
Test Case: 736 | Input/Output: [(-25 -32 3 -69) -69]
Test Case: 737 | Input/Output: [(-24 70 23 54) -24]
Test Case: 738 | Input/Output: [(-38 -100 14 7) -100]
Test Case: 739 | Input/Output: [(59 35 16 -6) -6]
Test Case: 740 | Input/Output: [(-83 95 -65 84) -83]
Test Case: 741 | Input/Output: [(86 67 47 82) 47]
Test Case: 742 | Input/Output: [(76 -53 38 -22) -53]
Test Case: 743 | Input/Output: [(42 -96 8 -95) -96]
Test Case: 744 | Input/Output: [(0 99 -9 35) -9]
Test Case: 745 | Input/Output: [(-46 -7 -60 -36) -60]
Test Case: 746 | Input/Output: [(14 74 -78 10) -78]
Test Case: 747 | Input/Output: [(27 57 -66 18) -66]
Test Case: 748 | Input/Output: [(0 -71 -90 -7) -90]
Test Case: 749 | Input/Output: [(-2 -10 -69 53) -69]
Test Case: 750 | Input/Output: [(-49 -74 5 -47) -74]
Test Case: 751 | Input/Output: [(-26 -83 -13 -63) -83]
Test Case: 752 | Input/Output: [(43 -1 82 59) -1]
Test Case: 753 | Input/Output: [(65 11 40 55) 11]
Test Case: 754 | Input/Output: [(-57 -88 41 -80) -88]
Test Case: 755 | Input/Output: [(48 -63 -31 88) -63]
Test Case: 756 | Input/Output: [(21 73 83 -31) -31]
Test Case: 757 | Input/Output: [(-18 26 -56 11) -56]
Test Case: 758 | Input/Output: [(37 -59 -52 78) -59]
Test Case: 759 | Input/Output: [(5 -89 0 -78) -89]
Test Case: 760 | Input/Output: [(-51 68 -34 89) -51]
Test Case: 761 | Input/Output: [(-93 46 26 -51) -93]
Test Case: 762 | Input/Output: [(-38 -86 69 96) -86]
Test Case: 763 | Input/Output: [(28 73 62 -7) -7]
Test Case: 764 | Input/Output: [(-81 72 84 32) -81]
Test Case: 765 | Input/Output: [(95 38 88 -66) -66]
Test Case: 766 | Input/Output: [(-82 90 54 -100) -100]
Test Case: 767 | Input/Output: [(39 -78 13 77) -78]
Test Case: 768 | Input/Output: [(39 82 -10 15) -10]
Test Case: 769 | Input/Output: [(-86 5 90 -89) -89]
Test Case: 770 | Input/Output: [(-97 -89 -85 25) -97]
Test Case: 771 | Input/Output: [(-35 42 28 -26) -35]
Test Case: 772 | Input/Output: [(95 79 -89 66) -89]
Test Case: 773 | Input/Output: [(-99 -61 -22 -68) -99]
Test Case: 774 | Input/Output: [(-48 60 -26 -36) -48]
Test Case: 775 | Input/Output: [(15 -25 19 60) -25]
Test Case: 776 | Input/Output: [(-63 -70 64 22) -70]
Test Case: 777 | Input/Output: [(56 40 -96 39) -96]
Test Case: 778 | Input/Output: [(-43 -87 -55 -43) -87]
Test Case: 779 | Input/Output: [(14 90 -75 -76) -76]
Test Case: 780 | Input/Output: [(-48 94 39 -99) -99]
Test Case: 781 | Input/Output: [(-67 -12 -15 -59) -67]
Test Case: 782 | Input/Output: [(75 26 5 -45) -45]
Test Case: 783 | Input/Output: [(-72 81 35 4) -72]
Test Case: 784 | Input/Output: [(-47 -77 -30 11) -77]
Test Case: 785 | Input/Output: [(48 -47 -75 -52) -75]
Test Case: 786 | Input/Output: [(13 -66 14 94) -66]
Test Case: 787 | Input/Output: [(-71 40 -31 47) -71]
Test Case: 788 | Input/Output: [(49 18 -28 -29) -29]
Test Case: 789 | Input/Output: [(-55 -28 -30 78) -55]
Test Case: 790 | Input/Output: [(80 -14 94 -89) -89]
Test Case: 791 | Input/Output: [(0 20 26 -36) -36]
Test Case: 792 | Input/Output: [(26 -22 -15 2) -22]
Test Case: 793 | Input/Output: [(-59 -22 29 -93) -93]
Test Case: 794 | Input/Output: [(-68 88 -94 11) -94]
Test Case: 795 | Input/Output: [(83 12 64 25) 12]
Test Case: 796 | Input/Output: [(-53 -20 -20 -74) -74]
Test Case: 797 | Input/Output: [(99 -88 -94 97) -94]
Test Case: 798 | Input/Output: [(-53 95 -88 -35) -88]
Test Case: 799 | Input/Output: [(-63 91 -5 50) -63]
Test Case: 800 | Input/Output: [(-68 -71 -73 6) -73]
Test Case: 801 | Input/Output: [(0 -42 27 13) -42]
Test Case: 802 | Input/Output: [(73 15 80 -59) -59]
Test Case: 803 | Input/Output: [(98 64 -10 -54) -54]
Test Case: 804 | Input/Output: [(-76 4 44 -85) -85]
Test Case: 805 | Input/Output: [(-52 26 47 88) -52]
Test Case: 806 | Input/Output: [(-86 -47 -49 -99) -99]
Test Case: 807 | Input/Output: [(88 87 -64 28) -64]
Test Case: 808 | Input/Output: [(-12 41 18 -75) -75]
Test Case: 809 | Input/Output: [(43 30 69 -37) -37]
Test Case: 810 | Input/Output: [(-77 -37 59 95) -77]
Test Case: 811 | Input/Output: [(-87 -76 72 82) -87]
Test Case: 812 | Input/Output: [(-41 86 62 67) -41]
Test Case: 813 | Input/Output: [(49 -77 2 43) -77]
Test Case: 814 | Input/Output: [(-73 -61 61 -32) -73]
Test Case: 815 | Input/Output: [(-80 -37 26 -28) -80]
Test Case: 816 | Input/Output: [(91 -21 -10 -85) -85]
Test Case: 817 | Input/Output: [(61 99 41 73) 41]
Test Case: 818 | Input/Output: [(-44 16 92 10) -44]
Test Case: 819 | Input/Output: [(-65 -11 60 97) -65]
Test Case: 820 | Input/Output: [(70 80 3 33) 3]
Test Case: 821 | Input/Output: [(-70 40 97 75) -70]
Test Case: 822 | Input/Output: [(-50 70 -76 -34) -76]
Test Case: 823 | Input/Output: [(56 -92 -80 28) -92]
Test Case: 824 | Input/Output: [(15 -96 44 -15) -96]
Test Case: 825 | Input/Output: [(-81 -49 68 36) -81]
Test Case: 826 | Input/Output: [(62 -34 -24 -42) -42]
Test Case: 827 | Input/Output: [(99 91 -74 -85) -85]
Test Case: 828 | Input/Output: [(22 -23 49 71) -23]
Test Case: 829 | Input/Output: [(-64 -30 -15 -33) -64]
Test Case: 830 | Input/Output: [(-19 -84 -22 -24) -84]
Test Case: 831 | Input/Output: [(-99 -73 43 -84) -99]
Test Case: 832 | Input/Output: [(-66 57 -58 9) -66]
Test Case: 833 | Input/Output: [(99 67 -40 -66) -66]
Test Case: 834 | Input/Output: [(60 -2 52 84) -2]
Test Case: 835 | Input/Output: [(53 61 11 58) 11]
Test Case: 836 | Input/Output: [(-26 18 -79 -52) -79]
Test Case: 837 | Input/Output: [(8 88 -16 45) -16]
Test Case: 838 | Input/Output: [(9 -85 73 -87) -87]
Test Case: 839 | Input/Output: [(-36 7 58 -2) -36]
Test Case: 840 | Input/Output: [(-61 100 81 -16) -61]
Test Case: 841 | Input/Output: [(-52 -31 86 -97) -97]
Test Case: 842 | Input/Output: [(-30 24 -81 90) -81]
Test Case: 843 | Input/Output: [(-30 25 -65 -47) -65]
Test Case: 844 | Input/Output: [(52 -65 92 81) -65]
Test Case: 845 | Input/Output: [(57 -73 -81 -65) -81]
Test Case: 846 | Input/Output: [(25 97 59 86) 25]
Test Case: 847 | Input/Output: [(40 -20 67 35) -20]
Test Case: 848 | Input/Output: [(54 69 -70 -92) -92]
Test Case: 849 | Input/Output: [(-82 81 22 15) -82]
Test Case: 850 | Input/Output: [(-3 -88 -41 87) -88]
Test Case: 851 | Input/Output: [(98 11 -82 45) -82]
Test Case: 852 | Input/Output: [(-50 88 69 -88) -88]
Test Case: 853 | Input/Output: [(-48 -24 30 19) -48]
Test Case: 854 | Input/Output: [(-55 74 -62 75) -62]
Test Case: 855 | Input/Output: [(-94 -93 -23 86) -94]
Test Case: 856 | Input/Output: [(-63 -98 -20 4) -98]
Test Case: 857 | Input/Output: [(-77 -1 -88 60) -88]
Test Case: 858 | Input/Output: [(-48 -34 49 86) -48]
Test Case: 859 | Input/Output: [(-21 97 56 41) -21]
Test Case: 860 | Input/Output: [(-26 -79 -30 99) -79]
Test Case: 861 | Input/Output: [(-26 53 -9 -9) -26]
Test Case: 862 | Input/Output: [(88 49 -29 74) -29]
Test Case: 863 | Input/Output: [(0 -8 28 -8) -8]
Test Case: 864 | Input/Output: [(38 88 77 92) 38]
Test Case: 865 | Input/Output: [(48 -37 -73 54) -73]
Test Case: 866 | Input/Output: [(-76 32 -57 -59) -76]
Test Case: 867 | Input/Output: [(-31 -23 -22 -89) -89]
Test Case: 868 | Input/Output: [(-80 -21 -4 10) -80]
Test Case: 869 | Input/Output: [(38 -74 96 84) -74]
Test Case: 870 | Input/Output: [(-46 -66 25 46) -66]
Test Case: 871 | Input/Output: [(86 69 61 52) 52]
Test Case: 872 | Input/Output: [(-38 -71 -88 50) -88]
Test Case: 873 | Input/Output: [(21 69 -15 -71) -71]
Test Case: 874 | Input/Output: [(-57 -9 57 5) -57]
Test Case: 875 | Input/Output: [(-67 60 38 65) -67]
Test Case: 876 | Input/Output: [(-21 82 -3 -62) -62]
Test Case: 877 | Input/Output: [(-35 -84 68 93) -84]
Test Case: 878 | Input/Output: [(-20 -66 44 62) -66]
Test Case: 879 | Input/Output: [(4 19 -39 -34) -39]
Test Case: 880 | Input/Output: [(30 57 -69 20) -69]
Test Case: 881 | Input/Output: [(-32 -82 -86 66) -86]
Test Case: 882 | Input/Output: [(-19 -73 -71 -82) -82]
Test Case: 883 | Input/Output: [(-32 -90 48 -3) -90]
Test Case: 884 | Input/Output: [(20 77 100 44) 20]
Test Case: 885 | Input/Output: [(62 77 -27 3) -27]
Test Case: 886 | Input/Output: [(51 77 -32 86) -32]
Test Case: 887 | Input/Output: [(21 -4 -54 66) -54]
Test Case: 888 | Input/Output: [(82 93 -64 -11) -64]
Test Case: 889 | Input/Output: [(-7 -54 -27 -30) -54]
Test Case: 890 | Input/Output: [(-39 -46 26 49) -46]
Test Case: 891 | Input/Output: [(19 0 -94 14) -94]
Test Case: 892 | Input/Output: [(2 4 45 89) 2]
Test Case: 893 | Input/Output: [(-47 -52 -35 25) -52]
Test Case: 894 | Input/Output: [(-74 -56 -68 -89) -89]
Test Case: 895 | Input/Output: [(56 -14 56 -77) -77]
Test Case: 896 | Input/Output: [(54 -84 99 7) -84]
Test Case: 897 | Input/Output: [(73 -60 19 -56) -60]
Test Case: 898 | Input/Output: [(26 -8 -33 -46) -46]
Test Case: 899 | Input/Output: [(-62 -34 19 90) -62]
Test Case: 900 | Input/Output: [(64 -4 -82 -60) -82]
Test Case: 901 | Input/Output: [(-77 -29 -38 57) -77]
Test Case: 902 | Input/Output: [(47 20 -20 -34) -34]
Test Case: 903 | Input/Output: [(3 85 -81 1) -81]
Test Case: 904 | Input/Output: [(-22 -47 80 -2) -47]
Test Case: 905 | Input/Output: [(-51 63 39 -86) -86]
Test Case: 906 | Input/Output: [(-30 30 -58 18) -58]
Test Case: 907 | Input/Output: [(-76 99 -52 14) -76]
Test Case: 908 | Input/Output: [(98 58 -38 -7) -38]
Test Case: 909 | Input/Output: [(-70 -50 35 22) -70]
Test Case: 910 | Input/Output: [(41 -33 -62 96) -62]
Test Case: 911 | Input/Output: [(51 -42 -82 5) -82]
Test Case: 912 | Input/Output: [(43 46 -2 -76) -76]
Test Case: 913 | Input/Output: [(12 -29 -9 50) -29]
Test Case: 914 | Input/Output: [(-52 29 -71 35) -71]
Test Case: 915 | Input/Output: [(-100 38 -70 -11) -100]
Test Case: 916 | Input/Output: [(-26 89 -56 -54) -56]
Test Case: 917 | Input/Output: [(-68 78 -54 76) -68]
Test Case: 918 | Input/Output: [(97 65 -43 65) -43]
Test Case: 919 | Input/Output: [(-26 -75 -13 -69) -75]
Test Case: 920 | Input/Output: [(98 67 -48 18) -48]
Test Case: 921 | Input/Output: [(83 64 45 17) 17]
Test Case: 922 | Input/Output: [(28 71 -12 94) -12]
Test Case: 923 | Input/Output: [(-46 35 55 -66) -66]
Test Case: 924 | Input/Output: [(57 54 37 81) 37]
Test Case: 925 | Input/Output: [(36 53 16 -2) -2]
Test Case: 926 | Input/Output: [(98 -31 -85 86) -85]
Test Case: 927 | Input/Output: [(39 68 70 -73) -73]
Test Case: 928 | Input/Output: [(49 -57 74 -79) -79]
Test Case: 929 | Input/Output: [(-60 9 -88 86) -88]
Test Case: 930 | Input/Output: [(-81 -51 -98 23) -98]
Test Case: 931 | Input/Output: [(37 -36 86 -19) -36]
Test Case: 932 | Input/Output: [(47 95 37 44) 37]
Test Case: 933 | Input/Output: [(-31 -62 17 61) -62]
Test Case: 934 | Input/Output: [(66 91 -71 23) -71]
Test Case: 935 | Input/Output: [(7 5 -82 6) -82]
Test Case: 936 | Input/Output: [(-45 -64 18 -70) -70]
Test Case: 937 | Input/Output: [(-96 -62 -42 -95) -96]
Test Case: 938 | Input/Output: [(56 34 46 53) 34]
Test Case: 939 | Input/Output: [(-25 -100 -90 44) -100]
Test Case: 940 | Input/Output: [(35 30 -80 -18) -80]
Test Case: 941 | Input/Output: [(73 -37 -18 6) -37]
Test Case: 942 | Input/Output: [(-30 -3 9 -56) -56]
Test Case: 943 | Input/Output: [(-42 64 35 -28) -42]
Test Case: 944 | Input/Output: [(-67 13 -5 59) -67]
Test Case: 945 | Input/Output: [(29 53 -61 -10) -61]
Test Case: 946 | Input/Output: [(58 41 -73 58) -73]
Test Case: 947 | Input/Output: [(97 -32 -69 92) -69]
Test Case: 948 | Input/Output: [(54 -38 -8 6) -38]
Test Case: 949 | Input/Output: [(-50 -76 83 -30) -76]
Test Case: 950 | Input/Output: [(8 -63 98 3) -63]
Test Case: 951 | Input/Output: [(59 -47 -24 -95) -95]
Test Case: 952 | Input/Output: [(44 -94 -86 -91) -94]
Test Case: 953 | Input/Output: [(-17 -50 21 18) -50]
Test Case: 954 | Input/Output: [(-44 48 20 -73) -73]
Test Case: 955 | Input/Output: [(31 73 -11 12) -11]
Test Case: 956 | Input/Output: [(-82 -9 69 34) -82]
Test Case: 957 | Input/Output: [(-58 14 -66 40) -66]
Test Case: 958 | Input/Output: [(46 -63 1 5) -63]
Test Case: 959 | Input/Output: [(-5 -90 -91 -23) -91]
Test Case: 960 | Input/Output: [(-39 -45 -44 54) -45]
Test Case: 961 | Input/Output: [(-50 -93 20 37) -93]
Test Case: 962 | Input/Output: [(50 84 -3 -21) -21]
Test Case: 963 | Input/Output: [(-20 73 -64 -80) -80]
Test Case: 964 | Input/Output: [(7 -83 71 -2) -83]
Test Case: 965 | Input/Output: [(-22 56 76 90) -22]
Test Case: 966 | Input/Output: [(57 78 21 -81) -81]
Test Case: 967 | Input/Output: [(53 -64 -64 65) -64]
Test Case: 968 | Input/Output: [(90 98 -19 23) -19]
Test Case: 969 | Input/Output: [(-96 86 -86 -97) -97]
Test Case: 970 | Input/Output: [(-16 72 -46 22) -46]
Test Case: 971 | Input/Output: [(89 -82 -87 55) -87]
Test Case: 972 | Input/Output: [(-85 91 76 -87) -87]
Test Case: 973 | Input/Output: [(58 24 -38 59) -38]
Test Case: 974 | Input/Output: [(-5 -52 24 -68) -68]
Test Case: 975 | Input/Output: [(-96 -18 -9 37) -96]
Test Case: 976 | Input/Output: [(-36 -50 -9 87) -50]
Test Case: 977 | Input/Output: [(65 24 88 18) 18]
Test Case: 978 | Input/Output: [(8 52 -99 -61) -99]
Test Case: 979 | Input/Output: [(78 6 -89 79) -89]
Test Case: 980 | Input/Output: [(66 -46 59 -41) -46]
Test Case: 981 | Input/Output: [(-16 36 -78 -92) -92]
Test Case: 982 | Input/Output: [(15 -72 51 12) -72]
Test Case: 983 | Input/Output: [(-25 77 -24 -9) -25]
Test Case: 984 | Input/Output: [(-21 61 -36 52) -36]
Test Case: 985 | Input/Output: [(-76 27 8 -62) -76]
Test Case: 986 | Input/Output: [(-41 -94 -53 95) -94]
Test Case: 987 | Input/Output: [(-42 -19 -89 23) -89]
Test Case: 988 | Input/Output: [(-33 5 -25 -40) -40]
Test Case: 989 | Input/Output: [(25 46 39 -75) -75]
Test Case: 990 | Input/Output: [(-21 54 45 -65) -65]
Test Case: 991 | Input/Output: [(-17 72 3 10) -17]
Test Case: 992 | Input/Output: [(91 78 9 -32) -32]
Test Case: 993 | Input/Output: [(91 -32 96 97) -32]
Test Case: 994 | Input/Output: [(-83 -2 -98 92) -98]
Test Case: 995 | Input/Output: [(2 -46 50 -41) -46]
Test Case: 996 | Input/Output: [(-86 15 72 -72) -86]
Test Case: 997 | Input/Output: [(-61 -4 38 21) -61]
Test Case: 998 | Input/Output: [(-68 83 -8 -3) -68]
Test Case: 999 | Input/Output: [(0 -89 -45 72) -89]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 63 -124 -24 -28 77 -6 6 16 -9 -90 44 62 93 2 115 -66
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-22 -22 31 -22] -22] [[65 -8 65 65] -8] [[-76 49 49 49] -76] [[96 96 96 84] 84] [[-18 -18 -18 54] -18] [[-100 -100 -100 18] -100] [[36 -42 36 36] -42] [[93 -63 -63 -63] -63] [[29 29 29 -79] -79] [[74 -73 -73 -73] -73] [(46 46 46 46) 46] [(10 10 10 10) 10] [(4 4 4 4) 4] [(-26 -26 -26 -26) -26] [(75 75 75 75) 75] [(90 48 55 48) 48] [(4 42 58 68) 4] [(70 2 65 75) 2] [(49 33 45 76) 33] [(49 97 45 9) 9] [(1 65 73 55) 1] [(5 31 36 57) 5] [(18 26 57 41) 18] [(74 14 81 60) 14] [(30 96 2 14) 2] [(86 92 31 40) 31] [(98 24 49 25) 24] [(5 11 26 93) 5] [(60 79 54 25) 25] [(75 96 46 28) 28] [(23 97 55 45) 23] [(68 39 5 24) 5] [(19 80 67 65) 19] [(72 32 37 46) 32] [(54 1 13 6) 1] [(-44 64 48 -90) -90] [(16 16 98 22) 16] [(90 -16 -84 -74) -84] [(56 38 60 65) 38] [(-71 14 18 61) -71] [(-97 13 72 64) -97] [(-45 12 -12 63) -45] [(-38 -87 27 69) -87] [(-28 100 87 -90) -90] [(73 -58 96 -55) -58] [(57 72 59 -52) -52] [(82 46 -47 69) -47] [(34 -31 -4 83) -31] [(-72 -32 7 72) -72] [(-92 13 -54 -54) -92] [(-98 -25 -53 19) -98] [(76 61 38 -22) -22] [(-3 1 -92 83) -92] [(-52 33 -61 41) -61] [(-89 -29 -56 11) -89] [(28 27 23 22) 22] [(29 -86 -95 67) -95] [(-23 75 -30 -92) -92] [(-8 77 65 67) -8] [(98 49 -3 -36) -36] [(-36 -74 -38 78) -74] [(22 -73 -75 72) -75] [(84 -98 -10 28) -98] [(-30 86 14 8) -30] [(24 -76 79 -55) -76] [(-56 96 6 18) -56] [(41 71 48 -1) -1] [(9 -47 28 99) -47] [(52 -9 70 -21) -21] [(-62 -3 -28 68) -62] [(79 -21 68 -12) -21] [(94 66 -42 -30) -42] [(-82 -72 80 17) -82] [(-65 -49 -44 -14) -65] [(32 -13 -79 62) -79] [(34 45 52 -6) -6] [(48 -50 -62 97) -62] [(-23 5 44 59) -23] [(-67 -31 -69 35) -69] [(-55 -30 -28 -41) -55] [(64 34 -88 -69) -88] [(-8 84 8 52) -8] [(67 -7 88 4) -7] [(-72 41 24 -94) -94] [(67 -88 -11 -21) -88] [(-22 36 3 -7) -22] [(23 59 38 54) 23] [(100 -5 -98 70) -98] [(93 -69 66 82) -69] [(82 94 -87 -30) -87] [(-6 -17 12 21) -17] [(38 -59 -33 64) -59] [(63 -84 -39 -27) -84] [(21 -71 32 -33) -71] [(98 -31 -86 -73) -86])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*count} {:close 0, :instruction 75} {:close 1, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 1, :instruction 42} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove})
Lexicase best program: (in3 integer_dup_items exec_while (exec_yankdup) integer_mult exec_do*count (in4 in2) print_integer integer_inc exec_stackdepth exec_do*range (exec_do*count () 75 integer_lt) print_boolean boolean_shove boolean_shove print_boolean boolean_yankdup exec_k_when_autoconstructing (exec_dup (boolean_eq) boolean_or exec_dup_items exec_dup_times () boolean_swap boolean_or boolean_shove 42) (exec_if () (exec_rot (integer_sub integer_div boolean_rot boolean_dup_times integer_mod boolean_shove integer_rot exec_do*count () exec_flush integer_dup exec_k (exec_empty) (exec_shove (exec_k_when_autoconstructing (boolean_frominteger integer_shove) ()))) () ())))
Lexicase best errors: [1 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*count} {:close 0, :instruction 75} {:close 1, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 1, :instruction 42} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove})
Zero cases best program: (in3 integer_dup_items exec_while (exec_yankdup) integer_mult exec_do*count (in4 in2) print_integer integer_inc exec_stackdepth exec_do*range (exec_do*count () 75 integer_lt) print_boolean boolean_shove boolean_shove print_boolean boolean_yankdup exec_k_when_autoconstructing (exec_dup (boolean_eq) boolean_or exec_dup_items exec_dup_times () boolean_swap boolean_or boolean_shove 42) (exec_if () (exec_rot (integer_sub integer_div boolean_rot boolean_dup_times integer_mod boolean_shove integer_rot exec_do*count () exec_flush integer_dup exec_k (exec_empty) (exec_shove (exec_k_when_autoconstructing (boolean_frominteger integer_shove) ()))) () ())))
Zero cases best errors: [1 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 2 4 2 2 2 2 11 2)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (2 2 2 4 2 2 2 2 11 2)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction print_exec})
Best program: (integer_eq integer_gt in2 print_integer integer_gt exec_do*range (print_integer exec_stackdepth) integer_lte boolean_flush boolean_frominteger exec_yankdup integer_swap integer_mod integer_gte integer_inc integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove (exec_noop exec_noop) boolean_not exec_shove () integer_mult boolean_yank boolean_invert_first_then_and integer_inc integer_div print_exec ()) ()) ()))
Errors: [1 1 1 1 1 0 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 9.969
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.998 0.996 0.998 0.998 0.998 0.998 0.989 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.55
Average program size in population (points): 68.32
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 479077
--- Timings ---
Current time: 1559584634955 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.7 seconds, 29.4%
Fitness Testing:      1.7 seconds, 66.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction print_exec})
Lexicase best program: (integer_eq integer_gt in2 print_integer integer_gt exec_do*range (print_integer exec_stackdepth) integer_lte boolean_flush boolean_frominteger exec_yankdup integer_swap integer_mod integer_gte integer_inc integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove (exec_noop exec_noop) boolean_not exec_shove () integer_mult boolean_yank boolean_invert_first_then_and integer_inc integer_div print_exec ()) ()) ()))
Lexicase best errors: [0 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction print_exec})
Zero cases best program: (integer_eq integer_gt in2 print_integer integer_gt exec_do*range (print_integer exec_stackdepth) integer_lte boolean_flush boolean_frominteger exec_yankdup integer_swap integer_mod integer_gte integer_inc integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove (exec_noop exec_noop) boolean_not exec_shove () integer_mult boolean_yank boolean_invert_first_then_and integer_inc integer_div print_exec ()) ()) ()))
Zero cases best errors: [0 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (426 106 532 723 175 427 1000 107 1000 531)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (426 106 532 723 175 427 0 107 0 531)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction print_exec})
Best program: (integer_eq integer_gt in2 print_integer integer_gt exec_do*range (print_integer exec_stackdepth) integer_lte boolean_flush boolean_frominteger exec_yankdup integer_swap integer_mod integer_gte integer_inc integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove (exec_noop exec_noop) boolean_not exec_shove () integer_mult boolean_yank boolean_invert_first_then_and integer_inc integer_div print_exec ()) ()) ()))
Errors: [0 1 0 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.973
Median total errors in population: 6
Error averages by case: (0.574 0.894 0.468 0.277 0.825 0.573 1.0 0.893 1.0 0.469)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 57.324
Average program size in population (points): 78.492
Average percent parens in population: 0.265
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.504
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1330622
--- Timings ---
Current time: 1559584638070 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.3 seconds, 41.1%
Fitness Testing:      2.5 seconds, 44.0%
Report:               0.7 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in3 integer_gte boolean_shove exec_if (integer_inc) () boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items))
Lexicase best errors: [0 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 19
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in3 integer_gte boolean_shove exec_if (integer_inc) () boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items))
Zero cases best errors: [0 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 19
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (482 123 411 364 1 67 411 1 775 775)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (482 123 411 364 1 67 411 1 775 775)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction print_exec})
Best program: (integer_eq integer_gt in1 print_integer integer_gt exec_do*range (print_integer exec_stackdepth) integer_lte boolean_flush boolean_frominteger exec_yankdup integer_swap integer_mod integer_gte integer_inc integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove (exec_noop exec_noop) boolean_not exec_shove () integer_mult boolean_yank boolean_invert_first_then_and integer_inc integer_div print_exec ()) ()) ()))
Errors: [0 1 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.59
Median total errors in population: 7
Error averages by case: (0.518 0.877 0.589 0.636 0.999 0.933 0.589 0.999 0.225 0.225)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.461
Average program size in population (points): 56.932
Average percent parens in population: 0.246
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0365
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1978980
--- Timings ---
Current time: 1559584641313 milliseconds
Total Time:           9.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.3 seconds, 47.7%
Fitness Testing:      3.2 seconds, 35.2%
Report:               1.5 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction print_exec})
Lexicase best program: (integer_eq integer_gt in2 print_integer integer_gt exec_do*range (print_integer exec_stackdepth) integer_lte boolean_flush boolean_frominteger exec_yankdup integer_swap integer_mod integer_gte integer_inc integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove (exec_noop exec_noop) boolean_not exec_shove () integer_mult boolean_yank boolean_invert_first_then_and integer_inc integer_div print_exec ()) ()) ()))
Lexicase best errors: [1 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction print_exec})
Zero cases best program: (integer_eq integer_gt in2 print_integer integer_gt exec_do*range (print_integer exec_stackdepth) integer_lte boolean_flush boolean_frominteger exec_yankdup integer_swap integer_mod integer_gte integer_inc integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove (exec_noop exec_noop) boolean_not exec_shove () integer_mult boolean_yank boolean_invert_first_then_and integer_inc integer_div print_exec ()) ()) ()))
Zero cases best errors: [1 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (355 118 118 511 864 199 194 866 197 118)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (355 118 118 511 864 199 194 866 197 118)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction print_exec})
Best program: (integer_eq integer_gt in2 print_integer integer_gt exec_do*range (print_integer exec_stackdepth) integer_lte boolean_flush boolean_frominteger exec_yankdup integer_swap integer_mod integer_gte integer_inc integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove (exec_noop exec_noop) boolean_not exec_shove () integer_mult boolean_yank boolean_invert_first_then_and integer_inc integer_div print_exec ()) ()) ()))
Errors: [1 0 0 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.46
Median total errors in population: 6
Error averages by case: (0.645 0.882 0.882 0.489 0.136 0.801 0.806 0.134 0.803 0.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.238
Average program size in population (points): 57.398
Average percent parens in population: 0.256
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.3675
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2431340
--- Timings ---
Current time: 1559584644234 milliseconds
Total Time:          11.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.1 seconds, 51.5%
Fitness Testing:      3.6 seconds, 30.3%
Report:               2.1 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_621} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Lexicase best program: (exec_shove (exec_shove (exec_shove (exec_s (integer_max integer_stackdepth) (exec_do*count (integer_mod exec_do*times (boolean_not integer_yankdup integer_swap tag_exec_621 (integer_lte) exec_yankdup exec_if (integer_dec integer_lte integer_mult exec_stackdepth in1 print_integer) ()))) ()))))
Lexicase best errors: [1 0 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_621} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Zero cases best program: (exec_shove (exec_shove (exec_shove (exec_s (integer_max integer_stackdepth) (exec_do*count (integer_mod exec_do*times (boolean_not integer_yankdup integer_swap tag_exec_621 (integer_lte) exec_yankdup exec_if (integer_dec integer_lte integer_mult exec_stackdepth in1 print_integer) ()))) ()))))
Zero cases best errors: [1 0 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (410 116 410 118 116 118 409 116 244 116)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (410 116 410 118 116 118 409 116 244 116)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Best program: (integer_gte boolean_shove exec_if (integer_inc) () boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items))
Errors: [1 0 1 1 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.827
Median total errors in population: 7
Error averages by case: (0.59 0.884 0.59 0.882 0.884 0.882 0.591 0.884 0.756 0.884)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.137
Average program size in population (points): 56.424
Average percent parens in population: 0.247
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 5.885875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3155505
--- Timings ---
Current time: 1559584647194 milliseconds
Total Time:          15.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.3 seconds, 54.0%
Fitness Testing:      4.3 seconds, 27.7%
Report:               2.7 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 2, :instruction integer_inc} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_gte boolean_shove exec_if (integer_inc) () boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items))
Lexicase best errors: [0 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 2, :instruction integer_inc} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_gte boolean_shove exec_if (integer_inc) () boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items))
Zero cases best errors: [0 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (860 80 870 371 172 371 245 173 80 370)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (860 80 870 371 172 371 245 173 80 370)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Best program: (boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items))
Errors: [0 1 0 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 9
Size: 11
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.408
Median total errors in population: 6
Error averages by case: (0.14 0.92 0.13 0.629 0.828 0.629 0.755 0.827 0.92 0.63)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.495
Average program size in population (points): 52.936
Average percent parens in population: 0.245
Minimum age in population: 5.0
Maximum age in population: 9.5
Average age in population: 7.341625
Median age in population: 7.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3746182
--- Timings ---
Current time: 1559584650055 milliseconds
Total Time:          18.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.5 seconds, 57.6%
Fitness Testing:      4.8 seconds, 26.1%
Report:               2.9 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_boolean} {:close 0, :instruction 75} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction 42} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_integer_35} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove})
Lexicase best program: (in3 integer_dup_items exec_while (exec_yankdup) integer_mult exec_do*count (in4 in2) print_integer integer_inc exec_stackdepth exec_do*range (print_boolean) 75 boolean_rot print_boolean boolean_shove boolean_shove print_boolean boolean_yankdup exec_k_when_autoconstructing (exec_dup (boolean_eq) boolean_or exec_dup_items exec_dup_times () boolean_swap boolean_or exec_k (42) (exec_if () (exec_rot (integer_sub integer_div boolean_rot boolean_dup_times integer_mod boolean_shove integer_rot exec_do*count () exec_flush integer_lt exec_k (exec_empty) (exec_shove (tag_integer_35 boolean_frominteger exec_k_when_autoconstructing (boolean_frominteger integer_shove) ()))) () ()))) ())
Lexicase best errors: [0 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_boolean} {:close 0, :instruction 75} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 1, :instruction 42} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_integer_35} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove})
Zero cases best program: (in3 integer_dup_items exec_while (exec_yankdup) integer_mult exec_do*count (in4 in2) print_integer integer_inc exec_stackdepth exec_do*range (print_boolean) 75 boolean_rot print_boolean boolean_shove boolean_shove print_boolean boolean_yankdup exec_k_when_autoconstructing (exec_dup (boolean_eq) boolean_or exec_dup_items exec_dup_times () boolean_swap boolean_or exec_k (42) (exec_if () (exec_rot (integer_sub integer_div boolean_rot boolean_dup_times integer_mod boolean_shove integer_rot exec_do*count () exec_flush integer_lt exec_k (exec_empty) (exec_shove (tag_integer_35 boolean_frominteger exec_k_when_autoconstructing (boolean_frominteger integer_shove) ()))) () ()))) ())
Zero cases best errors: [0 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (368 160 127 717 162 348 163 348 127 126)
Population mean number of elite cases: 2.65
Count of perfect (error zero) individuals by case: (368 160 127 717 162 348 163 348 127 126)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction print_exec})
Best program: (integer_eq integer_gt in2 print_integer integer_gt exec_do*range (print_integer exec_stackdepth) integer_lte boolean_flush boolean_frominteger exec_yankdup integer_swap integer_mod integer_gte integer_inc integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove (exec_noop exec_noop) boolean_not exec_shove () integer_mult boolean_yank boolean_invert_first_then_and exec_do*range (in1 print_exec ())) ()) ()))
Errors: [0 1 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 51
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.354
Median total errors in population: 7
Error averages by case: (0.632 0.84 0.873 0.283 0.838 0.652 0.837 0.652 0.873 0.874)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.272
Average program size in population (points): 52.735
Average percent parens in population: 0.248
Minimum age in population: 6.5
Maximum age in population: 10.9375
Average age in population: 8.8361875
Median age in population: 8.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4254563
--- Timings ---
Current time: 1559584652996 milliseconds
Total Time:          20.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.4 seconds, 59.8%
Fitness Testing:      5.2 seconds, 25.2%
Report:               3.0 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_eq integer_gt in2 print_integer integer_gt exec_do*range (print_integer integer_dup_items) integer_lte boolean_flush boolean_frominteger exec_yankdup integer_swap integer_mod integer_gte integer_inc integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth) exec_if (exec_swap (exec_shove (exec_noop)) ()) ())
Lexicase best errors: [1 1 0 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_eq integer_gt in2 print_integer integer_gt exec_do*range (print_integer integer_dup_items) integer_lte boolean_flush boolean_frominteger exec_yankdup integer_swap integer_mod integer_gte integer_inc integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth) exec_if (exec_swap (exec_shove (exec_noop)) ()) ())
Zero cases best errors: [1 1 0 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 216 417 1000 418 1000 418 871 232 216)
Population mean number of elite cases: 5.00
Count of perfect (error zero) individuals by case: (216 216 417 0 418 0 418 871 232 216)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromboolean})
Best program: (integer_eq integer_gt in2 print_integer integer_gt exec_do*range (print_integer exec_stackdepth) integer_lte boolean_flush boolean_frominteger exec_yankdup integer_swap integer_mod integer_gte integer_inc integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank) exec_while (integer_lt integer_fromboolean)))
Errors: [1 1 0 1 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 31
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 6.996
Median total errors in population: 6
Error averages by case: (0.784 0.784 0.583 1.0 0.582 1.0 0.582 0.129 0.768 0.784)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 40.268
Average program size in population (points): 53.562
Average percent parens in population: 0.237
Minimum age in population: 7.5
Maximum age in population: 12.265625
Average age in population: 10.307109375
Median age in population: 10.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4983605
--- Timings ---
Current time: 1559584656541 milliseconds
Total Time:          24.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.7 seconds, 60.6%
Fitness Testing:      5.9 seconds, 24.1%
Report:               3.6 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_gte boolean_shove exec_if (integer_inc) () boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items))
Lexicase best errors: [1 0 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_gte boolean_shove exec_if (integer_inc) () boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items))
Zero cases best errors: [1 0 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (396 397 103 1 101 396 396 1 397 397)
Population mean number of elite cases: 2.59
Count of perfect (error zero) individuals by case: (396 397 103 1 101 396 396 1 397 397)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Best program: (integer_gte boolean_shove exec_if () (integer_inc) boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count () boolean_dup_items)
Errors: [1 0 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.415
Median total errors in population: 8
Error averages by case: (0.604 0.603 0.897 0.999 0.899 0.604 0.604 0.999 0.603 0.603)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.856
Average program size in population (points): 46.045
Average percent parens in population: 0.234
Minimum age in population: 8.5
Maximum age in population: 13.7578125
Average age in population: 11.769703125
Median age in population: 11.81640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5638735
--- Timings ---
Current time: 1559584659256 milliseconds
Total Time:          27.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.7 seconds, 61.0%
Fitness Testing:      6.4 seconds, 23.4%
Report:               4.2 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_gte boolean_shove exec_if (integer_inc) () boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*range (boolean_dup_items))
Lexicase best errors: [0 0 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_gte boolean_shove exec_if (integer_inc) () boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*range (boolean_dup_items))
Zero cases best errors: [0 0 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 371 190 179 371 880 156 190 371 371)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (372 371 190 179 371 880 156 190 371 371)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Best program: (integer_inc boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items))
Errors: [0 0 1 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 11
Size: 13
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 6.549
Median total errors in population: 7
Error averages by case: (0.628 0.629 0.81 0.821 0.629 0.12 0.844 0.81 0.629 0.629)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.834
Average program size in population (points): 39.61
Average percent parens in population: 0.238
Minimum age in population: 10.5
Maximum age in population: 15.125
Average age in population: 13.40387890625
Median age in population: 13.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6078553
--- Timings ---
Current time: 1559584661656 milliseconds
Total Time:          29.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.6 seconds, 62.3%
Fitness Testing:      6.8 seconds, 22.7%
Report:               4.4 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_518} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction print_exec})
Lexicase best program: (in1 print_integer boolean_invert_second_then_and integer_pop boolean_invert_second_then_and integer_max integer_fromboolean exec_yankdup exec_s_when_autoconstructing (tagged_518 exec_yankdup boolean_stackdepth) (exec_flush boolean_dup integer_mod integer_gte integer_inc) (integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove (exec_noop exec_noop) boolean_not exec_shove () integer_mult boolean_yank boolean_invert_first_then_and integer_inc) (integer_div print_exec ())) ()))))
Lexicase best errors: [0 0 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_518} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction print_exec})
Zero cases best program: (in1 print_integer boolean_invert_second_then_and integer_pop boolean_invert_second_then_and integer_max integer_fromboolean exec_yankdup exec_s_when_autoconstructing (tagged_518 exec_yankdup boolean_stackdepth) (exec_flush boolean_dup integer_mod integer_gte integer_inc) (integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove (exec_noop exec_noop) boolean_not exec_shove () integer_mult boolean_yank boolean_invert_first_then_and integer_inc) (integer_div print_exec ())) ()))))
Zero cases best errors: [0 0 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (905 824 88 89 526 298 911 529 197 918)
Population mean number of elite cases: 5.28
Count of perfect (error zero) individuals by case: (905 824 88 89 526 298 911 529 197 918)
Population mean number of perfect (error zero) cases: 5.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup})
Best program: (integer_gte boolean_shove boolean_or integer_inc boolean_flush boolean_and boolean_dup_items in1 print_integer integer_mod integer_gte integer_inc exec_yank boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (integer_shove integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (integer_yankdup) ()) ()))
Errors: [0 0 1 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 25
Size: 32
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 4.715
Median total errors in population: 4
Error averages by case: (0.095 0.176 0.912 0.911 0.474 0.702 0.089 0.471 0.803 0.082)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.4
Average program size in population (points): 33.626
Average percent parens in population: 0.235
Minimum age in population: 11.5
Maximum age in population: 16.7734375
Average age in population: 14.915775390625
Median age in population: 14.9765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 144
Genome diversity (% unique genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6430218
--- Timings ---
Current time: 1559584664731 milliseconds
Total Time:          32.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.8 seconds, 64.0%
Fitness Testing:      7.1 seconds, 21.9%
Report:               4.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: 31                 
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 55                 
Correct output: 4                   | Program output: 58                 
Correct output: 2                   | Program output: 65                 
Correct output: 33                  | Program output: 45                 
Correct output: 9                   | Program output: 45                 
Correct output: 1                   | Program output: 73                 
Correct output: 5                   | Program output: 36                 
Correct output: 18                  | Program output: 57                 
Correct output: 14                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 49                 
Correct output: 5                   | Program output: 26                 
Correct output: 25                  | Program output: 54                 
Correct output: 28                  | Program output: 46                 
Correct output: 23                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 67                 
Correct output: 32                  | Program output: 37                 
Correct output: 1                   | Program output: 13                 
Correct output: -90                 | Program output: 48                 
Correct output: 16                  | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 60                 
Correct output: -71                 | Program output: 18                 
Correct output: -97                 | Program output: 72                 
Correct output: -45                 | Program output: -12                
Correct output: -87                 | Program output: 27                 
Correct output: -90                 | Program output: 87                 
Correct output: -58                 | Program output: 96                 
Correct output: -52                 | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -4                 
Correct output: -72                 | Program output: 7                  
Correct output: -92                 | Program output: -54                
Correct output: -98                 | Program output: -53                
Correct output: -22                 | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -89                 | Program output: -56                
Correct output: 22                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -30                
Correct output: -8                  | Program output: 65                 
Correct output: -36                 | Program output: -3                 
Correct output: -74                 | Program output: -38                
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -10                
Correct output: -30                 | Program output: 14                 
Correct output: -76                 | Program output: 79                 
Correct output: -56                 | Program output: 6                  
Correct output: -1                  | Program output: 48                 
Correct output: -47                 | Program output: 28                 
Correct output: -21                 | Program output: 70                 
Correct output: -62                 | Program output: -28                
Correct output: -21                 | Program output: 68                 
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: 80                 
Correct output: -65                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -23                 | Program output: 44                 
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -8                  | Program output: 8                  
Correct output: -7                  | Program output: 88                 
Correct output: -94                 | Program output: 24                 
Correct output: -88                 | Program output: -11                
Correct output: -22                 | Program output: 3                  
Correct output: 23                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 12                 
Correct output: -59                 | Program output: -33                
Correct output: -84                 | Program output: -39                
Correct output: -71                 | Program output: 32                 
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 13} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not})
Lexicase best program: (in3 boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3) (-46 boolean_frominteger boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13) exec_yank boolean_frominteger boolean_xor tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove () exec_noop exec_noop) (boolean_not)) ())
Lexicase best errors: [0 0 0 1 0 1 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 13} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not})
Zero cases best program: (in3 boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3) (-46 boolean_frominteger boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13) exec_yank boolean_frominteger boolean_xor tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove () exec_noop exec_noop) (boolean_not)) ())
Zero cases best errors: [0 0 0 1 0 1 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (914 571 230 1000 230 1000 338 1000 4 1000)
Population mean number of elite cases: 6.29
Count of perfect (error zero) individuals by case: (914 571 230 0 230 0 338 0 4 0)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 13} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction in1} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_168} {:close 0, :instruction tagged_182} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_or})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3) (-46 boolean_frominteger boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty exec_s (exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13) integer_yankdup) (boolean_flush boolean_rot exec_do*times (in4 boolean_or boolean_or boolean_dup_items integer_swap) exec_yank exec_if (boolean_rot boolean_dup_items integer_swap exec_yank in1 integer_yankdup integer_dec integer_swap integer_sub) (boolean_swap exec_do*count (integer_dec integer_gt boolean_empty) integer_rot) integer_gte) (integer_rot integer_lte exec_s (boolean_yankdup boolean_rot integer_min exec_eq in1) (exec_eq) () boolean_yankdup tag_exec_168 (tagged_182 integer_shove exec_k_when_autoconstructing (boolean_xor exec_shove (exec_do*times (exec_dup_times (integer_gt) integer_lte integer_min integer_div exec_noop boolean_dup_items)) integer_gte boolean_swap integer_lte integer_fromboolean) (exec_do*count () integer_empty exec_when (exec_do*while (integer_dup_items) integer_lt integer_stackdepth integer_swap boolean_frominteger) integer_empty boolean_stackdepth integer_flush exec_dup_items boolean_shove integer_div integer_gt boolean_frominteger exec_if (exec_do*count () print_exec () boolean_or) ()))))
Errors: [0 0 0 1 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 98
Size: 126
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.713
Median total errors in population: 7
Error averages by case: (0.086 0.429 0.77 1.0 0.77 1.0 0.662 1.0 0.996 1.0)
Error minima by case: (0 0 0 1 0 1 0 1 0 1)
Average genome size in population (length): 26.571
Average program size in population (points): 35.394
Average percent parens in population: 0.240
Minimum age in population: 13.6328125
Maximum age in population: 18.41796875
Average age in population: 16.4302626953125
Median age in population: 16.50390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 222
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 235
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6735470
--- Timings ---
Current time: 1559584667418 milliseconds
Total Time:          35.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.6 seconds, 64.3%
Fitness Testing:      7.4 seconds, 21.0%
Report:               5.1 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 2, :instruction exec_noop} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Lexicase best program: (exec_if (exec_yank integer_empty exec_do*count () in1 print_integer) (exec_shove ()) boolean_not exec_k (exec_noop) () boolean_empty boolean_xor boolean_or boolean_rot integer_dec integer_lte integer_empty boolean_or boolean_rot exec_dup_times (integer_mod))
Lexicase best errors: [0 1 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 2, :instruction exec_noop} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Zero cases best program: (exec_if (exec_yank integer_empty exec_do*count () in1 print_integer) (exec_shove ()) boolean_not exec_k (exec_noop) () boolean_empty boolean_xor boolean_or boolean_rot integer_dec integer_lte integer_empty boolean_or boolean_rot exec_dup_times (integer_mod))
Zero cases best errors: [0 1 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 450 1000 686 1000 239 239 241 486 239)
Population mean number of elite cases: 4.82
Count of perfect (error zero) individuals by case: (239 450 0 686 0 239 239 241 486 239)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_integer_35} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove})
Best program: (exec_k_when_autoconstructing () (exec_yankdup in1 print_integer boolean_dup boolean_or boolean_stackdepth integer_flush integer_mod integer_gte integer_inc) integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (print_boolean integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove (print_newline exec_do*times (integer_mod integer_fromboolean integer_stackdepth)) integer_div boolean_rot boolean_dup_times integer_mod boolean_shove integer_rot print_boolean) (exec_flush integer_lt exec_k (exec_empty) (exec_shove (tag_integer_35 boolean_frominteger exec_k_when_autoconstructing (boolean_frominteger integer_shove) ())))) ()))
Errors: [0 1 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 46
Size: 62
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.181
Median total errors in population: 7
Error averages by case: (0.761 0.55 1.0 0.314 1.0 0.761 0.761 0.759 0.514 0.761)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 38.932
Average program size in population (points): 51.703
Average percent parens in population: 0.239
Minimum age in population: 14.96875
Maximum age in population: 19.77734375
Average age in population: 17.86207080078125
Median age in population: 17.951416015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7159059
--- Timings ---
Current time: 1559584670803 milliseconds
Total Time:          38.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.0 seconds, 65.0%
Fitness Testing:      7.8 seconds, 20.2%
Report:               5.6 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction -24} {:close 0, :instruction exec_s} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction in1} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_168} {:close 0, :instruction tagged_182} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 2, :instruction boolean_dup_items})
Lexicase best program: (integer_gte boolean_shove boolean_dup_items integer_inc boolean_flush boolean_and boolean_dup_items in1 print_integer integer_swap exec_rot (boolean_flush exec_flush -24) (exec_s (print_newline exec_when (print_boolean exec_rot () (integer_empty) (integer_flush integer_gte in1 integer_yankdup integer_dec) integer_swap integer_sub) boolean_swap exec_do*count (integer_dec integer_gt boolean_empty) integer_rot) (integer_gte) (integer_rot integer_lte exec_s (boolean_yankdup boolean_rot integer_min exec_eq in1) (exec_eq) () boolean_yankdup tag_exec_168 (tagged_182 integer_shove exec_k_when_autoconstructing (boolean_xor exec_shove (exec_do*times (exec_dup_times (exec_rot () () (integer_lte integer_min integer_div exec_noop) boolean_dup_items)))) ()))) ())
Lexicase best errors: [1 1 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 82
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction -24} {:close 0, :instruction exec_s} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction in1} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_168} {:close 0, :instruction tagged_182} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 2, :instruction boolean_dup_items})
Zero cases best program: (integer_gte boolean_shove boolean_dup_items integer_inc boolean_flush boolean_and boolean_dup_items in1 print_integer integer_swap exec_rot (boolean_flush exec_flush -24) (exec_s (print_newline exec_when (print_boolean exec_rot () (integer_empty) (integer_flush integer_gte in1 integer_yankdup integer_dec) integer_swap integer_sub) boolean_swap exec_do*count (integer_dec integer_gt boolean_empty) integer_rot) (integer_gte) (integer_rot integer_lte exec_s (boolean_yankdup boolean_rot integer_min exec_eq in1) (exec_eq) () boolean_yankdup tag_exec_168 (tagged_182 integer_shove exec_k_when_autoconstructing (boolean_xor exec_shove (exec_do*times (exec_dup_times (exec_rot () () (integer_lte integer_min integer_div exec_noop) boolean_dup_items)))) ()))) ())
Zero cases best errors: [1 1 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 82
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 214 215 694 694 906 1000 215 1000 694)
Population mean number of elite cases: 5.64
Count of perfect (error zero) individuals by case: (10 214 215 694 694 906 0 215 0 694)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (in1 print_integer boolean_invert_second_then_and integer_pop boolean_invert_second_then_and integer_max integer_gt exec_do*range (print_integer exec_stackdepth) integer_lte boolean_flush boolean_frominteger exec_yankdup integer_swap integer_mod integer_gte integer_inc integer_empty boolean_invert_first_then_and exec_y (boolean_invert_second_then_and))
Errors: [1 1 1 0 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 22
Size: 25
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.358
Median total errors in population: 6
Error averages by case: (0.99 0.786 0.785 0.306 0.306 0.094 1.0 0.785 1.0 0.306)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 27.785
Average program size in population (points): 36.764
Average percent parens in population: 0.233
Minimum age in population: 16.4140625
Maximum age in population: 21.0927734375
Average age in population: 19.36109375
Median age in population: 19.409912109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7552067
--- Timings ---
Current time: 1559584673591 milliseconds
Total Time:          41.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.0 seconds, 65.1%
Fitness Testing:      8.1 seconds, 19.6%
Report:               6.2 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: 31                 
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 55                 
Correct output: 4                   | Program output: 58                 
Correct output: 2                   | Program output: 65                 
Correct output: 33                  | Program output: 45                 
Correct output: 9                   | Program output: 45                 
Correct output: 1                   | Program output: 73                 
Correct output: 5                   | Program output: 36                 
Correct output: 18                  | Program output: 57                 
Correct output: 14                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 49                 
Correct output: 5                   | Program output: 26                 
Correct output: 25                  | Program output: 54                 
Correct output: 28                  | Program output: 46                 
Correct output: 23                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 67                 
Correct output: 32                  | Program output: 37                 
Correct output: 1                   | Program output: 13                 
Correct output: -90                 | Program output: 48                 
Correct output: 16                  | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 60                 
Correct output: -71                 | Program output: 18                 
Correct output: -97                 | Program output: 72                 
Correct output: -45                 | Program output: -12                
Correct output: -87                 | Program output: 27                 
Correct output: -90                 | Program output: 87                 
Correct output: -58                 | Program output: 96                 
Correct output: -52                 | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -4                 
Correct output: -72                 | Program output: 7                  
Correct output: -92                 | Program output: -54                
Correct output: -98                 | Program output: -53                
Correct output: -22                 | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -89                 | Program output: -56                
Correct output: 22                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -30                
Correct output: -8                  | Program output: 65                 
Correct output: -36                 | Program output: -3                 
Correct output: -74                 | Program output: -38                
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -10                
Correct output: -30                 | Program output: 14                 
Correct output: -76                 | Program output: 79                 
Correct output: -56                 | Program output: 6                  
Correct output: -1                  | Program output: 48                 
Correct output: -47                 | Program output: 28                 
Correct output: -21                 | Program output: 70                 
Correct output: -62                 | Program output: -28                
Correct output: -21                 | Program output: 68                 
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: 80                 
Correct output: -65                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -23                 | Program output: 44                 
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -8                  | Program output: 8                  
Correct output: -7                  | Program output: 88                 
Correct output: -94                 | Program output: 24                 
Correct output: -88                 | Program output: -11                
Correct output: -22                 | Program output: 3                  
Correct output: 23                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 12                 
Correct output: -59                 | Program output: -33                
Correct output: -84                 | Program output: -39                
Correct output: -71                 | Program output: 32                 
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction 13} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction in1} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_168} {:close 0, :instruction tagged_182} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 3, :instruction boolean_dup_items})
Lexicase best program: (integer_eq integer_gt in3 integer_mult exec_swap (in3) (-46 boolean_frominteger boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer exec_do*range (integer_empty boolean_shove exec_if (integer_swap boolean_swap) (13) integer_yankdup) boolean_flush boolean_rot exec_do*times (in4 boolean_or integer_eq boolean_dup_items integer_swap exec_yank in1 integer_yankdup integer_dec integer_swap integer_sub) boolean_swap exec_do*count (integer_dec integer_gt boolean_empty) integer_rot integer_gte integer_rot integer_lte exec_s (boolean_yankdup boolean_rot integer_min exec_eq in1) (exec_eq) () boolean_yankdup tag_exec_168 (tagged_182 integer_shove exec_k_when_autoconstructing (boolean_xor exec_shove (exec_do*times (exec_dup_times (integer_gt) integer_lte integer_min integer_div exec_noop boolean_dup_items)) boolean_invert_first_then_and boolean_swap integer_lte integer_lte integer_min integer_div exec_noop boolean_dup_items) ()))
Lexicase best errors: [1 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 91
Percent parens: 0.187
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction 13} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction in1} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_168} {:close 0, :instruction tagged_182} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 3, :instruction boolean_dup_items})
Zero cases best program: (integer_eq integer_gt in3 integer_mult exec_swap (in3) (-46 boolean_frominteger boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer exec_do*range (integer_empty boolean_shove exec_if (integer_swap boolean_swap) (13) integer_yankdup) boolean_flush boolean_rot exec_do*times (in4 boolean_or integer_eq boolean_dup_items integer_swap exec_yank in1 integer_yankdup integer_dec integer_swap integer_sub) boolean_swap exec_do*count (integer_dec integer_gt boolean_empty) integer_rot integer_gte integer_rot integer_lte exec_s (boolean_yankdup boolean_rot integer_min exec_eq in1) (exec_eq) () boolean_yankdup tag_exec_168 (tagged_182 integer_shove exec_k_when_autoconstructing (boolean_xor exec_shove (exec_do*times (exec_dup_times (integer_gt) integer_lte integer_min integer_div exec_noop boolean_dup_items)) boolean_invert_first_then_and boolean_swap integer_lte integer_lte integer_min integer_div exec_noop boolean_dup_items) ()))
Zero cases best errors: [1 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 91
Percent parens: 0.187
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 523 381 1000 1000 1000 409 381 1000 381)
Population mean number of elite cases: 7.07
Count of perfect (error zero) individuals by case: (0 523 381 0 0 0 409 381 0 381)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction 13} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction in1} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_168} {:close 0, :instruction tagged_182} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_exec_168} {:close 0, :instruction tagged_182} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_or})
Best program: (integer_eq integer_gt in3 integer_mult exec_swap (in3) (-46 boolean_frominteger boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer exec_do*range (integer_empty integer_yank exec_if (integer_swap boolean_swap) (13) integer_yankdup) boolean_flush boolean_rot exec_do*times (in4 boolean_or integer_eq boolean_dup_items integer_swap exec_yank in1 integer_yankdup integer_dec integer_yank integer_sub) boolean_swap exec_do*count (integer_dec integer_gt boolean_empty) integer_rot integer_gte integer_rot integer_lte exec_s (boolean_yankdup boolean_rot integer_min exec_eq in1) (exec_eq) () boolean_yankdup tag_exec_168 (tagged_182 integer_shove exec_k_when_autoconstructing (tag_exec_168 (tagged_182 integer_shove exec_k_when_autoconstructing (boolean_xor exec_shove (exec_do*times (exec_dup_times (integer_gt) integer_lte integer_min integer_div exec_noop boolean_dup_items)) integer_gte boolean_rot integer_lte integer_fromboolean) (exec_do*count () integer_empty exec_when (exec_do*while (integer_dup_items) integer_lt integer_stackdepth integer_swap boolean_frominteger integer_empty boolean_stackdepth integer_flush exec_dup_items boolean_shove integer_div integer_gt boolean_frominteger exec_if (exec_do*count () print_exec () boolean_or) ())))) ()))
Errors: [1 1 0 1 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 95
Size: 122
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 7.925
Median total errors in population: 8
Error averages by case: (1.0 0.477 0.619 1.0 1.0 1.0 0.591 0.619 1.0 0.619)
Error minima by case: (1 0 0 1 1 1 0 0 1 0)
Average genome size in population (length): 33.069
Average program size in population (points): 43.5
Average percent parens in population: 0.233
Minimum age in population: 17.8818359375
Maximum age in population: 22.8509521484375
Average age in population: 20.90863049316406
Median age in population: 20.9833984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 8010530
--- Timings ---
Current time: 1559584676036 milliseconds
Total Time:          43.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.6 seconds, 65.1%
Fitness Testing:      8.5 seconds, 19.4%
Report:               6.7 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: 31                 
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 55                 
Correct output: 4                   | Program output: 58                 
Correct output: 2                   | Program output: 65                 
Correct output: 33                  | Program output: 45                 
Correct output: 9                   | Program output: 45                 
Correct output: 1                   | Program output: 73                 
Correct output: 5                   | Program output: 36                 
Correct output: 18                  | Program output: 57                 
Correct output: 14                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 49                 
Correct output: 5                   | Program output: 26                 
Correct output: 25                  | Program output: 54                 
Correct output: 28                  | Program output: 46                 
Correct output: 23                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 67                 
Correct output: 32                  | Program output: 37                 
Correct output: 1                   | Program output: 13                 
Correct output: -90                 | Program output: 48                 
Correct output: 16                  | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 60                 
Correct output: -71                 | Program output: 18                 
Correct output: -97                 | Program output: 72                 
Correct output: -45                 | Program output: -12                
Correct output: -87                 | Program output: 27                 
Correct output: -90                 | Program output: 87                 
Correct output: -58                 | Program output: 96                 
Correct output: -52                 | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -4                 
Correct output: -72                 | Program output: 7                  
Correct output: -92                 | Program output: -54                
Correct output: -98                 | Program output: -53                
Correct output: -22                 | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -89                 | Program output: -56                
Correct output: 22                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -30                
Correct output: -8                  | Program output: 65                 
Correct output: -36                 | Program output: -3                 
Correct output: -74                 | Program output: -38                
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -10                
Correct output: -30                 | Program output: 14                 
Correct output: -76                 | Program output: 79                 
Correct output: -56                 | Program output: 6                  
Correct output: -1                  | Program output: 48                 
Correct output: -47                 | Program output: 28                 
Correct output: -21                 | Program output: 70                 
Correct output: -62                 | Program output: -28                
Correct output: -21                 | Program output: 68                 
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: 80                 
Correct output: -65                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -23                 | Program output: 44                 
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -8                  | Program output: 8                  
Correct output: -7                  | Program output: 88                 
Correct output: -94                 | Program output: 24                 
Correct output: -88                 | Program output: -11                
Correct output: -22                 | Program output: 3                  
Correct output: 23                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 12                 
Correct output: -59                 | Program output: -33                
Correct output: -84                 | Program output: -39                
Correct output: -71                 | Program output: 32                 
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer})
Lexicase best program: (integer_gte boolean_shove boolean_or exec_swap (in3) (-46 boolean_frominteger boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty exec_when (exec_if (integer_swap boolean_swap) (integer_yankdup) boolean_xor boolean_rot in3 exec_k (boolean_not print_boolean integer_gte boolean_invert_second_then_and integer_flush integer_shove integer_stackdepth boolean_swap exec_if () (boolean_not) exec_s () (exec_yankdup boolean_yankdup integer_sub integer_eq integer_dup exec_swap (boolean_dup_items integer_lt exec_do*times (boolean_flush) in3 exec_swap (exec_eq boolean_pop boolean_swap boolean_rot exec_dup_times ()) (in3 print_integer)) ()) ()) ()))
Lexicase best errors: [1 0 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer})
Zero cases best program: (integer_gte boolean_shove boolean_or exec_swap (in3) (-46 boolean_frominteger boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty exec_when (exec_if (integer_swap boolean_swap) (integer_yankdup) boolean_xor boolean_rot in3 exec_k (boolean_not print_boolean integer_gte boolean_invert_second_then_and integer_flush integer_shove integer_stackdepth boolean_swap exec_if () (boolean_not) exec_s () (exec_yankdup boolean_yankdup integer_sub integer_eq integer_dup exec_swap (boolean_dup_items integer_lt exec_do*times (boolean_flush) in3 exec_swap (exec_eq boolean_pop boolean_swap boolean_rot exec_dup_times ()) (in3 print_integer)) ()) ()) ()))
Zero cases best errors: [1 0 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 862 506 1000 505 506 505 362 362 362)
Population mean number of elite cases: 5.97
Count of perfect (error zero) individuals by case: (0 862 506 0 505 506 505 362 362 362)
Population mean number of perfect (error zero) cases: 3.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 13} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not})
Best program: (boolean_dup integer_max in3 integer_mult exec_swap (in3) (-46 integer_lt boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13) exec_yank boolean_frominteger integer_stackdepth tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove () exec_noop exec_noop) (boolean_not)) ())
Errors: [1 0 0 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 43
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 6.03
Median total errors in population: 6
Error averages by case: (1.0 0.138 0.494 1.0 0.495 0.494 0.495 0.638 0.638 0.638)
Error minima by case: (1 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 35.007
Average program size in population (points): 46.051
Average percent parens in population: 0.231
Minimum age in population: 18.8818359375
Maximum age in population: 24.35467529296875
Average age in population: 22.38427209472656
Median age in population: 22.45413208007812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 8451786
--- Timings ---
Current time: 1559584678665 milliseconds
Total Time:          46.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.6 seconds, 65.4%
Fitness Testing:      8.9 seconds, 19.0%
Report:               7.2 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 2, :instruction integer_inc} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_gte boolean_shove exec_if (integer_inc) () boolean_flush boolean_and boolean_dup_items in1 print_integer exec_swap (boolean_or -9 exec_do*count (boolean_dup_items)) ())
Lexicase best errors: [1 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 2, :instruction integer_inc} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_gte boolean_shove exec_if (integer_inc) () boolean_flush boolean_and boolean_dup_items in1 print_integer exec_swap (boolean_or -9 exec_do*count (boolean_dup_items)) ())
Zero cases best errors: [1 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 477 1 894 1000 405 1000 406 1 405)
Population mean number of elite cases: 5.59
Count of perfect (error zero) individuals by case: (0 477 1 894 0 405 0 406 1 405)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_761} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_flush})
Best program: (exec_k_when_autoconstructing () (exec_yankdup in1 print_integer boolean_dup boolean_or boolean_stackdepth integer_flush integer_mod integer_gte integer_inc) integer_gt boolean_invert_first_then_and exec_y (boolean_invert_second_then_and exec_y (print_boolean integer_yank) tagged_761 boolean_invert_second_then_and boolean_stackdepth exec_if (exec_swap (exec_shove (print_newline exec_do*times (integer_mod integer_fromboolean integer_stackdepth)) integer_div boolean_rot boolean_dup_times integer_mod boolean_shove integer_rot print_boolean) (exec_flush)) ()))
Errors: [1 1 1 0 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 37
Size: 48
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 7.411
Median total errors in population: 8
Error averages by case: (1.0 0.523 0.999 0.106 1.0 0.595 1.0 0.594 0.999 0.595)
Error minima by case: (1 0 0 0 1 0 1 0 0 0)
Average genome size in population (length): 33.303
Average program size in population (points): 43.661
Average percent parens in population: 0.228
Minimum age in population: 20.615234375
Maximum age in population: 25.9595947265625
Average age in population: 23.82991787719727
Median age in population: 23.87248229980469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8868261
--- Timings ---
Current time: 1559584681428 milliseconds
Total Time:          49.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.4 seconds, 65.9%
Fitness Testing:      9.2 seconds, 18.8%
Report:               7.4 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: 31                 
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 55                 
Correct output: 4                   | Program output: 58                 
Correct output: 2                   | Program output: 65                 
Correct output: 33                  | Program output: 45                 
Correct output: 9                   | Program output: 45                 
Correct output: 1                   | Program output: 73                 
Correct output: 5                   | Program output: 36                 
Correct output: 18                  | Program output: 57                 
Correct output: 14                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 49                 
Correct output: 5                   | Program output: 26                 
Correct output: 25                  | Program output: 54                 
Correct output: 28                  | Program output: 46                 
Correct output: 23                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 67                 
Correct output: 32                  | Program output: 37                 
Correct output: 1                   | Program output: 13                 
Correct output: -90                 | Program output: 48                 
Correct output: 16                  | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 60                 
Correct output: -71                 | Program output: 18                 
Correct output: -97                 | Program output: 72                 
Correct output: -45                 | Program output: -12                
Correct output: -87                 | Program output: 27                 
Correct output: -90                 | Program output: 87                 
Correct output: -58                 | Program output: 96                 
Correct output: -52                 | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -4                 
Correct output: -72                 | Program output: 7                  
Correct output: -92                 | Program output: -54                
Correct output: -98                 | Program output: -53                
Correct output: -22                 | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -89                 | Program output: -56                
Correct output: 22                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -30                
Correct output: -8                  | Program output: 65                 
Correct output: -36                 | Program output: -3                 
Correct output: -74                 | Program output: -38                
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -10                
Correct output: -30                 | Program output: 14                 
Correct output: -76                 | Program output: 79                 
Correct output: -56                 | Program output: 6                  
Correct output: -1                  | Program output: 48                 
Correct output: -47                 | Program output: 28                 
Correct output: -21                 | Program output: 70                 
Correct output: -62                 | Program output: -28                
Correct output: -21                 | Program output: 68                 
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: 80                 
Correct output: -65                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -23                 | Program output: 44                 
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -8                  | Program output: 8                  
Correct output: -7                  | Program output: 88                 
Correct output: -94                 | Program output: 24                 
Correct output: -88                 | Program output: -11                
Correct output: -22                 | Program output: 3                  
Correct output: 23                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 12                 
Correct output: -59                 | Program output: -33                
Correct output: -84                 | Program output: -39                
Correct output: -71                 | Program output: 32                 
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 13} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup integer_max in3 integer_mult exec_swap (in3) (-46 integer_lt boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (boolean_empty boolean_swap boolean_invert_second_then_and 13) (integer_yankdup) boolean_flush boolean_rot exec_do*times (in4 boolean_or integer_eq boolean_dup_items integer_swap exec_yank exec_if (boolean_rot exec_flush exec_y_when_autoconstructing (integer_mod)) ()))
Lexicase best errors: [0 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 13} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup integer_max in3 integer_mult exec_swap (in3) (-46 integer_lt boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (boolean_empty boolean_swap boolean_invert_second_then_and 13) (integer_yankdup) boolean_flush boolean_rot exec_do*times (in4 boolean_or integer_eq boolean_dup_items integer_swap exec_yank exec_if (boolean_rot exec_flush exec_y_when_autoconstructing (integer_mod)) ()))
Zero cases best errors: [0 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (131 381 512 131 391 1000 359 391 391 131)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (131 381 512 131 391 0 359 391 391 131)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 1, :instruction 13} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromboolean})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3) (-46 boolean_frominteger boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (exec_k (boolean_swap) (print_newline 13) integer_yankdup) (boolean_flush boolean_dup_times print_boolean exec_while (integer_lt integer_fromboolean)))
Errors: [0 1 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 29
Size: 37
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 7.182
Median total errors in population: 7
Error averages by case: (0.869 0.619 0.488 0.869 0.609 1.0 0.641 0.609 0.609 0.869)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 32.419
Average program size in population (points): 41.408
Average percent parens in population: 0.214
Minimum age in population: 22.131591796875
Maximum age in population: 26.84349060058594
Average age in population: 24.72070465087891
Median age in population: 24.70682525634766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 213
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 9217037
--- Timings ---
Current time: 1559584683676 milliseconds
Total Time:          51.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.2 seconds, 66.0%
Fitness Testing:      9.5 seconds, 18.4%
Report:               8.0 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output:                    
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 13} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13 integer_yankdup) boolean_flush integer_max in3 exec_k (boolean_not print_boolean integer_gte boolean_invert_second_then_and integer_eq boolean_dup_items integer_swap exec_yank exec_if () (boolean_rot exec_flush exec_y_when_autoconstructing () integer_mod integer_swap)) ())
Lexicase best errors: [1 1 1 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 51
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 13} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13 integer_yankdup) boolean_flush integer_max in3 exec_k (boolean_not print_boolean integer_gte boolean_invert_second_then_and integer_eq boolean_dup_items integer_swap exec_yank exec_if () (boolean_rot exec_flush exec_y_when_autoconstructing () integer_mod integer_swap)) ())
Zero cases best errors: [1 1 1 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 51
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (305 648 1000 234 352 305 234 1000 1000 217)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (305 648 0 234 352 305 234 0 0 217)
Population mean number of perfect (error zero) cases: 2.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 13} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13 integer_yankdup) boolean_flush integer_max in3 exec_k (boolean_not print_boolean integer_gte boolean_invert_second_then_and integer_eq boolean_dup_items integer_swap exec_yank exec_if () (boolean_rot exec_flush exec_y_when_autoconstructing () integer_swap)) ())
Errors: [1 1 1 0 1 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 40
Size: 50
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.705
Median total errors in population: 7
Error averages by case: (0.695 0.352 1.0 0.766 0.648 0.695 0.766 1.0 1.0 0.783)
Error minima by case: (0 0 1 0 0 0 0 1 1 0)
Average genome size in population (length): 33.665
Average program size in population (points): 43.379
Average percent parens in population: 0.218
Minimum age in population: 24.21533203125
Maximum age in population: 28.52660369873047
Average age in population: 26.36397215270996
Median age in population: 26.46207809448242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 9587652
--- Timings ---
Current time: 1559584686196 milliseconds
Total Time:          54.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.1 seconds, 66.6%
Fitness Testing:      9.9 seconds, 18.2%
Report:               8.2 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 13} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_swap})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13 integer_yankdup) boolean_flush integer_max in3 exec_k (boolean_not print_boolean integer_gte boolean_invert_second_then_and integer_eq boolean_dup_items integer_swap exec_yank exec_if () (boolean_rot exec_flush exec_y_when_autoconstructing () integer_mod) integer_swap) ())
Lexicase best errors: [1 1 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 51
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 13} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_swap})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13 integer_yankdup) boolean_flush integer_max in3 exec_k (boolean_not print_boolean integer_gte boolean_invert_second_then_and integer_eq boolean_dup_items integer_swap exec_yank exec_if () (boolean_rot exec_flush exec_y_when_autoconstructing () integer_mod) integer_swap) ())
Zero cases best errors: [1 1 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 51
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 340 170 342 388 386 369 170 898 1000)
Population mean number of elite cases: 5.06
Count of perfect (error zero) individuals by case: (0 340 170 342 388 386 369 170 898 0)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 13} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_168} {:close 0, :instruction tagged_182} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13 integer_yankdup) boolean_flush integer_max in3 exec_k (boolean_swap exec_do*count (integer_dec integer_gt boolean_empty) exec_do*while () integer_gte) (integer_rot integer_lte exec_s (boolean_yankdup boolean_rot boolean_empty integer_inc in1) (exec_eq) () boolean_yankdup tag_exec_168 (tagged_182 integer_shove exec_k_when_autoconstructing (boolean_xor exec_shove (exec_do*times (exec_dup_times (integer_gt) integer_lte integer_min integer_dup_items exec_noop boolean_dup_items)) integer_gte boolean_rot integer_lte integer_fromboolean) (exec_do*count () integer_empty exec_when (exec_do*while (integer_dup_items) integer_lt integer_rot integer_swap boolean_frominteger) integer_empty boolean_stackdepth integer_flush exec_dup_items boolean_shove integer_div))))
Errors: [1 1 1 1 0 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 77
Size: 98
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.937
Median total errors in population: 7
Error averages by case: (1.0 0.66 0.83 0.658 0.612 0.614 0.631 0.83 0.102 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 32.791
Average program size in population (points): 41.884
Average percent parens in population: 0.213
Minimum age in population: 25.21533203125
Maximum age in population: 29.89092254638672
Average age in population: 27.78273498535156
Median age in population: 27.84552383422852
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 9941973
--- Timings ---
Current time: 1559584689733 milliseconds
Total Time:          57.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.9 seconds, 67.5%
Fitness Testing:     10.2 seconds, 17.7%
Report:               8.4 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output:                    
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 13} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13 integer_yankdup) in4 integer_max in3 exec_k (boolean_not print_boolean integer_gte boolean_invert_second_then_and integer_eq boolean_dup_items integer_swap exec_yank exec_if () (boolean_rot exec_flush exec_y_when_autoconstructing () integer_mod integer_swap)) ())
Lexicase best errors: [0 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 13} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13 integer_yankdup) in4 integer_max in3 exec_k (boolean_not print_boolean integer_gte boolean_invert_second_then_and integer_eq boolean_dup_items integer_swap exec_yank exec_if () (boolean_rot exec_flush exec_y_when_autoconstructing () integer_mod integer_swap)) ())
Zero cases best errors: [0 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (878 389 248 1000 247 389 246 245 398 389)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (878 389 248 0 247 389 246 245 398 389)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 13} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (boolean_xor exec_yankdup integer_mult boolean_stackdepth) print_integer in1 integer_empty boolean_shove exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13 integer_yankdup) boolean_flush integer_max in3 exec_k (boolean_not print_boolean integer_gte boolean_invert_second_then_and integer_eq boolean_dup_items integer_swap exec_yank exec_if () (boolean_rot exec_flush exec_y_when_autoconstructing () integer_mod integer_swap)) ())
Errors: [0 0 1 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 6.571
Median total errors in population: 6
Error averages by case: (0.122 0.611 0.752 1.0 0.753 0.611 0.754 0.755 0.602 0.611)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 32.932
Average program size in population (points): 41.998
Average percent parens in population: 0.211
Minimum age in population: 26.5125732421875
Maximum age in population: 31.36927604675293
Average age in population: 29.28206357574463
Median age in population: 29.33650398254395
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 10307232
--- Timings ---
Current time: 1559584692636 milliseconds
Total Time:          60.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.3 seconds, 67.9%
Fitness Testing:     10.5 seconds, 17.3%
Report:               8.9 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (boolean_shove exec_k (integer_inc) (boolean_flush) boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items)) ())
Lexicase best errors: [0 0 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (boolean_shove exec_k (integer_inc) (boolean_flush) boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items)) ())
Zero cases best errors: [0 0 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (345 777 1000 1000 122 345 467 345 122 1000)
Population mean number of elite cases: 5.52
Count of perfect (error zero) individuals by case: (345 777 0 0 122 345 467 345 122 0)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 2, :instruction exec_noop} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Best program: (exec_if (exec_yank integer_empty exec_do*count () in1 print_integer) (exec_shove ()) boolean_not exec_k (exec_noop) () boolean_empty boolean_xor boolean_or boolean_rot integer_dec integer_lte integer_empty boolean_or boolean_rot exec_dup_times (integer_mod))
Errors: [0 0 1 1 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 7.477
Median total errors in population: 9
Error averages by case: (0.655 0.223 1.0 1.0 0.878 0.655 0.533 0.655 0.878 1.0)
Error minima by case: (0 0 1 1 0 0 0 0 0 1)
Average genome size in population (length): 30.396
Average program size in population (points): 38.659
Average percent parens in population: 0.208
Minimum age in population: 27.5125732421875
Maximum age in population: 32.79830169677734
Average age in population: 30.77516539001465
Median age in population: 30.86887836456299
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.657
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 10638949
--- Timings ---
Current time: 1559584695260 milliseconds
Total Time:          63.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.4 seconds, 68.5%
Fitness Testing:     10.8 seconds, 17.0%
Report:               9.1 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [1 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [1 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (632 632 908 271 1 903 900 903 271 633)
Population mean number of elite cases: 6.05
Count of perfect (error zero) individuals by case: (632 632 908 271 1 903 900 903 271 633)
Population mean number of perfect (error zero) cases: 6.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Errors: [1 1 0 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 3.946
Median total errors in population: 3
Error averages by case: (0.368 0.368 0.092 0.729 0.999 0.097 0.1 0.097 0.729 0.367)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.519
Average program size in population (points): 30.21
Average percent parens in population: 0.211
Minimum age in population: 28.82878494262695
Maximum age in population: 34.04630279541016
Average age in population: 32.27293905162811
Median age in population: 32.35949277877808
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 10928678
--- Timings ---
Current time: 1559584697529 milliseconds
Total Time:          65.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.3 seconds, 68.9%
Fitness Testing:     11.1 seconds, 16.8%
Report:               9.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [0 0 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [0 0 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (556 557 1000 8 565 351 8 346 557 556)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (556 557 0 8 565 351 8 346 557 556)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Errors: [0 0 1 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.496
Median total errors in population: 5
Error averages by case: (0.444 0.443 1.0 0.992 0.435 0.649 0.992 0.654 0.443 0.444)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 16.08
Average program size in population (points): 20.043
Average percent parens in population: 0.189
Minimum age in population: 31.16039657592773
Maximum age in population: 35.54806756973267
Average age in population: 33.75012127184868
Median age in population: 33.71765828132629
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 498
Genome diversity (% unique genomes):	 0.347
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 511
Syntactic diversity (% unique Push programs):	 0.322
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 11119495
--- Timings ---
Current time: 1559584699496 milliseconds
Total Time:          67.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.9 seconds, 69.3%
Fitness Testing:     11.3 seconds, 16.6%
Report:               9.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_eq})
Lexicase best program: (integer_gte integer_empty exec_do*count () in1 print_integer exec_shove () integer_sub exec_k (exec_noop) (boolean_empty) boolean_xor boolean_or boolean_eq)
Lexicase best errors: [0 0 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_eq})
Zero cases best program: (integer_gte integer_empty exec_do*count () in1 print_integer exec_shove () integer_sub exec_k (exec_noop) (boolean_empty) boolean_xor boolean_or boolean_eq)
Zero cases best errors: [0 0 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 911 233 677 471 908 1000 206 676 471)
Population mean number of elite cases: 5.76
Count of perfect (error zero) individuals by case: (207 911 233 677 471 908 0 206 676 471)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_407} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 13} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap})
Best program: (in3 boolean_dup_items in1 print_integer boolean_dup boolean_or boolean_dup tagged_407 print_integer in1 integer_empty boolean_shove exec_if (integer_swap boolean_swap) (boolean_invert_second_then_and 13 integer_yankdup) boolean_flush integer_max exec_dup (exec_k (boolean_not print_boolean integer_gte boolean_invert_second_then_and integer_eq boolean_dup_items integer_swap exec_yank exec_if () (boolean_rot exec_flush exec_y_when_autoconstructing () integer_mod integer_swap)) ()))
Errors: [0 0 1 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.24
Median total errors in population: 4
Error averages by case: (0.793 0.089 0.767 0.323 0.529 0.092 1.0 0.794 0.324 0.529)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 14.978
Average program size in population (points): 18.689
Average percent parens in population: 0.193
Minimum age in population: 32.39054203033447
Maximum age in population: 36.94572412967682
Average age in population: 35.18207385993004
Median age in population: 35.25692844390869
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 371
Genome diversity (% unique genomes):	 0.347
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 387
Syntactic diversity (% unique Push programs):	 0.328
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 11305198
--- Timings ---
Current time: 1559584701533 milliseconds
Total Time:          69.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.6 seconds, 69.8%
Fitness Testing:     11.4 seconds, 16.4%
Report:               9.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [1 1 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 19
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [1 1 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 19
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (380 1000 389 388 380 1000 149 389 917 149)
Population mean number of elite cases: 5.14
Count of perfect (error zero) individuals by case: (380 0 389 388 380 0 149 389 917 149)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Errors: [1 1 0 0 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.859
Median total errors in population: 7
Error averages by case: (0.62 1.0 0.611 0.612 0.62 1.0 0.851 0.611 0.083 0.851)
Error minima by case: (0 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 15.997
Average program size in population (points): 20.054
Average percent parens in population: 0.195
Minimum age in population: 34.23433685302734
Maximum age in population: 38.36234307289124
Average age in population: 36.69409797435999
Median age in population: 36.75692844390869
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 256
Genome diversity (% unique genomes):	 0.412
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 269
Syntactic diversity (% unique Push programs):	 0.383
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 11497415
--- Timings ---
Current time: 1559584703872 milliseconds
Total Time:          72.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.7 seconds, 70.3%
Fitness Testing:     11.6 seconds, 16.1%
Report:               9.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 2, :instruction exec_noop} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times})
Lexicase best program: (exec_if (exec_yank integer_empty exec_do*count () in1 print_integer) (exec_shove ()) boolean_not exec_when (exec_noop) boolean_empty boolean_xor boolean_or boolean_rot integer_dec integer_lte integer_empty boolean_or boolean_rot exec_dup_times ())
Lexicase best errors: [0 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 2, :instruction exec_noop} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times})
Zero cases best program: (exec_if (exec_yank integer_empty exec_do*count () in1 print_integer) (exec_shove ()) boolean_not exec_when (exec_noop) boolean_empty boolean_xor boolean_or boolean_rot integer_dec integer_lte integer_empty boolean_or boolean_rot exec_dup_times ())
Zero cases best errors: [0 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 390 277 256 256 277 1000 256 277 277)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (277 390 277 256 256 277 0 256 277 277)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_621} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Best program: (exec_if (exec_yank integer_mod exec_shove (boolean_not integer_yankdup integer_swap tag_exec_621 (integer_lte) integer_dec boolean_shove integer_dec integer_lte integer_mult exec_stackdepth in1 print_integer)) ())
Errors: [0 1 0 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 17
Size: 22
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 7.457
Median total errors in population: 7
Error averages by case: (0.723 0.61 0.723 0.744 0.744 0.723 1.0 0.744 0.723 0.723)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 15.449
Average program size in population (points): 19.354
Average percent parens in population: 0.195
Minimum age in population: 35.56176805496216
Maximum age in population: 39.91615542769432
Average age in population: 38.13603737682104
Median age in population: 38.22188830375671
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.42
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 244
Syntactic diversity (% unique Push programs):	 0.387
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 11692813
--- Timings ---
Current time: 1559584706034 milliseconds
Total Time:          74.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.5 seconds, 70.7%
Fitness Testing:     11.8 seconds, 15.9%
Report:               9.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 0, :instruction -18} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_169} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop})
Lexicase best program: (in1 print_integer boolean_invert_second_then_and integer_pop boolean_invert_first_then_and integer_max boolean_invert_second_then_and exec_do*range (boolean_invert_second_then_and integer_max integer_fromboolean) exec_yankdup boolean_dup in2 in1 exec_y () exec_flush boolean_dup print_exec (-18 boolean_stackdepth) integer_flush tag_exec_169 () boolean_xor exec_empty print_newline exec_do*times (exec_do*times () boolean_eq boolean_or integer_eq boolean_dup_items integer_swap exec_swap (exec_if (exec_k (exec_flush exec_y_when_autoconstructing (integer_mod exec_do*times (exec_dup_times (exec_swap (boolean_yankdup) (boolean_xor integer_lte exec_noop))))) ()) ()) ()))
Lexicase best errors: [1 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 64
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 0, :instruction -18} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_169} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop})
Zero cases best program: (in1 print_integer boolean_invert_second_then_and integer_pop boolean_invert_first_then_and integer_max boolean_invert_second_then_and exec_do*range (boolean_invert_second_then_and integer_max integer_fromboolean) exec_yankdup boolean_dup in2 in1 exec_y () exec_flush boolean_dup print_exec (-18 boolean_stackdepth) integer_flush tag_exec_169 () boolean_xor exec_empty print_newline exec_do*times (exec_do*times () boolean_eq boolean_or integer_eq boolean_dup_items integer_swap exec_swap (exec_if (exec_k (exec_flush exec_y_when_autoconstructing (integer_mod exec_do*times (exec_dup_times (exec_swap (boolean_yankdup) (boolean_xor integer_lte exec_noop))))) ()) ()) ()))
Zero cases best errors: [1 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 64
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (95 923 520 95 522 307 938 95 615 826)
Population mean number of elite cases: 4.94
Count of perfect (error zero) individuals by case: (95 923 520 95 522 307 938 95 615 826)
Population mean number of perfect (error zero) cases: 4.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_327} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_518} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_exec} {:close 0, :instruction -18} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_169} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times})
Best program: (in1 print_integer tagged_327 integer_pop boolean_dup_items integer_max integer_fromboolean exec_yankdup boolean_dup tagged_518 in1 boolean_invert_second_then_and exec_flush boolean_eq print_exec (-18 integer_yank) integer_flush tag_exec_169 () boolean_xor exec_empty print_newline exec_do*times ())
Errors: [1 0 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 27
Percent parens: 0.148
--- Population Statistics ---
Average total errors in population: 5.064
Median total errors in population: 4
Error averages by case: (0.905 0.077 0.48 0.905 0.478 0.693 0.062 0.905 0.385 0.174)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.808
Average program size in population (points): 21.21
Average percent parens in population: 0.200
Minimum age in population: 36.99468398094177
Maximum age in population: 41.43139623105526
Average age in population: 39.5950459985286
Median age in population: 39.62542263418436
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.454
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.416
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 11911045
--- Timings ---
Current time: 1559584708414 milliseconds
Total Time:          76.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.6 seconds, 71.2%
Fitness Testing:     12.0 seconds, 15.6%
Report:              10.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [1 1 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [1 1 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (375 377 1000 1000 148 378 378 148 900 376)
Population mean number of elite cases: 5.08
Count of perfect (error zero) individuals by case: (375 377 0 0 148 378 378 148 900 376)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank boolean_pop integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Errors: [1 1 1 1 1 0 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.92
Median total errors in population: 7
Error averages by case: (0.625 0.623 1.0 1.0 0.852 0.622 0.622 0.852 0.1 0.624)
Error minima by case: (0 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 15.951
Average program size in population (points): 19.855
Average percent parens in population: 0.190
Minimum age in population: 37.99468398094177
Maximum age in population: 43.06794372200966
Average age in population: 41.08679736851156
Median age in population: 41.1551765948534
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 180
Genome diversity (% unique genomes):	 0.437
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.411
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 12107505
--- Timings ---
Current time: 1559584710615 milliseconds
Total Time:          78.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.5 seconds, 71.6%
Fitness Testing:     12.2 seconds, 15.4%
Report:              10.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (boolean_not boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items))
Lexicase best errors: [1 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 13
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (boolean_not boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items))
Zero cases best errors: [1 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 13
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (650 258 258 269 379 908 269 258 258 258)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (650 258 258 269 379 908 269 258 258 258)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 3, :instruction integer_inc} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Best program: (boolean_dup integer_max integer_inc boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 exec_do*count (boolean_dup_items))
Errors: [1 0 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 13
Size: 15
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 6.235
Median total errors in population: 6
Error averages by case: (0.35 0.742 0.742 0.731 0.621 0.092 0.731 0.742 0.742 0.742)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.012
Average program size in population (points): 18.838
Average percent parens in population: 0.194
Minimum age in population: 40.00692844390869
Maximum age in population: 44.34616013616323
Average age in population: 42.65154235097021
Median age in population: 42.7130086068064
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 165
Genome diversity (% unique genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.409
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 12305680
--- Timings ---
Current time: 1559584712838 milliseconds
Total Time:          81.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.4 seconds, 72.1%
Fitness Testing:     12.4 seconds, 15.2%
Report:              10.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [1 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [1 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 916 623 489 135 134 134 915 1000 425)
Population mean number of elite cases: 5.06
Count of perfect (error zero) individuals by case: (291 916 623 489 135 134 134 915 0 425)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Errors: [1 0 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 5.938
Median total errors in population: 6
Error averages by case: (0.709 0.084 0.377 0.511 0.865 0.866 0.866 0.085 1.0 0.575)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 15.321
Average program size in population (points): 19.405
Average percent parens in population: 0.201
Minimum age in population: 41.00692844390869
Maximum age in population: 45.80516064912081
Average age in population: 44.10109441028722
Median age in population: 44.17043515946716
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.422
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 12506697
--- Timings ---
Current time: 1559584715539 milliseconds
Total Time:          83.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.8 seconds, 72.6%
Fitness Testing:     12.5 seconds, 15.0%
Report:              10.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction 13})
Lexicase best program: (integer_gte boolean_shove boolean_or exec_if (exec_yank integer_empty) (exec_do*count (in1 print_integer) exec_shove () integer_sub exec_k (exec_noop) (boolean_empty) boolean_xor) boolean_or boolean_rot print_integer exec_do*range (boolean_xor integer_yank exec_if (integer_swap boolean_swap) (13)))
Lexicase best errors: [1 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction 13})
Zero cases best program: (integer_gte boolean_shove boolean_or exec_if (exec_yank integer_empty) (exec_do*count (in1 print_integer) exec_shove () integer_sub exec_k (exec_noop) (boolean_empty) boolean_xor) boolean_or boolean_rot print_integer exec_do*range (boolean_xor integer_yank exec_if (integer_swap boolean_swap) (13)))
Zero cases best errors: [1 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (589 167 1000 1000 1000 587 167 166 1000 755)
Population mean number of elite cases: 6.43
Count of perfect (error zero) individuals by case: (589 167 0 0 0 587 167 166 0 755)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 2, :instruction exec_noop} {:close 2, :instruction integer_stackdepth} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap})
Best program: (exec_if (exec_yank boolean_dup integer_max boolean_dup integer_max exec_if (exec_yank integer_empty boolean_yankdup) (in1 print_integer) exec_shove ()) (boolean_not exec_k (exec_noop) () integer_stackdepth) integer_yankdup boolean_flush integer_max exec_dup (exec_k (integer_div print_boolean integer_gte boolean_invert_second_then_and integer_eq boolean_dup_items integer_swap exec_yank exec_if () (boolean_rot exec_flush exec_y_when_autoconstructing () integer_mod integer_swap)) ()))
Errors: [1 0 1 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 36
Size: 50
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.569
Median total errors in population: 7
Error averages by case: (0.411 0.833 1.0 1.0 1.0 0.413 0.833 0.834 1.0 0.245)
Error minima by case: (0 0 1 1 1 0 0 0 1 0)
Average genome size in population (length): 14.366
Average program size in population (points): 17.921
Average percent parens in population: 0.193
Minimum age in population: 42.45282535254955
Maximum age in population: 47.80516064912081
Average age in population: 45.61427063629963
Median age in population: 45.65226860623807
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 197
Genome diversity (% unique genomes):	 0.371
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 242
Syntactic diversity (% unique Push programs):	 0.338
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 12685416
--- Timings ---
Current time: 1559584717861 milliseconds
Total Time:          86.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.8 seconds, 73.0%
Fitness Testing:     12.7 seconds, 14.8%
Report:              10.4 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (integer_sub integer_max boolean_yank in3 integer_mult exec_swap (in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [0 0 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 15
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (integer_sub integer_max boolean_yank in3 integer_mult exec_swap (in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [0 0 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 15
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (327 327 6 327 926 921 593 594 920 593)
Population mean number of elite cases: 5.53
Count of perfect (error zero) individuals by case: (327 327 6 327 926 921 593 594 920 593)
Population mean number of perfect (error zero) cases: 5.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 2, :instruction 83} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9})
Best program: (integer_gte boolean_shove exec_if (83) () boolean_stackdepth boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9)
Errors: [1 1 1 1 0 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 12
Size: 15
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4.466
Median total errors in population: 4
Error averages by case: (0.673 0.673 0.994 0.673 0.074 0.079 0.407 0.406 0.08 0.407)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.63
Average program size in population (points): 19.499
Average percent parens in population: 0.193
Minimum age in population: 43.92345324158669
Maximum age in population: 48.87839816045016
Average age in population: 47.04075031968951
Median age in population: 47.1479777302593
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.414
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.37
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 12847103
--- Timings ---
Current time: 1559584719775 milliseconds
Total Time:          88.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.4 seconds, 73.2%
Fitness Testing:     12.9 seconds, 14.6%
Report:              10.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [0 0 1 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [0 0 1 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (925 402 429 953 91 1000 1000 400 92 1000)
Population mean number of elite cases: 6.29
Count of perfect (error zero) individuals by case: (925 402 429 953 91 0 0 400 92 0)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 2, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Errors: [0 0 1 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.708
Median total errors in population: 7
Error averages by case: (0.075 0.598 0.571 0.047 0.909 1.0 1.0 0.6 0.908 1.0)
Error minima by case: (0 0 0 0 0 1 1 0 0 1)
Average genome size in population (length): 14.741
Average program size in population (points): 18.34
Average percent parens in population: 0.193
Minimum age in population: 45.07235816121101
Maximum age in population: 50.36018956452608
Average age in population: 48.52307179858233
Median age in population: 48.56177089945413
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.4
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 13003365
--- Timings ---
Current time: 1559584721686 milliseconds
Total Time:          89.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.1 seconds, 73.5%
Fitness Testing:     13.0 seconds, 14.5%
Report:              10.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 2, :instruction exec_noop} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (integer_dec -46 in2 integer_fromboolean print_integer) (exec_shove ()) boolean_not exec_when (exec_noop) boolean_empty boolean_xor boolean_or boolean_rot)
Lexicase best errors: [1 0 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 2, :instruction exec_noop} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (integer_dec -46 in2 integer_fromboolean print_integer) (exec_shove ()) boolean_not exec_when (exec_noop) boolean_empty boolean_xor boolean_or boolean_rot)
Zero cases best errors: [1 0 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 359 358 185 358 362 366 185 355 185)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (185 359 358 185 358 362 366 185 355 185)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Errors: [1 0 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 7.102
Median total errors in population: 6
Error averages by case: (0.815 0.641 0.642 0.815 0.642 0.638 0.634 0.815 0.645 0.815)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 13.98
Average program size in population (points): 17.319
Average percent parens in population: 0.191
Minimum age in population: 46.07235816121101
Maximum age in population: 51.85175035172142
Average age in population: 49.97288730329322
Median age in population: 50.0541263744235
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.404
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.368
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 13156007
--- Timings ---
Current time: 1559584724252 milliseconds
Total Time:          92.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.3 seconds, 73.9%
Fitness Testing:     13.2 seconds, 14.3%
Report:              10.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [0 0 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [0 0 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (447 447 90 831 386 923 1000 90 387 920)
Population mean number of elite cases: 5.52
Count of perfect (error zero) individuals by case: (447 447 90 831 386 923 0 90 387 920)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_621} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (exec_shove (exec_shove (boolean_pop in1 boolean_shove integer_stackdepth) exec_do*count (integer_fromboolean exec_do*times (boolean_not integer_yankdup integer_swap tag_exec_621 (exec_yankdup integer_mult boolean_stackdepth) print_integer))))
Errors: [1 1 1 0 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 17
Size: 23
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 5.479
Median total errors in population: 5
Error averages by case: (0.553 0.553 0.91 0.169 0.614 0.077 1.0 0.91 0.613 0.08)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 14.563
Average program size in population (points): 18.128
Average percent parens in population: 0.193
Minimum age in population: 47.07235816121101
Maximum age in population: 53.51634684804594
Average age in population: 51.49809348582383
Median age in population: 51.58441809401847
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 13311324
--- Timings ---
Current time: 1559584726448 milliseconds
Total Time:          94.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.2 seconds, 74.2%
Fitness Testing:     13.3 seconds, 14.1%
Report:              10.9 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush})
Lexicase best program: (in1 print_integer boolean_invert_second_then_and integer_pop boolean_invert_second_then_and integer_empty integer_fromboolean exec_yankdup boolean_empty exec_yankdup exec_dup (exec_flush))
Lexicase best errors: [1 0 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 14
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush})
Zero cases best program: (in1 print_integer boolean_invert_second_then_and integer_pop boolean_invert_second_then_and integer_empty integer_fromboolean exec_yankdup boolean_empty exec_yankdup exec_dup (exec_flush))
Zero cases best errors: [1 0 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 14
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (279 313 279 278 314 314 313 914 320 314)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (279 313 279 278 314 314 313 914 320 314)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction -9} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while})
Best program: (integer_gte boolean_shove boolean_or boolean_not boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_invert_second_then_and integer_div -9 integer_min exec_do*while ())
Errors: [1 0 1 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 14
Size: 16
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 6.362
Median total errors in population: 6
Error averages by case: (0.721 0.687 0.721 0.722 0.686 0.686 0.687 0.086 0.68 0.686)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.061
Average program size in population (points): 17.459
Average percent parens in population: 0.193
Minimum age in population: 48.07235816121101
Maximum age in population: 55.01221489720047
Average age in population: 53.05959125891968
Median age in population: 53.187580403217
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 13461797
--- Timings ---
Current time: 1559584728565 milliseconds
Total Time:          96.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.1 seconds, 74.5%
Fitness Testing:     13.5 seconds, 14.0%
Report:              11.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: 31                 
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 55                 
Correct output: 4                   | Program output: 58                 
Correct output: 2                   | Program output: 65                 
Correct output: 33                  | Program output: 45                 
Correct output: 9                   | Program output: 45                 
Correct output: 1                   | Program output: 73                 
Correct output: 5                   | Program output: 36                 
Correct output: 18                  | Program output: 57                 
Correct output: 14                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 49                 
Correct output: 5                   | Program output: 26                 
Correct output: 25                  | Program output: 54                 
Correct output: 28                  | Program output: 46                 
Correct output: 23                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 67                 
Correct output: 32                  | Program output: 37                 
Correct output: 1                   | Program output: 13                 
Correct output: -90                 | Program output: 48                 
Correct output: 16                  | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 60                 
Correct output: -71                 | Program output: 18                 
Correct output: -97                 | Program output: 72                 
Correct output: -45                 | Program output: -12                
Correct output: -87                 | Program output: 27                 
Correct output: -90                 | Program output: 87                 
Correct output: -58                 | Program output: 96                 
Correct output: -52                 | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -4                 
Correct output: -72                 | Program output: 7                  
Correct output: -92                 | Program output: -54                
Correct output: -98                 | Program output: -53                
Correct output: -22                 | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -89                 | Program output: -56                
Correct output: 22                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -30                
Correct output: -8                  | Program output: 65                 
Correct output: -36                 | Program output: -3                 
Correct output: -74                 | Program output: -38                
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -10                
Correct output: -30                 | Program output: 14                 
Correct output: -76                 | Program output: 79                 
Correct output: -56                 | Program output: 6                  
Correct output: -1                  | Program output: 48                 
Correct output: -47                 | Program output: 28                 
Correct output: -21                 | Program output: 70                 
Correct output: -62                 | Program output: -28                
Correct output: -21                 | Program output: 68                 
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: 80                 
Correct output: -65                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -23                 | Program output: 44                 
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -8                  | Program output: 8                  
Correct output: -7                  | Program output: 88                 
Correct output: -94                 | Program output: 24                 
Correct output: -88                 | Program output: -11                
Correct output: -22                 | Program output: 3                  
Correct output: 23                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 12                 
Correct output: -59                 | Program output: -33                
Correct output: -84                 | Program output: -39                
Correct output: -71                 | Program output: 32                 
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) (print_integer))
Lexicase best errors: [1 1 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) (print_integer))
Zero cases best errors: [1 1 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (526 102 103 300 300 1 1 103 300 822)
Population mean number of elite cases: 2.56
Count of perfect (error zero) individuals by case: (526 102 103 300 300 1 1 103 300 822)
Population mean number of perfect (error zero) cases: 2.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) (print_integer))
Errors: [1 1 1 0 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 12
Size: 15
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.442
Median total errors in population: 8
Error averages by case: (0.474 0.898 0.897 0.7 0.7 0.999 0.999 0.897 0.7 0.178)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.023
Average program size in population (points): 17.483
Average percent parens in population: 0.195
Minimum age in population: 49.07235816121101
Maximum age in population: 56.69901918998221
Average age in population: 54.54653367414973
Median age in population: 54.61259656070615
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.425
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 13616414
--- Timings ---
Current time: 1559584731053 milliseconds
Total Time:          99.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.3 seconds, 74.9%
Fitness Testing:     13.7 seconds, 13.8%
Report:              11.2 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [1 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [1 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 281 281 281 281 340 281 280 281 115)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (180 281 281 281 281 340 281 280 281 115)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (boolean_invert_second_then_and -46 in2) (integer_dup_times exec_yankdup integer_mult boolean_stackdepth) print_integer)
Errors: [1 0 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 16
Size: 19
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 7.399
Median total errors in population: 9
Error averages by case: (0.82 0.719 0.719 0.719 0.719 0.66 0.719 0.72 0.719 0.885)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.446
Average program size in population (points): 15.563
Average percent parens in population: 0.202
Minimum age in population: 53.03578466977342
Maximum age in population: 58.0331358970725
Average age in population: 56.22593783112177
Median age in population: 56.34381301160465
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.378
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.348
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 13752384
--- Timings ---
Current time: 1559584733210 milliseconds
Total Time:         101.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.2 seconds, 75.1%
Fitness Testing:     13.8 seconds, 13.6%
Report:              11.3 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_518} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_dup integer_max integer_inc boolean_flush boolean_and boolean_dup_items in1 print_integer integer_gte boolean_invert_first_then_and integer_max integer_fromboolean exec_yankdup boolean_dup tagged_518 exec_yankdup boolean_invert_second_then_and exec_flush)
Lexicase best errors: [1 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 19
Percent parens: 0.053
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_518} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_dup integer_max integer_inc boolean_flush boolean_and boolean_dup_items in1 print_integer integer_gte boolean_invert_first_then_and integer_max integer_fromboolean exec_yankdup boolean_dup tagged_518 exec_yankdup boolean_invert_second_then_and exec_flush)
Zero cases best errors: [1 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 19
Percent parens: 0.053
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 119 119 119 119 96 119 101 604 825)
Population mean number of elite cases: 2.32
Count of perfect (error zero) individuals by case: (101 119 119 119 119 96 119 101 604 825)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1})
Best program: (exec_if (exec_yank integer_empty) (exec_do*count () in1 print_integer) exec_shove (integer_gt -9 exec_do*count (in1)))
Errors: [1 0 0 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 11
Size: 17
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 7.678
Median total errors in population: 8
Error averages by case: (0.899 0.881 0.881 0.881 0.881 0.904 0.881 0.899 0.396 0.175)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 13.298
Average program size in population (points): 16.623
Average percent parens in population: 0.200
Minimum age in population: 54.03578466977342
Maximum age in population: 59.45379437023803
Average age in population: 57.63788602413892
Median age in population: 57.6622850006097
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.378
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.342
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 13896251
--- Timings ---
Current time: 1559584735727 milliseconds
Total Time:         104.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.5 seconds, 75.5%
Fitness Testing:     14.0 seconds, 13.4%
Report:              11.4 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: 31                 
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 55                 
Correct output: 4                   | Program output: 58                 
Correct output: 2                   | Program output: 65                 
Correct output: 33                  | Program output: 45                 
Correct output: 9                   | Program output: 45                 
Correct output: 1                   | Program output: 73                 
Correct output: 5                   | Program output: 36                 
Correct output: 18                  | Program output: 57                 
Correct output: 14                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 49                 
Correct output: 5                   | Program output: 26                 
Correct output: 25                  | Program output: 54                 
Correct output: 28                  | Program output: 46                 
Correct output: 23                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 67                 
Correct output: 32                  | Program output: 37                 
Correct output: 1                   | Program output: 13                 
Correct output: -90                 | Program output: 48                 
Correct output: 16                  | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 60                 
Correct output: -71                 | Program output: 18                 
Correct output: -97                 | Program output: 72                 
Correct output: -45                 | Program output: -12                
Correct output: -87                 | Program output: 27                 
Correct output: -90                 | Program output: 87                 
Correct output: -58                 | Program output: 96                 
Correct output: -52                 | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -4                 
Correct output: -72                 | Program output: 7                  
Correct output: -92                 | Program output: -54                
Correct output: -98                 | Program output: -53                
Correct output: -22                 | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -89                 | Program output: -56                
Correct output: 22                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -30                
Correct output: -8                  | Program output: 65                 
Correct output: -36                 | Program output: -3                 
Correct output: -74                 | Program output: -38                
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -10                
Correct output: -30                 | Program output: 14                 
Correct output: -76                 | Program output: 79                 
Correct output: -56                 | Program output: 6                  
Correct output: -1                  | Program output: 48                 
Correct output: -47                 | Program output: 28                 
Correct output: -21                 | Program output: 70                 
Correct output: -62                 | Program output: -28                
Correct output: -21                 | Program output: 68                 
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: 80                 
Correct output: -65                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -23                 | Program output: 44                 
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -8                  | Program output: 8                  
Correct output: -7                  | Program output: 88                 
Correct output: -94                 | Program output: 24                 
Correct output: -88                 | Program output: -11                
Correct output: -22                 | Program output: 3                  
Correct output: 23                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 12                 
Correct output: -59                 | Program output: -33                
Correct output: -84                 | Program output: -39                
Correct output: -71                 | Program output: 32                 
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer})
Lexicase best program: (exec_empty integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) (print_integer))
Lexicase best errors: [0 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer})
Zero cases best program: (exec_empty integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) (print_integer))
Zero cases best errors: [0 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 201 927 202 524 525 109 929 201 94)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (201 201 927 202 524 525 109 929 201 94)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank in3 integer_fromboolean exec_swap (in3 -46 in2 integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) (print_integer))
Errors: [0 0 0 0 1 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.087
Median total errors in population: 6
Error averages by case: (0.799 0.799 0.073 0.798 0.476 0.475 0.891 0.071 0.799 0.906)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.989
Average program size in population (points): 16.267
Average percent parens in population: 0.200
Minimum age in population: 55.39800184319029
Maximum age in population: 61.28054958211578
Average age in population: 59.11377187788992
Median age in population: 59.17375386679123
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.379
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.34
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 14035196
--- Timings ---
Current time: 1559584737814 milliseconds
Total Time:         106.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.3 seconds, 75.7%
Fitness Testing:     14.1 seconds, 13.3%
Report:              11.5 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_not} {:close 0, :instruction 91} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_inc} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_gte boolean_shove boolean_or boolean_not 91 boolean_and boolean_dup integer_max integer_inc boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 integer_gte exec_stackdepth)
Lexicase best errors: [0 1 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.050
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_not} {:close 0, :instruction 91} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_inc} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_gte boolean_shove boolean_or boolean_not 91 boolean_and boolean_dup integer_max integer_inc boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup boolean_or -9 integer_gte exec_stackdepth)
Zero cases best errors: [0 1 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.050
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 448 448 109 450 109 227 228 144 227)
Population mean number of elite cases: 2.62
Count of perfect (error zero) individuals by case: (227 448 448 109 450 109 227 228 144 227)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_rot in3 integer_mult exec_swap (in3 -46 integer_shove in1 print_integer) ())
Errors: [0 1 1 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 11
Size: 14
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.383
Median total errors in population: 7
Error averages by case: (0.773 0.552 0.552 0.891 0.55 0.891 0.773 0.772 0.856 0.773)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.322
Average program size in population (points): 15.408
Average percent parens in population: 0.201
Minimum age in population: 57.22394486561097
Maximum age in population: 62.64409193475331
Average age in population: 60.62038962285557
Median age in population: 60.68830661974062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.356
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 127
Syntactic diversity (% unique Push programs):	 0.317
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 14165013
--- Timings ---
Current time: 1559584740866 milliseconds
Total Time:         109.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.1 seconds, 76.2%
Fitness Testing:     14.2 seconds, 13.1%
Report:              11.6 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: 31                 
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 55                 
Correct output: 4                   | Program output: 58                 
Correct output: 2                   | Program output: 65                 
Correct output: 33                  | Program output: 45                 
Correct output: 9                   | Program output: 45                 
Correct output: 1                   | Program output: 73                 
Correct output: 5                   | Program output: 36                 
Correct output: 18                  | Program output: 57                 
Correct output: 14                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 49                 
Correct output: 5                   | Program output: 26                 
Correct output: 25                  | Program output: 54                 
Correct output: 28                  | Program output: 46                 
Correct output: 23                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 67                 
Correct output: 32                  | Program output: 37                 
Correct output: 1                   | Program output: 13                 
Correct output: -90                 | Program output: 48                 
Correct output: 16                  | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 60                 
Correct output: -71                 | Program output: 18                 
Correct output: -97                 | Program output: 72                 
Correct output: -45                 | Program output: -12                
Correct output: -87                 | Program output: 27                 
Correct output: -90                 | Program output: 87                 
Correct output: -58                 | Program output: 96                 
Correct output: -52                 | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -4                 
Correct output: -72                 | Program output: 7                  
Correct output: -92                 | Program output: -54                
Correct output: -98                 | Program output: -53                
Correct output: -22                 | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -89                 | Program output: -56                
Correct output: 22                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -30                
Correct output: -8                  | Program output: 65                 
Correct output: -36                 | Program output: -3                 
Correct output: -74                 | Program output: -38                
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -10                
Correct output: -30                 | Program output: 14                 
Correct output: -76                 | Program output: 79                 
Correct output: -56                 | Program output: 6                  
Correct output: -1                  | Program output: 48                 
Correct output: -47                 | Program output: 28                 
Correct output: -21                 | Program output: 70                 
Correct output: -62                 | Program output: -28                
Correct output: -21                 | Program output: 68                 
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: 80                 
Correct output: -65                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -23                 | Program output: 44                 
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -8                  | Program output: 8                  
Correct output: -7                  | Program output: 88                 
Correct output: -94                 | Program output: 24                 
Correct output: -88                 | Program output: -11                
Correct output: -22                 | Program output: 3                  
Correct output: 23                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 12                 
Correct output: -59                 | Program output: -33                
Correct output: -84                 | Program output: -39                
Correct output: -71                 | Program output: 32                 
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) (print_integer))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) (print_integer))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (645 249 396 909 915 250 250 249 397 915)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (645 249 396 909 915 250 250 249 397 915)
Population mean number of perfect (error zero) cases: 5.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 exec_while (in2) integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) (print_integer))
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 4.825
Median total errors in population: 4
Error averages by case: (0.355 0.751 0.604 0.091 0.085 0.75 0.75 0.751 0.603 0.085)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.692
Average program size in population (points): 15.835
Average percent parens in population: 0.199
Minimum age in population: 59.43751920573413
Maximum age in population: 64.17385901676244
Average age in population: 62.14343013405428
Median age in population: 62.263760416374
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.427
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.379
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 14306021
--- Timings ---
Current time: 1559584743114 milliseconds
Total Time:         111.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.1 seconds, 76.4%
Fitness Testing:     14.4 seconds, 12.9%
Report:              11.8 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_467} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_451})
Lexicase best program: (exec_if (exec_yank integer_empty integer_sub in1) (print_integer) tag_exec_467 (integer_sub) exec_k (tagged_451) ())
Lexicase best errors: [0 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 16
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_467} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_451})
Zero cases best program: (exec_if (exec_yank integer_empty integer_sub in1) (print_integer) tag_exec_467 (integer_sub) exec_k (tagged_451) ())
Zero cases best errors: [0 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 16
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (304 305 7 2 304 305 7 304 8 305)
Population mean number of elite cases: 1.85
Count of perfect (error zero) individuals by case: (304 305 7 2 304 305 7 304 8 305)
Population mean number of perfect (error zero) cases: 1.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or})
Best program: (in3 boolean_dup_items in1 print_integer boolean_dup boolean_or)
Errors: [0 0 1 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 6
Size: 7
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 8.149
Median total errors in population: 10
Error averages by case: (0.696 0.695 0.993 0.998 0.696 0.695 0.993 0.696 0.992 0.695)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.811
Average program size in population (points): 15.985
Average percent parens in population: 0.199
Minimum age in population: 60.46230367289536
Maximum age in population: 65.59192123614775
Average age in population: 63.6229975179829
Median age in population: 63.64512243047602
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.372
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.329
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 14444261
--- Timings ---
Current time: 1559584745174 milliseconds
Total Time:         113.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.9 seconds, 76.6%
Fitness Testing:     14.6 seconds, 12.8%
Report:              11.9 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1})
Lexicase best program: (boolean_dup integer_max boolean_yank exec_if (print_integer integer_empty) (exec_do*count () in1 print_integer) exec_shove (boolean_or -9 exec_do*count (in1)))
Lexicase best errors: [1 0 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1})
Zero cases best program: (boolean_dup integer_max boolean_yank exec_if (print_integer integer_empty) (exec_do*count () in1 print_integer) exec_shove (boolean_or -9 exec_do*count (in1)))
Zero cases best errors: [1 0 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 550 550 550 247 553 553 134 384 550)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (134 550 550 550 247 553 553 134 384 550)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 1, :instruction in3} {:close 3, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2 in1 print_integer) ())
Errors: [1 0 0 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 11
Size: 14
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 5.795
Median total errors in population: 4
Error averages by case: (0.866 0.45 0.45 0.45 0.753 0.447 0.447 0.866 0.616 0.45)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.639
Average program size in population (points): 15.629
Average percent parens in population: 0.191
Minimum age in population: 61.57361802475134
Maximum age in population: 67.08754751145545
Average age in population: 65.0633885949413
Median age in population: 65.13844425163666
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.314
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.277
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 14582410
--- Timings ---
Current time: 1559584746969 milliseconds
Total Time:         115.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.4 seconds, 76.8%
Fitness Testing:     14.7 seconds, 12.8%
Report:              11.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 84                 
Correct output: -18                 | Program output: 54                 
Correct output: -100                | Program output: 18                 
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 68                 
Correct output: 2                   | Program output: 75                 
Correct output: 33                  | Program output: 76                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 55                 
Correct output: 5                   | Program output: 57                 
Correct output: 18                  | Program output: 41                 
Correct output: 14                  | Program output: 60                 
Correct output: 2                   | Program output: 14                 
Correct output: 31                  | Program output: 40                 
Correct output: 24                  | Program output: 25                 
Correct output: 5                   | Program output: 93                 
Correct output: 25                  | Program output: 25                 
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 45                 
Correct output: 5                   | Program output: 24                 
Correct output: 19                  | Program output: 65                 
Correct output: 32                  | Program output: 46                 
Correct output: 1                   | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: 16                  | Program output: 22                 
Correct output: -84                 | Program output: -74                
Correct output: 38                  | Program output: 65                 
Correct output: -71                 | Program output: 61                 
Correct output: -97                 | Program output: 64                 
Correct output: -45                 | Program output: 63                 
Correct output: -87                 | Program output: 69                 
Correct output: -90                 | Program output: -90                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 69                 
Correct output: -31                 | Program output: 83                 
Correct output: -72                 | Program output: 72                 
Correct output: -92                 | Program output: -54                
Correct output: -98                 | Program output: 19                 
Correct output: -22                 | Program output: -22                
Correct output: -92                 | Program output: 83                 
Correct output: -61                 | Program output: 41                 
Correct output: -89                 | Program output: 11                 
Correct output: 22                  | Program output: 22                 
Correct output: -95                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: -8                  | Program output: 67                 
Correct output: -36                 | Program output: -36                
Correct output: -74                 | Program output: 78                 
Correct output: -75                 | Program output: 72                 
Correct output: -98                 | Program output: 28                 
Correct output: -30                 | Program output: 8                  
Correct output: -76                 | Program output: -55                
Correct output: -56                 | Program output: 18                 
Correct output: -1                  | Program output: -1                 
Correct output: -47                 | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: 68                 
Correct output: -21                 | Program output: -12                
Correct output: -42                 | Program output: -30                
Correct output: -82                 | Program output: 17                 
Correct output: -65                 | Program output: -14                
Correct output: -79                 | Program output: 62                 
Correct output: -6                  | Program output: -6                 
Correct output: -62                 | Program output: 97                 
Correct output: -23                 | Program output: 59                 
Correct output: -69                 | Program output: 35                 
Correct output: -55                 | Program output: -41                
Correct output: -88                 | Program output: -69                
Correct output: -8                  | Program output: 52                 
Correct output: -7                  | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -21                
Correct output: -22                 | Program output: -7                 
Correct output: 23                  | Program output: 54                 
Correct output: -98                 | Program output: 70                 
Correct output: -69                 | Program output: 82                 
Correct output: -87                 | Program output: -30                
Correct output: -17                 | Program output: 21                 
Correct output: -59                 | Program output: 64                 
Correct output: -84                 | Program output: -27                
Correct output: -71                 | Program output: -33                
Correct output: -86                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in4 print_integer boolean_dup integer_mult print_boolean exec_k (-9 exec_do*count (boolean_dup_items)) ())
Lexicase best errors: [1 1 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 13
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in4 print_integer boolean_dup integer_mult print_boolean exec_k (-9 exec_do*count (boolean_dup_items)) ())
Zero cases best errors: [1 1 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 13
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 940 128 251 251 251 558 3 128)
Population mean number of elite cases: 2.52
Count of perfect (error zero) individuals by case: (3 3 940 128 251 251 251 558 3 128)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Best program: (in4 print_integer boolean_dup integer_mult print_boolean boolean_or -9 exec_do*count (boolean_dup_items))
Errors: [1 1 0 1 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 9
Size: 11
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 7.484
Median total errors in population: 8
Error averages by case: (0.997 0.997 0.06 0.872 0.749 0.749 0.749 0.442 0.997 0.872)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 11.903
Average program size in population (points): 14.78
Average percent parens in population: 0.194
Minimum age in population: 63.81697043513657
Maximum age in population: 68.57897742434278
Average age in population: 66.62324306537754
Median age in population: 66.68788952865208
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 216
Genome diversity (% unique genomes):	 0.35
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.303
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 14713847
--- Timings ---
Current time: 1559584749273 milliseconds
Total Time:         117.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.5 seconds, 77.0%
Fitness Testing:     14.9 seconds, 12.6%
Report:              12.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 84                 
Correct output: -18                 | Program output: 54                 
Correct output: -100                | Program output: 18                 
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 68                 
Correct output: 2                   | Program output: 75                 
Correct output: 33                  | Program output: 76                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 55                 
Correct output: 5                   | Program output: 57                 
Correct output: 18                  | Program output: 41                 
Correct output: 14                  | Program output: 60                 
Correct output: 2                   | Program output: 14                 
Correct output: 31                  | Program output: 40                 
Correct output: 24                  | Program output: 25                 
Correct output: 5                   | Program output: 93                 
Correct output: 25                  | Program output: 25                 
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 45                 
Correct output: 5                   | Program output: 24                 
Correct output: 19                  | Program output: 65                 
Correct output: 32                  | Program output: 46                 
Correct output: 1                   | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: 16                  | Program output: 22                 
Correct output: -84                 | Program output: -74                
Correct output: 38                  | Program output: 65                 
Correct output: -71                 | Program output: 61                 
Correct output: -97                 | Program output: 64                 
Correct output: -45                 | Program output: 63                 
Correct output: -87                 | Program output: 69                 
Correct output: -90                 | Program output: -90                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 69                 
Correct output: -31                 | Program output: 83                 
Correct output: -72                 | Program output: 72                 
Correct output: -92                 | Program output: -54                
Correct output: -98                 | Program output: 19                 
Correct output: -22                 | Program output: -22                
Correct output: -92                 | Program output: 83                 
Correct output: -61                 | Program output: 41                 
Correct output: -89                 | Program output: 11                 
Correct output: 22                  | Program output: 22                 
Correct output: -95                 | Program output: 67                 
Correct output: -92                 | Program output: -92                
Correct output: -8                  | Program output: 67                 
Correct output: -36                 | Program output: -36                
Correct output: -74                 | Program output: 78                 
Correct output: -75                 | Program output: 72                 
Correct output: -98                 | Program output: 28                 
Correct output: -30                 | Program output: 8                  
Correct output: -76                 | Program output: -55                
Correct output: -56                 | Program output: 18                 
Correct output: -1                  | Program output: -1                 
Correct output: -47                 | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: 68                 
Correct output: -21                 | Program output: -12                
Correct output: -42                 | Program output: -30                
Correct output: -82                 | Program output: 17                 
Correct output: -65                 | Program output: -14                
Correct output: -79                 | Program output: 62                 
Correct output: -6                  | Program output: -6                 
Correct output: -62                 | Program output: 97                 
Correct output: -23                 | Program output: 59                 
Correct output: -69                 | Program output: 35                 
Correct output: -55                 | Program output: -41                
Correct output: -88                 | Program output: -69                
Correct output: -8                  | Program output: 52                 
Correct output: -7                  | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -21                
Correct output: -22                 | Program output: -7                 
Correct output: 23                  | Program output: 54                 
Correct output: -98                 | Program output: 70                 
Correct output: -69                 | Program output: 82                 
Correct output: -87                 | Program output: -30                
Correct output: -17                 | Program output: 21                 
Correct output: -59                 | Program output: 64                 
Correct output: -84                 | Program output: -27                
Correct output: -71                 | Program output: -33                
Correct output: -86                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or})
Lexicase best program: (in4 print_integer boolean_dup integer_mult print_boolean boolean_or)
Lexicase best errors: [0 1 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 7
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or})
Zero cases best program: (in4 print_integer boolean_dup integer_mult print_boolean boolean_or)
Zero cases best errors: [0 1 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 7
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (915 94 302 326 821 94 193 821 94 326)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (915 94 302 326 821 94 193 821 94 326)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Best program: (in4 print_integer boolean_dup integer_mult print_boolean boolean_or -9 exec_do*count (boolean_dup_items))
Errors: [0 1 1 0 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 9
Size: 11
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.014
Median total errors in population: 6
Error averages by case: (0.085 0.906 0.698 0.674 0.179 0.906 0.807 0.179 0.906 0.674)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.916
Average program size in population (points): 16.021
Average percent parens in population: 0.188
Minimum age in population: 65.16693513708924
Maximum age in population: 69.76782769951473
Average age in population: 67.788296615994
Median age in population: 67.84761985088957
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 251
Genome diversity (% unique genomes):	 0.307
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 269
Syntactic diversity (% unique Push programs):	 0.272
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 14852038
--- Timings ---
Current time: 1559584751518 milliseconds
Total Time:         119.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.5 seconds, 77.2%
Fitness Testing:     15.0 seconds, 12.5%
Report:              12.1 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_yank integer_empty exec_do*count () in1 print_integer integer_flush)
Lexicase best errors: [0 1 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 13
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_yank integer_empty exec_do*count () in1 print_integer integer_flush)
Zero cases best errors: [0 1 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 13
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 128 355 290 928 291 355 154 128 292)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (291 128 355 290 928 291 355 154 128 292)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 3, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1})
Best program: (boolean_dup integer_max boolean_yank integer_lte integer_mult exec_swap (boolean_yank in3 integer_mult) () exec_swap (in3 -46 in2 integer_fromboolean in1 print_integer exec_shove (boolean_or -9 exec_do*count (in1))) ())
Errors: [0 1 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 21
Size: 28
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.788
Median total errors in population: 7
Error averages by case: (0.709 0.872 0.645 0.71 0.072 0.709 0.645 0.846 0.872 0.708)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.134
Average program size in population (points): 15.076
Average percent parens in population: 0.191
Minimum age in population: 66.16693513708924
Maximum age in population: 71.18332093343483
Average age in population: 69.37145021357676
Median age in population: 69.44614744847675
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 254
Genome diversity (% unique genomes):	 0.322
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 269
Syntactic diversity (% unique Push programs):	 0.287
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 14983580
--- Timings ---
Current time: 1559584754089 milliseconds
Total Time:         122.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.8 seconds, 77.5%
Fitness Testing:     15.2 seconds, 12.4%
Report:              12.2 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (in1 print_integer boolean_xor exec_dup_times (integer_fromboolean))
Lexicase best errors: [1 0 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 7
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (in1 print_integer boolean_xor exec_dup_times (integer_fromboolean))
Zero cases best errors: [1 0 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 7
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 437 213 437 197 213 437 943 198 436)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (213 437 213 437 197 213 437 943 198 436)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 2, :instruction integer_inc} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1})
Best program: (boolean_dup integer_max integer_inc boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup -9 exec_do*count (in1))
Errors: [1 0 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 12
Size: 14
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.276
Median total errors in population: 6
Error averages by case: (0.787 0.563 0.787 0.563 0.803 0.787 0.563 0.057 0.802 0.564)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.682
Average program size in population (points): 15.864
Average percent parens in population: 0.198
Minimum age in population: 67.43968893327383
Maximum age in population: 72.54600739321648
Average age in population: 70.82949573896063
Median age in population: 70.9243774824248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.356
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.315
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 15118188
--- Timings ---
Current time: 1559584756662 milliseconds
Total Time:         124.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.1 seconds, 77.8%
Fitness Testing:     15.3 seconds, 12.3%
Report:              12.4 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction -46} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Lexicase best program: (in3 boolean_flush exec_s_when_autoconstructing (boolean_dup_items) (in1 in4 -46 integer_fromboolean in1 print_integer) ())
Lexicase best errors: [0 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 14
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction -46} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Zero cases best program: (in3 boolean_flush exec_s_when_autoconstructing (boolean_dup_items) (in1 in4 -46 integer_fromboolean in1 print_integer) ())
Zero cases best errors: [0 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 14
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (415 196 326 414 326 1 937 1 415 415)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (415 196 326 414 326 1 937 1 415 415)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction in1})
Best program: (integer_gte boolean_shove boolean_or exec_if (exec_yank integer_empty) (exec_do*count (in1 print_integer) exec_shove (integer_sub exec_k (exec_noop) (boolean_empty) boolean_xor) boolean_or boolean_rot print_integer exec_do*range (integer_mod in1)))
Errors: [0 1 1 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 6.554
Median total errors in population: 7
Error averages by case: (0.585 0.804 0.674 0.586 0.674 0.999 0.063 0.999 0.585 0.585)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 11.922
Average program size in population (points): 14.837
Average percent parens in population: 0.194
Minimum age in population: 68.43968893327383
Maximum age in population: 74.28608873928768
Average age in population: 72.35282687802373
Median age in population: 72.45093427108749
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.367
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 218
Syntactic diversity (% unique Push programs):	 0.331
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 15248766
--- Timings ---
Current time: 1559584759268 milliseconds
Total Time:         127.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.5 seconds, 78.0%
Fitness Testing:     15.4 seconds, 12.1%
Report:              12.5 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 2, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean) (exec_yankdup integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [0 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 2, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean) (exec_yankdup integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [0 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (105 104 414 104 105 414 105 206 221 221)
Population mean number of elite cases: 2.00
Count of perfect (error zero) individuals by case: (105 104 414 104 105 414 105 206 221 221)
Population mean number of perfect (error zero) cases: 2.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank in3 boolean_flush exec_swap (in3 -46 in2 integer_fromboolean) (boolean_or -46 in2 print_integer))
Errors: [0 0 1 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 8.001
Median total errors in population: 8
Error averages by case: (0.895 0.896 0.586 0.896 0.895 0.586 0.895 0.794 0.779 0.779)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 11.895
Average program size in population (points): 14.661
Average percent parens in population: 0.186
Minimum age in population: 70.72931059577243
Maximum age in population: 75.414462544149
Average age in population: 73.66017735412532
Median age in population: 73.69404185935186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 173
Genome diversity (% unique genomes):	 0.356
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.325
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 15379983
--- Timings ---
Current time: 1559584761492 milliseconds
Total Time:         129.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.4 seconds, 78.2%
Fitness Testing:     15.6 seconds, 12.0%
Report:              12.6 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (integer_dup_items integer_fromboolean exec_yankdup in2) (integer_fromboolean integer_gte integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [0 0 0 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (integer_dup_items integer_fromboolean exec_yankdup in2) (integer_fromboolean integer_gte integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [0 0 0 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (427 427 428 181 182 204 106 181 106 427)
Population mean number of elite cases: 2.67
Count of perfect (error zero) individuals by case: (427 427 428 181 182 204 106 181 106 427)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer})
Best program: (in4 in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Errors: [0 0 0 1 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 12
Size: 15
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.331
Median total errors in population: 7
Error averages by case: (0.573 0.573 0.572 0.819 0.818 0.796 0.894 0.819 0.894 0.573)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.677
Average program size in population (points): 15.572
Average percent parens in population: 0.183
Minimum age in population: 72.68710385639017
Maximum age in population: 77.03754816138682
Average age in population: 75.17508508951401
Median age in population: 75.27079074798469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.364
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.333
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 15521322
--- Timings ---
Current time: 1559584763727 milliseconds
Total Time:         131.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.4 seconds, 78.4%
Fitness Testing:     15.7 seconds, 11.9%
Report:              12.7 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in4 print_integer exec_s (integer_mult print_boolean exec_yankdup integer_mult exec_k_when_autoconstructing () ()) () ())
Lexicase best errors: [0 1 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 14
Percent parens: 0.429
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in4 print_integer exec_s (integer_mult print_boolean exec_yankdup integer_mult exec_k_when_autoconstructing () ()) () ())
Zero cases best errors: [0 1 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 14
Percent parens: 0.429
--- Lexicase Population Statistics ---
Count of elite individuals by case: (657 353 101 287 287 287 202 101 657 287)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (657 353 101 287 287 287 202 101 657 287)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_451} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush})
Best program: (in1 print_integer boolean_invert_second_then_and integer_yank integer_yank integer_max tagged_451 exec_yankdup boolean_stackdepth exec_flush)
Errors: [1 1 1 0 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 10
Size: 11
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 6.781
Median total errors in population: 7
Error averages by case: (0.343 0.647 0.899 0.713 0.713 0.713 0.798 0.899 0.343 0.713)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.763
Average program size in population (points): 15.77
Average percent parens in population: 0.186
Minimum age in population: 73.77135919980265
Maximum age in population: 78.57987237698276
Average age in population: 76.6453808144731
Median age in population: 76.72736584983896
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.377
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.35
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 15668962
--- Timings ---
Current time: 1559584766230 milliseconds
Total Time:         134.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       105.6 seconds, 78.6%
Fitness Testing:     15.9 seconds, 11.8%
Report:              12.8 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_518})
Lexicase best program: (exec_if () (boolean_swap integer_empty in2 in1 print_integer) exec_shove () integer_sub exec_k (tagged_518) ())
Lexicase best errors: [1 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_518})
Zero cases best program: (exec_if () (boolean_swap integer_empty in2 in1 print_integer) exec_shove () integer_sub exec_k (tagged_518) ())
Zero cases best errors: [1 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (276 144 147 276 276 675 384 384 384 383)
Population mean number of elite cases: 3.33
Count of perfect (error zero) individuals by case: (276 144 147 276 276 675 384 384 384 383)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_inc} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1})
Best program: (exec_stackdepth integer_max integer_inc boolean_flush boolean_and boolean_dup_items in1 print_integer boolean_dup -9 exec_do*count (in1))
Errors: [1 1 1 1 1 0 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 12
Size: 14
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.671
Median total errors in population: 7
Error averages by case: (0.724 0.856 0.853 0.724 0.724 0.325 0.616 0.616 0.616 0.617)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 11.853
Average program size in population (points): 14.774
Average percent parens in population: 0.193
Minimum age in population: 74.77135919980265
Maximum age in population: 80.122030840249
Average age in population: 78.20486512393036
Median age in population: 78.27796259544714
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.4
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.358
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 15806575
--- Timings ---
Current time: 1559584768777 milliseconds
Total Time:         137.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.9 seconds, 78.8%
Fitness Testing:     16.0 seconds, 11.7%
Report:              12.9 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (in1 print_integer boolean_invert_second_then_and integer_mult exec_swap (in3 -46 in2 integer_fromboolean) ())
Lexicase best errors: [1 0 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 12
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (in1 print_integer boolean_invert_second_then_and integer_mult exec_swap (in3 -46 in2 integer_fromboolean) ())
Zero cases best errors: [1 0 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 12
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 664 110 101 452 110 450 452 452 101)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (101 664 110 101 452 110 450 452 452 101)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Best program: (in3 boolean_flush exec_s_when_autoconstructing (boolean_dup_items) (in1 boolean_and boolean_dup_items in1 print_integer boolean_dup integer_mult print_boolean boolean_yank -9 exec_do*count (boolean_dup_items)) ())
Errors: [1 0 1 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.007
Median total errors in population: 6
Error averages by case: (0.899 0.336 0.89 0.899 0.548 0.89 0.55 0.548 0.548 0.899)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 11.802
Average program size in population (points): 14.855
Average percent parens in population: 0.200
Minimum age in population: 75.77135919980265
Maximum age in population: 81.48169422050373
Average age in population: 79.7875518744239
Median age in population: 79.89215777503972
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.379
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 15942056
--- Timings ---
Current time: 1559584771365 milliseconds
Total Time:         139.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       110.3 seconds, 79.0%
Fitness Testing:     16.2 seconds, 11.6%
Report:              13.0 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -47} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -47 in2 integer_fromboolean) (exec_yankdup integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [0 0 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -47} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -47 in2 integer_fromboolean) (exec_yankdup integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [0 0 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (699 504 264 432 264 264 504 264 432 432)
Population mean number of elite cases: 4.06
Count of perfect (error zero) individuals by case: (699 504 264 432 264 264 504 264 432 432)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean boolean_or -46 in2 print_integer) ())
Errors: [0 0 0 1 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 5.941
Median total errors in population: 6
Error averages by case: (0.301 0.496 0.736 0.568 0.736 0.736 0.496 0.736 0.568 0.568)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 13.23
Average program size in population (points): 16.464
Average percent parens in population: 0.192
Minimum age in population: 78.15036799738954
Maximum age in population: 83.24951102759049
Average age in population: 81.26398122843526
Median age in population: 81.30496596385544
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.411
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.371
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 16096737
--- Timings ---
Current time: 1559584773524 milliseconds
Total Time:         141.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       112.1 seconds, 79.1%
Fitness Testing:     16.4 seconds, 11.5%
Report:              13.1 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean) (exec_yankdup integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [0 0 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean) (exec_yankdup integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [0 0 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (645 934 290 923 633 290 1000 633 1000 932)
Population mean number of elite cases: 7.28
Count of perfect (error zero) individuals by case: (645 934 290 923 633 290 0 633 0 932)
Population mean number of perfect (error zero) cases: 5.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_mod in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean) (exec_yankdup integer_mult boolean_stackdepth) print_integer)
Errors: [0 0 1 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 13
Size: 16
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 4.72
Median total errors in population: 4
Error averages by case: (0.355 0.066 0.71 0.077 0.367 0.71 1.0 0.367 1.0 0.068)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 13.924
Average program size in population (points): 17.293
Average percent parens in population: 0.192
Minimum age in population: 79.15036799738954
Maximum age in population: 84.64373568009871
Average age in population: 82.7662977119949
Median age in population: 82.8450562474154
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.396
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.359
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 16254061
--- Timings ---
Current time: 1559584775837 milliseconds
Total Time:         144.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       114.2 seconds, 79.3%
Fitness Testing:     16.5 seconds, 11.5%
Report:              13.3 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in1 print_integer boolean_dup integer_mult print_boolean boolean_or -9 exec_do*count (boolean_dup_items))
Lexicase best errors: [0 1 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 11
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in1 print_integer boolean_dup integer_mult print_boolean boolean_or -9 exec_do*count (boolean_dup_items))
Zero cases best errors: [0 1 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 11
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (905 522 391 389 1000 1000 908 910 914 519)
Population mean number of elite cases: 7.46
Count of perfect (error zero) individuals by case: (905 522 391 389 0 0 908 910 914 519)
Population mean number of perfect (error zero) cases: 5.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush})
Best program: (exec_if (exec_yank integer_empty exec_do*count () in1 print_integer) (integer_flush))
Errors: [0 1 0 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 7
Size: 11
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 4.542
Median total errors in population: 4
Error averages by case: (0.095 0.478 0.609 0.611 1.0 1.0 0.092 0.09 0.086 0.481)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 13.833
Average program size in population (points): 17.269
Average percent parens in population: 0.197
Minimum age in population: 80.80664190350454
Maximum age in population: 86.16985236395837
Average age in population: 84.31388644489871
Median age in population: 84.36076532453738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.44
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.401
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 16416126
--- Timings ---
Current time: 1559584777709 milliseconds
Total Time:         145.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       115.8 seconds, 79.3%
Fitness Testing:     16.7 seconds, 11.4%
Report:              13.4 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 2, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 2, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (in3 -46 in2) (integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) print_integer)
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 491 437 436 1000 4 438 931 1000 491)
Population mean number of elite cases: 6.23
Count of perfect (error zero) individuals by case: (0 491 437 436 0 4 438 931 0 491)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup boolean_dup boolean_empty boolean_yank in3 integer_mult exec_swap (integer_dup_items integer_fromboolean integer_lt in2) (integer_fromboolean integer_gte integer_mult boolean_stackdepth) print_integer)
Errors: [1 1 0 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 16
Size: 19
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 6.772
Median total errors in population: 7
Error averages by case: (1.0 0.509 0.563 0.564 1.0 0.996 0.562 0.069 1.0 0.509)
Error minima by case: (1 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 13.627
Average program size in population (points): 17.167
Average percent parens in population: 0.202
Minimum age in population: 82.46291580961953
Maximum age in population: 88.14560419550945
Average age in population: 85.80038347894062
Median age in population: 85.86335189142645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.456
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 16580338
--- Timings ---
Current time: 1559584779766 milliseconds
Total Time:         148.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       117.5 seconds, 79.4%
Fitness Testing:     16.9 seconds, 11.4%
Report:              13.5 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: 31                 
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 55                 
Correct output: 4                   | Program output: 58                 
Correct output: 2                   | Program output: 65                 
Correct output: 33                  | Program output: 45                 
Correct output: 9                   | Program output: 45                 
Correct output: 1                   | Program output: 73                 
Correct output: 5                   | Program output: 36                 
Correct output: 18                  | Program output: 57                 
Correct output: 14                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 49                 
Correct output: 5                   | Program output: 26                 
Correct output: 25                  | Program output: 54                 
Correct output: 28                  | Program output: 46                 
Correct output: 23                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 67                 
Correct output: 32                  | Program output: 37                 
Correct output: 1                   | Program output: 13                 
Correct output: -90                 | Program output: 48                 
Correct output: 16                  | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 60                 
Correct output: -71                 | Program output: 18                 
Correct output: -97                 | Program output: 72                 
Correct output: -45                 | Program output: -12                
Correct output: -87                 | Program output: 27                 
Correct output: -90                 | Program output: 87                 
Correct output: -58                 | Program output: 96                 
Correct output: -52                 | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -4                 
Correct output: -72                 | Program output: 7                  
Correct output: -92                 | Program output: -54                
Correct output: -98                 | Program output: -53                
Correct output: -22                 | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -89                 | Program output: -56                
Correct output: 22                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -30                
Correct output: -8                  | Program output: 65                 
Correct output: -36                 | Program output: -3                 
Correct output: -74                 | Program output: -38                
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -10                
Correct output: -30                 | Program output: 14                 
Correct output: -76                 | Program output: 79                 
Correct output: -56                 | Program output: 6                  
Correct output: -1                  | Program output: 48                 
Correct output: -47                 | Program output: 28                 
Correct output: -21                 | Program output: 70                 
Correct output: -62                 | Program output: -28                
Correct output: -21                 | Program output: 68                 
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: 80                 
Correct output: -65                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -23                 | Program output: 44                 
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -8                  | Program output: 8                  
Correct output: -7                  | Program output: 88                 
Correct output: -94                 | Program output: 24                 
Correct output: -88                 | Program output: -11                
Correct output: -22                 | Program output: 3                  
Correct output: 23                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 12                 
Correct output: -59                 | Program output: -33                
Correct output: -84                 | Program output: -39                
Correct output: -71                 | Program output: 32                 
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in3 boolean_dup integer_max boolean_yank in3 print_integer print_boolean boolean_or -9 integer_mod boolean_dup_items)
Lexicase best errors: [0 0 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 12
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in3 boolean_dup integer_max boolean_yank in3 print_integer print_boolean boolean_or -9 integer_mod boolean_dup_items)
Zero cases best errors: [0 0 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 12
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (153 590 337 153 342 590 338 1000 436 153)
Population mean number of elite cases: 4.09
Count of perfect (error zero) individuals by case: (153 590 337 153 342 590 338 0 436 153)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup boolean_yankdup boolean_yank in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) (print_integer))
Errors: [0 0 1 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.908
Median total errors in population: 7
Error averages by case: (0.847 0.41 0.663 0.847 0.658 0.41 0.662 1.0 0.564 0.847)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 13.4
Average program size in population (points): 16.722
Average percent parens in population: 0.194
Minimum age in population: 83.46291580961953
Maximum age in population: 89.46045126390088
Average age in population: 87.25711572219812
Median age in population: 87.30313726068255
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.409
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 16732287
--- Timings ---
Current time: 1559584782016 milliseconds
Total Time:         150.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       119.5 seconds, 79.6%
Fitness Testing:     17.0 seconds, 11.3%
Report:              13.6 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_not} {:close 1, :instruction 91} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 2, :instruction integer_inc} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_gte boolean_shove boolean_or boolean_not 91 boolean_and exec_s (integer_max integer_inc) () (integer_max) boolean_swap exec_swap (in1 print_integer boolean_dup boolean_or -9 integer_gte exec_stackdepth) ())
Lexicase best errors: [1 1 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_not} {:close 1, :instruction 91} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 2, :instruction integer_inc} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_gte boolean_shove boolean_or boolean_not 91 boolean_and exec_s (integer_max integer_inc) () (integer_max) boolean_swap exec_swap (in1 print_integer boolean_dup boolean_or -9 integer_gte exec_stackdepth) ())
Zero cases best errors: [1 1 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 146 1000 303 303 921 925 922 303 472)
Population mean number of elite cases: 6.30
Count of perfect (error zero) individuals by case: (0 146 0 303 303 921 925 922 303 472)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 3, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1})
Best program: (boolean_dup integer_max boolean_yank integer_lte integer_mult exec_swap (boolean_yank in3 integer_pop) () exec_swap (in3 -46 in2 integer_fromboolean in1 print_integer exec_shove (boolean_or -9 exec_do*count (in1))) ())
Errors: [1 1 1 0 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 21
Size: 28
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.705
Median total errors in population: 6
Error averages by case: (1.0 0.854 1.0 0.697 0.697 0.079 0.075 0.078 0.697 0.528)
Error minima by case: (1 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 12.496
Average program size in population (points): 15.435
Average percent parens in population: 0.185
Minimum age in population: 85.4559455460344
Maximum age in population: 90.73301348246163
Average age in population: 88.65220921489895
Median age in population: 88.72898965504135
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.413
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.374
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 16874864
--- Timings ---
Current time: 1559584784134 milliseconds
Total Time:         152.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       121.3 seconds, 79.7%
Fitness Testing:     17.2 seconds, 11.3%
Report:              13.7 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: 93                 
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: 74                 
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 90                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 70                 
Correct output: 33                  | Program output: 49                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 74                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 72                 
Correct output: 1                   | Program output: 54                 
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 56                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -38                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: 73                 
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 82                 
Correct output: -31                 | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 76                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 28                 
Correct output: -95                 | Program output: 29                 
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 98                 
Correct output: -74                 | Program output: -36                
Correct output: -75                 | Program output: 22                 
Correct output: -98                 | Program output: 84                 
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: 9                  
Correct output: -21                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: 79                 
Correct output: -42                 | Program output: 94                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 32                 
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 64                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: 67                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: 100                
Correct output: -69                 | Program output: 93                 
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -6                 
Correct output: -59                 | Program output: 38                 
Correct output: -84                 | Program output: 63                 
Correct output: -71                 | Program output: 21                 
Correct output: -86                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush})
Lexicase best program: (boolean_dup boolean_dup integer_empty exec_do*count () in1 print_integer integer_flush)
Lexicase best errors: [0 0 0 1 0 1 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 9
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush})
Zero cases best program: (boolean_dup boolean_dup integer_empty exec_do*count () in1 print_integer integer_flush)
Zero cases best errors: [0 0 0 1 0 1 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 9
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (571 759 571 1000 572 168 168 1000 1000 188)
Population mean number of elite cases: 6.00
Count of perfect (error zero) individuals by case: (571 759 571 0 572 168 168 0 0 188)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_or} {:close 0, :instruction -7} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_items})
Best program: (in1 print_integer boolean_dup integer_mult exec_s () (boolean_or) (-7 integer_lt boolean_dup_items))
Errors: [0 0 0 1 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 9
Size: 13
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.003
Median total errors in population: 6
Error averages by case: (0.429 0.241 0.429 1.0 0.428 0.832 0.832 1.0 1.0 0.812)
Error minima by case: (0 0 0 1 0 0 0 1 1 0)
Average genome size in population (length): 12.916
Average program size in population (points): 16.166
Average percent parens in population: 0.196
Minimum age in population: 87.73502348473394
Maximum age in population: 92.20488881864507
Average age in population: 90.2190052209406
Median age in population: 90.3334998342717
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.387
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 17034288
--- Timings ---
Current time: 1559584786307 milliseconds
Total Time:         154.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       123.2 seconds, 79.7%
Fitness Testing:     17.3 seconds, 11.2%
Report:              13.8 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 97                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 96                 
Correct output: 31                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 79                 
Correct output: 28                  | Program output: 96                 
Correct output: 23                  | Program output: 97                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 72                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: 13                 
Correct output: -98                 | Program output: -25                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: 1                  
Correct output: -61                 | Program output: 33                 
Correct output: -89                 | Program output: -29                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: 75                 
Correct output: -8                  | Program output: 77                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 86                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 96                 
Correct output: -1                  | Program output: 71                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -3                 
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -31                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: 84                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 41                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 36                 
Correct output: 23                  | Program output: 59                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 94                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max boolean_yank exec_shove (integer_sub) exec_swap (in3 -46 in2 print_integer) ())
Lexicase best errors: [0 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 14
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max boolean_yank exec_shove (integer_sub) exec_swap (in3 -46 in2 print_integer) ())
Zero cases best errors: [0 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 14
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (153 156 281 1000 509 154 281 944 509 662)
Population mean number of elite cases: 4.65
Count of perfect (error zero) individuals by case: (153 156 281 0 509 154 281 944 509 662)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max boolean_yank in3 integer_mult exec_swap (boolean_not -46 in2 integer_fromboolean integer_mult -46 in2 print_integer) ())
Errors: [0 0 1 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.351
Median total errors in population: 6
Error averages by case: (0.847 0.844 0.719 1.0 0.491 0.846 0.719 0.056 0.491 0.338)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 12.695
Average program size in population (points): 15.733
Average percent parens in population: 0.187
Minimum age in population: 88.91892940191617
Maximum age in population: 93.67228036128189
Average age in population: 91.69705088333785
Median age in population: 91.73828812606784
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.437
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.395
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 17179801
--- Timings ---
Current time: 1559584788330 milliseconds
Total Time:         156.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       125.0 seconds, 79.8%
Fitness Testing:     17.5 seconds, 11.2%
Report:              14.0 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 446
Test mean error for best: 0.44600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in1 integer_min integer_gt exec_do*range (print_integer))
Lexicase best errors: [1 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 16
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in1 integer_min integer_gt exec_do*range (print_integer))
Zero cases best errors: [1 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 16
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 1000 285 918 284 1000 283 283 427 922)
Population mean number of elite cases: 5.61
Count of perfect (error zero) individuals by case: (210 0 285 918 284 0 283 283 427 922)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in1 integer_min integer_gt exec_do*range (print_integer))
Errors: [1 1 0 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 14
Size: 16
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 6.388
Median total errors in population: 7
Error averages by case: (0.79 1.0 0.715 0.082 0.716 1.0 0.717 0.717 0.573 0.078)
Error minima by case: (0 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 13.331
Average program size in population (points): 16.444
Average percent parens in population: 0.186
Minimum age in population: 89.91892940191617
Maximum age in population: 95.26952763004606
Average age in population: 93.23927536432824
Median age in population: 93.29664342263209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.44
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.406
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 17326356
--- Timings ---
Current time: 1559584790365 milliseconds
Total Time:         158.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       126.8 seconds, 79.9%
Fitness Testing:     17.7 seconds, 11.1%
Report:              14.1 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: 31                 
Correct output: -8                  | Program output: 65                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: 36                 
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 55                 
Correct output: 4                   | Program output: 58                 
Correct output: 2                   | Program output: 65                 
Correct output: 33                  | Program output: 45                 
Correct output: 9                   | Program output: 45                 
Correct output: 1                   | Program output: 73                 
Correct output: 5                   | Program output: 36                 
Correct output: 18                  | Program output: 57                 
Correct output: 14                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 49                 
Correct output: 5                   | Program output: 26                 
Correct output: 25                  | Program output: 54                 
Correct output: 28                  | Program output: 46                 
Correct output: 23                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 67                 
Correct output: 32                  | Program output: 37                 
Correct output: 1                   | Program output: 13                 
Correct output: -90                 | Program output: 48                 
Correct output: 16                  | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 60                 
Correct output: -71                 | Program output: 18                 
Correct output: -97                 | Program output: 72                 
Correct output: -45                 | Program output: -12                
Correct output: -87                 | Program output: 27                 
Correct output: -90                 | Program output: 87                 
Correct output: -58                 | Program output: 96                 
Correct output: -52                 | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -4                 
Correct output: -72                 | Program output: 7                  
Correct output: -92                 | Program output: -54                
Correct output: -98                 | Program output: -53                
Correct output: -22                 | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -89                 | Program output: -56                
Correct output: 22                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -30                
Correct output: -8                  | Program output: 65                 
Correct output: -36                 | Program output: -3                 
Correct output: -74                 | Program output: -38                
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -10                
Correct output: -30                 | Program output: 14                 
Correct output: -76                 | Program output: 79                 
Correct output: -56                 | Program output: 6                  
Correct output: -1                  | Program output: 48                 
Correct output: -47                 | Program output: 28                 
Correct output: -21                 | Program output: 70                 
Correct output: -62                 | Program output: -28                
Correct output: -21                 | Program output: 68                 
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: 80                 
Correct output: -65                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -23                 | Program output: 44                 
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -8                  | Program output: 8                  
Correct output: -7                  | Program output: 88                 
Correct output: -94                 | Program output: 24                 
Correct output: -88                 | Program output: -11                
Correct output: -22                 | Program output: 3                  
Correct output: 23                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 12                 
Correct output: -59                 | Program output: -33                
Correct output: -84                 | Program output: -39                
Correct output: -71                 | Program output: 32                 
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in3 boolean_dup integer_max boolean_yank in3 print_integer print_boolean boolean_or -9 integer_mod boolean_dup_items)
Lexicase best errors: [0 0 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 12
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction -9} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in3 boolean_dup integer_max boolean_yank in3 print_integer print_boolean boolean_or -9 integer_mod boolean_dup_items)
Zero cases best errors: [0 0 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 12
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (159 159 952 1000 1000 935 159 791 774 159)
Population mean number of elite cases: 6.09
Count of perfect (error zero) individuals by case: (159 159 952 0 0 935 159 791 774 159)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 2, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction -46} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (boolean_dup boolean_yankdup boolean_yank in3 integer_mult exec_swap (in3 -46 in2 integer_fromboolean exec_yankdup integer_mult boolean_stackdepth) (print_integer))
Errors: [0 0 0 1 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 5.912
Median total errors in population: 6
Error averages by case: (0.841 0.841 0.048 1.0 1.0 0.065 0.841 0.209 0.226 0.841)
Error minima by case: (0 0 0 1 1 0 0 0 0 0)
Average genome size in population (length): 13.663
Average program size in population (points): 15.766
Average percent parens in population: 0.134
Minimum age in population: 90.91892940191617
Maximum age in population: 95.87035026140894
Average age in population: 93.91075791390588
Median age in population: 94.23516923064561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 663
Genome diversity (% unique genomes):	 0.203
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 702
Syntactic diversity (% unique Push programs):	 0.17
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 17468372
--- Timings ---
Current time: 1559584792866 milliseconds
Total Time:         161.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       129.0 seconds, 80.1%
Fitness Testing:     17.8 seconds, 11.1%
Report:              14.2 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 446
Test mean error for best: 0.44600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in1 integer_min integer_gt exec_do*range (print_integer))
Lexicase best errors: [0 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 16
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in1 integer_min integer_gt exec_do*range (print_integer))
Zero cases best errors: [0 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 16
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (276 277 276 275 275 1000 275 1000 649 277)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (276 277 276 275 275 0 275 0 649 277)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in1 integer_min integer_gt exec_do*range (print_integer))
Errors: [0 0 0 0 0 1 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 14
Size: 16
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 7.42
Median total errors in population: 9
Error averages by case: (0.724 0.723 0.724 0.725 0.725 1.0 0.725 1.0 0.351 0.723)
Error minima by case: (0 0 0 0 0 1 0 1 0 0)
Average genome size in population (length): 12.82
Average program size in population (points): 15.25
Average percent parens in population: 0.156
Minimum age in population: 91.91892940191617
Maximum age in population: 97.52441126979662
Average age in population: 95.67781530557157
Median age in population: 95.76274049829458
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 192
Genome diversity (% unique genomes):	 0.291
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.251
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 17603866
--- Timings ---
Current time: 1559584795083 milliseconds
Total Time:         163.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       131.0 seconds, 80.2%
Fitness Testing:     18.0 seconds, 11.0%
Report:              14.3 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 446
Test mean error for best: 0.44600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 30                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 60                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 39                 
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -16                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: 46                 
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 61                 
Correct output: -92                 | Program output: -3                 
Correct output: -61                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 27                 
Correct output: -95                 | Program output: -86                
Correct output: -92                 | Program output: -23                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: 49                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: 66                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -13                
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: -50                
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: 34                 
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: -5                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 82                 
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in1 integer_min integer_gt exec_do*range (print_integer))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 16
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in1 integer_min integer_gt exec_do*range (print_integer))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 16
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (939 941 938 954 939 1000 939 1000 938 756)
Population mean number of elite cases: 9.34
Count of perfect (error zero) individuals by case: (939 941 938 954 939 0 939 0 938 756)
Population mean number of perfect (error zero) cases: 7.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in1 integer_min integer_gt exec_do*range (print_integer))
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 14
Size: 16
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 2.656
Median total errors in population: 2
Error averages by case: (0.061 0.059 0.062 0.046 0.061 1.0 0.061 1.0 0.062 0.244)
Error minima by case: (0 0 0 0 0 1 0 1 0 0)
Average genome size in population (length): 13.098
Average program size in population (points): 15.127
Average percent parens in population: 0.138
Minimum age in population: 94.90313660246366
Maximum age in population: 98.69313560205606
Average age in population: 97.12329192460354
Median age in population: 97.26541846691165
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 479
Genome diversity (% unique genomes):	 0.2
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 573
Syntactic diversity (% unique Push programs):	 0.16
Total error diversity:				 0.008
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 17743490
--- Timings ---
Current time: 1559584797406 milliseconds
Total Time:         165.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       133.0 seconds, 80.3%
Fitness Testing:     18.1 seconds, 10.9%
Report:              14.4 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 49                 
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 45                 
Correct output: 1                   | Program output: 65                 
Correct output: 5                   | Program output: 31                 
Correct output: 18                  | Program output: 26                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 11                 
Correct output: 25                  | Program output: 54                 
Correct output: 28                  | Program output: 46                 
Correct output: 23                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 67                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: 14                 
Correct output: -97                 | Program output: 13                 
Correct output: -45                 | Program output: -12                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 87                 
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -32                
Correct output: -92                 | Program output: -54                
Correct output: -98                 | Program output: -53                
Correct output: -22                 | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -89                 | Program output: -56                
Correct output: 22                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -30                
Correct output: -8                  | Program output: 65                 
Correct output: -36                 | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 6                  
Correct output: -1                  | Program output: 48                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -28                
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: -72                
Correct output: -65                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 45                 
Correct output: -62                 | Program output: -62                
Correct output: -23                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -8                  | Program output: 8                  
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: 24                 
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: 3                  
Correct output: 23                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min integer_gt exec_do*range (print_integer))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 16
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min integer_gt exec_do*range (print_integer))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 16
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (962 1 1 1000 960 962 962 949 962 1)
Population mean number of elite cases: 6.76
Count of perfect (error zero) individuals by case: (962 1 1 0 960 962 962 949 962 1)
Population mean number of perfect (error zero) cases: 5.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min integer_gt exec_do*range (print_integer))
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 14
Size: 16
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 4.24
Median total errors in population: 4
Error averages by case: (0.038 0.999 0.999 1.0 0.04 0.038 0.038 0.051 0.038 0.999)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 14.319
Average program size in population (points): 16.373
Average percent parens in population: 0.126
Minimum age in population: 96.29031176594354
Maximum age in population: 100.3570929262128
Average age in population: 98.47475684176494
Median age in population: 98.5654972646938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 504
Genome diversity (% unique genomes):	 0.263
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 631
Syntactic diversity (% unique Push programs):	 0.211
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 17893345
--- Timings ---
Current time: 1559584799235 milliseconds
Total Time:         167.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       134.6 seconds, 80.4%
Fitness Testing:     18.3 seconds, 10.9%
Report:              14.5 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 222
Test mean error for best: 0.22200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 45                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 54                 
Correct output: 28                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -30                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: -62                
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 18
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 18
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (959 231 959 941 231 969 722 231 724 941)
Population mean number of elite cases: 6.91
Count of perfect (error zero) individuals by case: (959 231 959 941 231 969 722 231 724 941)
Population mean number of perfect (error zero) cases: 6.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer})
Best program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 16
Size: 18
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 3.092
Median total errors in population: 3
Error averages by case: (0.041 0.769 0.041 0.059 0.769 0.031 0.278 0.769 0.276 0.059)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.056
Average program size in population (points): 16.099
Average percent parens in population: 0.127
Minimum age in population: 97.29031176594354
Maximum age in population: 101.8845983759956
Average age in population: 100.2656388301829
Median age in population: 100.1942198190716
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 603
Genome diversity (% unique genomes):	 0.245
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 637
Syntactic diversity (% unique Push programs):	 0.199
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 18034775
--- Timings ---
Current time: 1559584800932 milliseconds
Total Time:         169.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       136.0 seconds, 80.4%
Fitness Testing:     18.4 seconds, 10.9%
Report:              14.6 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 68
Successful program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 18


Auto-simplifying with starting size: 18
step: 0
program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 18

step: 500
program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 18

step: 1000
program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 18

step: 1500
program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 18

step: 2000
program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 18

step: 2500
program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 18

step: 3000
program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 18

step: 3500
program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 18

step: 4000
program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 18

step: 4500
program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 18

step: 5000
program: (boolean_dup integer_max integer_dup_items integer_fromboolean exec_yankdup in2 integer_yankdup integer_gte integer_gt in3 integer_min in1 integer_min integer_gt exec_do*range (print_integer))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 18

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 222
Test mean error for best: 0.22200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -22                 | Program output: -22                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: 84                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -42                 | Program output: -42                
Correct output: -63                 | Program output: -63                
Correct output: -79                 | Program output: 29                 
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -26                 | Program output: -26                
Correct output: 75                  | Program output: 75                 
Correct output: 48                  | Program output: 48                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 45                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 54                 
Correct output: 28                  | Program output: 46                 
Correct output: 23                  | Program output: 23                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -90                 | Program output: -44                
Correct output: 16                  | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 57                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -30                
Correct output: -8                  | Program output: -8                 
Correct output: -36                 | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -98                 | Program output: -98                
Correct output: -30                 | Program output: -30                
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -1                  | Program output: 41                 
Correct output: -47                 | Program output: -47                
Correct output: -21                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -21                
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 34                 
Correct output: -62                 | Program output: -62                
Correct output: -23                 | Program output: -23                
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: -8                  | Program output: -8                 
Correct output: -7                  | Program output: -7                 
Correct output: -94                 | Program output: -72                
Correct output: -88                 | Program output: -88                
Correct output: -22                 | Program output: -22                
Correct output: 23                  | Program output: 23                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
;;******************************
