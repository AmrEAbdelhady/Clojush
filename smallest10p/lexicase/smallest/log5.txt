Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[13 13 13 83] 13] [[42 42 42 -22] -22] [[-79 -37 -79 -79] -79] [[-75 -75 -75 21] -75] [[45 45 67 45] 45] [[-80 -80 64 -80] -80] [[85 85 85 1] 1] [[-79 -76 -76 -76] -79] [[5 5 82 5] 5] [[-80 50 -80 -80] -80] [(39 39 39 39) 39] [(-91 -91 -91 -91) -91] [(-89 -89 -89 -89) -89] [(-79 -79 -79 -79) -79] [(-2 -2 -2 -2) -2] [(16 99 77 37) 16] [(98 83 21 61) 21] [(6 63 11 91) 6] [(10 22 77 43) 10] [(32 16 20 15) 15] [(2 75 20 2) 2] [(40 83 89 40) 40] [(62 37 82 82) 37] [(21 57 10 92) 10] [(56 85 69 99) 56] [(58 19 11 77) 11] [(86 56 11 70) 11] [(71 76 60 46) 46] [(56 5 54 6) 5] [(29 28 47 25) 25] [(86 91 49 56) 49] [(33 45 98 33) 33] [(55 40 73 70) 40] [(6 24 57 25) 6] [(4 19 85 83) 4] [(-93 -57 15 -36) -93] [(-50 27 -79 76) -79] [(96 84 -80 52) -80] [(-72 5 57 -85) -85] [(53 48 19 -56) -56] [(-13 -50 23 -63) -63] [(-38 60 -8 17) -38] [(48 -29 84 35) -29] [(-100 -20 37 59) -100] [(19 87 -1 -35) -35] [(-96 -47 37 -61) -96] [(-28 -100 -74 10) -100] [(53 -93 79 -97) -97] [(-11 -45 42 38) -45] [(-2 -69 -16 63) -69] [(90 29 -80 96) -80] [(3 55 47 39) 3] [(51 55 -51 -86) -86] [(80 -97 3 35) -97] [(90 27 -23 10) -23] [(-35 -51 47 83) -51] [(-18 77 -25 10) -25] [(5 -72 97 -71) -72] [(-58 -89 50 99) -89] [(42 89 71 81) 42] [(-18 -14 -63 -24) -63] [(-78 77 88 1) -78] [(69 8 -89 -36) -89] [(-95 -56 21 -22) -95] [(-63 -85 -68 -81) -85] [(-8 -58 85 -46) -58] [(71 70 49 30) 30] [(-56 -58 -7 -72) -72] [(60 4 3 70) 3] [(-81 -53 -97 62) -97] [(91 87 90 -80) -80] [(80 -46 -33 -55) -55] [(53 -29 33 54) -29] [(88 37 -100 -53) -100] [(52 -5 79 -86) -86] [(-30 32 -90 -11) -90] [(-66 -27 -41 56) -66] [(-100 -65 60 -51) -100] [(82 -85 46 15) -85] [(-12 90 -52 -50) -52] [(47 59 23 63) 23] [(94 42 -18 -12) -18] [(-8 -77 -30 -30) -77] [(79 -76 98 -29) -76] [(58 -2 92 78) -2] [(-9 -49 -68 -8) -68] [(22 -45 -6 -27) -45] [(22 80 -16 -8) -16] [(62 71 -98 -13) -98] [(-49 22 -82 76) -82] [(-75 -88 66 33) -88] [(-79 100 14 -88) -88] [(2 75 -33 -2) -33] [(94 79 85 -47) -47] [(-29 16 -43 -64) -64])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[13 13 13 83] 13]
Train Case:   6 | Input/Output: [[42 42 42 -22] -22]
Train Case:   7 | Input/Output: [[-79 -37 -79 -79] -79]
Train Case:   8 | Input/Output: [[-75 -75 -75 21] -75]
Train Case:   9 | Input/Output: [[45 45 67 45] 45]
Train Case:  10 | Input/Output: [[-80 -80 64 -80] -80]
Train Case:  11 | Input/Output: [[85 85 85 1] 1]
Train Case:  12 | Input/Output: [[-79 -76 -76 -76] -79]
Train Case:  13 | Input/Output: [[5 5 82 5] 5]
Train Case:  14 | Input/Output: [[-80 50 -80 -80] -80]
Train Case:  15 | Input/Output: [(39 39 39 39) 39]
Train Case:  16 | Input/Output: [(-91 -91 -91 -91) -91]
Train Case:  17 | Input/Output: [(-89 -89 -89 -89) -89]
Train Case:  18 | Input/Output: [(-79 -79 -79 -79) -79]
Train Case:  19 | Input/Output: [(-2 -2 -2 -2) -2]
Train Case:  20 | Input/Output: [(16 99 77 37) 16]
Train Case:  21 | Input/Output: [(98 83 21 61) 21]
Train Case:  22 | Input/Output: [(6 63 11 91) 6]
Train Case:  23 | Input/Output: [(10 22 77 43) 10]
Train Case:  24 | Input/Output: [(32 16 20 15) 15]
Train Case:  25 | Input/Output: [(2 75 20 2) 2]
Train Case:  26 | Input/Output: [(40 83 89 40) 40]
Train Case:  27 | Input/Output: [(62 37 82 82) 37]
Train Case:  28 | Input/Output: [(21 57 10 92) 10]
Train Case:  29 | Input/Output: [(56 85 69 99) 56]
Train Case:  30 | Input/Output: [(58 19 11 77) 11]
Train Case:  31 | Input/Output: [(86 56 11 70) 11]
Train Case:  32 | Input/Output: [(71 76 60 46) 46]
Train Case:  33 | Input/Output: [(56 5 54 6) 5]
Train Case:  34 | Input/Output: [(29 28 47 25) 25]
Train Case:  35 | Input/Output: [(86 91 49 56) 49]
Train Case:  36 | Input/Output: [(33 45 98 33) 33]
Train Case:  37 | Input/Output: [(55 40 73 70) 40]
Train Case:  38 | Input/Output: [(6 24 57 25) 6]
Train Case:  39 | Input/Output: [(4 19 85 83) 4]
Train Case:  40 | Input/Output: [(-93 -57 15 -36) -93]
Train Case:  41 | Input/Output: [(-50 27 -79 76) -79]
Train Case:  42 | Input/Output: [(96 84 -80 52) -80]
Train Case:  43 | Input/Output: [(-72 5 57 -85) -85]
Train Case:  44 | Input/Output: [(53 48 19 -56) -56]
Train Case:  45 | Input/Output: [(-13 -50 23 -63) -63]
Train Case:  46 | Input/Output: [(-38 60 -8 17) -38]
Train Case:  47 | Input/Output: [(48 -29 84 35) -29]
Train Case:  48 | Input/Output: [(-100 -20 37 59) -100]
Train Case:  49 | Input/Output: [(19 87 -1 -35) -35]
Train Case:  50 | Input/Output: [(-96 -47 37 -61) -96]
Train Case:  51 | Input/Output: [(-28 -100 -74 10) -100]
Train Case:  52 | Input/Output: [(53 -93 79 -97) -97]
Train Case:  53 | Input/Output: [(-11 -45 42 38) -45]
Train Case:  54 | Input/Output: [(-2 -69 -16 63) -69]
Train Case:  55 | Input/Output: [(90 29 -80 96) -80]
Train Case:  56 | Input/Output: [(3 55 47 39) 3]
Train Case:  57 | Input/Output: [(51 55 -51 -86) -86]
Train Case:  58 | Input/Output: [(80 -97 3 35) -97]
Train Case:  59 | Input/Output: [(90 27 -23 10) -23]
Train Case:  60 | Input/Output: [(-35 -51 47 83) -51]
Train Case:  61 | Input/Output: [(-18 77 -25 10) -25]
Train Case:  62 | Input/Output: [(5 -72 97 -71) -72]
Train Case:  63 | Input/Output: [(-58 -89 50 99) -89]
Train Case:  64 | Input/Output: [(42 89 71 81) 42]
Train Case:  65 | Input/Output: [(-18 -14 -63 -24) -63]
Train Case:  66 | Input/Output: [(-78 77 88 1) -78]
Train Case:  67 | Input/Output: [(69 8 -89 -36) -89]
Train Case:  68 | Input/Output: [(-95 -56 21 -22) -95]
Train Case:  69 | Input/Output: [(-63 -85 -68 -81) -85]
Train Case:  70 | Input/Output: [(-8 -58 85 -46) -58]
Train Case:  71 | Input/Output: [(71 70 49 30) 30]
Train Case:  72 | Input/Output: [(-56 -58 -7 -72) -72]
Train Case:  73 | Input/Output: [(60 4 3 70) 3]
Train Case:  74 | Input/Output: [(-81 -53 -97 62) -97]
Train Case:  75 | Input/Output: [(91 87 90 -80) -80]
Train Case:  76 | Input/Output: [(80 -46 -33 -55) -55]
Train Case:  77 | Input/Output: [(53 -29 33 54) -29]
Train Case:  78 | Input/Output: [(88 37 -100 -53) -100]
Train Case:  79 | Input/Output: [(52 -5 79 -86) -86]
Train Case:  80 | Input/Output: [(-30 32 -90 -11) -90]
Train Case:  81 | Input/Output: [(-66 -27 -41 56) -66]
Train Case:  82 | Input/Output: [(-100 -65 60 -51) -100]
Train Case:  83 | Input/Output: [(82 -85 46 15) -85]
Train Case:  84 | Input/Output: [(-12 90 -52 -50) -52]
Train Case:  85 | Input/Output: [(47 59 23 63) 23]
Train Case:  86 | Input/Output: [(94 42 -18 -12) -18]
Train Case:  87 | Input/Output: [(-8 -77 -30 -30) -77]
Train Case:  88 | Input/Output: [(79 -76 98 -29) -76]
Train Case:  89 | Input/Output: [(58 -2 92 78) -2]
Train Case:  90 | Input/Output: [(-9 -49 -68 -8) -68]
Train Case:  91 | Input/Output: [(22 -45 -6 -27) -45]
Train Case:  92 | Input/Output: [(22 80 -16 -8) -16]
Train Case:  93 | Input/Output: [(62 71 -98 -13) -98]
Train Case:  94 | Input/Output: [(-49 22 -82 76) -82]
Train Case:  95 | Input/Output: [(-75 -88 66 33) -88]
Train Case:  96 | Input/Output: [(-79 100 14 -88) -88]
Train Case:  97 | Input/Output: [(2 75 -33 -2) -33]
Train Case:  98 | Input/Output: [(94 79 85 -47) -47]
Train Case:  99 | Input/Output: [(-29 16 -43 -64) -64]
Test Case:   0 | Input/Output: [[24 -48 24 24] -48]
Test Case:   1 | Input/Output: [[-18 43 43 43] -18]
Test Case:   2 | Input/Output: [[-81 -81 -81 88] -81]
Test Case:   3 | Input/Output: [[17 -83 17 17] -83]
Test Case:   4 | Input/Output: [[-53 48 48 48] -53]
Test Case:   5 | Input/Output: [[-90 -90 -90 17] -90]
Test Case:   6 | Input/Output: [[-93 45 -93 -93] -93]
Test Case:   7 | Input/Output: [[-21 -21 66 -21] -21]
Test Case:   8 | Input/Output: [[69 69 69 -11] -11]
Test Case:   9 | Input/Output: [[-65 35 35 35] -65]
Test Case:  10 | Input/Output: [[-74 -74 -74 -74] -74]
Test Case:  11 | Input/Output: [[-6 75 -6 -6] -6]
Test Case:  12 | Input/Output: [[42 16 16 16] 16]
Test Case:  13 | Input/Output: [[3 3 54 3] 3]
Test Case:  14 | Input/Output: [[100 100 -56 100] -56]
Test Case:  15 | Input/Output: [[-48 -53 -48 -48] -53]
Test Case:  16 | Input/Output: [[97 97 97 -61] -61]
Test Case:  17 | Input/Output: [[-92 -92 -92 -94] -94]
Test Case:  18 | Input/Output: [[52 52 -24 52] -24]
Test Case:  19 | Input/Output: [[-18 -18 52 -18] -18]
Test Case:  20 | Input/Output: [[-11 -10 -11 -11] -11]
Test Case:  21 | Input/Output: [[64 64 64 -98] -98]
Test Case:  22 | Input/Output: [[-44 -44 -44 -88] -88]
Test Case:  23 | Input/Output: [[71 -46 71 71] -46]
Test Case:  24 | Input/Output: [[62 62 -77 62] -77]
Test Case:  25 | Input/Output: [[50 50 -81 50] -81]
Test Case:  26 | Input/Output: [[4 -22 -22 -22] -22]
Test Case:  27 | Input/Output: [[-23 -23 -19 -23] -23]
Test Case:  28 | Input/Output: [[15 15 9 15] 9]
Test Case:  29 | Input/Output: [[-31 -31 -41 -31] -41]
Test Case:  30 | Input/Output: [[-22 69 69 69] -22]
Test Case:  31 | Input/Output: [[31 -83 -83 -83] -83]
Test Case:  32 | Input/Output: [[-51 -54 -51 -51] -54]
Test Case:  33 | Input/Output: [[93 93 -5 93] -5]
Test Case:  34 | Input/Output: [[-71 -41 -41 -41] -71]
Test Case:  35 | Input/Output: [[-31 -41 -41 -41] -41]
Test Case:  36 | Input/Output: [[-79 -79 -63 -79] -79]
Test Case:  37 | Input/Output: [[79 79 79 11] 11]
Test Case:  38 | Input/Output: [[-14 93 -14 -14] -14]
Test Case:  39 | Input/Output: [[-97 100 -97 -97] -97]
Test Case:  40 | Input/Output: [[-68 -68 -68 6] -68]
Test Case:  41 | Input/Output: [[-70 32 -70 -70] -70]
Test Case:  42 | Input/Output: [[-1 0 -1 -1] -1]
Test Case:  43 | Input/Output: [[-90 77 77 77] -90]
Test Case:  44 | Input/Output: [[69 91 69 69] 69]
Test Case:  45 | Input/Output: [[-72 -72 -72 19] -72]
Test Case:  46 | Input/Output: [[-84 -84 -84 68] -84]
Test Case:  47 | Input/Output: [[93 93 -93 93] -93]
Test Case:  48 | Input/Output: [[-19 -19 -50 -19] -50]
Test Case:  49 | Input/Output: [[14 -36 14 14] -36]
Test Case:  50 | Input/Output: [[-64 -64 79 -64] -64]
Test Case:  51 | Input/Output: [[57 57 57 88] 57]
Test Case:  52 | Input/Output: [[8 59 8 8] 8]
Test Case:  53 | Input/Output: [[65 65 65 -8] -8]
Test Case:  54 | Input/Output: [[32 32 32 -42] -42]
Test Case:  55 | Input/Output: [[-97 56 56 56] -97]
Test Case:  56 | Input/Output: [[-19 29 29 29] -19]
Test Case:  57 | Input/Output: [[-21 -21 1 -21] -21]
Test Case:  58 | Input/Output: [[49 -17 -17 -17] -17]
Test Case:  59 | Input/Output: [[-5 -5 -5 -21] -21]
Test Case:  60 | Input/Output: [[-91 -6 -6 -6] -91]
Test Case:  61 | Input/Output: [[-79 -79 80 -79] -79]
Test Case:  62 | Input/Output: [[-68 89 -68 -68] -68]
Test Case:  63 | Input/Output: [[-14 -14 -14 -70] -70]
Test Case:  64 | Input/Output: [[-75 -75 28 -75] -75]
Test Case:  65 | Input/Output: [[65 25 25 25] 25]
Test Case:  66 | Input/Output: [[-82 -41 -41 -41] -82]
Test Case:  67 | Input/Output: [[66 66 -90 66] -90]
Test Case:  68 | Input/Output: [[-17 87 87 87] -17]
Test Case:  69 | Input/Output: [[-83 -60 -83 -83] -83]
Test Case:  70 | Input/Output: [[91 91 100 91] 91]
Test Case:  71 | Input/Output: [[94 94 94 65] 65]
Test Case:  72 | Input/Output: [[-38 -93 -38 -38] -93]
Test Case:  73 | Input/Output: [[45 33 45 45] 33]
Test Case:  74 | Input/Output: [[47 47 47 71] 47]
Test Case:  75 | Input/Output: [[36 36 30 36] 30]
Test Case:  76 | Input/Output: [[-28 -44 -28 -28] -44]
Test Case:  77 | Input/Output: [[73 73 69 73] 69]
Test Case:  78 | Input/Output: [[-50 56 56 56] -50]
Test Case:  79 | Input/Output: [[-66 -11 -11 -11] -66]
Test Case:  80 | Input/Output: [[44 100 100 100] 44]
Test Case:  81 | Input/Output: [[42 49 49 49] 42]
Test Case:  82 | Input/Output: [[-32 -32 -32 42] -32]
Test Case:  83 | Input/Output: [[99 84 84 84] 84]
Test Case:  84 | Input/Output: [[-98 -2 -2 -2] -98]
Test Case:  85 | Input/Output: [[-49 24 -49 -49] -49]
Test Case:  86 | Input/Output: [[-90 -90 -90 46] -90]
Test Case:  87 | Input/Output: [[70 -60 -60 -60] -60]
Test Case:  88 | Input/Output: [[-77 -77 -77 81] -77]
Test Case:  89 | Input/Output: [[57 57 57 -17] -17]
Test Case:  90 | Input/Output: [[-38 9 9 9] -38]
Test Case:  91 | Input/Output: [[-75 -75 -93 -75] -93]
Test Case:  92 | Input/Output: [[11 11 -67 11] -67]
Test Case:  93 | Input/Output: [[71 -57 71 71] -57]
Test Case:  94 | Input/Output: [[20 20 20 -86] -86]
Test Case:  95 | Input/Output: [[98 98 83 98] 83]
Test Case:  96 | Input/Output: [[-15 -15 -18 -15] -18]
Test Case:  97 | Input/Output: [[62 62 62 -95] -95]
Test Case:  98 | Input/Output: [[56 -2 56 56] -2]
Test Case:  99 | Input/Output: [[-87 -37 -87 -87] -87]
Test Case: 100 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 101 | Input/Output: [(78 78 78 78) 78]
Test Case: 102 | Input/Output: [(18 18 18 18) 18]
Test Case: 103 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 104 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 105 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 106 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 107 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 108 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 109 | Input/Output: [(82 82 82 82) 82]
Test Case: 110 | Input/Output: [(2 2 2 2) 2]
Test Case: 111 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 112 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 113 | Input/Output: [(30 30 30 30) 30]
Test Case: 114 | Input/Output: [(77 77 77 77) 77]
Test Case: 115 | Input/Output: [(67 67 67 67) 67]
Test Case: 116 | Input/Output: [(3 3 3 3) 3]
Test Case: 117 | Input/Output: [(46 46 46 46) 46]
Test Case: 118 | Input/Output: [(5 5 5 5) 5]
Test Case: 119 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 120 | Input/Output: [(5 5 5 5) 5]
Test Case: 121 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 122 | Input/Output: [(62 62 62 62) 62]
Test Case: 123 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 124 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 125 | Input/Output: [(85 85 85 85) 85]
Test Case: 126 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 127 | Input/Output: [(83 83 83 83) 83]
Test Case: 128 | Input/Output: [(72 72 72 72) 72]
Test Case: 129 | Input/Output: [(12 12 12 12) 12]
Test Case: 130 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 131 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 132 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 133 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 134 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 135 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 136 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 137 | Input/Output: [(84 84 84 84) 84]
Test Case: 138 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 139 | Input/Output: [(83 83 83 83) 83]
Test Case: 140 | Input/Output: [(10 10 10 10) 10]
Test Case: 141 | Input/Output: [(23 23 23 23) 23]
Test Case: 142 | Input/Output: [(6 6 6 6) 6]
Test Case: 143 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 144 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 145 | Input/Output: [(65 65 65 65) 65]
Test Case: 146 | Input/Output: [(33 33 33 33) 33]
Test Case: 147 | Input/Output: [(30 30 30 30) 30]
Test Case: 148 | Input/Output: [(9 9 9 9) 9]
Test Case: 149 | Input/Output: [(97 97 97 97) 97]
Test Case: 150 | Input/Output: [(68 68 68 68) 68]
Test Case: 151 | Input/Output: [(41 41 41 41) 41]
Test Case: 152 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 153 | Input/Output: [(39 39 39 39) 39]
Test Case: 154 | Input/Output: [(4 4 4 4) 4]
Test Case: 155 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 156 | Input/Output: [(78 78 78 78) 78]
Test Case: 157 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 158 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 159 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 160 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 161 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 162 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 163 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 164 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 165 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 166 | Input/Output: [(3 3 3 3) 3]
Test Case: 167 | Input/Output: [(88 88 88 88) 88]
Test Case: 168 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 169 | Input/Output: [(10 10 10 10) 10]
Test Case: 170 | Input/Output: [(61 61 61 61) 61]
Test Case: 171 | Input/Output: [(72 72 72 72) 72]
Test Case: 172 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 173 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 174 | Input/Output: [(29 29 29 29) 29]
Test Case: 175 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 176 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 177 | Input/Output: [(78 78 78 78) 78]
Test Case: 178 | Input/Output: [(32 32 32 32) 32]
Test Case: 179 | Input/Output: [(33 33 33 33) 33]
Test Case: 180 | Input/Output: [(37 37 37 37) 37]
Test Case: 181 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 182 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 183 | Input/Output: [(1 1 1 1) 1]
Test Case: 184 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 185 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 186 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 187 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 188 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 189 | Input/Output: [(5 5 5 5) 5]
Test Case: 190 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 191 | Input/Output: [(5 5 5 5) 5]
Test Case: 192 | Input/Output: [(98 98 98 98) 98]
Test Case: 193 | Input/Output: [(81 81 81 81) 81]
Test Case: 194 | Input/Output: [(46 46 46 46) 46]
Test Case: 195 | Input/Output: [(12 12 12 12) 12]
Test Case: 196 | Input/Output: [(81 81 81 81) 81]
Test Case: 197 | Input/Output: [(61 61 61 61) 61]
Test Case: 198 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 199 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 200 | Input/Output: [(48 92 46 84) 46]
Test Case: 201 | Input/Output: [(19 39 13 44) 13]
Test Case: 202 | Input/Output: [(67 93 55 83) 55]
Test Case: 203 | Input/Output: [(99 29 83 33) 29]
Test Case: 204 | Input/Output: [(35 12 70 26) 12]
Test Case: 205 | Input/Output: [(17 6 51 27) 6]
Test Case: 206 | Input/Output: [(82 95 29 16) 16]
Test Case: 207 | Input/Output: [(38 95 53 74) 38]
Test Case: 208 | Input/Output: [(89 87 69 23) 23]
Test Case: 209 | Input/Output: [(90 8 92 40) 8]
Test Case: 210 | Input/Output: [(98 86 8 100) 8]
Test Case: 211 | Input/Output: [(33 81 75 23) 23]
Test Case: 212 | Input/Output: [(23 11 8 9) 8]
Test Case: 213 | Input/Output: [(88 13 21 62) 13]
Test Case: 214 | Input/Output: [(86 33 9 10) 9]
Test Case: 215 | Input/Output: [(6 12 25 19) 6]
Test Case: 216 | Input/Output: [(81 82 46 78) 46]
Test Case: 217 | Input/Output: [(13 85 43 71) 13]
Test Case: 218 | Input/Output: [(6 86 73 15) 6]
Test Case: 219 | Input/Output: [(30 87 32 92) 30]
Test Case: 220 | Input/Output: [(45 15 57 10) 10]
Test Case: 221 | Input/Output: [(72 38 67 81) 38]
Test Case: 222 | Input/Output: [(62 99 79 94) 62]
Test Case: 223 | Input/Output: [(74 95 39 85) 39]
Test Case: 224 | Input/Output: [(75 44 76 68) 44]
Test Case: 225 | Input/Output: [(70 35 28 92) 28]
Test Case: 226 | Input/Output: [(100 21 86 80) 21]
Test Case: 227 | Input/Output: [(74 34 54 47) 34]
Test Case: 228 | Input/Output: [(97 35 44 64) 35]
Test Case: 229 | Input/Output: [(43 92 22 0) 0]
Test Case: 230 | Input/Output: [(10 90 60 41) 10]
Test Case: 231 | Input/Output: [(52 0 99 73) 0]
Test Case: 232 | Input/Output: [(39 74 31 2) 2]
Test Case: 233 | Input/Output: [(7 47 11 96) 7]
Test Case: 234 | Input/Output: [(80 27 44 84) 27]
Test Case: 235 | Input/Output: [(57 67 47 69) 47]
Test Case: 236 | Input/Output: [(14 61 20 54) 14]
Test Case: 237 | Input/Output: [(93 8 60 60) 8]
Test Case: 238 | Input/Output: [(1 29 51 61) 1]
Test Case: 239 | Input/Output: [(38 22 35 4) 4]
Test Case: 240 | Input/Output: [(22 90 41 99) 22]
Test Case: 241 | Input/Output: [(38 16 87 3) 3]
Test Case: 242 | Input/Output: [(26 78 33 23) 23]
Test Case: 243 | Input/Output: [(13 38 90 96) 13]
Test Case: 244 | Input/Output: [(62 34 77 68) 34]
Test Case: 245 | Input/Output: [(89 95 85 53) 53]
Test Case: 246 | Input/Output: [(51 8 70 31) 8]
Test Case: 247 | Input/Output: [(58 94 48 98) 48]
Test Case: 248 | Input/Output: [(43 17 85 27) 17]
Test Case: 249 | Input/Output: [(90 43 0 35) 0]
Test Case: 250 | Input/Output: [(83 59 87 23) 23]
Test Case: 251 | Input/Output: [(92 38 92 52) 38]
Test Case: 252 | Input/Output: [(8 41 96 26) 8]
Test Case: 253 | Input/Output: [(92 74 75 82) 74]
Test Case: 254 | Input/Output: [(15 67 39 47) 15]
Test Case: 255 | Input/Output: [(77 25 48 95) 25]
Test Case: 256 | Input/Output: [(45 38 89 9) 9]
Test Case: 257 | Input/Output: [(50 63 47 80) 47]
Test Case: 258 | Input/Output: [(59 99 18 54) 18]
Test Case: 259 | Input/Output: [(31 24 41 86) 24]
Test Case: 260 | Input/Output: [(93 15 12 24) 12]
Test Case: 261 | Input/Output: [(55 78 88 60) 55]
Test Case: 262 | Input/Output: [(4 49 31 94) 4]
Test Case: 263 | Input/Output: [(95 89 46 69) 46]
Test Case: 264 | Input/Output: [(32 73 40 20) 20]
Test Case: 265 | Input/Output: [(78 79 37 30) 30]
Test Case: 266 | Input/Output: [(21 39 64 26) 21]
Test Case: 267 | Input/Output: [(95 94 96 45) 45]
Test Case: 268 | Input/Output: [(20 22 91 21) 20]
Test Case: 269 | Input/Output: [(26 55 80 79) 26]
Test Case: 270 | Input/Output: [(59 54 7 73) 7]
Test Case: 271 | Input/Output: [(89 87 88 20) 20]
Test Case: 272 | Input/Output: [(42 72 66 90) 42]
Test Case: 273 | Input/Output: [(92 64 35 27) 27]
Test Case: 274 | Input/Output: [(62 91 65 21) 21]
Test Case: 275 | Input/Output: [(89 26 48 0) 0]
Test Case: 276 | Input/Output: [(51 77 17 89) 17]
Test Case: 277 | Input/Output: [(85 6 30 45) 6]
Test Case: 278 | Input/Output: [(83 19 67 65) 19]
Test Case: 279 | Input/Output: [(30 25 72 56) 25]
Test Case: 280 | Input/Output: [(92 72 9 40) 9]
Test Case: 281 | Input/Output: [(1 1 14 87) 1]
Test Case: 282 | Input/Output: [(47 89 75 56) 47]
Test Case: 283 | Input/Output: [(15 6 3 9) 3]
Test Case: 284 | Input/Output: [(14 57 9 53) 9]
Test Case: 285 | Input/Output: [(91 64 89 47) 47]
Test Case: 286 | Input/Output: [(44 100 48 89) 44]
Test Case: 287 | Input/Output: [(59 58 13 93) 13]
Test Case: 288 | Input/Output: [(16 21 33 39) 16]
Test Case: 289 | Input/Output: [(45 6 37 2) 2]
Test Case: 290 | Input/Output: [(71 86 87 34) 34]
Test Case: 291 | Input/Output: [(39 53 64 66) 39]
Test Case: 292 | Input/Output: [(85 1 91 76) 1]
Test Case: 293 | Input/Output: [(85 40 67 41) 40]
Test Case: 294 | Input/Output: [(85 55 33 81) 33]
Test Case: 295 | Input/Output: [(78 29 28 37) 28]
Test Case: 296 | Input/Output: [(19 5 46 7) 5]
Test Case: 297 | Input/Output: [(71 75 24 50) 24]
Test Case: 298 | Input/Output: [(7 6 2 49) 2]
Test Case: 299 | Input/Output: [(75 3 23 100) 3]
Test Case: 300 | Input/Output: [(75 29 43 10) 10]
Test Case: 301 | Input/Output: [(93 51 80 27) 27]
Test Case: 302 | Input/Output: [(53 91 9 73) 9]
Test Case: 303 | Input/Output: [(34 19 64 91) 19]
Test Case: 304 | Input/Output: [(58 18 17 34) 17]
Test Case: 305 | Input/Output: [(100 95 91 83) 83]
Test Case: 306 | Input/Output: [(73 14 71 40) 14]
Test Case: 307 | Input/Output: [(96 73 62 33) 33]
Test Case: 308 | Input/Output: [(54 81 7 36) 7]
Test Case: 309 | Input/Output: [(51 66 64 30) 30]
Test Case: 310 | Input/Output: [(48 80 74 94) 48]
Test Case: 311 | Input/Output: [(96 59 16 75) 16]
Test Case: 312 | Input/Output: [(78 72 48 98) 48]
Test Case: 313 | Input/Output: [(68 74 96 38) 38]
Test Case: 314 | Input/Output: [(21 11 45 36) 11]
Test Case: 315 | Input/Output: [(89 58 28 62) 28]
Test Case: 316 | Input/Output: [(28 31 20 11) 11]
Test Case: 317 | Input/Output: [(88 35 79 32) 32]
Test Case: 318 | Input/Output: [(94 73 52 85) 52]
Test Case: 319 | Input/Output: [(74 85 13 87) 13]
Test Case: 320 | Input/Output: [(54 70 7 8) 7]
Test Case: 321 | Input/Output: [(92 64 38 60) 38]
Test Case: 322 | Input/Output: [(90 59 27 65) 27]
Test Case: 323 | Input/Output: [(48 77 76 86) 48]
Test Case: 324 | Input/Output: [(98 41 70 72) 41]
Test Case: 325 | Input/Output: [(1 44 57 58) 1]
Test Case: 326 | Input/Output: [(30 23 12 88) 12]
Test Case: 327 | Input/Output: [(6 71 31 42) 6]
Test Case: 328 | Input/Output: [(39 28 47 46) 28]
Test Case: 329 | Input/Output: [(9 69 83 31) 9]
Test Case: 330 | Input/Output: [(22 32 58 69) 22]
Test Case: 331 | Input/Output: [(31 7 52 92) 7]
Test Case: 332 | Input/Output: [(54 15 24 62) 15]
Test Case: 333 | Input/Output: [(13 63 86 4) 4]
Test Case: 334 | Input/Output: [(90 4 49 50) 4]
Test Case: 335 | Input/Output: [(91 36 18 37) 18]
Test Case: 336 | Input/Output: [(46 77 36 62) 36]
Test Case: 337 | Input/Output: [(73 36 40 72) 36]
Test Case: 338 | Input/Output: [(92 25 66 70) 25]
Test Case: 339 | Input/Output: [(29 48 75 28) 28]
Test Case: 340 | Input/Output: [(87 59 51 23) 23]
Test Case: 341 | Input/Output: [(92 77 33 2) 2]
Test Case: 342 | Input/Output: [(21 0 11 72) 0]
Test Case: 343 | Input/Output: [(49 45 28 94) 28]
Test Case: 344 | Input/Output: [(91 73 47 89) 47]
Test Case: 345 | Input/Output: [(97 42 7 58) 7]
Test Case: 346 | Input/Output: [(16 66 39 58) 16]
Test Case: 347 | Input/Output: [(3 80 5 10) 3]
Test Case: 348 | Input/Output: [(29 85 90 76) 29]
Test Case: 349 | Input/Output: [(62 54 7 70) 7]
Test Case: 350 | Input/Output: [(95 69 31 13) 13]
Test Case: 351 | Input/Output: [(33 18 61 58) 18]
Test Case: 352 | Input/Output: [(85 62 51 69) 51]
Test Case: 353 | Input/Output: [(77 55 96 80) 55]
Test Case: 354 | Input/Output: [(0 80 85 0) 0]
Test Case: 355 | Input/Output: [(52 14 59 15) 14]
Test Case: 356 | Input/Output: [(91 13 20 57) 13]
Test Case: 357 | Input/Output: [(84 14 58 70) 14]
Test Case: 358 | Input/Output: [(31 96 93 33) 31]
Test Case: 359 | Input/Output: [(85 79 33 98) 33]
Test Case: 360 | Input/Output: [(53 96 94 41) 41]
Test Case: 361 | Input/Output: [(46 14 23 72) 14]
Test Case: 362 | Input/Output: [(26 94 55 94) 26]
Test Case: 363 | Input/Output: [(10 96 66 22) 10]
Test Case: 364 | Input/Output: [(82 72 47 55) 47]
Test Case: 365 | Input/Output: [(78 10 91 20) 10]
Test Case: 366 | Input/Output: [(97 75 79 18) 18]
Test Case: 367 | Input/Output: [(12 8 24 76) 8]
Test Case: 368 | Input/Output: [(36 57 49 6) 6]
Test Case: 369 | Input/Output: [(34 72 33 31) 31]
Test Case: 370 | Input/Output: [(1 98 24 100) 1]
Test Case: 371 | Input/Output: [(65 8 8 67) 8]
Test Case: 372 | Input/Output: [(55 66 18 1) 1]
Test Case: 373 | Input/Output: [(39 89 89 67) 39]
Test Case: 374 | Input/Output: [(16 72 38 63) 16]
Test Case: 375 | Input/Output: [(81 2 62 100) 2]
Test Case: 376 | Input/Output: [(94 23 32 20) 20]
Test Case: 377 | Input/Output: [(25 94 91 76) 25]
Test Case: 378 | Input/Output: [(32 5 24 69) 5]
Test Case: 379 | Input/Output: [(8 50 83 4) 4]
Test Case: 380 | Input/Output: [(13 70 89 52) 13]
Test Case: 381 | Input/Output: [(93 17 96 90) 17]
Test Case: 382 | Input/Output: [(100 71 70 39) 39]
Test Case: 383 | Input/Output: [(99 20 35 65) 20]
Test Case: 384 | Input/Output: [(10 87 35 87) 10]
Test Case: 385 | Input/Output: [(63 97 5 15) 5]
Test Case: 386 | Input/Output: [(7 99 85 31) 7]
Test Case: 387 | Input/Output: [(88 81 50 99) 50]
Test Case: 388 | Input/Output: [(80 59 80 82) 59]
Test Case: 389 | Input/Output: [(54 38 34 71) 34]
Test Case: 390 | Input/Output: [(59 94 97 10) 10]
Test Case: 391 | Input/Output: [(97 39 25 59) 25]
Test Case: 392 | Input/Output: [(75 62 78 84) 62]
Test Case: 393 | Input/Output: [(20 26 27 23) 20]
Test Case: 394 | Input/Output: [(19 56 93 14) 14]
Test Case: 395 | Input/Output: [(34 20 8 87) 8]
Test Case: 396 | Input/Output: [(70 41 25 66) 25]
Test Case: 397 | Input/Output: [(15 54 26 54) 15]
Test Case: 398 | Input/Output: [(72 24 70 75) 24]
Test Case: 399 | Input/Output: [(4 2 55 62) 2]
Test Case: 400 | Input/Output: [(8 89 -62 -70) -70]
Test Case: 401 | Input/Output: [(-75 30 26 -10) -75]
Test Case: 402 | Input/Output: [(-86 10 47 -93) -93]
Test Case: 403 | Input/Output: [(-13 -95 39 59) -95]
Test Case: 404 | Input/Output: [(93 27 61 -39) -39]
Test Case: 405 | Input/Output: [(86 16 2 -23) -23]
Test Case: 406 | Input/Output: [(38 -31 -6 -32) -32]
Test Case: 407 | Input/Output: [(85 40 96 -4) -4]
Test Case: 408 | Input/Output: [(0 -71 61 -59) -71]
Test Case: 409 | Input/Output: [(-4 82 -69 82) -69]
Test Case: 410 | Input/Output: [(89 -79 -31 -10) -79]
Test Case: 411 | Input/Output: [(92 -63 86 -50) -63]
Test Case: 412 | Input/Output: [(9 15 39 84) 9]
Test Case: 413 | Input/Output: [(-87 78 19 37) -87]
Test Case: 414 | Input/Output: [(-23 -95 -18 -85) -95]
Test Case: 415 | Input/Output: [(-42 -53 -15 48) -53]
Test Case: 416 | Input/Output: [(100 87 42 -45) -45]
Test Case: 417 | Input/Output: [(-97 -97 93 41) -97]
Test Case: 418 | Input/Output: [(36 96 87 38) 36]
Test Case: 419 | Input/Output: [(-90 1 53 -65) -90]
Test Case: 420 | Input/Output: [(19 -73 -40 -83) -83]
Test Case: 421 | Input/Output: [(-44 3 -4 86) -44]
Test Case: 422 | Input/Output: [(-40 79 -59 72) -59]
Test Case: 423 | Input/Output: [(-47 -38 2 42) -47]
Test Case: 424 | Input/Output: [(59 5 36 77) 5]
Test Case: 425 | Input/Output: [(6 -36 67 -17) -36]
Test Case: 426 | Input/Output: [(77 -22 67 91) -22]
Test Case: 427 | Input/Output: [(-43 47 -11 -73) -73]
Test Case: 428 | Input/Output: [(-8 30 56 63) -8]
Test Case: 429 | Input/Output: [(-77 -5 -49 -82) -82]
Test Case: 430 | Input/Output: [(-100 -32 -59 8) -100]
Test Case: 431 | Input/Output: [(-11 -33 -73 12) -73]
Test Case: 432 | Input/Output: [(-26 45 -62 4) -62]
Test Case: 433 | Input/Output: [(33 -31 -24 37) -31]
Test Case: 434 | Input/Output: [(-10 6 6 -86) -86]
Test Case: 435 | Input/Output: [(-75 28 51 -26) -75]
Test Case: 436 | Input/Output: [(-93 -38 -87 -48) -93]
Test Case: 437 | Input/Output: [(64 -49 -37 -34) -49]
Test Case: 438 | Input/Output: [(-4 54 -24 -49) -49]
Test Case: 439 | Input/Output: [(7 -38 -8 -29) -38]
Test Case: 440 | Input/Output: [(37 39 -6 88) -6]
Test Case: 441 | Input/Output: [(-67 47 80 80) -67]
Test Case: 442 | Input/Output: [(-75 76 50 5) -75]
Test Case: 443 | Input/Output: [(79 -61 -51 7) -61]
Test Case: 444 | Input/Output: [(52 60 42 -44) -44]
Test Case: 445 | Input/Output: [(-55 -65 -17 30) -65]
Test Case: 446 | Input/Output: [(-4 -100 -67 59) -100]
Test Case: 447 | Input/Output: [(-10 61 29 29) -10]
Test Case: 448 | Input/Output: [(30 81 -68 -89) -89]
Test Case: 449 | Input/Output: [(-38 14 -96 46) -96]
Test Case: 450 | Input/Output: [(57 39 76 -76) -76]
Test Case: 451 | Input/Output: [(-94 12 -52 0) -94]
Test Case: 452 | Input/Output: [(-42 -69 70 -31) -69]
Test Case: 453 | Input/Output: [(55 87 53 0) 0]
Test Case: 454 | Input/Output: [(52 -15 -64 -64) -64]
Test Case: 455 | Input/Output: [(-89 -65 -76 32) -89]
Test Case: 456 | Input/Output: [(-46 -48 -72 71) -72]
Test Case: 457 | Input/Output: [(15 42 17 -97) -97]
Test Case: 458 | Input/Output: [(-13 -26 58 -6) -26]
Test Case: 459 | Input/Output: [(6 86 -98 -63) -98]
Test Case: 460 | Input/Output: [(19 41 -57 -71) -71]
Test Case: 461 | Input/Output: [(-3 53 96 98) -3]
Test Case: 462 | Input/Output: [(2 14 56 63) 2]
Test Case: 463 | Input/Output: [(45 23 28 -80) -80]
Test Case: 464 | Input/Output: [(-28 20 65 61) -28]
Test Case: 465 | Input/Output: [(-80 -93 -85 47) -93]
Test Case: 466 | Input/Output: [(48 75 -15 -99) -99]
Test Case: 467 | Input/Output: [(-60 46 -94 -79) -94]
Test Case: 468 | Input/Output: [(37 1 -14 38) -14]
Test Case: 469 | Input/Output: [(13 100 -64 -37) -64]
Test Case: 470 | Input/Output: [(-74 -99 2 -57) -99]
Test Case: 471 | Input/Output: [(21 -26 69 -1) -26]
Test Case: 472 | Input/Output: [(5 -76 -82 -41) -82]
Test Case: 473 | Input/Output: [(11 -85 -28 -20) -85]
Test Case: 474 | Input/Output: [(-41 45 -18 78) -41]
Test Case: 475 | Input/Output: [(-65 44 21 -100) -100]
Test Case: 476 | Input/Output: [(-6 16 83 60) -6]
Test Case: 477 | Input/Output: [(34 46 -26 -9) -26]
Test Case: 478 | Input/Output: [(-31 24 84 -8) -31]
Test Case: 479 | Input/Output: [(19 15 49 -51) -51]
Test Case: 480 | Input/Output: [(57 99 -55 -1) -55]
Test Case: 481 | Input/Output: [(-62 38 0 -2) -62]
Test Case: 482 | Input/Output: [(27 -32 42 36) -32]
Test Case: 483 | Input/Output: [(99 -69 -70 47) -70]
Test Case: 484 | Input/Output: [(-27 -90 -44 -78) -90]
Test Case: 485 | Input/Output: [(-74 -71 -99 -42) -99]
Test Case: 486 | Input/Output: [(82 54 -74 -99) -99]
Test Case: 487 | Input/Output: [(17 -95 -59 -73) -95]
Test Case: 488 | Input/Output: [(56 59 49 25) 25]
Test Case: 489 | Input/Output: [(-6 -29 -96 -93) -96]
Test Case: 490 | Input/Output: [(61 24 51 26) 24]
Test Case: 491 | Input/Output: [(62 -80 -40 -9) -80]
Test Case: 492 | Input/Output: [(-44 10 80 60) -44]
Test Case: 493 | Input/Output: [(49 47 -67 48) -67]
Test Case: 494 | Input/Output: [(-66 29 -87 -15) -87]
Test Case: 495 | Input/Output: [(-19 -85 -95 25) -95]
Test Case: 496 | Input/Output: [(-92 6 49 78) -92]
Test Case: 497 | Input/Output: [(-82 -98 -82 -95) -98]
Test Case: 498 | Input/Output: [(65 94 -21 99) -21]
Test Case: 499 | Input/Output: [(88 -100 -39 17) -100]
Test Case: 500 | Input/Output: [(14 -58 -31 16) -58]
Test Case: 501 | Input/Output: [(6 98 -89 -75) -89]
Test Case: 502 | Input/Output: [(-10 -88 -82 90) -88]
Test Case: 503 | Input/Output: [(95 53 -76 -59) -76]
Test Case: 504 | Input/Output: [(-15 6 -63 -41) -63]
Test Case: 505 | Input/Output: [(52 -36 49 12) -36]
Test Case: 506 | Input/Output: [(-63 -5 10 81) -63]
Test Case: 507 | Input/Output: [(45 -42 -16 7) -42]
Test Case: 508 | Input/Output: [(36 -94 66 -34) -94]
Test Case: 509 | Input/Output: [(-17 34 57 -70) -70]
Test Case: 510 | Input/Output: [(55 33 60 -14) -14]
Test Case: 511 | Input/Output: [(-80 -49 38 38) -80]
Test Case: 512 | Input/Output: [(4 29 87 24) 4]
Test Case: 513 | Input/Output: [(-80 -19 100 22) -80]
Test Case: 514 | Input/Output: [(1 -58 41 44) -58]
Test Case: 515 | Input/Output: [(25 -24 -77 45) -77]
Test Case: 516 | Input/Output: [(43 -23 -46 21) -46]
Test Case: 517 | Input/Output: [(-57 -16 96 -25) -57]
Test Case: 518 | Input/Output: [(35 62 31 -6) -6]
Test Case: 519 | Input/Output: [(-88 -82 8 94) -88]
Test Case: 520 | Input/Output: [(-32 -14 49 20) -32]
Test Case: 521 | Input/Output: [(-88 -4 -27 -23) -88]
Test Case: 522 | Input/Output: [(-55 85 -89 -91) -91]
Test Case: 523 | Input/Output: [(-41 -7 -17 50) -41]
Test Case: 524 | Input/Output: [(33 30 -32 4) -32]
Test Case: 525 | Input/Output: [(3 92 25 -41) -41]
Test Case: 526 | Input/Output: [(-81 34 -19 10) -81]
Test Case: 527 | Input/Output: [(-54 -37 -99 68) -99]
Test Case: 528 | Input/Output: [(72 12 64 -51) -51]
Test Case: 529 | Input/Output: [(10 27 -14 0) -14]
Test Case: 530 | Input/Output: [(34 81 -69 -48) -69]
Test Case: 531 | Input/Output: [(-7 69 59 80) -7]
Test Case: 532 | Input/Output: [(-40 -4 -41 98) -41]
Test Case: 533 | Input/Output: [(57 -89 -75 26) -89]
Test Case: 534 | Input/Output: [(-62 -21 37 100) -62]
Test Case: 535 | Input/Output: [(-56 95 97 -91) -91]
Test Case: 536 | Input/Output: [(-13 -45 27 73) -45]
Test Case: 537 | Input/Output: [(-59 -88 55 24) -88]
Test Case: 538 | Input/Output: [(-3 93 -73 98) -73]
Test Case: 539 | Input/Output: [(17 -53 69 -27) -53]
Test Case: 540 | Input/Output: [(1 -81 -19 -80) -81]
Test Case: 541 | Input/Output: [(-24 1 -56 44) -56]
Test Case: 542 | Input/Output: [(-63 -78 28 -16) -78]
Test Case: 543 | Input/Output: [(-43 -16 54 2) -43]
Test Case: 544 | Input/Output: [(-49 -82 74 -3) -82]
Test Case: 545 | Input/Output: [(-53 -35 48 -10) -53]
Test Case: 546 | Input/Output: [(89 -54 -94 96) -94]
Test Case: 547 | Input/Output: [(-71 -38 -10 -31) -71]
Test Case: 548 | Input/Output: [(-78 3 57 40) -78]
Test Case: 549 | Input/Output: [(79 97 -28 -63) -63]
Test Case: 550 | Input/Output: [(40 -8 -58 -63) -63]
Test Case: 551 | Input/Output: [(-70 -47 56 -65) -70]
Test Case: 552 | Input/Output: [(-81 -92 85 36) -92]
Test Case: 553 | Input/Output: [(8 37 13 -60) -60]
Test Case: 554 | Input/Output: [(36 39 -20 -89) -89]
Test Case: 555 | Input/Output: [(72 -35 49 -56) -56]
Test Case: 556 | Input/Output: [(-77 -67 -98 1) -98]
Test Case: 557 | Input/Output: [(99 -51 -21 55) -51]
Test Case: 558 | Input/Output: [(-96 -50 -27 -21) -96]
Test Case: 559 | Input/Output: [(-5 -35 -14 -52) -52]
Test Case: 560 | Input/Output: [(14 -82 -24 46) -82]
Test Case: 561 | Input/Output: [(6 15 29 -98) -98]
Test Case: 562 | Input/Output: [(-14 -74 -30 82) -74]
Test Case: 563 | Input/Output: [(-80 92 -16 40) -80]
Test Case: 564 | Input/Output: [(-57 -13 20 -68) -68]
Test Case: 565 | Input/Output: [(21 -95 -75 -61) -95]
Test Case: 566 | Input/Output: [(0 -95 -12 16) -95]
Test Case: 567 | Input/Output: [(10 -85 43 -25) -85]
Test Case: 568 | Input/Output: [(28 -24 -20 -80) -80]
Test Case: 569 | Input/Output: [(-42 4 85 14) -42]
Test Case: 570 | Input/Output: [(-51 -64 20 74) -64]
Test Case: 571 | Input/Output: [(-8 40 35 18) -8]
Test Case: 572 | Input/Output: [(57 21 79 -25) -25]
Test Case: 573 | Input/Output: [(33 -2 44 -21) -21]
Test Case: 574 | Input/Output: [(-64 -40 -17 10) -64]
Test Case: 575 | Input/Output: [(72 69 35 -94) -94]
Test Case: 576 | Input/Output: [(37 33 79 -49) -49]
Test Case: 577 | Input/Output: [(-65 -33 90 -9) -65]
Test Case: 578 | Input/Output: [(-69 74 -92 -73) -92]
Test Case: 579 | Input/Output: [(74 -51 -7 35) -51]
Test Case: 580 | Input/Output: [(47 47 91 44) 44]
Test Case: 581 | Input/Output: [(43 73 30 33) 30]
Test Case: 582 | Input/Output: [(-78 44 99 -22) -78]
Test Case: 583 | Input/Output: [(-45 -60 14 99) -60]
Test Case: 584 | Input/Output: [(67 59 -45 30) -45]
Test Case: 585 | Input/Output: [(61 -98 -52 -99) -99]
Test Case: 586 | Input/Output: [(2 -72 -15 -98) -98]
Test Case: 587 | Input/Output: [(-80 -6 -34 -49) -80]
Test Case: 588 | Input/Output: [(-30 -10 83 60) -30]
Test Case: 589 | Input/Output: [(-25 52 70 -25) -25]
Test Case: 590 | Input/Output: [(-4 12 10 -34) -34]
Test Case: 591 | Input/Output: [(98 -11 72 -29) -29]
Test Case: 592 | Input/Output: [(-98 78 -2 -46) -98]
Test Case: 593 | Input/Output: [(56 -90 -4 -28) -90]
Test Case: 594 | Input/Output: [(48 -48 -24 92) -48]
Test Case: 595 | Input/Output: [(88 66 -75 -20) -75]
Test Case: 596 | Input/Output: [(-26 -71 75 15) -71]
Test Case: 597 | Input/Output: [(-84 -39 -61 -25) -84]
Test Case: 598 | Input/Output: [(-82 -20 64 2) -82]
Test Case: 599 | Input/Output: [(-51 30 99 -88) -88]
Test Case: 600 | Input/Output: [(41 -77 -97 11) -97]
Test Case: 601 | Input/Output: [(90 37 -85 97) -85]
Test Case: 602 | Input/Output: [(16 13 -39 -88) -88]
Test Case: 603 | Input/Output: [(-99 -38 -81 11) -99]
Test Case: 604 | Input/Output: [(-81 69 100 15) -81]
Test Case: 605 | Input/Output: [(-79 9 -73 49) -79]
Test Case: 606 | Input/Output: [(-59 0 93 67) -59]
Test Case: 607 | Input/Output: [(47 -68 31 -28) -68]
Test Case: 608 | Input/Output: [(77 -53 84 -91) -91]
Test Case: 609 | Input/Output: [(83 -31 12 60) -31]
Test Case: 610 | Input/Output: [(9 -58 -82 96) -82]
Test Case: 611 | Input/Output: [(11 -100 -82 30) -100]
Test Case: 612 | Input/Output: [(36 -85 15 -99) -99]
Test Case: 613 | Input/Output: [(-69 89 54 -21) -69]
Test Case: 614 | Input/Output: [(-91 -77 -61 -95) -95]
Test Case: 615 | Input/Output: [(-56 39 -33 74) -56]
Test Case: 616 | Input/Output: [(9 -9 100 -43) -43]
Test Case: 617 | Input/Output: [(-52 88 -15 -58) -58]
Test Case: 618 | Input/Output: [(97 96 59 -44) -44]
Test Case: 619 | Input/Output: [(12 55 84 30) 12]
Test Case: 620 | Input/Output: [(-41 86 -71 42) -71]
Test Case: 621 | Input/Output: [(33 -21 -38 -16) -38]
Test Case: 622 | Input/Output: [(-79 98 33 -56) -79]
Test Case: 623 | Input/Output: [(5 90 10 27) 5]
Test Case: 624 | Input/Output: [(-16 -43 -20 -89) -89]
Test Case: 625 | Input/Output: [(-39 -58 -11 68) -58]
Test Case: 626 | Input/Output: [(86 -7 67 96) -7]
Test Case: 627 | Input/Output: [(6 -50 -13 62) -50]
Test Case: 628 | Input/Output: [(-14 -33 62 -94) -94]
Test Case: 629 | Input/Output: [(85 96 -99 -16) -99]
Test Case: 630 | Input/Output: [(-86 58 -8 -81) -86]
Test Case: 631 | Input/Output: [(-63 -62 -91 -22) -91]
Test Case: 632 | Input/Output: [(14 45 13 -23) -23]
Test Case: 633 | Input/Output: [(39 0 34 -80) -80]
Test Case: 634 | Input/Output: [(-75 -52 67 21) -75]
Test Case: 635 | Input/Output: [(-92 -96 32 -51) -96]
Test Case: 636 | Input/Output: [(76 -43 37 -20) -43]
Test Case: 637 | Input/Output: [(25 -6 40 -13) -13]
Test Case: 638 | Input/Output: [(-53 -6 49 -86) -86]
Test Case: 639 | Input/Output: [(-62 -72 -100 15) -100]
Test Case: 640 | Input/Output: [(73 -54 -84 -89) -89]
Test Case: 641 | Input/Output: [(10 33 -95 67) -95]
Test Case: 642 | Input/Output: [(-29 -64 -13 -63) -64]
Test Case: 643 | Input/Output: [(95 89 88 38) 38]
Test Case: 644 | Input/Output: [(-4 85 -49 15) -49]
Test Case: 645 | Input/Output: [(41 39 2 -29) -29]
Test Case: 646 | Input/Output: [(-96 84 26 -3) -96]
Test Case: 647 | Input/Output: [(74 -19 97 95) -19]
Test Case: 648 | Input/Output: [(-63 43 71 56) -63]
Test Case: 649 | Input/Output: [(-99 -8 5 93) -99]
Test Case: 650 | Input/Output: [(88 59 -38 -92) -92]
Test Case: 651 | Input/Output: [(74 0 99 -17) -17]
Test Case: 652 | Input/Output: [(5 12 -30 -40) -40]
Test Case: 653 | Input/Output: [(18 -9 93 -57) -57]
Test Case: 654 | Input/Output: [(-99 96 -61 15) -99]
Test Case: 655 | Input/Output: [(1 -39 -69 92) -69]
Test Case: 656 | Input/Output: [(12 51 -61 74) -61]
Test Case: 657 | Input/Output: [(13 57 98 89) 13]
Test Case: 658 | Input/Output: [(84 -94 -3 96) -94]
Test Case: 659 | Input/Output: [(-74 89 5 59) -74]
Test Case: 660 | Input/Output: [(-83 13 41 -70) -83]
Test Case: 661 | Input/Output: [(5 -78 -46 77) -78]
Test Case: 662 | Input/Output: [(-16 -35 -77 -87) -87]
Test Case: 663 | Input/Output: [(0 -23 -48 -96) -96]
Test Case: 664 | Input/Output: [(98 -41 -34 -39) -41]
Test Case: 665 | Input/Output: [(-4 12 9 -59) -59]
Test Case: 666 | Input/Output: [(-49 -15 -9 -92) -92]
Test Case: 667 | Input/Output: [(7 15 -74 -35) -74]
Test Case: 668 | Input/Output: [(62 -31 -97 -28) -97]
Test Case: 669 | Input/Output: [(-58 -5 -31 -81) -81]
Test Case: 670 | Input/Output: [(84 -93 99 17) -93]
Test Case: 671 | Input/Output: [(6 -57 45 51) -57]
Test Case: 672 | Input/Output: [(-50 30 32 69) -50]
Test Case: 673 | Input/Output: [(6 -17 7 -36) -36]
Test Case: 674 | Input/Output: [(48 3 67 6) 3]
Test Case: 675 | Input/Output: [(-24 -85 -15 43) -85]
Test Case: 676 | Input/Output: [(53 -76 6 39) -76]
Test Case: 677 | Input/Output: [(57 -58 -2 -36) -58]
Test Case: 678 | Input/Output: [(99 10 -84 -22) -84]
Test Case: 679 | Input/Output: [(36 63 -72 -88) -88]
Test Case: 680 | Input/Output: [(-98 12 75 1) -98]
Test Case: 681 | Input/Output: [(-90 -7 57 86) -90]
Test Case: 682 | Input/Output: [(32 85 -22 64) -22]
Test Case: 683 | Input/Output: [(-53 69 65 89) -53]
Test Case: 684 | Input/Output: [(-76 10 -4 1) -76]
Test Case: 685 | Input/Output: [(-36 99 44 -17) -36]
Test Case: 686 | Input/Output: [(87 -51 -61 -3) -61]
Test Case: 687 | Input/Output: [(-80 33 -3 47) -80]
Test Case: 688 | Input/Output: [(51 74 95 -98) -98]
Test Case: 689 | Input/Output: [(72 70 67 -53) -53]
Test Case: 690 | Input/Output: [(99 6 89 63) 6]
Test Case: 691 | Input/Output: [(-94 76 36 25) -94]
Test Case: 692 | Input/Output: [(3 -47 -5 32) -47]
Test Case: 693 | Input/Output: [(51 10 -3 86) -3]
Test Case: 694 | Input/Output: [(-31 54 -48 79) -48]
Test Case: 695 | Input/Output: [(-38 -73 3 46) -73]
Test Case: 696 | Input/Output: [(55 -69 21 41) -69]
Test Case: 697 | Input/Output: [(22 59 23 23) 22]
Test Case: 698 | Input/Output: [(30 34 55 -25) -25]
Test Case: 699 | Input/Output: [(89 44 35 44) 35]
Test Case: 700 | Input/Output: [(39 -22 18 43) -22]
Test Case: 701 | Input/Output: [(-77 -65 86 -41) -77]
Test Case: 702 | Input/Output: [(1 40 85 23) 1]
Test Case: 703 | Input/Output: [(69 58 23 18) 18]
Test Case: 704 | Input/Output: [(88 -13 -26 -66) -66]
Test Case: 705 | Input/Output: [(-31 -22 48 27) -31]
Test Case: 706 | Input/Output: [(64 9 92 -20) -20]
Test Case: 707 | Input/Output: [(-80 1 12 -63) -80]
Test Case: 708 | Input/Output: [(-71 85 3 98) -71]
Test Case: 709 | Input/Output: [(69 99 90 -64) -64]
Test Case: 710 | Input/Output: [(-85 -65 4 34) -85]
Test Case: 711 | Input/Output: [(-76 41 -61 77) -76]
Test Case: 712 | Input/Output: [(-13 -9 -82 56) -82]
Test Case: 713 | Input/Output: [(57 -75 -48 -98) -98]
Test Case: 714 | Input/Output: [(99 30 62 -3) -3]
Test Case: 715 | Input/Output: [(-54 -92 -88 70) -92]
Test Case: 716 | Input/Output: [(32 -69 17 48) -69]
Test Case: 717 | Input/Output: [(-93 -56 -42 -50) -93]
Test Case: 718 | Input/Output: [(83 32 58 -50) -50]
Test Case: 719 | Input/Output: [(-7 -79 8 -66) -79]
Test Case: 720 | Input/Output: [(-88 7 -87 90) -88]
Test Case: 721 | Input/Output: [(-51 100 -11 -67) -67]
Test Case: 722 | Input/Output: [(-30 54 -7 -64) -64]
Test Case: 723 | Input/Output: [(-21 17 0 -44) -44]
Test Case: 724 | Input/Output: [(-31 61 7 -5) -31]
Test Case: 725 | Input/Output: [(86 -86 -24 -21) -86]
Test Case: 726 | Input/Output: [(36 -21 66 58) -21]
Test Case: 727 | Input/Output: [(-57 -41 80 51) -57]
Test Case: 728 | Input/Output: [(-79 84 2 59) -79]
Test Case: 729 | Input/Output: [(-95 -47 59 81) -95]
Test Case: 730 | Input/Output: [(10 30 -39 5) -39]
Test Case: 731 | Input/Output: [(-63 40 4 78) -63]
Test Case: 732 | Input/Output: [(-35 -5 -46 -13) -46]
Test Case: 733 | Input/Output: [(-72 -65 97 68) -72]
Test Case: 734 | Input/Output: [(-51 98 52 -60) -60]
Test Case: 735 | Input/Output: [(-11 18 32 -63) -63]
Test Case: 736 | Input/Output: [(-53 2 -58 -78) -78]
Test Case: 737 | Input/Output: [(88 -50 -82 -95) -95]
Test Case: 738 | Input/Output: [(31 -28 53 41) -28]
Test Case: 739 | Input/Output: [(76 28 -66 -29) -66]
Test Case: 740 | Input/Output: [(52 97 48 -55) -55]
Test Case: 741 | Input/Output: [(-79 80 -38 -54) -79]
Test Case: 742 | Input/Output: [(58 80 -88 -25) -88]
Test Case: 743 | Input/Output: [(72 -93 -84 -40) -93]
Test Case: 744 | Input/Output: [(-68 88 -62 -70) -70]
Test Case: 745 | Input/Output: [(-67 85 42 -33) -67]
Test Case: 746 | Input/Output: [(34 67 30 1) 1]
Test Case: 747 | Input/Output: [(63 -81 61 72) -81]
Test Case: 748 | Input/Output: [(88 -71 39 80) -71]
Test Case: 749 | Input/Output: [(-15 -12 -76 -36) -76]
Test Case: 750 | Input/Output: [(41 88 53 -43) -43]
Test Case: 751 | Input/Output: [(79 -2 33 -69) -69]
Test Case: 752 | Input/Output: [(85 76 -31 77) -31]
Test Case: 753 | Input/Output: [(-24 -37 -56 7) -56]
Test Case: 754 | Input/Output: [(67 64 -28 -62) -62]
Test Case: 755 | Input/Output: [(-91 63 -81 -56) -91]
Test Case: 756 | Input/Output: [(-16 62 -12 23) -16]
Test Case: 757 | Input/Output: [(59 94 -55 -73) -73]
Test Case: 758 | Input/Output: [(-42 55 -74 -61) -74]
Test Case: 759 | Input/Output: [(64 -55 -98 -28) -98]
Test Case: 760 | Input/Output: [(-77 -41 -38 -91) -91]
Test Case: 761 | Input/Output: [(99 -83 -19 74) -83]
Test Case: 762 | Input/Output: [(4 75 -49 11) -49]
Test Case: 763 | Input/Output: [(56 -84 41 35) -84]
Test Case: 764 | Input/Output: [(43 -50 70 97) -50]
Test Case: 765 | Input/Output: [(20 78 89 64) 20]
Test Case: 766 | Input/Output: [(79 -89 -74 38) -89]
Test Case: 767 | Input/Output: [(-45 41 -36 13) -45]
Test Case: 768 | Input/Output: [(53 20 -52 79) -52]
Test Case: 769 | Input/Output: [(2 -54 95 -51) -54]
Test Case: 770 | Input/Output: [(-43 79 20 -22) -43]
Test Case: 771 | Input/Output: [(-70 -94 -30 52) -94]
Test Case: 772 | Input/Output: [(-87 -24 -97 53) -97]
Test Case: 773 | Input/Output: [(38 -28 20 5) -28]
Test Case: 774 | Input/Output: [(-67 -92 82 97) -92]
Test Case: 775 | Input/Output: [(-8 -14 44 -13) -14]
Test Case: 776 | Input/Output: [(-65 37 74 10) -65]
Test Case: 777 | Input/Output: [(-1 76 66 65) -1]
Test Case: 778 | Input/Output: [(26 13 -29 13) -29]
Test Case: 779 | Input/Output: [(52 82 -17 13) -17]
Test Case: 780 | Input/Output: [(47 42 23 -19) -19]
Test Case: 781 | Input/Output: [(-32 -53 55 -61) -61]
Test Case: 782 | Input/Output: [(4 -31 38 7) -31]
Test Case: 783 | Input/Output: [(88 -94 50 -75) -94]
Test Case: 784 | Input/Output: [(-27 -48 74 42) -48]
Test Case: 785 | Input/Output: [(21 -70 89 -88) -88]
Test Case: 786 | Input/Output: [(-11 53 4 83) -11]
Test Case: 787 | Input/Output: [(-4 -80 -48 85) -80]
Test Case: 788 | Input/Output: [(80 46 -28 -6) -28]
Test Case: 789 | Input/Output: [(-43 77 -68 -78) -78]
Test Case: 790 | Input/Output: [(69 -69 59 75) -69]
Test Case: 791 | Input/Output: [(-61 -17 46 -9) -61]
Test Case: 792 | Input/Output: [(-6 -65 22 32) -65]
Test Case: 793 | Input/Output: [(-73 80 41 -33) -73]
Test Case: 794 | Input/Output: [(29 46 30 95) 29]
Test Case: 795 | Input/Output: [(-77 90 -57 36) -77]
Test Case: 796 | Input/Output: [(21 30 -78 29) -78]
Test Case: 797 | Input/Output: [(10 -67 -86 1) -86]
Test Case: 798 | Input/Output: [(71 6 -75 98) -75]
Test Case: 799 | Input/Output: [(-55 -81 -29 4) -81]
Test Case: 800 | Input/Output: [(84 35 -35 -97) -97]
Test Case: 801 | Input/Output: [(62 43 -87 -66) -87]
Test Case: 802 | Input/Output: [(-70 -66 -59 94) -70]
Test Case: 803 | Input/Output: [(98 88 -68 -56) -68]
Test Case: 804 | Input/Output: [(-11 -20 83 -62) -62]
Test Case: 805 | Input/Output: [(55 -96 -53 -89) -96]
Test Case: 806 | Input/Output: [(-11 -17 -70 100) -70]
Test Case: 807 | Input/Output: [(-97 -76 85 -25) -97]
Test Case: 808 | Input/Output: [(20 99 13 -21) -21]
Test Case: 809 | Input/Output: [(85 62 42 -30) -30]
Test Case: 810 | Input/Output: [(-53 -46 76 56) -53]
Test Case: 811 | Input/Output: [(-54 -50 27 -34) -54]
Test Case: 812 | Input/Output: [(-75 -29 15 17) -75]
Test Case: 813 | Input/Output: [(40 -84 64 29) -84]
Test Case: 814 | Input/Output: [(-90 54 -67 -90) -90]
Test Case: 815 | Input/Output: [(60 91 54 94) 54]
Test Case: 816 | Input/Output: [(-19 54 -92 -1) -92]
Test Case: 817 | Input/Output: [(41 80 -78 78) -78]
Test Case: 818 | Input/Output: [(5 61 -67 -24) -67]
Test Case: 819 | Input/Output: [(95 -8 61 -79) -79]
Test Case: 820 | Input/Output: [(-47 -55 -84 -33) -84]
Test Case: 821 | Input/Output: [(-13 33 20 0) -13]
Test Case: 822 | Input/Output: [(-6 26 6 16) -6]
Test Case: 823 | Input/Output: [(81 7 61 -54) -54]
Test Case: 824 | Input/Output: [(4 65 90 -25) -25]
Test Case: 825 | Input/Output: [(1 -5 -45 -96) -96]
Test Case: 826 | Input/Output: [(-93 56 22 -73) -93]
Test Case: 827 | Input/Output: [(39 33 15 -49) -49]
Test Case: 828 | Input/Output: [(87 72 58 -88) -88]
Test Case: 829 | Input/Output: [(-9 -37 58 -39) -39]
Test Case: 830 | Input/Output: [(69 33 49 29) 29]
Test Case: 831 | Input/Output: [(27 -35 16 77) -35]
Test Case: 832 | Input/Output: [(69 62 47 -72) -72]
Test Case: 833 | Input/Output: [(-87 22 85 -52) -87]
Test Case: 834 | Input/Output: [(-72 -92 61 21) -92]
Test Case: 835 | Input/Output: [(-24 57 -43 93) -43]
Test Case: 836 | Input/Output: [(83 -23 -11 -69) -69]
Test Case: 837 | Input/Output: [(41 -64 -14 0) -64]
Test Case: 838 | Input/Output: [(-10 23 -64 -9) -64]
Test Case: 839 | Input/Output: [(68 82 -59 98) -59]
Test Case: 840 | Input/Output: [(16 81 48 -98) -98]
Test Case: 841 | Input/Output: [(51 72 18 -78) -78]
Test Case: 842 | Input/Output: [(59 13 -49 -43) -49]
Test Case: 843 | Input/Output: [(35 84 20 -16) -16]
Test Case: 844 | Input/Output: [(-19 -67 7 19) -67]
Test Case: 845 | Input/Output: [(-27 4 -85 81) -85]
Test Case: 846 | Input/Output: [(84 -14 77 -99) -99]
Test Case: 847 | Input/Output: [(-93 14 -89 -76) -93]
Test Case: 848 | Input/Output: [(48 5 -40 -81) -81]
Test Case: 849 | Input/Output: [(11 -68 28 -26) -68]
Test Case: 850 | Input/Output: [(-23 37 15 -43) -43]
Test Case: 851 | Input/Output: [(23 -76 -64 45) -76]
Test Case: 852 | Input/Output: [(22 -50 51 83) -50]
Test Case: 853 | Input/Output: [(-32 29 19 -59) -59]
Test Case: 854 | Input/Output: [(66 -80 -95 74) -95]
Test Case: 855 | Input/Output: [(-27 50 -1 -44) -44]
Test Case: 856 | Input/Output: [(-68 -71 -11 -36) -71]
Test Case: 857 | Input/Output: [(48 36 -31 -44) -44]
Test Case: 858 | Input/Output: [(-76 10 -99 -57) -99]
Test Case: 859 | Input/Output: [(-23 -71 2 51) -71]
Test Case: 860 | Input/Output: [(-52 -72 67 84) -72]
Test Case: 861 | Input/Output: [(-57 -36 38 -24) -57]
Test Case: 862 | Input/Output: [(25 55 -73 -70) -73]
Test Case: 863 | Input/Output: [(72 -60 -17 -6) -60]
Test Case: 864 | Input/Output: [(86 16 19 -88) -88]
Test Case: 865 | Input/Output: [(-83 -61 -77 -27) -83]
Test Case: 866 | Input/Output: [(12 -91 -60 71) -91]
Test Case: 867 | Input/Output: [(-55 0 44 23) -55]
Test Case: 868 | Input/Output: [(-89 -71 37 -72) -89]
Test Case: 869 | Input/Output: [(-1 -43 -88 -54) -88]
Test Case: 870 | Input/Output: [(97 -37 8 -49) -49]
Test Case: 871 | Input/Output: [(-17 88 -97 -63) -97]
Test Case: 872 | Input/Output: [(58 32 -74 -100) -100]
Test Case: 873 | Input/Output: [(11 27 -59 -88) -88]
Test Case: 874 | Input/Output: [(-14 55 13 4) -14]
Test Case: 875 | Input/Output: [(-100 1 -27 76) -100]
Test Case: 876 | Input/Output: [(-40 9 94 27) -40]
Test Case: 877 | Input/Output: [(21 28 28 -26) -26]
Test Case: 878 | Input/Output: [(44 63 36 -62) -62]
Test Case: 879 | Input/Output: [(-86 -87 60 -24) -87]
Test Case: 880 | Input/Output: [(-97 -53 19 -80) -97]
Test Case: 881 | Input/Output: [(-3 -88 -70 36) -88]
Test Case: 882 | Input/Output: [(-61 28 54 24) -61]
Test Case: 883 | Input/Output: [(10 -10 97 73) -10]
Test Case: 884 | Input/Output: [(-69 55 6 50) -69]
Test Case: 885 | Input/Output: [(-30 -55 45 -98) -98]
Test Case: 886 | Input/Output: [(-90 -35 44 -63) -90]
Test Case: 887 | Input/Output: [(29 45 52 -87) -87]
Test Case: 888 | Input/Output: [(51 -43 -73 93) -73]
Test Case: 889 | Input/Output: [(-51 -52 92 23) -52]
Test Case: 890 | Input/Output: [(77 6 -94 -84) -94]
Test Case: 891 | Input/Output: [(55 -83 15 -12) -83]
Test Case: 892 | Input/Output: [(-46 81 -56 80) -56]
Test Case: 893 | Input/Output: [(71 8 3 82) 3]
Test Case: 894 | Input/Output: [(-84 92 75 -48) -84]
Test Case: 895 | Input/Output: [(-66 49 81 1) -66]
Test Case: 896 | Input/Output: [(67 -27 95 21) -27]
Test Case: 897 | Input/Output: [(-75 -56 77 -65) -75]
Test Case: 898 | Input/Output: [(-33 0 46 -82) -82]
Test Case: 899 | Input/Output: [(58 -56 68 -74) -74]
Test Case: 900 | Input/Output: [(31 -51 10 -40) -51]
Test Case: 901 | Input/Output: [(90 -45 1 57) -45]
Test Case: 902 | Input/Output: [(-64 98 49 65) -64]
Test Case: 903 | Input/Output: [(35 -50 -21 26) -50]
Test Case: 904 | Input/Output: [(-75 -17 3 89) -75]
Test Case: 905 | Input/Output: [(-30 61 9 -85) -85]
Test Case: 906 | Input/Output: [(-41 -40 54 -100) -100]
Test Case: 907 | Input/Output: [(-90 76 82 15) -90]
Test Case: 908 | Input/Output: [(86 -7 86 -77) -77]
Test Case: 909 | Input/Output: [(-14 -73 15 -1) -73]
Test Case: 910 | Input/Output: [(8 95 -85 8) -85]
Test Case: 911 | Input/Output: [(0 -26 76 -86) -86]
Test Case: 912 | Input/Output: [(-80 -5 30 -69) -80]
Test Case: 913 | Input/Output: [(-85 32 13 -67) -85]
Test Case: 914 | Input/Output: [(28 -86 -49 50) -86]
Test Case: 915 | Input/Output: [(16 -48 70 64) -48]
Test Case: 916 | Input/Output: [(22 -73 81 75) -73]
Test Case: 917 | Input/Output: [(-44 75 93 13) -44]
Test Case: 918 | Input/Output: [(-88 39 41 42) -88]
Test Case: 919 | Input/Output: [(80 -59 -91 -19) -91]
Test Case: 920 | Input/Output: [(49 -77 -24 -81) -81]
Test Case: 921 | Input/Output: [(-31 23 33 -75) -75]
Test Case: 922 | Input/Output: [(27 81 -73 47) -73]
Test Case: 923 | Input/Output: [(-49 11 15 -54) -54]
Test Case: 924 | Input/Output: [(-90 84 53 -25) -90]
Test Case: 925 | Input/Output: [(-86 47 -92 41) -92]
Test Case: 926 | Input/Output: [(-41 -8 71 27) -41]
Test Case: 927 | Input/Output: [(-8 -20 34 -54) -54]
Test Case: 928 | Input/Output: [(64 67 90 -65) -65]
Test Case: 929 | Input/Output: [(99 -2 30 49) -2]
Test Case: 930 | Input/Output: [(-26 10 -55 7) -55]
Test Case: 931 | Input/Output: [(65 33 33 -93) -93]
Test Case: 932 | Input/Output: [(21 27 58 -16) -16]
Test Case: 933 | Input/Output: [(-82 23 -81 27) -82]
Test Case: 934 | Input/Output: [(6 72 -40 -5) -40]
Test Case: 935 | Input/Output: [(73 -12 75 -82) -82]
Test Case: 936 | Input/Output: [(-9 -15 -73 1) -73]
Test Case: 937 | Input/Output: [(-75 89 -83 21) -83]
Test Case: 938 | Input/Output: [(69 -34 54 -36) -36]
Test Case: 939 | Input/Output: [(12 -19 7 -74) -74]
Test Case: 940 | Input/Output: [(42 78 -48 73) -48]
Test Case: 941 | Input/Output: [(12 -45 -4 57) -45]
Test Case: 942 | Input/Output: [(-84 89 -64 14) -84]
Test Case: 943 | Input/Output: [(53 -4 51 20) -4]
Test Case: 944 | Input/Output: [(-84 12 90 -83) -84]
Test Case: 945 | Input/Output: [(12 -37 34 -5) -37]
Test Case: 946 | Input/Output: [(33 22 -61 75) -61]
Test Case: 947 | Input/Output: [(54 13 -88 -78) -88]
Test Case: 948 | Input/Output: [(53 82 96 -66) -66]
Test Case: 949 | Input/Output: [(87 30 -84 -31) -84]
Test Case: 950 | Input/Output: [(-83 -11 -62 -29) -83]
Test Case: 951 | Input/Output: [(-91 29 -67 -53) -91]
Test Case: 952 | Input/Output: [(76 -16 -64 -41) -64]
Test Case: 953 | Input/Output: [(36 -21 73 49) -21]
Test Case: 954 | Input/Output: [(74 -21 -96 -16) -96]
Test Case: 955 | Input/Output: [(95 53 18 -10) -10]
Test Case: 956 | Input/Output: [(4 -23 -23 48) -23]
Test Case: 957 | Input/Output: [(17 5 56 -50) -50]
Test Case: 958 | Input/Output: [(40 43 -5 45) -5]
Test Case: 959 | Input/Output: [(-44 -56 -42 16) -56]
Test Case: 960 | Input/Output: [(81 16 76 -29) -29]
Test Case: 961 | Input/Output: [(51 68 -32 -30) -32]
Test Case: 962 | Input/Output: [(36 -62 -52 82) -62]
Test Case: 963 | Input/Output: [(-45 22 78 -87) -87]
Test Case: 964 | Input/Output: [(37 -50 -90 47) -90]
Test Case: 965 | Input/Output: [(21 72 -49 -67) -67]
Test Case: 966 | Input/Output: [(-11 -45 -49 -50) -50]
Test Case: 967 | Input/Output: [(-20 10 95 -41) -41]
Test Case: 968 | Input/Output: [(-2 100 42 -70) -70]
Test Case: 969 | Input/Output: [(51 61 -64 54) -64]
Test Case: 970 | Input/Output: [(72 -84 -83 53) -84]
Test Case: 971 | Input/Output: [(-56 59 98 75) -56]
Test Case: 972 | Input/Output: [(78 95 -62 39) -62]
Test Case: 973 | Input/Output: [(54 -69 -91 -85) -91]
Test Case: 974 | Input/Output: [(53 83 75 -5) -5]
Test Case: 975 | Input/Output: [(-17 22 26 -18) -18]
Test Case: 976 | Input/Output: [(-70 -71 -20 89) -71]
Test Case: 977 | Input/Output: [(-54 -26 -32 5) -54]
Test Case: 978 | Input/Output: [(12 88 33 -67) -67]
Test Case: 979 | Input/Output: [(-75 68 -21 71) -75]
Test Case: 980 | Input/Output: [(39 6 20 -22) -22]
Test Case: 981 | Input/Output: [(-96 -6 -16 3) -96]
Test Case: 982 | Input/Output: [(62 34 -48 -45) -48]
Test Case: 983 | Input/Output: [(83 67 93 -45) -45]
Test Case: 984 | Input/Output: [(60 83 28 -1) -1]
Test Case: 985 | Input/Output: [(50 31 7 94) 7]
Test Case: 986 | Input/Output: [(-37 83 22 -84) -84]
Test Case: 987 | Input/Output: [(47 92 48 -8) -8]
Test Case: 988 | Input/Output: [(-21 38 55 -52) -52]
Test Case: 989 | Input/Output: [(-25 36 35 69) -25]
Test Case: 990 | Input/Output: [(-65 -95 -69 85) -95]
Test Case: 991 | Input/Output: [(-40 -69 -34 84) -69]
Test Case: 992 | Input/Output: [(98 -70 90 76) -70]
Test Case: 993 | Input/Output: [(-33 72 36 16) -33]
Test Case: 994 | Input/Output: [(-48 -72 -72 47) -72]
Test Case: 995 | Input/Output: [(95 -48 -95 29) -95]
Test Case: 996 | Input/Output: [(-33 -78 15 14) -78]
Test Case: 997 | Input/Output: [(-48 -13 -5 -100) -100]
Test Case: 998 | Input/Output: [(-49 -15 23 2) -49]
Test Case: 999 | Input/Output: [(76 -13 33 71) -13]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 55 -19 -55 99 -76 -33 112 39 -11 -47 61 -125 -108 111 -119 120
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[13 13 13 83] 13] [[42 42 42 -22] -22] [[-79 -37 -79 -79] -79] [[-75 -75 -75 21] -75] [[45 45 67 45] 45] [[-80 -80 64 -80] -80] [[85 85 85 1] 1] [[-79 -76 -76 -76] -79] [[5 5 82 5] 5] [[-80 50 -80 -80] -80] [(39 39 39 39) 39] [(-91 -91 -91 -91) -91] [(-89 -89 -89 -89) -89] [(-79 -79 -79 -79) -79] [(-2 -2 -2 -2) -2] [(16 99 77 37) 16] [(98 83 21 61) 21] [(6 63 11 91) 6] [(10 22 77 43) 10] [(32 16 20 15) 15] [(2 75 20 2) 2] [(40 83 89 40) 40] [(62 37 82 82) 37] [(21 57 10 92) 10] [(56 85 69 99) 56] [(58 19 11 77) 11] [(86 56 11 70) 11] [(71 76 60 46) 46] [(56 5 54 6) 5] [(29 28 47 25) 25] [(86 91 49 56) 49] [(33 45 98 33) 33] [(55 40 73 70) 40] [(6 24 57 25) 6] [(4 19 85 83) 4] [(-93 -57 15 -36) -93] [(-50 27 -79 76) -79] [(96 84 -80 52) -80] [(-72 5 57 -85) -85] [(53 48 19 -56) -56] [(-13 -50 23 -63) -63] [(-38 60 -8 17) -38] [(48 -29 84 35) -29] [(-100 -20 37 59) -100] [(19 87 -1 -35) -35] [(-96 -47 37 -61) -96] [(-28 -100 -74 10) -100] [(53 -93 79 -97) -97] [(-11 -45 42 38) -45] [(-2 -69 -16 63) -69] [(90 29 -80 96) -80] [(3 55 47 39) 3] [(51 55 -51 -86) -86] [(80 -97 3 35) -97] [(90 27 -23 10) -23] [(-35 -51 47 83) -51] [(-18 77 -25 10) -25] [(5 -72 97 -71) -72] [(-58 -89 50 99) -89] [(42 89 71 81) 42] [(-18 -14 -63 -24) -63] [(-78 77 88 1) -78] [(69 8 -89 -36) -89] [(-95 -56 21 -22) -95] [(-63 -85 -68 -81) -85] [(-8 -58 85 -46) -58] [(71 70 49 30) 30] [(-56 -58 -7 -72) -72] [(60 4 3 70) 3] [(-81 -53 -97 62) -97] [(91 87 90 -80) -80] [(80 -46 -33 -55) -55] [(53 -29 33 54) -29] [(88 37 -100 -53) -100] [(52 -5 79 -86) -86] [(-30 32 -90 -11) -90] [(-66 -27 -41 56) -66] [(-100 -65 60 -51) -100] [(82 -85 46 15) -85] [(-12 90 -52 -50) -52] [(47 59 23 63) 23] [(94 42 -18 -12) -18] [(-8 -77 -30 -30) -77] [(79 -76 98 -29) -76] [(58 -2 92 78) -2] [(-9 -49 -68 -8) -68] [(22 -45 -6 -27) -45] [(22 80 -16 -8) -16] [(62 71 -98 -13) -98] [(-49 22 -82 76) -82] [(-75 -88 66 33) -88] [(-79 100 14 -88) -88] [(2 75 -33 -2) -33] [(94 79 85 -47) -47] [(-29 16 -43 -64) -64])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 672
Test mean error for best: 0.67200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: 64                 
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37                 
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 21                 
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: 60                 
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items})
Lexicase best program: (integer_yankdup in3 print_integer boolean_and integer_rot exec_yank integer_add boolean_flush print_boolean exec_flush in2 boolean_eq exec_noop boolean_stackdepth exec_stackdepth exec_yank exec_dup_items in2 boolean_stackdepth exec_yankdup integer_eq boolean_invert_second_then_and exec_y_when_autoconstructing (boolean_shove boolean_or) boolean_swap print_newline integer_inc integer_mod integer_gte exec_dup_items exec_k_when_autoconstructing (exec_when () exec_do*count (print_integer) in1 exec_empty integer_fromboolean exec_while (integer_swap exec_dup_items)) ())
Lexicase best errors: [1 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items})
Zero cases best program: (integer_yankdup in3 print_integer boolean_and integer_rot exec_yank integer_add boolean_flush print_boolean exec_flush in2 boolean_eq exec_noop boolean_stackdepth exec_stackdepth exec_yank exec_dup_items in2 boolean_stackdepth exec_yankdup integer_eq boolean_invert_second_then_and exec_y_when_autoconstructing (boolean_shove boolean_or) boolean_swap print_newline integer_inc integer_mod integer_gte exec_dup_items exec_k_when_autoconstructing (exec_when () exec_do*count (print_integer) in1 exec_empty integer_fromboolean exec_while (integer_swap exec_dup_items)) ())
Zero cases best errors: [1 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 1 4 4 3 4 2 2 3 2)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (3 1 4 4 3 4 2 2 3 2)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items})
Best program: (integer_yankdup in3 print_integer boolean_and integer_rot exec_yank integer_add boolean_flush print_boolean exec_flush in2 boolean_eq exec_noop boolean_stackdepth exec_stackdepth exec_yank exec_dup_items in2 boolean_stackdepth exec_yankdup integer_eq boolean_invert_second_then_and exec_y_when_autoconstructing (boolean_shove boolean_or) boolean_swap print_newline integer_inc integer_mod integer_gte exec_dup_items exec_k_when_autoconstructing (exec_when () exec_do*count (print_integer) in1 exec_empty integer_fromboolean exec_while (integer_swap exec_dup_items)) ())
Errors: [1 0 1 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 41
Size: 48
Percent parens: 0.146
--- Population Statistics ---
Average total errors in population: 9.972
Median total errors in population: 10
Error averages by case: (0.997 0.999 0.996 0.996 0.997 0.996 0.998 0.998 0.997 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.202
Average program size in population (points): 70.305
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 501404
--- Timings ---
Current time: 1559582677205 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         1.0 seconds, 36.8%
Fitness Testing:      1.6 seconds, 58.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 58                 
Correct output: 11                  | Program output: 86                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 96                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 53                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 80                 
Correct output: -23                 | Program output: 90                 
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 69                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 60                 
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: 80                 
Correct output: -29                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 94                 
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -9                 
Correct output: -45                 | Program output: 22                 
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_integer_244} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_gte exec_empty integer_gt exec_do*times (boolean_rot boolean_or integer_max integer_empty boolean_invert_second_then_and exec_dup () exec_empty integer_stackdepth exec_pop (integer_sub) integer_flush tag_integer_244) exec_empty boolean_frominteger boolean_frominteger boolean_swap boolean_yankdup boolean_eq boolean_shove integer_gte in1 boolean_or print_integer integer_fromboolean integer_shove integer_div exec_y_when_autoconstructing () exec_empty exec_dup_times (integer_add) in1 integer_div integer_lt exec_s (integer_rot integer_pop boolean_dup_times boolean_or exec_yank integer_mult exec_empty) () ())
Lexicase best errors: [0 0 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_integer_244} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_gte exec_empty integer_gt exec_do*times (boolean_rot boolean_or integer_max integer_empty boolean_invert_second_then_and exec_dup () exec_empty integer_stackdepth exec_pop (integer_sub) integer_flush tag_integer_244) exec_empty boolean_frominteger boolean_frominteger boolean_swap boolean_yankdup boolean_eq boolean_shove integer_gte in1 boolean_or print_integer integer_fromboolean integer_shove integer_div exec_y_when_autoconstructing () exec_empty exec_dup_times (integer_add) in1 integer_div integer_lt exec_s (integer_rot integer_pop boolean_dup_times boolean_or exec_yank integer_mult exec_empty) () ())
Zero cases best errors: [0 0 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (410 167 391 166 246 246 246 391 167 166)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (410 167 391 166 246 246 246 391 167 166)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_integer_244} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty})
Best program: (integer_gte exec_empty integer_gt exec_do*times (boolean_rot boolean_or integer_max integer_empty boolean_invert_second_then_and exec_dup () exec_empty integer_stackdepth exec_pop (integer_sub) integer_flush tag_integer_244) exec_empty boolean_frominteger boolean_frominteger boolean_swap boolean_yankdup boolean_eq boolean_shove integer_gte in1 boolean_or print_integer integer_fromboolean integer_shove integer_div exec_y_when_autoconstructing () exec_empty exec_dup_times (integer_add) in1 integer_div integer_lt exec_s (integer_rot integer_pop boolean_dup_times boolean_or exec_yank integer_mult exec_empty) () ())
Errors: [0 0 1 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 45
Size: 54
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.404
Median total errors in population: 8
Error averages by case: (0.59 0.833 0.609 0.834 0.754 0.754 0.754 0.609 0.833 0.834)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.188
Average program size in population (points): 65.835
Average percent parens in population: 0.205
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.485
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 208
Genome diversity (% unique genomes):	 0.539
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 785957
--- Timings ---
Current time: 1559582679522 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         2.5 seconds, 50.7%
Fitness Testing:      1.9 seconds, 39.7%
Report:               0.4 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 58                 
Correct output: 11                  | Program output: 86                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 96                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 53                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 80                 
Correct output: -23                 | Program output: 90                 
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 69                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 60                 
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: 80                 
Correct output: -29                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 94                 
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -9                 
Correct output: -45                 | Program output: 22                 
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_integer_244} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_gte exec_empty integer_gt exec_do*times (boolean_rot boolean_or integer_max integer_empty boolean_invert_second_then_and exec_dup () exec_empty integer_stackdepth exec_pop (integer_sub) integer_flush tag_integer_244) exec_empty boolean_frominteger boolean_frominteger boolean_swap boolean_yankdup boolean_eq boolean_shove integer_gte in1 boolean_or print_integer integer_fromboolean integer_shove integer_div exec_y_when_autoconstructing () exec_empty exec_dup_times (integer_add) in1 integer_div integer_lt exec_s (integer_rot integer_pop boolean_dup_times boolean_or exec_yank integer_mult exec_empty) () ())
Lexicase best errors: [0 1 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_integer_244} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_gte exec_empty integer_gt exec_do*times (boolean_rot boolean_or integer_max integer_empty boolean_invert_second_then_and exec_dup () exec_empty integer_stackdepth exec_pop (integer_sub) integer_flush tag_integer_244) exec_empty boolean_frominteger boolean_frominteger boolean_swap boolean_yankdup boolean_eq boolean_shove integer_gte in1 boolean_or print_integer integer_fromboolean integer_shove integer_div exec_y_when_autoconstructing () exec_empty exec_dup_times (integer_add) in1 integer_div integer_lt exec_s (integer_rot integer_pop boolean_dup_times boolean_or exec_yank integer_mult exec_empty) () ())
Zero cases best errors: [0 1 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (375 325 374 2 890 2 374 325 2 890)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (375 325 374 2 890 2 374 325 2 890)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_integer_244} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty})
Best program: (boolean_stackdepth exec_y_when_autoconstructing () exec_k (integer_dec integer_add exec_eq) (exec_empty integer_stackdepth exec_pop (integer_sub) integer_flush tag_integer_244) exec_empty boolean_frominteger boolean_frominteger boolean_swap boolean_yankdup boolean_eq boolean_shove integer_gte in1 boolean_or print_integer integer_fromboolean integer_shove integer_div exec_y_when_autoconstructing () exec_empty exec_dup_times (integer_add) in1 integer_div integer_lt exec_s (integer_rot integer_pop boolean_dup_times boolean_or exec_yank integer_mult exec_empty) () ())
Errors: [0 1 0 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 6.441
Median total errors in population: 6
Error averages by case: (0.625 0.675 0.626 0.998 0.11 0.998 0.626 0.675 0.998 0.11)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.291
Average program size in population (points): 71.503
Average percent parens in population: 0.224
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.94
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1164680
--- Timings ---
Current time: 1559582682779 milliseconds
Total Time:           8.2 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         5.0 seconds, 60.3%
Fitness Testing:      2.3 seconds, 28.5%
Report:               0.8 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 58                 
Correct output: 11                  | Program output: 86                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 96                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 53                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 80                 
Correct output: -23                 | Program output: 90                 
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 69                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 60                 
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: 80                 
Correct output: -29                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 94                 
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -9                 
Correct output: -45                 | Program output: 22                 
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_integer_244} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction 73} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_627} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_eq integer_gte exec_empty integer_gt exec_do*times (boolean_rot boolean_or integer_max integer_empty boolean_invert_second_then_and exec_dup () exec_empty integer_stackdepth exec_pop (integer_sub) integer_flush tag_integer_244) exec_empty boolean_frominteger boolean_frominteger boolean_swap boolean_yankdup boolean_eq boolean_shove integer_gte in1 boolean_or print_integer integer_fromboolean integer_shove integer_div exec_do*count () exec_empty exec_dup_times (integer_add) in1 integer_div integer_lt boolean_or integer_rot integer_pop boolean_dup_times integer_empty boolean_pop exec_s (exec_do*times (exec_flush boolean_invert_second_then_and exec_yankdup boolean_empty) integer_fromboolean integer_dup) (exec_s (boolean_pop integer_add exec_do*while (boolean_yankdup boolean_or integer_rot exec_dup_times (exec_swap (print_newline exec_empty boolean_not print_integer print_newline integer_yank exec_dup_items exec_y_when_autoconstructing () exec_when (integer_dup_times integer_inc integer_swap boolean_dup_items boolean_and boolean_invert_second_then_and exec_swap (exec_y (boolean_dup_items) integer_add 73 in3 integer_inc integer_eq) (integer_pop tag_integer_627 in1 integer_flush boolean_shove exec_yankdup) exec_yank) boolean_stackdepth boolean_stackdepth integer_yankdup) (in2 integer_swap boolean_flush) integer_empty exec_do*times () integer_inc exec_dup_items boolean_and))) () ()) ())
Lexicase best errors: [1 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 125
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_integer_244} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction 73} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_627} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_eq integer_gte exec_empty integer_gt exec_do*times (boolean_rot boolean_or integer_max integer_empty boolean_invert_second_then_and exec_dup () exec_empty integer_stackdepth exec_pop (integer_sub) integer_flush tag_integer_244) exec_empty boolean_frominteger boolean_frominteger boolean_swap boolean_yankdup boolean_eq boolean_shove integer_gte in1 boolean_or print_integer integer_fromboolean integer_shove integer_div exec_do*count () exec_empty exec_dup_times (integer_add) in1 integer_div integer_lt boolean_or integer_rot integer_pop boolean_dup_times integer_empty boolean_pop exec_s (exec_do*times (exec_flush boolean_invert_second_then_and exec_yankdup boolean_empty) integer_fromboolean integer_dup) (exec_s (boolean_pop integer_add exec_do*while (boolean_yankdup boolean_or integer_rot exec_dup_times (exec_swap (print_newline exec_empty boolean_not print_integer print_newline integer_yank exec_dup_items exec_y_when_autoconstructing () exec_when (integer_dup_times integer_inc integer_swap boolean_dup_items boolean_and boolean_invert_second_then_and exec_swap (exec_y (boolean_dup_items) integer_add 73 in3 integer_inc integer_eq) (integer_pop tag_integer_627 in1 integer_flush boolean_shove exec_yankdup) exec_yank) boolean_stackdepth boolean_stackdepth integer_yankdup) (in2 integer_swap boolean_flush) integer_empty exec_do*times () integer_inc exec_dup_items boolean_and))) () ()) ())
Zero cases best errors: [1 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 125
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 326 1000 872 873 1000 326 231 872 326)
Population mean number of elite cases: 6.83
Count of perfect (error zero) individuals by case: (0 326 0 872 873 0 326 231 872 326)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_integer_244} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty})
Best program: (integer_eq integer_gt integer_inc boolean_invert_first_then_and boolean_rot integer_min integer_sub integer_flush tag_integer_244 exec_empty boolean_frominteger boolean_frominteger boolean_swap boolean_yankdup boolean_eq boolean_shove integer_gte in1 boolean_or print_integer integer_fromboolean integer_shove integer_div exec_y_when_autoconstructing () exec_empty exec_dup_times (integer_add) in1 integer_div integer_lt exec_s (integer_rot integer_pop boolean_dup_times boolean_or exec_yank integer_mult exec_empty) () ())
Errors: [1 0 1 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 44
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 6.174
Median total errors in population: 6
Error averages by case: (1.0 0.674 1.0 0.128 0.127 1.0 0.674 0.769 0.128 0.674)
Error minima by case: (1 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 52.06
Average program size in population (points): 73.471
Average percent parens in population: 0.281
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.34125
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1543827
--- Timings ---
Current time: 1559582685884 milliseconds
Total Time:          11.3 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         7.3 seconds, 64.7%
Fitness Testing:      2.7 seconds, 24.1%
Report:               1.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 83                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: 21                 
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 76                 
Correct output: -80                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 17                 
Correct output: -29                 | Program output: 35                 
Correct output: -100                | Program output: 59                 
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 38                 
Correct output: -69                 | Program output: 63                 
Correct output: -80                 | Program output: 96                 
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: 35                 
Correct output: -23                 | Program output: 10                 
Correct output: -51                 | Program output: 83                 
Correct output: -25                 | Program output: 10                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 99                 
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: 62                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: 54                 
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: 56                 
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 15                 
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 78                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 76                 
Correct output: -88                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_410} {:close 2, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_do*count (in4 print_integer in1) exec_rot () (exec_yank boolean_dup_times) (exec_y (integer_mod exec_when (exec_s_when_autoconstructing (boolean_pop exec_pop (exec_y (exec_when (boolean_stackdepth exec_stackdepth boolean_invert_second_then_and boolean_not print_boolean boolean_stackdepth boolean_flush exec_swap (integer_lte boolean_dup_times tagged_410 integer_add) () in1) -32 integer_empty) print_integer integer_rot boolean_shove exec_eq exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (exec_if () (boolean_swap) exec_k (exec_empty exec_when (exec_if () (boolean_flush) exec_dup_items) integer_lte) (print_exec (exec_k_when_autoconstructing (integer_min integer_flush boolean_xor exec_y_when_autoconstructing (boolean_and)) ()))))))) ())) () ()))))
Lexicase best errors: [1 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 94
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_410} {:close 2, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_do*count (in4 print_integer in1) exec_rot () (exec_yank boolean_dup_times) (exec_y (integer_mod exec_when (exec_s_when_autoconstructing (boolean_pop exec_pop (exec_y (exec_when (boolean_stackdepth exec_stackdepth boolean_invert_second_then_and boolean_not print_boolean boolean_stackdepth boolean_flush exec_swap (integer_lte boolean_dup_times tagged_410 integer_add) () in1) -32 integer_empty) print_integer integer_rot boolean_shove exec_eq exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (exec_if () (boolean_swap) exec_k (exec_empty exec_when (exec_if () (boolean_flush) exec_dup_items) integer_lte) (print_exec (exec_k_when_autoconstructing (integer_min integer_flush boolean_xor exec_y_when_autoconstructing (boolean_and)) ()))))))) ())) () ()))))
Zero cases best errors: [1 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 94
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 225 6 868 225 1000 225 6 6 635)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (0 225 6 868 225 0 225 6 6 635)
Population mean number of perfect (error zero) cases: 2.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (boolean_empty integer_dec exec_dup_times (integer_shove exec_k (integer_flush in4 print_integer boolean_swap exec_swap (exec_noop exec_s_when_autoconstructing () (integer_stackdepth) (integer_swap boolean_not exec_swap (boolean_xor) (exec_s_when_autoconstructing () (boolean_or integer_yankdup integer_mult) (boolean_or exec_dup (integer_flush integer_dup_items integer_inc exec_do*range (integer_stackdepth) boolean_xor in1 exec_flush print_boolean) exec_pop (boolean_empty integer_div integer_gt in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank exec_while () boolean_yank boolean_swap in3 boolean_stackdepth boolean_or boolean_invert_second_then_and exec_dup_items exec_dup_items) integer_mult exec_yankdup boolean_rot) integer_fromboolean exec_while (integer_sub exec_if (integer_div print_boolean) (exec_when (exec_if () (boolean_flush) exec_dup_items) integer_lte) print_exec (exec_k_when_autoconstructing (integer_min integer_flush boolean_xor exec_y_when_autoconstructing (boolean_and)) ()))))) ()) ()))
Errors: [1 0 1 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 73
Size: 101
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 7.804
Median total errors in population: 8
Error averages by case: (1.0 0.775 0.994 0.132 0.775 1.0 0.775 0.994 0.994 0.365)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 50.83
Average program size in population (points): 68.654
Average percent parens in population: 0.244
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.855625
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1959301
--- Timings ---
Current time: 1559582688945 milliseconds
Total Time:          14.4 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         9.7 seconds, 67.0%
Fitness Testing:      3.1 seconds, 21.7%
Report:               1.5 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 83                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: 21                 
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 76                 
Correct output: -80                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 17                 
Correct output: -29                 | Program output: 35                 
Correct output: -100                | Program output: 59                 
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 38                 
Correct output: -69                 | Program output: 63                 
Correct output: -80                 | Program output: 96                 
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: 35                 
Correct output: -23                 | Program output: 10                 
Correct output: -51                 | Program output: 83                 
Correct output: -25                 | Program output: 10                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 99                 
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: 62                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: 54                 
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: 56                 
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 15                 
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 78                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 76                 
Correct output: -88                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_exec_145})
Lexicase best program: (boolean_empty integer_dec exec_dup_times (integer_shove exec_k (integer_flush in4 print_integer boolean_swap exec_swap (exec_swap (exec_noop exec_s_when_autoconstructing () (integer_stackdepth) (integer_swap boolean_not exec_swap (exec_do*times () exec_s_when_autoconstructing () (boolean_or exec_s_when_autoconstructing (integer_mult) (boolean_or exec_dup (integer_flush integer_dup_items integer_inc exec_do*range (integer_stackdepth) boolean_xor in1 exec_flush print_boolean) exec_pop (integer_dup_items boolean_invert_first_then_and print_exec (exec_empty integer_sub in2) integer_dup_items boolean_and tag_exec_145 ())) ()) ()) ())) ()) ()) ()))
Lexicase best errors: [0 1 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_exec_145})
Zero cases best program: (boolean_empty integer_dec exec_dup_times (integer_shove exec_k (integer_flush in4 print_integer boolean_swap exec_swap (exec_swap (exec_noop exec_s_when_autoconstructing () (integer_stackdepth) (integer_swap boolean_not exec_swap (exec_do*times () exec_s_when_autoconstructing () (boolean_or exec_s_when_autoconstructing (integer_mult) (boolean_or exec_dup (integer_flush integer_dup_items integer_inc exec_do*range (integer_stackdepth) boolean_xor in1 exec_flush print_boolean) exec_pop (integer_dup_items boolean_invert_first_then_and print_exec (exec_empty integer_sub in2) integer_dup_items boolean_and tag_exec_145 ())) ()) ()) ())) ()) ()) ()))
Zero cases best errors: [0 1 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (362 1000 1000 1000 363 839 358 482 363 119)
Population mean number of elite cases: 5.89
Count of perfect (error zero) individuals by case: (362 0 0 0 363 839 358 482 363 119)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_201} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty})
Best program: (integer_eq integer_gt integer_inc boolean_invert_first_then_and boolean_rot integer_min integer_shove integer_swap boolean_flush boolean_shove integer_fromboolean exec_shove (exec_when (in4 print_integer print_boolean) exec_k_when_autoconstructing () (exec_dup_items integer_empty in3) integer_yankdup exec_k_when_autoconstructing (integer_dec integer_eq integer_min integer_fromboolean integer_lt integer_mult) (integer_mult) boolean_pop) integer_min integer_mult exec_empty integer_max exec_do*range () exec_dup_times (exec_do*while (exec_yank) exec_pop () integer_empty boolean_pop exec_s (exec_k (exec_empty exec_when (exec_if () (boolean_flush) integer_pop exec_s_when_autoconstructing (integer_add exec_yank) (integer_stackdepth tagged_201 print_integer) (in4 integer_sub integer_dec exec_swap () (exec_rot (integer_max boolean_xor integer_empty) () ())))) ()) () ()))
Errors: [0 1 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 62
Size: 89
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.114
Median total errors in population: 8
Error averages by case: (0.638 1.0 1.0 1.0 0.637 0.161 0.642 0.518 0.637 0.881)
Error minima by case: (0 1 1 1 0 0 0 0 0 0)
Average genome size in population (length): 53.699
Average program size in population (points): 77.73
Average percent parens in population: 0.306
Minimum age in population: 5.0
Maximum age in population: 9.75
Average age in population: 7.4953125
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2476633
--- Timings ---
Current time: 1559582691865 milliseconds
Total Time:          17.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        11.7 seconds, 67.8%
Fitness Testing:      3.6 seconds, 21.0%
Report:               1.8 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 58                 
Correct output: 11                  | Program output: 86                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 96                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 53                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 80                 
Correct output: -23                 | Program output: 90                 
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 69                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 60                 
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: 80                 
Correct output: -29                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 94                 
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -9                 
Correct output: -45                 | Program output: 22                 
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_integer_244} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank})
Lexicase best program: (integer_gte exec_empty integer_gt exec_do*times (boolean_rot boolean_or integer_max integer_swap boolean_invert_second_then_and exec_dup () exec_empty integer_stackdepth exec_pop (integer_sub) integer_flush tag_integer_244) exec_empty boolean_frominteger boolean_frominteger boolean_swap boolean_yankdup boolean_eq boolean_shove integer_gte in1 boolean_or print_integer integer_fromboolean integer_shove integer_div exec_y_when_autoconstructing () exec_empty exec_dup_times (integer_add) in1 integer_div integer_lt exec_s (integer_rot integer_pop boolean_dup_times boolean_or exec_yank) () ())
Lexicase best errors: [1 0 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_integer_244} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank})
Zero cases best program: (integer_gte exec_empty integer_gt exec_do*times (boolean_rot boolean_or integer_max integer_swap boolean_invert_second_then_and exec_dup () exec_empty integer_stackdepth exec_pop (integer_sub) integer_flush tag_integer_244) exec_empty boolean_frominteger boolean_frominteger boolean_swap boolean_yankdup boolean_eq boolean_shove integer_gte in1 boolean_or print_integer integer_fromboolean integer_shove integer_div exec_y_when_autoconstructing () exec_empty exec_dup_times (integer_add) in1 integer_div integer_lt exec_s (integer_rot integer_pop boolean_dup_times boolean_or exec_yank) () ())
Zero cases best errors: [1 0 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (128 166 128 1000 166 1000 558 1000 166 294)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (128 166 128 0 166 0 558 0 166 294)
Population mean number of perfect (error zero) cases: 1.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_shove (boolean_dup_items exec_s_when_autoconstructing (boolean_empty boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank integer_div exec_do*while (integer_swap integer_sub integer_add)) (in1) (-32 integer_empty) print_integer integer_rot boolean_shove exec_eq exec_k_when_autoconstructing (exec_noop) ()) () ()))
Errors: [1 0 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 36
Size: 52
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 8.394
Median total errors in population: 9
Error averages by case: (0.872 0.834 0.872 1.0 0.834 1.0 0.442 1.0 0.834 0.706)
Error minima by case: (0 0 0 1 0 1 0 1 0 0)
Average genome size in population (length): 57.174
Average program size in population (points): 80.251
Average percent parens in population: 0.281
Minimum age in population: 6.0
Maximum age in population: 10.90625
Average age in population: 8.9231875
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2975144
--- Timings ---
Current time: 1559582694955 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        14.0 seconds, 68.5%
Fitness Testing:      4.1 seconds, 20.1%
Report:               2.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 83                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: 21                 
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 76                 
Correct output: -80                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 17                 
Correct output: -29                 | Program output: 35                 
Correct output: -100                | Program output: 59                 
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 38                 
Correct output: -69                 | Program output: 63                 
Correct output: -80                 | Program output: 96                 
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: 35                 
Correct output: -23                 | Program output: 10                 
Correct output: -51                 | Program output: 83                 
Correct output: -25                 | Program output: 10                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 99                 
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: 62                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: 54                 
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: 56                 
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 15                 
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 78                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 76                 
Correct output: -88                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_boolean_411} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_stackdepth exec_y_when_autoconstructing () exec_k (integer_dec integer_add exec_eq) (print_boolean integer_lt integer_yankdup) integer_shove boolean_invert_first_then_and exec_yankdup boolean_or integer_mult exec_y_when_autoconstructing (exec_dup_items exec_eq exec_eq integer_inc integer_dup_times in4 integer_stackdepth in2) integer_eq exec_pop (boolean_eq tag_boolean_411 exec_stackdepth integer_yank exec_empty integer_gt integer_flush integer_yankdup integer_eq exec_when ()) print_integer exec_when (exec_pop (integer_dup_items) exec_do*while (boolean_dup_items exec_stackdepth integer_add) boolean_rot exec_dup_times (integer_lte)))
Lexicase best errors: [1 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.193
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_boolean_411} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_stackdepth exec_y_when_autoconstructing () exec_k (integer_dec integer_add exec_eq) (print_boolean integer_lt integer_yankdup) integer_shove boolean_invert_first_then_and exec_yankdup boolean_or integer_mult exec_y_when_autoconstructing (exec_dup_items exec_eq exec_eq integer_inc integer_dup_times in4 integer_stackdepth in2) integer_eq exec_pop (boolean_eq tag_boolean_411 exec_stackdepth integer_yank exec_empty integer_gt integer_flush integer_yankdup integer_eq exec_when ()) print_integer exec_when (exec_pop (integer_dup_items) exec_do*while (boolean_dup_items exec_stackdepth integer_add) boolean_rot exec_dup_times (integer_lte)))
Zero cases best errors: [1 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.193
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 1000 857 129 128 452 128 576 452 1000)
Population mean number of elite cases: 5.00
Count of perfect (error zero) individuals by case: (277 0 857 129 128 452 128 576 452 0)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_boolean_44} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_50} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_77} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_empty})
Best program: (exec_do*count (in4 print_integer in1) exec_rot () (exec_yank tag_boolean_44) (boolean_empty integer_mod exec_when (exec_s_when_autoconstructing (boolean_pop exec_pop (exec_y (exec_when (boolean_stackdepth exec_stackdepth boolean_invert_second_then_and boolean_not print_boolean boolean_stackdepth boolean_flush) exec_swap (integer_lte boolean_dup_times boolean_stackdepth integer_eq boolean_invert_second_then_and exec_y_when_autoconstructing (boolean_stackdepth integer_flush integer_yankdup tagged_50 boolean_empty integer_div) integer_gt in3 integer_gt boolean_frominteger integer_dec integer_fromboolean exec_eq integer_yank exec_while () boolean_yank boolean_swap in3 boolean_stackdepth boolean_or boolean_invert_second_then_and exec_dup_items boolean_or) (integer_mult exec_yankdup boolean_rot) integer_fromboolean exec_while (integer_sub exec_if (integer_div print_boolean) (boolean_yank integer_lte exec_flush exec_dup_items integer_empty boolean_invert_second_then_and boolean_flush integer_fromboolean) tagged_77 integer_yankdup) boolean_flush exec_do*while ()) exec_stackdepth integer_dec exec_shove (exec_empty))) () ())))
Errors: [1 1 0 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 77
Size: 98
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.001
Median total errors in population: 6
Error averages by case: (0.723 1.0 0.143 0.871 0.872 0.548 0.872 0.424 0.548 1.0)
Error minima by case: (0 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 49.609
Average program size in population (points): 70.651
Average percent parens in population: 0.286
Minimum age in population: 7.0
Maximum age in population: 12.6875
Average age in population: 10.378859375
Median age in population: 10.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3445636
--- Timings ---
Current time: 1559582697465 milliseconds
Total Time:          23.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.8 seconds, 68.7%
Fitness Testing:      4.5 seconds, 19.7%
Report:               2.6 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 83                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: 21                 
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 76                 
Correct output: -80                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 17                 
Correct output: -29                 | Program output: 35                 
Correct output: -100                | Program output: 59                 
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 38                 
Correct output: -69                 | Program output: 63                 
Correct output: -80                 | Program output: 96                 
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: 35                 
Correct output: -23                 | Program output: 10                 
Correct output: -51                 | Program output: 83                 
Correct output: -25                 | Program output: 10                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 99                 
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: 62                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: 54                 
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: 56                 
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 15                 
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 78                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 76                 
Correct output: -88                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction -93} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items})
Lexicase best program: (integer_eq integer_gt integer_inc boolean_invert_first_then_and boolean_rot integer_min integer_shove integer_swap -93 boolean_shove integer_fromboolean exec_shove (exec_when (in4 print_integer print_boolean) exec_k_when_autoconstructing () (exec_dup_items integer_empty in3) integer_yankdup exec_k_when_autoconstructing () (integer_dec integer_eq integer_min integer_fromboolean integer_lt integer_inc integer_max integer_gte exec_dup_items exec_k_when_autoconstructing (integer_swap) (exec_do*count (print_integer) in1 exec_empty integer_fromboolean exec_while (integer_swap exec_dup_items)))))
Lexicase best errors: [1 0 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction -93} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items})
Zero cases best program: (integer_eq integer_gt integer_inc boolean_invert_first_then_and boolean_rot integer_min integer_shove integer_swap -93 boolean_shove integer_fromboolean exec_shove (exec_when (in4 print_integer print_boolean) exec_k_when_autoconstructing () (exec_dup_items integer_empty in3) integer_yankdup exec_k_when_autoconstructing () (integer_dec integer_eq integer_min integer_fromboolean integer_lt integer_inc integer_max integer_gte exec_dup_items exec_k_when_autoconstructing (integer_swap) (exec_do*count (print_integer) in1 exec_empty integer_fromboolean exec_while (integer_swap exec_dup_items)))))
Zero cases best errors: [1 0 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 436 852 1000 1000 853 1000 120 435 856)
Population mean number of elite cases: 7.55
Count of perfect (error zero) individuals by case: (0 436 852 0 0 853 0 120 435 856)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank})
Best program: (boolean_empty integer_max exec_stackdepth boolean_and boolean_eq exec_shove (boolean_dup_items boolean_empty integer_dec exec_dup_times (integer_shove exec_k (integer_flush in4 print_integer boolean_swap exec_swap (exec_noop exec_s_when_autoconstructing () (integer_stackdepth) (integer_swap boolean_not exec_swap (boolean_xor) (exec_s_when_autoconstructing () (exec_swap (exec_do*while (integer_mult) boolean_or exec_dup (integer_flush integer_dup_items integer_inc exec_do*range (integer_stackdepth) boolean_xor in1 exec_flush print_boolean) exec_pop (integer_dup_items boolean_invert_first_then_and print_exec (exec_empty integer_sub in2) integer_mult boolean_yank)) ()) ()))) ()) ())))
Errors: [1 0 0 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 70
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 6.448
Median total errors in population: 6
Error averages by case: (1.0 0.564 0.148 1.0 1.0 0.147 1.0 0.88 0.565 0.144)
Error minima by case: (1 0 0 1 1 0 1 0 0 0)
Average genome size in population (length): 52.692
Average program size in population (points): 73.748
Average percent parens in population: 0.275
Minimum age in population: 8.0
Maximum age in population: 14.0703125
Average age in population: 11.904046875
Median age in population: 11.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3922722
--- Timings ---
Current time: 1559582700237 milliseconds
Total Time:          25.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.8 seconds, 69.3%
Fitness Testing:      5.0 seconds, 19.3%
Report:               2.8 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -37                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: 50                 
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 99                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 63                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 75                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 57                 
Correct output: 56                  | Program output: 85                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 91                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: 27                 
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: 5                  
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: 60                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: 87                 
Correct output: -96                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 89                 
Correct output: -63                 | Program output: -14                
Correct output: -78                 | Program output: 77                 
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -53                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: 32                 
Correct output: -66                 | Program output: -27                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 90                 
Correct output: 23                  | Program output: 59                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 80                 
Correct output: -98                 | Program output: 71                 
Correct output: -82                 | Program output: 22                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 100                
Correct output: -33                 | Program output: 75                 
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_201} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty})
Lexicase best program: (integer_eq integer_gt integer_inc boolean_invert_first_then_and boolean_rot integer_min integer_stackdepth integer_swap boolean_flush boolean_shove integer_fromboolean exec_shove (boolean_xor) boolean_yankdup exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and exec_y () integer_fromboolean boolean_yank integer_div exec_do*while (integer_swap integer_sub integer_shove) integer_flush) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (exec_if (boolean_swap) (integer_inc integer_pop integer_gt integer_add exec_yank) integer_dup_times tagged_201 print_integer) in4 integer_sub integer_dec exec_swap () (exec_rot (integer_max boolean_xor integer_empty) () ()))))) ())) () ())
Lexicase best errors: [0 0 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 93
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_201} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty})
Zero cases best program: (integer_eq integer_gt integer_inc boolean_invert_first_then_and boolean_rot integer_min integer_stackdepth integer_swap boolean_flush boolean_shove integer_fromboolean exec_shove (boolean_xor) boolean_yankdup exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and exec_y () integer_fromboolean boolean_yank integer_div exec_do*while (integer_swap integer_sub integer_shove) integer_flush) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (exec_if (boolean_swap) (integer_inc integer_pop integer_gt integer_add exec_yank) integer_dup_times tagged_201 print_integer) in4 integer_sub integer_dec exec_swap () (exec_rot (integer_max boolean_xor integer_empty) () ()))))) ())) () ())
Zero cases best errors: [0 0 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 93
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 269 269 2 3 1000 1000 269 269 269)
Population mean number of elite cases: 3.62
Count of perfect (error zero) individuals by case: (269 269 269 2 3 0 0 269 269 269)
Population mean number of perfect (error zero) cases: 1.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush})
Best program: (integer_max boolean_flush boolean_and boolean_eq exec_shove (boolean_dup exec_s_when_autoconstructing (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank integer_div exec_do*while (integer_swap exec_do*times (integer_add)) in1) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq exec_flush)) () ()) () ()))
Errors: [0 0 0 1 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 53
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 8.381
Median total errors in population: 10
Error averages by case: (0.731 0.731 0.731 0.998 0.997 1.0 1.0 0.731 0.731 0.731)
Error minima by case: (0 0 0 0 0 1 1 0 0 0)
Average genome size in population (length): 53.946
Average program size in population (points): 77.806
Average percent parens in population: 0.304
Minimum age in population: 10.0
Maximum age in population: 15.765625
Average age in population: 13.422796875
Median age in population: 13.49609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4451376
--- Timings ---
Current time: 1559582702992 milliseconds
Total Time:          28.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.7 seconds, 69.3%
Fitness Testing:      5.5 seconds, 19.1%
Report:               3.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 58                 
Correct output: 11                  | Program output: 86                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 96                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 53                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 80                 
Correct output: -23                 | Program output: 90                 
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 69                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 60                 
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: 80                 
Correct output: -29                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 94                 
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -9                 
Correct output: -45                 | Program output: 22                 
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_rot exec_stackdepth boolean_and boolean_eq exec_shove (boolean_dup_items exec_s_when_autoconstructing (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap exec_when ()) (print_integer exec_dup (exec_pop (boolean_frominteger) exec_do*while (boolean_dup_items exec_stackdepth integer_add) boolean_rot exec_dup_times (integer_lte))) ()) () ()) () ()))
Lexicase best errors: [0 0 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.396
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_rot exec_stackdepth boolean_and boolean_eq exec_shove (boolean_dup_items exec_s_when_autoconstructing (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap exec_when ()) (print_integer exec_dup (exec_pop (boolean_frominteger) exec_do*while (boolean_dup_items exec_stackdepth integer_add) boolean_rot exec_dup_times (integer_lte))) ()) () ()) () ()))
Zero cases best errors: [0 0 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.396
--- Lexicase Population Statistics ---
Count of elite individuals by case: (865 625 870 1000 243 624 1000 624 243 241)
Population mean number of elite cases: 6.34
Count of perfect (error zero) individuals by case: (865 625 870 0 243 624 0 624 243 241)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_shove (boolean_dup_items exec_s_when_autoconstructing (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_sub integer_add) (in1) (-32 integer_empty) print_integer integer_rot boolean_shove exec_eq) (integer_rot integer_pop boolean_dup_times boolean_or exec_yank integer_mult boolean_yank) ()) () ()))
Errors: [0 1 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 52
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 5.665
Median total errors in population: 5
Error averages by case: (0.135 0.375 0.13 1.0 0.757 0.376 1.0 0.376 0.757 0.759)
Error minima by case: (0 0 0 1 0 0 1 0 0 0)
Average genome size in population (length): 50.234
Average program size in population (points): 76.03
Average percent parens in population: 0.338
Minimum age in population: 12.2109375
Maximum age in population: 16.935546875
Average age in population: 14.789623046875
Median age in population: 14.84765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4981266
--- Timings ---
Current time: 1559582705315 milliseconds
Total Time:          30.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.3 seconds, 69.1%
Fitness Testing:      5.9 seconds, 19.2%
Report:               3.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -37                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: 50                 
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 99                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 63                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 75                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 57                 
Correct output: 56                  | Program output: 85                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 91                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: 27                 
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: 5                  
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: 60                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: 87                 
Correct output: -96                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 89                 
Correct output: -63                 | Program output: -14                
Correct output: -78                 | Program output: 77                 
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -53                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: 32                 
Correct output: -66                 | Program output: -27                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 90                 
Correct output: 23                  | Program output: 59                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 80                 
Correct output: -98                 | Program output: 71                 
Correct output: -82                 | Program output: 22                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 100                
Correct output: -33                 | Program output: 75                 
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_shove (boolean_dup_items exec_s_when_autoconstructing (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_and integer_swap integer_fromboolean boolean_yank integer_div exec_do*while (integer_swap integer_sub integer_add) in1) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_dup (exec_if () ()))))) ()) () ()))
Lexicase best errors: [1 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 83
Percent parens: 0.325
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_shove (boolean_dup_items exec_s_when_autoconstructing (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_and integer_swap integer_fromboolean boolean_yank integer_div exec_do*while (integer_swap integer_sub integer_add) in1) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_dup (exec_if () ()))))) ()) () ()))
Zero cases best errors: [1 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 83
Percent parens: 0.325
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 1000 438 438 868 4 1000 438 1000 428)
Population mean number of elite cases: 5.62
Count of perfect (error zero) individuals by case: (4 0 438 438 868 4 0 438 0 428)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_do*range (boolean_dup_items exec_s_when_autoconstructing (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_sub integer_add in1) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq)) (integer_rot integer_pop boolean_dup_times boolean_or exec_yank integer_mult boolean_yank) ()) () ()))
Errors: [1 1 0 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 52
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.382
Median total errors in population: 8
Error averages by case: (0.996 1.0 0.562 0.562 0.132 0.996 1.0 0.562 1.0 0.572)
Error minima by case: (0 1 0 0 0 0 1 0 1 0)
Average genome size in population (length): 49.989
Average program size in population (points): 74.933
Average percent parens in population: 0.330
Minimum age in population: 13.5
Maximum age in population: 18.013671875
Average age in population: 16.1951171875
Median age in population: 16.27978515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5458964
--- Timings ---
Current time: 1559582708340 milliseconds
Total Time:          33.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.5 seconds, 69.6%
Fitness Testing:      6.3 seconds, 18.8%
Report:               3.8 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -37                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: 50                 
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 99                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 63                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 75                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 57                 
Correct output: 56                  | Program output: 85                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 91                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: 27                 
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: 5                  
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: 60                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: 87                 
Correct output: -96                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 89                 
Correct output: -63                 | Program output: -14                
Correct output: -78                 | Program output: 77                 
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -53                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: 32                 
Correct output: -66                 | Program output: -27                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 90                 
Correct output: 23                  | Program output: 59                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 80                 
Correct output: -98                 | Program output: 71                 
Correct output: -82                 | Program output: 22                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 100                
Correct output: -33                 | Program output: 75                 
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_shove (boolean_dup_items exec_s_when_autoconstructing (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap exec_when ()) (print_integer exec_dup (exec_pop (boolean_frominteger) boolean_invert_first_then_and boolean_dup_items exec_stackdepth integer_add) boolean_rot exec_dup_times (integer_lte)) ()) () ()) () ()))
Lexicase best errors: [1 1 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.385
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_shove (boolean_dup_items exec_s_when_autoconstructing (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap exec_when ()) (print_integer exec_dup (exec_pop (boolean_frominteger) boolean_invert_first_then_and boolean_dup_items exec_stackdepth integer_add) boolean_rot exec_dup_times (integer_lte)) ()) () ()) () ()))
Zero cases best errors: [1 1 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 386 455 843 453 213 1 174 1 629)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (213 386 455 843 453 213 1 174 1 629)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yank})
Best program: (integer_max integer_max boolean_empty exec_s_when_autoconstructing (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_max exec_stackdepth boolean_and boolean_eq exec_shove (boolean_dup_items exec_when (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and exec_y (integer_fromboolean boolean_yank integer_div exec_do*while (integer_swap integer_sub integer_shove)) integer_flush) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (integer_stackdepth exec_if (boolean_swap) (exec_k (exec_empty exec_when (boolean_frominteger) boolean_flush) (exec_dup_items) exec_y_when_autoconstructing (boolean_dup_items) integer_dup_times integer_flush exec_do*while (exec_rot () (integer_yank) ())))))) ())) () ())))) () ())
Errors: [1 1 0 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 68
Size: 107
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 6.632
Median total errors in population: 6
Error averages by case: (0.787 0.614 0.545 0.157 0.547 0.787 0.999 0.826 0.999 0.371)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.267
Average program size in population (points): 78.605
Average percent parens in population: 0.334
Minimum age in population: 14.5
Maximum age in population: 19.578125
Average age in population: 17.5000458984375
Median age in population: 17.63134765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.003
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5980644
--- Timings ---
Current time: 1559582711556 milliseconds
Total Time:          36.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.4 seconds, 69.7%
Fitness Testing:      6.8 seconds, 18.6%
Report:               4.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 83                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: 21                 
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 76                 
Correct output: -80                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 17                 
Correct output: -29                 | Program output: 35                 
Correct output: -100                | Program output: 59                 
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 38                 
Correct output: -69                 | Program output: 63                 
Correct output: -80                 | Program output: 96                 
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: 35                 
Correct output: -23                 | Program output: 10                 
Correct output: -51                 | Program output: 83                 
Correct output: -25                 | Program output: 10                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 99                 
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: 62                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: 54                 
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: 56                 
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 15                 
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 78                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 76                 
Correct output: -88                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (exec_if (boolean_swap) (exec_k (exec_empty exec_when (exec_if () (boolean_flush) exec_dup_items) integer_lte) (print_exec (exec_k_when_autoconstructing (integer_min integer_flush boolean_xor exec_y_when_autoconstructing (boolean_and)) ())))))))) ())) () ())
Lexicase best errors: [0 1 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 88
Percent parens: 0.341
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (exec_if (boolean_swap) (exec_k (exec_empty exec_when (exec_if () (boolean_flush) exec_dup_items) integer_lte) (print_exec (exec_k_when_autoconstructing (integer_min integer_flush boolean_xor exec_y_when_autoconstructing (boolean_and)) ())))))))) ())) () ())
Zero cases best errors: [0 1 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 88
Percent parens: 0.341
--- Lexicase Population Statistics ---
Count of elite individuals by case: (225 210 227 170 605 170 210 225 225 225)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (225 210 227 170 605 170 210 225 225 225)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (exec_if (boolean_swap) (exec_k (exec_empty exec_when (exec_if () (boolean_flush) exec_dup_items) integer_lte) (print_exec (exec_k_when_autoconstructing (integer_min integer_flush boolean_xor exec_y_when_autoconstructing (boolean_and)) ())))))))) ())) () ())
Errors: [0 1 0 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 58
Size: 88
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 7.508
Median total errors in population: 7
Error averages by case: (0.775 0.79 0.773 0.83 0.395 0.83 0.79 0.775 0.775 0.775)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.624
Average program size in population (points): 76.31
Average percent parens in population: 0.306
Minimum age in population: 15.5
Maximum age in population: 20.865966796875
Average age in population: 19.171966796875
Median age in population: 19.2333984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6452917
--- Timings ---
Current time: 1559582714290 milliseconds
Total Time:          39.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.4 seconds, 68.9%
Fitness Testing:      7.2 seconds, 18.2%
Report:               5.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 672
Test mean error for best: 0.67200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: 64                 
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37                 
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 21                 
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: 60                 
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte boolean_dup_times exec_do*range (exec_if (boolean_swap) (exec_k (exec_empty exec_when (exec_if () (boolean_flush exec_dup_items) integer_lte) print_exec (exec_k_when_autoconstructing (boolean_yankdup integer_flush boolean_xor exec_do*while (boolean_and)) ())) ()))))) ()))
Lexicase best errors: [1 0 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 90
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte boolean_dup_times exec_do*range (exec_if (boolean_swap) (exec_k (exec_empty exec_when (exec_if () (boolean_flush exec_dup_items) integer_lte) print_exec (exec_k_when_autoconstructing (boolean_yankdup integer_flush boolean_xor exec_do*while (boolean_and)) ())) ()))))) ()))
Zero cases best errors: [1 0 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 90
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (129 816 158 652 309 158 813 817 158 311)
Population mean number of elite cases: 4.32
Count of perfect (error zero) individuals by case: (129 816 158 652 309 158 813 817 158 311)
Population mean number of perfect (error zero) cases: 4.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max boolean_frominteger boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank exec_stackdepth) 18 boolean_swap in3) ()))
Errors: [1 0 0 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 52
Size: 68
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.679
Median total errors in population: 5
Error averages by case: (0.871 0.184 0.842 0.348 0.691 0.842 0.187 0.183 0.842 0.689)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.426
Average program size in population (points): 77.413
Average percent parens in population: 0.306
Minimum age in population: 17.421875
Maximum age in population: 22.487548828125
Average age in population: 20.6545693359375
Median age in population: 20.7540283203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6922957
--- Timings ---
Current time: 1559582717747 milliseconds
Total Time:          43.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.0 seconds, 69.6%
Fitness Testing:      7.6 seconds, 17.7%
Report:               5.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 672
Test mean error for best: 0.67200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: 64                 
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37                 
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 21                 
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: 60                 
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank exec_stackdepth) 18 boolean_swap in3) ()))
Lexicase best errors: [0 1 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank exec_stackdepth) 18 boolean_swap in3) ()))
Zero cases best errors: [0 1 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (322 190 322 190 534 322 21 296 190 322)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (322 190 322 190 534 322 21 296 190 322)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank exec_stackdepth) 18 boolean_swap in3) ()))
Errors: [0 1 0 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 56
Size: 72
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.291
Median total errors in population: 6
Error averages by case: (0.678 0.81 0.678 0.81 0.466 0.678 0.979 0.704 0.81 0.678)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.11
Average program size in population (points): 76.025
Average percent parens in population: 0.283
Minimum age in population: 18.421875
Maximum age in population: 23.965576171875
Average age in population: 22.10736773681641
Median age in population: 22.17221069335938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7353078
--- Timings ---
Current time: 1559582720794 milliseconds
Total Time:          46.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.2 seconds, 69.8%
Fitness Testing:      8.0 seconds, 17.4%
Report:               5.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -37                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: 50                 
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 99                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 63                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 75                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 57                 
Correct output: 56                  | Program output: 85                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 91                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: 27                 
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: 5                  
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: 60                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: 87                 
Correct output: -96                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 89                 
Correct output: -63                 | Program output: -14                
Correct output: -78                 | Program output: 77                 
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -53                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: 32                 
Correct output: -66                 | Program output: -27                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 90                 
Correct output: 23                  | Program output: 59                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 80                 
Correct output: -98                 | Program output: 71                 
Correct output: -82                 | Program output: 22                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 100                
Correct output: -33                 | Program output: 75                 
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction integer_min} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and integer_flush exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (integer_div) (exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and) (exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank exec_stackdepth) 18 integer_min in3))
Lexicase best errors: [0 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction integer_min} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and integer_flush exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (integer_div) (exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and) (exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank exec_stackdepth) 18 integer_min in3))
Zero cases best errors: [0 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (519 118 300 102 301 101 324 101 116 101)
Population mean number of elite cases: 2.08
Count of perfect (error zero) individuals by case: (519 118 300 102 301 101 324 101 116 101)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_rot integer_swap exec_do*times (integer_eq integer_swap integer_sub integer_add) in1) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq exec_eq integer_yank exec_stackdepth) 18 boolean_swap in3) ()) () ())
Errors: [0 1 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 53
Size: 70
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 7.917
Median total errors in population: 7
Error averages by case: (0.481 0.882 0.7 0.898 0.699 0.899 0.676 0.899 0.884 0.899)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.865
Average program size in population (points): 73.296
Average percent parens in population: 0.274
Minimum age in population: 21.097412109375
Maximum age in population: 25.4329833984375
Average age in population: 23.59286099243164
Median age in population: 23.67385864257812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7770498
--- Timings ---
Current time: 1559582723604 milliseconds
Total Time:          49.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.4 seconds, 70.0%
Fitness Testing:      8.4 seconds, 17.1%
Report:               6.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 58                 
Correct output: 11                  | Program output: 86                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 96                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 53                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 80                 
Correct output: -23                 | Program output: 90                 
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 69                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 60                 
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: 80                 
Correct output: -29                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 94                 
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -9                 
Correct output: -45                 | Program output: 22                 
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_max exec_stackdepth boolean_and exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) (-32 integer_empty) print_integer integer_rot boolean_shove exec_eq exec_k_when_autoconstructing (exec_yankdup exec_empty) ()) () ())
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_max exec_stackdepth boolean_and exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) (-32 integer_empty) print_integer integer_rot boolean_shove exec_eq exec_k_when_autoconstructing (exec_yankdup exec_empty) ()) () ())
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 202 71 202 202 833 146 762 758 833)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (203 202 71 202 202 833 146 762 758 833)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank integer_div integer_eq exec_rot (integer_sub integer_add) (in1) (-32 integer_empty) print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (integer_min exec_if (boolean_swap) (exec_k (exec_empty exec_when (exec_if () (boolean_flush) exec_dup_items) integer_lte) (print_exec (exec_k_when_autoconstructing (integer_min integer_flush) ()))))))) ()) ()) () ())
Errors: [0 0 1 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 58
Size: 89
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 5.788
Median total errors in population: 6
Error averages by case: (0.797 0.798 0.929 0.798 0.798 0.167 0.854 0.238 0.242 0.167)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.968
Average program size in population (points): 74.188
Average percent parens in population: 0.281
Minimum age in population: 22.1884765625
Maximum age in population: 26.91848754882812
Average age in population: 25.15496180725098
Median age in population: 25.21309661865234
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8142371
--- Timings ---
Current time: 1559582726677 milliseconds
Total Time:          52.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.7 seconds, 70.5%
Fitness Testing:      8.7 seconds, 16.8%
Report:               6.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -37                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: 50                 
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 99                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 63                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 75                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 57                 
Correct output: 56                  | Program output: 85                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 91                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: 27                 
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: 5                  
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: 60                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: 87                 
Correct output: -96                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 89                 
Correct output: -63                 | Program output: -14                
Correct output: -78                 | Program output: 77                 
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -53                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: 32                 
Correct output: -66                 | Program output: -27                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 90                 
Correct output: 23                  | Program output: 59                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 80                 
Correct output: -98                 | Program output: 71                 
Correct output: -82                 | Program output: 22                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 100                
Correct output: -33                 | Program output: 75                 
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq boolean_eq exec_shove (boolean_dup_items) exec_s_when_autoconstructing (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_sub integer_add in1) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) integer_rot integer_pop) () ()) () ())
Lexicase best errors: [0 0 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq boolean_eq exec_shove (boolean_dup_items) exec_s_when_autoconstructing (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_sub integer_add in1) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) integer_rot integer_pop) () ()) () ())
Zero cases best errors: [0 0 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 13 14 78 78 79 13 748 585 586)
Population mean number of elite cases: 2.21
Count of perfect (error zero) individuals by case: (13 13 14 78 78 79 13 748 585 586)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth})
Best program: (integer_max print_integer boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap) (integer_sub integer_empty) (print_integer integer_rot boolean_shove exec_eq exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (exec_if (boolean_swap) (exec_k (exec_empty exec_when (exec_if () (boolean_flush) exec_dup_items) integer_lte) (print_exec (exec_k_when_autoconstructing (integer_min integer_flush boolean_xor integer_yank exec_stackdepth) ())))))))) ())) () ())
Errors: [0 0 0 1 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 58
Size: 87
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.793
Median total errors in population: 7
Error averages by case: (0.987 0.987 0.986 0.922 0.922 0.921 0.987 0.252 0.415 0.414)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.474
Average program size in population (points): 72.356
Average percent parens in population: 0.284
Minimum age in population: 23.6800537109375
Maximum age in population: 28.7911376953125
Average age in population: 26.63638591003418
Median age in population: 26.71613311767578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8541696
--- Timings ---
Current time: 1559582729466 milliseconds
Total Time:          54.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.8 seconds, 70.7%
Fitness Testing:      9.1 seconds, 16.6%
Report:               6.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 58                 
Correct output: 11                  | Program output: 86                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 96                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 53                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 80                 
Correct output: -23                 | Program output: 90                 
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 69                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 60                 
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: 80                 
Correct output: -29                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 94                 
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -9                 
Correct output: -45                 | Program output: 22                 
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_max exec_stackdepth print_boolean boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and) (integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) in1) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) exec_k_when_autoconstructing (exec_noop in4 boolean_stackdepth) (exec_pop (integer_dec) exec_when () in3 integer_gt))
Lexicase best errors: [1 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_max exec_stackdepth print_boolean boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and) (integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) in1) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) exec_k_when_autoconstructing (exec_noop in4 boolean_stackdepth) (exec_pop (integer_dec) exec_when () in3 integer_gt))
Zero cases best errors: [1 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 386 212 212 825 598 823 209 211 16)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (16 386 212 212 825 598 823 209 211 16)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) integer_sub integer_empty) (print_integer in1 exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (boolean_frominteger print_exec (exec_do*range (exec_if () ())))))) ()) ())
Errors: [1 1 0 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 46
Size: 68
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.492
Median total errors in population: 6
Error averages by case: (0.984 0.614 0.788 0.788 0.175 0.402 0.177 0.791 0.789 0.984)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.071
Average program size in population (points): 70.562
Average percent parens in population: 0.274
Minimum age in population: 24.97698974609375
Maximum age in population: 30.11782836914062
Average age in population: 28.07286388778687
Median age in population: 28.12954711914062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8953984
--- Timings ---
Current time: 1559582732867 milliseconds
Total Time:          58.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.5 seconds, 71.2%
Fitness Testing:      9.5 seconds, 16.3%
Report:               7.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 672
Test mean error for best: 0.67200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: 64                 
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37                 
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 21                 
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: 60                 
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max print_boolean boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (exec_shove (boolean_xor) exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_eq integer_yank exec_stackdepth) (18 boolean_swap in3))) () ())
Lexicase best errors: [0 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max print_boolean boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (exec_shove (boolean_xor) exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_eq integer_yank exec_stackdepth) (18 boolean_swap in3))) () ())
Zero cases best errors: [0 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 101 101 193 147 488 101 386 147 193)
Population mean number of elite cases: 1.96
Count of perfect (error zero) individuals by case: (101 101 101 193 147 488 101 386 147 193)
Population mean number of perfect (error zero) cases: 1.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction tag_integer_581} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq integer_eq boolean_eq exec_y_when_autoconstructing (boolean_dup_items integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot () (boolean_and integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (boolean_frominteger integer_dec integer_dup_times exec_eq integer_stackdepth exec_stackdepth) (18 tag_integer_581 in3)))
Errors: [0 0 0 1 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 45
Size: 56
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 8.042
Median total errors in population: 8
Error averages by case: (0.899 0.899 0.899 0.807 0.853 0.512 0.899 0.614 0.853 0.807)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.165
Average program size in population (points): 72.949
Average percent parens in population: 0.280
Minimum age in population: 26.3837890625
Maximum age in population: 31.74953842163086
Average age in population: 29.53787802886963
Median age in population: 29.61970138549805
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 9375146
--- Timings ---
Current time: 1559582735927 milliseconds
Total Time:          61.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.8 seconds, 71.4%
Fitness Testing:      9.9 seconds, 16.1%
Report:               7.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 672
Test mean error for best: 0.67200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: 64                 
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37                 
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 21                 
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: 60                 
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_max integer_inc exec_pop (boolean_rot integer_min) integer_shove integer_swap boolean_flush integer_dup_items integer_fromboolean boolean_eq exec_shove (boolean_dup_items exec_s_when_autoconstructing () (exec_rot (boolean_xor) (integer_pop exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (in1) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) integer_rot exec_when (boolean_dup_times boolean_or exec_yank integer_mult boolean_yank)) ()))
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_max integer_inc exec_pop (boolean_rot integer_min) integer_shove integer_swap boolean_flush integer_dup_items integer_fromboolean boolean_eq exec_shove (boolean_dup_items exec_s_when_autoconstructing () (exec_rot (boolean_xor) (integer_pop exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (in1) (-32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) integer_rot exec_when (boolean_dup_times boolean_or exec_yank integer_mult boolean_yank)) ()))
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (135 168 804 135 805 168 342 157 634 343)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (135 168 804 135 805 168 342 157 634 343)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_swap (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove boolean_invert_first_then_and) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_dec integer_dup_times integer_rot integer_yank exec_stackdepth) boolean_swap boolean_swap in3) ()))
Errors: [1 1 0 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 52
Size: 67
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 6.309
Median total errors in population: 6
Error averages by case: (0.865 0.832 0.196 0.865 0.195 0.832 0.658 0.843 0.366 0.657)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.895
Average program size in population (points): 71.024
Average percent parens in population: 0.265
Minimum age in population: 27.3837890625
Maximum age in population: 33.17852401733398
Average age in population: 31.00832745552063
Median age in population: 31.0817928314209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9824787
--- Timings ---
Current time: 1559582739041 milliseconds
Total Time:          64.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.0 seconds, 71.5%
Fitness Testing:     10.3 seconds, 15.9%
Report:               8.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 58                 
Correct output: 11                  | Program output: 86                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 96                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 53                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 80                 
Correct output: -23                 | Program output: 90                 
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 69                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 60                 
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: 80                 
Correct output: -29                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 94                 
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -9                 
Correct output: -45                 | Program output: 22                 
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank boolean_yank boolean_frominteger integer_eq integer_swap integer_sub integer_add) (in1) (-32 integer_empty) print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (exec_if (boolean_swap) (exec_k (exec_empty) (exec_when (exec_if () (boolean_flush) exec_dup_items) integer_lte) print_exec (exec_k_when_autoconstructing (exec_y (integer_flush boolean_xor exec_y_when_autoconstructing () boolean_and)) ()))))))) ()) ()))
Lexicase best errors: [1 0 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank boolean_yank boolean_frominteger integer_eq integer_swap integer_sub integer_add) (in1) (-32 integer_empty) print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (exec_if (boolean_swap) (exec_k (exec_empty) (exec_when (exec_if () (boolean_flush) exec_dup_items) integer_lte) print_exec (exec_k_when_autoconstructing (exec_y (integer_flush boolean_xor exec_y_when_autoconstructing () boolean_and)) ()))))))) ()) ()))
Zero cases best errors: [1 0 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 231 120 202 434 802 231 120 259 230)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (199 231 120 202 434 802 231 120 259 230)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_flush boolean_stackdepth integer_gt boolean_xor boolean_yankdup integer_gt boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 integer_sub integer_dup integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) (-32 integer_empty) print_integer integer_rot boolean_shove exec_eq exec_k_when_autoconstructing (boolean_eq in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (exec_if (boolean_swap) (exec_do*range (exec_if (boolean_swap) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (exec_if (boolean_swap) (exec_k (exec_empty exec_when (exec_if () (boolean_flush) exec_dup_items) integer_lte) (print_exec (exec_k_when_autoconstructing (integer_min integer_flush boolean_xor exec_y_when_autoconstructing () boolean_and) ())))))))) ())))))))) ()) () ())
Errors: [1 0 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 84
Size: 123
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 7.172
Median total errors in population: 7
Error averages by case: (0.801 0.769 0.88 0.798 0.566 0.198 0.769 0.88 0.741 0.77)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.559
Average program size in population (points): 70.746
Average percent parens in population: 0.267
Minimum age in population: 29.48794555664062
Maximum age in population: 34.77927160263062
Average age in population: 32.62309052610397
Median age in population: 32.66870760917664
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 10264554
--- Timings ---
Current time: 1559582742224 milliseconds
Total Time:          67.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.5 seconds, 71.7%
Fitness Testing:     10.6 seconds, 15.7%
Report:               8.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 83                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: 21                 
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 76                 
Correct output: -80                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 17                 
Correct output: -29                 | Program output: 35                 
Correct output: -100                | Program output: 59                 
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 38                 
Correct output: -69                 | Program output: 63                 
Correct output: -80                 | Program output: 96                 
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: 35                 
Correct output: -23                 | Program output: 10                 
Correct output: -51                 | Program output: 83                 
Correct output: -25                 | Program output: 10                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 99                 
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: 62                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: 54                 
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: 56                 
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 15                 
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 78                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 76                 
Correct output: -88                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in3 exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_shove boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (boolean_pop integer_rot integer_div integer_eq integer_swap integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when (exec_do*while (integer_gte print_exec (exec_do*range (exec_when () exec_do*while (integer_gte print_exec (exec_do*range (boolean_shove boolean_swap) exec_k (exec_empty exec_when (exec_if () (boolean_flush) exec_dup_items) integer_lte) (print_exec (exec_k_when_autoconstructing () ())))))))))) ()))
Lexicase best errors: [1 1 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 95
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in3 exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_shove boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (boolean_pop integer_rot integer_div integer_eq integer_swap integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when (exec_do*while (integer_gte print_exec (exec_do*range (exec_when () exec_do*while (integer_gte print_exec (exec_do*range (boolean_shove boolean_swap) exec_k (exec_empty exec_when (exec_if () (boolean_flush) exec_dup_items) integer_lte) (print_exec (exec_k_when_autoconstructing () ())))))))))) ()))
Zero cases best errors: [1 1 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 95
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (347 157 529 157 346 185 631 181 181 22)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (347 157 529 157 346 185 631 181 181 22)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_shove (boolean_dup_items exec_s_when_autoconstructing (exec_rot (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (exec_rot (boolean_and integer_yank boolean_and integer_swap) (integer_fromboolean exec_swap (integer_div integer_eq integer_swap integer_sub integer_add) (integer_eq integer_swap integer_sub integer_add) in1) (integer_div boolean_eq integer_swap integer_sub integer_add) in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_when (exec_if () (boolean_flush)))) ())) () ()))
Errors: [1 1 0 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 56
Size: 81
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 7.264
Median total errors in population: 6
Error averages by case: (0.653 0.843 0.471 0.843 0.654 0.815 0.369 0.819 0.819 0.978)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.059
Average program size in population (points): 72.395
Average percent parens in population: 0.262
Minimum age in population: 30.82378005981445
Maximum age in population: 35.951819896698
Average age in population: 34.07610850834846
Median age in population: 34.19114530086517
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10721612
--- Timings ---
Current time: 1559582744902 milliseconds
Total Time:          70.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.3 seconds, 71.6%
Fitness Testing:     11.1 seconds, 15.7%
Report:               8.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 672
Test mean error for best: 0.67200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: 64                 
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37                 
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 21                 
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: 60                 
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max print_boolean boolean_and boolean_eq exec_empty integer_eq exec_s_when_autoconstructing (exec_shove (boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (integer_sub) (integer_sub in2 exec_s (exec_y_when_autoconstructing () integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_sub integer_add) (in1) (-32 integer_empty) print_integer integer_min boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gt boolean_frominteger exec_k_when_autoconstructing (integer_dup_times exec_eq integer_yank exec_stackdepth) (18 boolean_swap in3)))) ()) ()) () ()))) () ())
Lexicase best errors: [1 0 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 79
Percent parens: 0.329
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max print_boolean boolean_and boolean_eq exec_empty integer_eq exec_s_when_autoconstructing (exec_shove (boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (integer_sub) (integer_sub in2 exec_s (exec_y_when_autoconstructing () integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_sub integer_add) (in1) (-32 integer_empty) print_integer integer_min boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gt boolean_frominteger exec_k_when_autoconstructing (integer_dup_times exec_eq integer_yank exec_stackdepth) (18 boolean_swap in3)))) ()) ()) () ()))) () ())
Zero cases best errors: [1 0 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 79
Percent parens: 0.329
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 825 264 138 325 364 98 264 140 138)
Population mean number of elite cases: 2.88
Count of perfect (error zero) individuals by case: (325 825 264 138 325 364 98 264 140 138)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup) (exec_y_when_autoconstructing () integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop exec_noop in4 integer_empty exec_pop () integer_dec) (exec_when () in3 integer_gt boolean_frominteger integer_dec exec_stackdepth) 18 boolean_swap in3))
Errors: [1 0 1 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 7.119
Median total errors in population: 7
Error averages by case: (0.675 0.175 0.736 0.862 0.675 0.636 0.902 0.736 0.86 0.862)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.192
Average program size in population (points): 73.747
Average percent parens in population: 0.273
Minimum age in population: 32.29215240478516
Maximum age in population: 37.75774824619293
Average age in population: 35.56013118994236
Median age in population: 35.64313286542892
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 11171540
--- Timings ---
Current time: 1559582747982 milliseconds
Total Time:          73.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.5 seconds, 71.7%
Fitness Testing:     11.5 seconds, 15.6%
Report:               9.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 83                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: 21                 
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 76                 
Correct output: -80                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 17                 
Correct output: -29                 | Program output: 35                 
Correct output: -100                | Program output: 59                 
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 38                 
Correct output: -69                 | Program output: 63                 
Correct output: -80                 | Program output: 96                 
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: 35                 
Correct output: -23                 | Program output: 10                 
Correct output: -51                 | Program output: 83                 
Correct output: -25                 | Program output: 10                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 99                 
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: 62                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: 54                 
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: 56                 
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 15                 
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 78                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 76                 
Correct output: -88                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_sub integer_add integer_swap) (integer_fromboolean boolean_yank) (integer_div integer_eq exec_s (exec_y_when_autoconstructing (exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_empty integer_sub integer_add) () in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and) ()))) () ())
Lexicase best errors: [1 1 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap integer_sub integer_add integer_swap) (integer_fromboolean boolean_yank) (integer_div integer_eq exec_s (exec_y_when_autoconstructing (exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_empty integer_sub integer_add) () in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and) ()))) () ())
Zero cases best errors: [1 1 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (237 238 191 191 237 191 190 271 237 461)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (237 238 191 191 237 191 190 271 237 461)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (integer_max boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_yank) (boolean_yankdup exec_y_when_autoconstructing ()) (boolean_eq exec_empty boolean_and boolean_eq) exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup integer_sub) () integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (integer_eq boolean_swap) exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_do*while (integer_gte print_exec (exec_do*range (exec_if (boolean_swap) (exec_k (exec_empty exec_when (exec_if () (boolean_flush) exec_k_when_autoconstructing () (integer_lte) print_exec (exec_k_when_autoconstructing (integer_min integer_flush boolean_xor exec_y_when_autoconstructing () boolean_and) ()))) ())))))) ()))))) () ())
Errors: [1 1 0 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 83
Size: 126
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 7.556
Median total errors in population: 8
Error averages by case: (0.763 0.762 0.809 0.809 0.763 0.809 0.81 0.729 0.763 0.539)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.466
Average program size in population (points): 71.996
Average percent parens in population: 0.266
Minimum age in population: 33.64242744445801
Maximum age in population: 38.99166649580002
Average age in population: 37.02336326855421
Median age in population: 37.06961593031883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 11616181
--- Timings ---
Current time: 1559582751076 milliseconds
Total Time:          76.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.9 seconds, 71.7%
Fitness Testing:     11.8 seconds, 15.5%
Report:               9.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 83                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: 21                 
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 76                 
Correct output: -80                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 17                 
Correct output: -29                 | Program output: 35                 
Correct output: -100                | Program output: 59                 
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 38                 
Correct output: -69                 | Program output: 63                 
Correct output: -80                 | Program output: 96                 
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: 35                 
Correct output: -23                 | Program output: 10                 
Correct output: -51                 | Program output: 83                 
Correct output: -25                 | Program output: 10                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 99                 
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: 62                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: 54                 
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: 56                 
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 15                 
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 78                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 76                 
Correct output: -88                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 2, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_max exec_stackdepth boolean_and in2 exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_max exec_stackdepth boolean_and exec_k (exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt integer_sub) (integer_sub in2 exec_s (exec_y_when_autoconstructing (exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank integer_div integer_eq) (integer_swap integer_sub integer_add) (in1) -32 integer_empty)) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank)) ())) ()) ()) () ())
Lexicase best errors: [0 1 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 71
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 2, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_max exec_stackdepth boolean_and in2 exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_max exec_stackdepth boolean_and exec_k (exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt integer_sub) (integer_sub in2 exec_s (exec_y_when_autoconstructing (exec_rot (boolean_and integer_swap integer_fromboolean boolean_yank integer_div integer_eq) (integer_swap integer_sub integer_add) (in1) -32 integer_empty)) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank)) ())) ()) ()) () ())
Zero cases best errors: [0 1 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 71
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (504 131 373 269 517 373 13 269 13 413)
Population mean number of elite cases: 2.88
Count of perfect (error zero) individuals by case: (504 131 373 269 517 373 13 269 13 413)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (in2 integer_dup exec_y_when_autoconstructing () boolean_xor) (boolean_yankdup exec_y_when_autoconstructing () integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) (in2 exec_s (exec_y_when_autoconstructing (exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_empty integer_sub integer_add) () in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and) ())))
Errors: [0 1 0 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 47
Size: 66
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 7.125
Median total errors in population: 6
Error averages by case: (0.496 0.869 0.627 0.731 0.483 0.627 0.987 0.731 0.987 0.587)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.017
Average program size in population (points): 74.282
Average percent parens in population: 0.267
Minimum age in population: 35.29907035827637
Maximum age in population: 40.44528675079346
Average age in population: 38.51205020686984
Median age in population: 38.59010680019855
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.836
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 12100754
--- Timings ---
Current time: 1559582754163 milliseconds
Total Time:          79.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.1 seconds, 71.8%
Fitness Testing:     12.3 seconds, 15.4%
Report:              10.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 672
Test mean error for best: 0.67200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: 64                 
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37                 
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 21                 
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: 60                 
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction tag_integer_861} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup boolean_stackdepth) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_dup_items boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 tag_integer_861) (print_integer integer_rot integer_max exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_lt integer_dup_times exec_eq integer_yank exec_stackdepth) 18 boolean_swap in3) ()))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 69
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction tag_integer_861} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup boolean_stackdepth) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_dup_items boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 tag_integer_861) (print_integer integer_rot integer_max exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_lt integer_dup_times exec_eq integer_yank exec_stackdepth) 18 boolean_swap in3) ()))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 69
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (592 207 156 437 156 155 798 156 218 156)
Population mean number of elite cases: 3.03
Count of perfect (error zero) individuals by case: (592 207 156 437 156 155 798 156 218 156)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and exec_stackdepth boolean_and boolean_xor integer_shove boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (in2 exec_s (exec_y_when_autoconstructing () integer_lte boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank exec_stackdepth) (boolean_frominteger boolean_swap in3)))
Errors: [0 1 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 64
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 6.969
Median total errors in population: 7
Error averages by case: (0.408 0.793 0.844 0.563 0.844 0.845 0.202 0.844 0.782 0.844)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.314
Average program size in population (points): 74.754
Average percent parens in population: 0.267
Minimum age in population: 36.29907035827637
Maximum age in population: 42.00319530069828
Average age in population: 39.99511789888144
Median age in population: 40.06330087035894
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 12559553
--- Timings ---
Current time: 1559582757061 milliseconds
Total Time:          82.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.1 seconds, 71.8%
Fitness Testing:     12.7 seconds, 15.4%
Report:              10.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 672
Test mean error for best: 0.67200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: 64                 
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37                 
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 21                 
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: 60                 
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3})
Lexicase best program: (exec_y_when_autoconstructing () integer_yankdup boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_dec boolean_xor exec_eq integer_yank exec_stackdepth) 18 boolean_yankdup in3) ()))
Lexicase best errors: [0 1 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 73
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3})
Zero cases best program: (exec_y_when_autoconstructing () integer_yankdup boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_swap) (integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_div integer_eq integer_swap integer_sub integer_add) (in1) -32 integer_empty) (print_integer integer_rot boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () in3 integer_gt boolean_frominteger integer_dec boolean_xor exec_eq integer_yank exec_stackdepth) 18 boolean_yankdup in3) ()))
Zero cases best errors: [0 1 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 73
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (808 106 246 834 834 452 253 452 26 24)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (808 106 246 834 834 452 253 452 26 24)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -30} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_209} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction 18} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth exec_k_when_autoconstructing (boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_xor) (boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () in2 exec_s (exec_y_when_autoconstructing () exec_rot (boolean_and integer_yank) (integer_fromboolean boolean_yank integer_div integer_yankdup integer_swap integer_sub integer_add) (in1) -30 integer_empty) (print_integer boolean_and boolean_shove exec_eq) (exec_k_when_autoconstructing (exec_noop in4 boolean_invert_first_then_and exec_pop (integer_dec exec_when () exec_stackdepth integer_gt boolean_frominteger tagged_209 boolean_rot exec_eq integer_yank exec_stackdepth) 18 boolean_swap in3) ())) () ()) ())
Errors: [0 1 1 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 55
Size: 77
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.965
Median total errors in population: 5
Error averages by case: (0.192 0.894 0.754 0.166 0.166 0.548 0.747 0.548 0.974 0.976)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.631
Average program size in population (points): 69.625
Average percent parens in population: 0.255
Minimum age in population: 38.32193803787231
Maximum age in population: 43.47091728448868
Average age in population: 41.51169157227129
Median age in population: 41.56632162258029
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 13017331
--- Timings ---
Current time: 1559582760016 milliseconds
Total Time:          85.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.3 seconds, 71.7%
Fitness Testing:     13.1 seconds, 15.3%
Report:              10.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: 64                 
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 99                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 63                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 75                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 57                 
Correct output: 56                  | Program output: 85                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 91                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: 15                 
Correct output: -79                 | Program output: 27                 
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: 60                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37                 
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: 77                 
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 89                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 21                 
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -53                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -27                
Correct output: -100                | Program output: 60                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 59                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: 22                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_pop (boolean_yankdup exec_when () exec_do*while (integer_gte in3 integer_gt integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank boolean_swap in3)))) () ())
Lexicase best errors: [0 0 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 71
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_pop (boolean_yankdup exec_when () exec_do*while (integer_gte in3 integer_gt integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank boolean_swap in3)))) () ())
Zero cases best errors: [0 0 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 71
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 805 649 232 224 590 161 224 206 230)
Population mean number of elite cases: 3.53
Count of perfect (error zero) individuals by case: (204 805 649 232 224 590 161 224 206 230)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_dup_times) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () in2 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_pop (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))))) () ()) () ())
Errors: [0 0 0 0 1 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 55
Size: 80
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.475
Median total errors in population: 6
Error averages by case: (0.796 0.195 0.351 0.768 0.776 0.41 0.839 0.776 0.794 0.77)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.684
Average program size in population (points): 70.227
Average percent parens in population: 0.260
Minimum age in population: 40.10176077485085
Maximum age in population: 45.01397543027997
Average age in population: 43.09436829773337
Median age in population: 43.14615512266755
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 13456469
--- Timings ---
Current time: 1559582762684 milliseconds
Total Time:          88.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.1 seconds, 71.7%
Fitness Testing:     13.5 seconds, 15.3%
Report:              11.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 550
Test mean error for best: 0.55000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 582                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_dup_times) (integer_sub) integer_sub in2 exec_s (integer_eq integer_swap integer_sub integer_add in1) (-32 exec_shove () print_integer integer_rot integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_pop (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Lexicase best errors: [1 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_dup_times) (integer_sub) integer_sub in2 exec_s (integer_eq integer_swap integer_sub integer_add in1) (-32 exec_shove () print_integer integer_rot integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_pop (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Zero cases best errors: [1 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 717 112 342 344 10 285 288 10 283)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (10 717 112 342 344 10 285 288 10 283)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_s_when_autoconstructing (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank boolean_swap in3))) () ())) () ()) () ())
Errors: [1 0 1 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 55
Size: 79
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 7.599
Median total errors in population: 7
Error averages by case: (0.99 0.283 0.888 0.658 0.656 0.99 0.715 0.712 0.99 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.847
Average program size in population (points): 73.777
Average percent parens in population: 0.269
Minimum age in population: 41.99368453025818
Maximum age in population: 46.17897358722985
Average age in population: 45.01307876911014
Median age in population: 45.00212856754661
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.005
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 13950184
--- Timings ---
Current time: 1559582765645 milliseconds
Total Time:          91.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.1 seconds, 71.6%
Fitness Testing:     13.9 seconds, 15.3%
Report:              11.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 608
Test mean error for best: 0.60800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 99                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 63                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 75                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 57                 
Correct output: 56                  | Program output: 85                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 91                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: 27                 
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: 60                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: 77                 
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 89                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -53                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: 80                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -27                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 59                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: 22                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: 22                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_dup_times) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () in2 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_lt integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_pop (integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ()) () ())
Lexicase best errors: [0 0 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 81
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_dup_times) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () in2 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_lt integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_pop (integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ()) () ())
Zero cases best errors: [0 0 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 81
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 860 192 440 421 225 225 226 222 251)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (341 860 192 440 421 225 225 226 222 251)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_dup_times) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () in2 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_lt integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_pop (integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ()) () ())
Errors: [0 0 1 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 55
Size: 81
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 6.597
Median total errors in population: 6
Error averages by case: (0.659 0.14 0.808 0.56 0.579 0.775 0.775 0.774 0.778 0.749)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.351
Average program size in population (points): 72.978
Average percent parens in population: 0.266
Minimum age in population: 44.42385205626488
Maximum age in population: 47.82940094359219
Average age in population: 46.58211541696731
Median age in population: 46.62848572991788
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 14462559
--- Timings ---
Current time: 1559582768288 milliseconds
Total Time:          93.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.9 seconds, 71.4%
Fitness Testing:     14.4 seconds, 15.4%
Report:              12.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 513
Test mean error for best: 0.51300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 99                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 63                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 75                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 57                 
Correct output: 56                  | Program output: 85                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 91                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 27                 
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 60                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: 77                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 89                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: -27                
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 59                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 22                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_or integer_gt boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_pop (in4 exec_s (exec_pop (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap) (in3) ())))) () ()))) () ())
Lexicase best errors: [1 1 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 74
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_or integer_gt boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_pop (in4 exec_s (exec_pop (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap) (in3) ())))) () ()))) () ())
Zero cases best errors: [1 1 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 74
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 70 822 160 118 195 118 118 508 837)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (186 70 822 160 118 195 118 118 508 837)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_or integer_gt boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_pop (in4 exec_s (exec_pop (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))) () ()))) () ())
Errors: [1 1 0 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 52
Size: 74
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 6.868
Median total errors in population: 7
Error averages by case: (0.814 0.93 0.178 0.84 0.882 0.805 0.882 0.882 0.492 0.163)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.812
Average program size in population (points): 74.777
Average percent parens in population: 0.291
Minimum age in population: 46.46999924164265
Maximum age in population: 49.56898200325668
Average age in population: 48.32562541027181
Median age in population: 48.41160687338561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 14979623
--- Timings ---
Current time: 1559582770843 milliseconds
Total Time:          96.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.7 seconds, 71.3%
Fitness Testing:     14.9 seconds, 15.4%
Report:              12.7 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 550
Test mean error for best: 0.55000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 582                
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing (integer_yankdup) integer_sub) () integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_s_when_autoconstructing (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank boolean_swap in3))) () ())) () ())) () ())
Lexicase best errors: [0 1 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 79
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing (integer_yankdup) integer_sub) () integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_s_when_autoconstructing (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank boolean_swap in3))) () ())) () ())) () ())
Zero cases best errors: [0 1 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 79
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (347 363 346 361 714 363 276 207 160 297)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (347 363 346 361 714 363 276 207 160 297)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing () in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_s_when_autoconstructing (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank boolean_swap in3))) () ())) () ()) () ())
Errors: [0 1 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 58
Size: 82
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 6.566
Median total errors in population: 6
Error averages by case: (0.653 0.637 0.654 0.639 0.286 0.637 0.724 0.793 0.84 0.703)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.191
Average program size in population (points): 75.19
Average percent parens in population: 0.291
Minimum age in population: 47.46999924164265
Maximum age in population: 51.13955295202322
Average age in population: 49.49923287348659
Median age in population: 49.5981781873852
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 15482158
--- Timings ---
Current time: 1559582773555 milliseconds
Total Time:          98.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.5 seconds, 71.3%
Fitness Testing:     15.3 seconds, 15.5%
Report:              13.0 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_s_when_autoconstructing (integer_dec boolean_empty) (exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank boolean_swap in3))) ())) () ()) () ())
Lexicase best errors: [1 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_s_when_autoconstructing (integer_dec boolean_empty) (exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank boolean_swap in3))) ())) () ()) () ())
Zero cases best errors: [1 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 345 50 405 404 324 345 300 822 602)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (2 345 50 405 404 324 345 300 822 602)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing (integer_yankdup) integer_sub) () integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (integer_stackdepth exec_yankdup exec_s_when_autoconstructing (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank boolean_swap in3))) () ())) () ())) () ())
Errors: [1 1 1 0 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 79
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.401
Median total errors in population: 6
Error averages by case: (0.998 0.655 0.95 0.595 0.596 0.676 0.655 0.7 0.178 0.398)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.195
Average program size in population (points): 76.975
Average percent parens in population: 0.279
Minimum age in population: 48.82422853633761
Maximum age in population: 52.65255237696692
Average age in population: 51.08255906849867
Median age in population: 51.12119801458903
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 164
Genome diversity (% unique genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.007
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 16020216
--- Timings ---
Current time: 1559582776301 milliseconds
Total Time:         101.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.2 seconds, 71.1%
Fitness Testing:     15.8 seconds, 15.5%
Report:              13.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -37                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: 50                 
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 99                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 63                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 75                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 57                 
Correct output: 56                  | Program output: 85                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 91                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: 27                 
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: 5                  
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: 60                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: 87                 
Correct output: -96                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 89                 
Correct output: -63                 | Program output: -14                
Correct output: -78                 | Program output: 77                 
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -53                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: 32                 
Correct output: -66                 | Program output: -27                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: 90                 
Correct output: 23                  | Program output: 59                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 80                 
Correct output: -98                 | Program output: 71                 
Correct output: -82                 | Program output: 22                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 100                
Correct output: -33                 | Program output: 75                 
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (boolean_yankdup boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) (integer_sub in2 exec_s (exec_y_when_autoconstructing () in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot) (boolean_shove integer_add in4) exec_yankdup exec_s_when_autoconstructing (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank boolean_swap in3))) () ()) () ()) () ()))
Lexicase best errors: [0 0 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (boolean_yankdup boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) (integer_sub in2 exec_s (exec_y_when_autoconstructing () in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot) (boolean_shove integer_add in4) exec_yankdup exec_s_when_autoconstructing (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank boolean_swap in3))) () ()) () ()) () ()))
Zero cases best errors: [0 0 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (522 522 293 263 318 101 855 317 101 317)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (522 522 293 263 318 101 855 317 101 317)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_dup_times) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () in2 exec_s (exec_y_when_autoconstructing (exec_rot (exec_while (integer_lt integer_fromboolean integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_s_when_autoconstructing (integer_dec exec_when () exec_do*while (exec_do*while (integer_gte in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_eq integer_yank boolean_swap in3))) () ()) ())) () ()) () ())
Errors: [1 1 0 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 50
Size: 74
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.391
Median total errors in population: 6
Error averages by case: (0.478 0.478 0.707 0.737 0.682 0.899 0.145 0.683 0.899 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.555
Average program size in population (points): 79.258
Average percent parens in population: 0.299
Minimum age in population: 49.82422853633761
Maximum age in population: 53.77204122761032
Average age in population: 52.19683423666697
Median age in population: 52.29683016613126
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 16585317
--- Timings ---
Current time: 1559582779042 milliseconds
Total Time:         104.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.0 seconds, 70.9%
Fitness Testing:     16.3 seconds, 15.6%
Report:              14.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 559
Test mean error for best: 0.55900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 32                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 80                 
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: 80                 
Correct output: -29                 | Program output: 53                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: 22                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Lexicase best errors: [0 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 71
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Zero cases best errors: [0 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 71
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (176 465 878 26 28 415 632 255 846 255)
Population mean number of elite cases: 3.98
Count of perfect (error zero) individuals by case: (176 465 878 26 28 415 632 255 846 255)
Population mean number of perfect (error zero) cases: 3.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 2, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_dup_times) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () in2 exec_s (exec_y_when_autoconstructing (exec_rot (exec_while (integer_lt integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove ()) (print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup exec_eq integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (integer_yank boolean_swap in3) () ())))))) () ()) () ())
Errors: [0 0 0 0 0 1 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 55
Size: 80
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.024
Median total errors in population: 6
Error averages by case: (0.824 0.535 0.122 0.974 0.972 0.585 0.368 0.745 0.154 0.745)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.554
Average program size in population (points): 79.477
Average percent parens in population: 0.301
Minimum age in population: 51.50314099760726
Maximum age in population: 55.2925346432603
Average age in population: 53.62171888303186
Median age in population: 53.70000815583626
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 17167924
--- Timings ---
Current time: 1559582781886 milliseconds
Total Time:         107.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.8 seconds, 70.7%
Fitness Testing:     16.8 seconds, 15.7%
Report:              14.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 446
Test mean error for best: 0.44600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) (integer_sub in2 exec_s (exec_y_when_autoconstructing () in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))))) () ()) () ()))
Lexicase best errors: [0 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 84
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) (integer_sub in2 exec_s (exec_y_when_autoconstructing () in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))))) () ()) () ()))
Zero cases best errors: [0 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 84
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (293 430 290 305 152 300 594 151 583 675)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (293 430 290 305 152 300 594 151 583 675)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_dup_times) (integer_sub) boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Errors: [0 0 1 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 56
Size: 77
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.227
Median total errors in population: 5
Error averages by case: (0.707 0.57 0.71 0.695 0.848 0.7 0.406 0.849 0.417 0.325)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.906
Average program size in population (points): 80.546
Average percent parens in population: 0.294
Minimum age in population: 52.55159297166392
Maximum age in population: 56.99478856156929
Average age in population: 55.43344893266461
Median age in population: 55.49894036757178
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.673
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 17756166
--- Timings ---
Current time: 1559582784758 milliseconds
Total Time:         110.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.6 seconds, 70.5%
Fitness Testing:     17.3 seconds, 15.7%
Report:              15.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 99                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 63                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 75                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 57                 
Correct output: 56                  | Program output: 85                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 91                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 87                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 89                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -7877              
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 59                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -9                 
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 80                 
Correct output: -98                 | Program output: 71                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 75                 
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Lexicase best errors: [0 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 74
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Zero cases best errors: [0 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 74
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (671 318 374 834 671 162 315 198 168 163)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (671 318 374 834 671 162 315 198 168 163)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) (integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot) (boolean_shove integer_add in4 exec_yankdup) exec_s_when_autoconstructing (integer_dec exec_eq) (exec_do*while (exec_do*while (integer_gte in3 integer_gt integer_swap integer_dec integer_dup_times exec_eq integer_yank boolean_swap in3))) ()) () ())) () ()))
Errors: [0 1 1 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 80
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.126
Median total errors in population: 6
Error averages by case: (0.329 0.682 0.626 0.166 0.329 0.838 0.685 0.802 0.832 0.837)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.315
Average program size in population (points): 76.204
Average percent parens in population: 0.287
Minimum age in population: 55.12119801458903
Maximum age in population: 58.38283787376713
Average age in population: 56.59761291996799
Median age in population: 56.67850230776821
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 157
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.007
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 18368776
--- Timings ---
Current time: 1559582787486 milliseconds
Total Time:         112.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.4 seconds, 70.3%
Fitness Testing:     17.9 seconds, 15.8%
Report:              15.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 83                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: 21                 
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 76                 
Correct output: -80                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 17                 
Correct output: -29                 | Program output: 35                 
Correct output: -100                | Program output: 59                 
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 38                 
Correct output: -69                 | Program output: 63                 
Correct output: -80                 | Program output: 96                 
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: 35                 
Correct output: -23                 | Program output: 10                 
Correct output: -51                 | Program output: 83                 
Correct output: -25                 | Program output: 10                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 99                 
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: 62                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: 54                 
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: 56                 
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 15                 
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 78                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 76                 
Correct output: -88                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_max exec_stackdepth integer_max integer_min exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt) (boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot) (boolean_shove integer_add in4) exec_yankdup boolean_dup_items integer_dec exec_rot () (exec_do*while (exec_do*while (integer_gte in3 integer_gt))) ()) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 73
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_max exec_stackdepth integer_max integer_min exec_stackdepth boolean_and boolean_eq exec_empty boolean_dup_items exec_s_when_autoconstructing (integer_gt) (boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () in1 exec_s (exec_y_when_autoconstructing () exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove () print_integer integer_rot integer_rot) (boolean_shove integer_add in4) exec_yankdup boolean_dup_items integer_dec exec_rot () (exec_do*while (exec_do*while (integer_gte in3 integer_gt))) ()) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 73
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (22 846 795 105 105 427 843 369 250 843)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (22 846 795 105 105 427 843 369 250 843)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction -32} {:close 2, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_dup_times) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing () in2 exec_s (exec_y_when_autoconstructing () exec_rot (exec_while (integer_lt integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) -32 exec_shove ()) (print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_empty exec_pop (integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ()) () ())
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 56
Size: 82
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 5.395
Median total errors in population: 5
Error averages by case: (0.978 0.154 0.205 0.895 0.895 0.573 0.157 0.631 0.75 0.157)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.161
Average program size in population (points): 77.897
Average percent parens in population: 0.291
Minimum age in population: 56.29683016613126
Maximum age in population: 60.03235758170558
Average age in population: 58.0760364227532
Median age in population: 58.1237857413762
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 18967114
--- Timings ---
Current time: 1559582790168 milliseconds
Total Time:         115.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.2 seconds, 70.2%
Fitness Testing:     18.4 seconds, 15.9%
Report:              15.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 446
Test mean error for best: 0.44600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 71
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 71
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 811 272 362 852 274 10 837 319 272)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (10 811 272 362 852 274 10 837 319 272)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 51
Size: 71
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 5.981
Median total errors in population: 7
Error averages by case: (0.99 0.189 0.728 0.638 0.148 0.726 0.99 0.163 0.681 0.728)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.465
Average program size in population (points): 76.784
Average percent parens in population: 0.289
Minimum age in population: 57.38921504432801
Maximum age in population: 61.77657708735569
Average age in population: 59.70229165563166
Median age in population: 59.72171060169694
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.009
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 19489050
--- Timings ---
Current time: 1559582792935 milliseconds
Total Time:         118.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.9 seconds, 70.2%
Fitness Testing:     18.9 seconds, 16.0%
Report:              16.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 446
Test mean error for best: 0.44600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Lexicase best errors: [1 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 71
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Zero cases best errors: [1 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 71
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (27 184 576 530 520 528 519 195 1 520)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (27 184 576 530 520 528 519 195 1 520)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_add} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_add) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Errors: [1 1 0 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 51
Size: 71
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.4
Median total errors in population: 5
Error averages by case: (0.973 0.816 0.424 0.47 0.48 0.472 0.481 0.805 0.999 0.48)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.939
Average program size in population (points): 74.527
Average percent parens in population: 0.288
Minimum age in population: 58.38921504432801
Maximum age in population: 63.22296838634611
Average age in population: 61.0725631629259
Median age in population: 61.1491843457261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 20169163
--- Timings ---
Current time: 1559582795865 milliseconds
Total Time:         121.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.8 seconds, 70.0%
Fitness Testing:     19.5 seconds, 16.1%
Report:              16.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 454                
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup boolean_empty) (integer_yankdup) integer_sub integer_sub in2 exec_s (in2 in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))) () ())
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup boolean_empty) (integer_yankdup) integer_sub integer_sub in2 exec_s (in2 in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))) () ())
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 385 839 307 164 115 766 115 423 451)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (202 385 839 307 164 115 766 115 423 451)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup boolean_empty) (integer_yankdup) integer_sub integer_sub in2 exec_s (in2 in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))) () ())
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 51
Size: 68
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.233
Median total errors in population: 6
Error averages by case: (0.798 0.615 0.161 0.693 0.836 0.885 0.234 0.885 0.577 0.549)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.625
Average program size in population (points): 73.67
Average percent parens in population: 0.284
Minimum age in population: 59.38921504432801
Maximum age in population: 64.3810951652722
Average age in population: 62.7187609375376
Median age in population: 62.76032892945568
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.008
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 20848513
--- Timings ---
Current time: 1559582798749 milliseconds
Total Time:         124.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.6 seconds, 69.8%
Fitness Testing:     20.1 seconds, 16.2%
Report:              17.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 454                
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup boolean_empty) (integer_yankdup) integer_sub integer_sub in2 exec_s (in2 in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))) () ())
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 68
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup boolean_empty) (integer_yankdup) integer_sub integer_sub in2 exec_s (in2 in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))) () ())
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 68
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (224 599 533 603 522 828 523 233 618 222)
Population mean number of elite cases: 4.91
Count of perfect (error zero) individuals by case: (224 599 533 603 522 828 523 233 618 222)
Population mean number of perfect (error zero) cases: 4.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (integer_yank boolean_yankdup boolean_empty) (integer_yankdup) integer_sub integer_sub in2 exec_s (in2 in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))) () ())
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 51
Size: 68
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.095
Median total errors in population: 3
Error averages by case: (0.776 0.401 0.467 0.397 0.478 0.172 0.477 0.767 0.382 0.778)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.165
Average program size in population (points): 69.201
Average percent parens in population: 0.260
Minimum age in population: 62.18510800035483
Maximum age in population: 65.90010955818843
Average age in population: 64.34675959840585
Median age in population: 64.46341290649775
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 21553433
--- Timings ---
Current time: 1559582801604 milliseconds
Total Time:         126.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.4 seconds, 69.6%
Fitness Testing:     20.7 seconds, 16.3%
Report:              17.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 446
Test mean error for best: 0.44600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 71
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 71
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (289 539 844 8 471 13 8 848 841 627)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (289 539 844 8 471 13 8 848 841 627)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) ())
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 51
Size: 71
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 5.512
Median total errors in population: 5
Error averages by case: (0.711 0.461 0.156 0.992 0.529 0.987 0.992 0.152 0.159 0.373)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.435
Average program size in population (points): 69.633
Average percent parens in population: 0.261
Minimum age in population: 63.18510800035483
Maximum age in population: 67.51921571005869
Average age in population: 65.76728750830425
Median age in population: 65.77297967440006
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.711
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 22320539
--- Timings ---
Current time: 1559582804568 milliseconds
Total Time:         129.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.1 seconds, 69.4%
Fitness Testing:     21.4 seconds, 16.4%
Report:              18.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (exec_empty integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup boolean_empty) (integer_yankdup) integer_sub integer_sub in2 exec_s (in2 in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) () ())
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 70
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (exec_empty integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup boolean_empty) (integer_yankdup) integer_sub integer_sub in2 exec_s (in2 in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) () ())
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 70
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 406 798 798 164 28 118 799 797 624)
Population mean number of elite cases: 4.70
Count of perfect (error zero) individuals by case: (164 406 798 798 164 28 118 799 797 624)
Population mean number of perfect (error zero) cases: 4.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction tagged_112} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup boolean_empty) (integer_yankdup) integer_sub integer_sub in2 exec_s (in2 in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) tagged_112 exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) () ())
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 52
Size: 68
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.304
Median total errors in population: 4
Error averages by case: (0.836 0.594 0.202 0.202 0.836 0.972 0.882 0.201 0.203 0.376)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.388
Average program size in population (points): 70.644
Average percent parens in population: 0.272
Minimum age in population: 65.32880243963882
Maximum age in population: 68.96738992157395
Average age in population: 66.63389511173509
Median age in population: 66.74863439942851
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 23078488
--- Timings ---
Current time: 1559582807469 milliseconds
Total Time:         132.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.9 seconds, 69.2%
Fitness Testing:     22.0 seconds, 16.6%
Report:              18.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove exec_when ()) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) ())
Lexicase best errors: [0 0 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 66
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove exec_when ()) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) ())
Zero cases best errors: [0 0 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 66
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (148 148 55 53 710 147 822 645 467 804)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (148 148 55 53 710 147 822 645 467 804)
Population mean number of perfect (error zero) cases: 4.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc boolean_and exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) ())
Errors: [0 0 1 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 51
Size: 71
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.001
Median total errors in population: 5
Error averages by case: (0.852 0.852 0.945 0.947 0.29 0.853 0.178 0.355 0.533 0.196)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.54
Average program size in population (points): 67.861
Average percent parens in population: 0.254
Minimum age in population: 66.32880243963882
Maximum age in population: 70.56424842325598
Average age in population: 68.39422698684336
Median age in population: 68.41608105502621
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 23785054
--- Timings ---
Current time: 1559582810355 milliseconds
Total Time:         135.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.7 seconds, 69.1%
Fitness Testing:     22.7 seconds, 16.7%
Report:              19.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 83                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: 21                 
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 76                 
Correct output: -80                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 17                 
Correct output: -29                 | Program output: 35                 
Correct output: -100                | Program output: 59                 
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 38                 
Correct output: -69                 | Program output: 63                 
Correct output: -80                 | Program output: 96                 
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: 35                 
Correct output: -23                 | Program output: 10                 
Correct output: -51                 | Program output: 83                 
Correct output: -25                 | Program output: 10                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 99                 
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: 62                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: 54                 
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: 56                 
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 15                 
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 78                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 76                 
Correct output: -88                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (exec_empty integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup boolean_empty) (integer_yankdup) integer_sub integer_sub in2 exec_s (in2 in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) () ())
Lexicase best errors: [1 0 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 70
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (exec_empty integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup boolean_empty) (integer_yankdup) integer_sub integer_sub in2 exec_s (in2 in1 exec_rot () (exec_while (integer_swap integer_fromboolean boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) () ())
Zero cases best errors: [1 0 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 70
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (309 151 253 45 44 151 151 309 46 355)
Population mean number of elite cases: 1.81
Count of perfect (error zero) individuals by case: (309 151 253 45 44 151 151 309 46 355)
Population mean number of perfect (error zero) cases: 1.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_sub in2 exec_s () (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4) exec_yankdup integer_add) in4 exec_yankdup integer_inc boolean_empty integer_gte) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (boolean_pop boolean_swap in3) () ())))))
Errors: [1 1 0 0 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 46
Size: 61
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 8.186
Median total errors in population: 8
Error averages by case: (0.691 0.849 0.747 0.955 0.956 0.849 0.849 0.691 0.954 0.645)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.403
Average program size in population (points): 69.462
Average percent parens in population: 0.273
Minimum age in population: 67.32880243963882
Maximum age in population: 71.85801216050123
Average age in population: 69.84430808767154
Median age in population: 69.81407985677018
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.005
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 24525183
--- Timings ---
Current time: 1559582813551 milliseconds
Total Time:         138.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.4 seconds, 68.9%
Fitness Testing:     23.3 seconds, 16.8%
Report:              19.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max integer_mod boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 integer_pop integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 71
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max integer_mod boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 integer_pop integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 71
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (484 192 524 194 240 237 194 246 284 237)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (484 192 524 194 240 237 194 246 284 237)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove exec_when ()) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) ())
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 46
Size: 66
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.168
Median total errors in population: 8
Error averages by case: (0.516 0.808 0.476 0.806 0.76 0.763 0.806 0.754 0.716 0.763)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.833
Average program size in population (points): 68.528
Average percent parens in population: 0.257
Minimum age in population: 68.32880243963882
Maximum age in population: 73.85801216050123
Average age in population: 71.59405236213686
Median age in population: 71.6813192241793
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 25138471
--- Timings ---
Current time: 1559582816336 milliseconds
Total Time:         141.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.2 seconds, 68.6%
Fitness Testing:     23.9 seconds, 16.9%
Report:              20.5 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup boolean_empty) (integer_yankdup boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) integer_sub integer_sub in2 exec_s () (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_s (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))) () ()))) ())
Lexicase best errors: [1 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 76
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup boolean_empty) (integer_yankdup boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) integer_sub integer_sub in2 exec_s () (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec exec_s (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))) () ()))) ())
Zero cases best errors: [1 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 76
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (20 595 778 106 393 135 718 619 434 21)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (20 595 778 106 393 135 718 619 434 21)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove exec_when ()) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) ())
Errors: [1 0 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 46
Size: 66
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 6.181
Median total errors in population: 5
Error averages by case: (0.98 0.405 0.222 0.894 0.607 0.865 0.282 0.381 0.566 0.979)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.884
Average program size in population (points): 72.228
Average percent parens in population: 0.281
Minimum age in population: 69.32880243963882
Maximum age in population: 74.54384647732586
Average age in population: 72.8790910923916
Median age in population: 73.05225312390117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.007
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.145
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 25807202
--- Timings ---
Current time: 1559582819280 milliseconds
Total Time:         144.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.0 seconds, 68.5%
Fitness Testing:     24.5 seconds, 16.9%
Report:              21.0 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec print_integer boolean_swap in3))) ()) ())
Lexicase best errors: [0 1 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec print_integer boolean_swap in3))) ()) ())
Zero cases best errors: [0 1 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (509 232 229 221 349 277 125 126 813 124)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (509 232 229 221 349 277 125 126 813 124)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) ()) ())
Errors: [0 1 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 56
Size: 77
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.995
Median total errors in population: 6
Error averages by case: (0.491 0.768 0.771 0.779 0.651 0.723 0.875 0.874 0.187 0.876)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.555
Average program size in population (points): 74.687
Average percent parens in population: 0.283
Minimum age in population: 70.32880243963882
Maximum age in population: 76.26986248389998
Average age in population: 74.4806185356526
Median age in population: 74.49945452052792
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.006
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 26569231
--- Timings ---
Current time: 1559582822204 milliseconds
Total Time:         147.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.8 seconds, 68.3%
Fitness Testing:     25.2 seconds, 17.1%
Report:              21.5 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s})
Lexicase best program: (integer_max integer_empty integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s () () ()))) ()) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 74
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s})
Zero cases best program: (integer_max integer_empty integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s () () ()))) ()) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 74
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 790 809 270 269 414 414 268 414 414)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (183 790 809 270 269 414 414 268 414 414)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) ()) ())
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 56
Size: 77
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 5.755
Median total errors in population: 7
Error averages by case: (0.817 0.21 0.191 0.73 0.731 0.586 0.586 0.732 0.586 0.586)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.2
Average program size in population (points): 76.829
Average percent parens in population: 0.281
Minimum age in population: 72.7651335580154
Maximum age in population: 77.77265758921442
Average age in population: 76.07888816109586
Median age in population: 76.19906761378003
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 27325970
--- Timings ---
Current time: 1559582825213 milliseconds
Total Time:         150.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.7 seconds, 68.2%
Fitness Testing:     25.9 seconds, 17.2%
Report:              21.9 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq) (exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub)) (integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_do*while (exec_do*while ()))) ()) ()))
Lexicase best errors: [1 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 76
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq) (exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub)) (integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_do*while (exec_do*while ()))) ()) ()))
Zero cases best errors: [1 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 76
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 821 543 174 179 1 548 841 546)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (1 1 821 543 174 179 1 548 841 546)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) ()) ())
Errors: [1 1 0 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 59
Size: 81
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 6.345
Median total errors in population: 5
Error averages by case: (0.999 0.999 0.179 0.457 0.826 0.821 0.999 0.452 0.159 0.454)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.397
Average program size in population (points): 73.802
Average percent parens in population: 0.276
Minimum age in population: 74.3916743395419
Maximum age in population: 79.58803447903227
Average age in population: 77.58843687031175
Median age in population: 77.64147983212246
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.006
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 27846093
--- Timings ---
Current time: 1559582828070 milliseconds
Total Time:         153.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       104.5 seconds, 68.2%
Fitness Testing:     26.4 seconds, 17.2%
Report:              22.3 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (integer_mod boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 77
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (integer_mod boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 77
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (505 761 279 812 278 485 828 490 167 832)
Population mean number of elite cases: 5.44
Count of perfect (error zero) individuals by case: (505 761 279 812 278 485 828 490 167 832)
Population mean number of perfect (error zero) cases: 5.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger boolean_or integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) ()) ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 62
Size: 83
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 4.563
Median total errors in population: 6
Error averages by case: (0.495 0.239 0.721 0.188 0.722 0.515 0.172 0.51 0.833 0.168)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.229
Average program size in population (points): 74.732
Average percent parens in population: 0.274
Minimum age in population: 75.3916743395419
Maximum age in population: 81.0207595958643
Average age in population: 79.58719267106822
Median age in population: 79.78613929583291
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.01
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 28346295
--- Timings ---
Current time: 1559582830844 milliseconds
Total Time:         156.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       106.4 seconds, 68.1%
Fitness Testing:     26.9 seconds, 17.2%
Report:              22.8 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth boolean_eq boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 boolean_frominteger integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 71
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth boolean_eq boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_add) (in4 boolean_frominteger integer_inc integer_dec exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) () ())
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 71
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 779 215 789 216 815 776 477 778 1)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (1 779 215 789 216 815 776 477 778 1)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_and integer_min exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (exec_y_when_autoconstructing (in1 exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot exec_when ()) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) ())
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 44
Size: 64
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 5.153
Median total errors in population: 4
Error averages by case: (0.999 0.221 0.785 0.211 0.784 0.185 0.224 0.523 0.222 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.522
Average program size in population (points): 73.873
Average percent parens in population: 0.276
Minimum age in population: 78.2876950808762
Maximum age in population: 82.65261785359726
Average age in population: 80.68834682196955
Median age in population: 80.77228989861513
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 28874048
--- Timings ---
Current time: 1559582833691 milliseconds
Total Time:         159.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       108.2 seconds, 68.1%
Fitness Testing:     27.4 seconds, 17.2%
Report:              23.3 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt))) ()) ())
Lexicase best errors: [0 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt))) ()) ())
Zero cases best errors: [0 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (614 215 179 179 570 838 178 215 178 216)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (614 215 179 179 570 838 178 215 178 216)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_noop integer_max exec_stackdepth boolean_flush exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 boolean_dup_items integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) ())) ()) ())
Errors: [0 1 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 63
Size: 88
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 6.618
Median total errors in population: 7
Error averages by case: (0.386 0.785 0.821 0.821 0.43 0.162 0.822 0.785 0.822 0.784)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.014
Average program size in population (points): 70.895
Average percent parens in population: 0.280
Minimum age in population: 79.37331018413641
Maximum age in population: 83.98530580149504
Average age in population: 82.19942351278686
Median age in population: 82.16594479112081
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 29448760
--- Timings ---
Current time: 1559582836511 milliseconds
Total Time:         161.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       110.0 seconds, 68.0%
Fitness Testing:     27.9 seconds, 17.2%
Report:              23.8 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_shove) (integer_sub) exec_s_when_autoconstructing (in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_eq exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times)) ()) ()) () ())
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 87
Percent parens: 0.287
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_shove) (integer_sub) exec_s_when_autoconstructing (in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_eq exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times)) ()) ()) () ())
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 87
Percent parens: 0.287
--- Lexicase Population Statistics ---
Count of elite individuals by case: (583 848 580 11 516 521 519 585 11 433)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (583 848 580 11 516 521 519 585 11 433)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) () integer_sub in2 exec_s () (in2 exec_s (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger) integer_dec integer_dec) integer_dup_times exec_s (print_integer boolean_swap in3) () ()) () ()) ())
Errors: [0 0 0 1 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 57
Size: 78
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 5.393
Median total errors in population: 5
Error averages by case: (0.417 0.152 0.42 0.989 0.484 0.479 0.481 0.415 0.989 0.567)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.485
Average program size in population (points): 74.902
Average percent parens in population: 0.272
Minimum age in population: 80.7606912274483
Maximum age in population: 85.40444098793952
Average age in population: 83.72161488250929
Median age in population: 83.82438802820494
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.009
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 29966951
--- Timings ---
Current time: 1559582839277 milliseconds
Total Time:         164.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       111.8 seconds, 67.9%
Fitness Testing:     28.4 seconds, 17.2%
Report:              24.3 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (exec_dup (in3 integer_rot boolean_shove integer_add) in4 exec_yankdup integer_inc boolean_and exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) ()) ())
Lexicase best errors: [1 1 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 95
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor) (boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (exec_dup (in3 integer_rot boolean_shove integer_add) in4 exec_yankdup integer_inc boolean_and exec_when () exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))) ()) ())
Zero cases best errors: [1 1 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 95
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 1000 504 618 1000 818 506)
Population mean number of elite cases: 8.45
Count of perfect (error zero) individuals by case: (0 0 0 0 0 504 618 0 818 506)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte})
Best program: (integer_max exec_stackdepth integer_max integer_max boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (integer_dec integer_gte)) ())
Errors: [1 1 1 1 1 0 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 46
Size: 60
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.554
Median total errors in population: 8
Error averages by case: (1.0 1.0 1.0 1.0 1.0 0.496 0.382 1.0 0.182 0.494)
Error minima by case: (1 1 1 1 1 0 0 1 0 0)
Average genome size in population (length): 53.823
Average program size in population (points): 73.149
Average percent parens in population: 0.263
Minimum age in population: 82.78754919866105
Maximum age in population: 86.94345041570101
Average age in population: 85.32399080604144
Median age in population: 85.26964908884264
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 30429222
--- Timings ---
Current time: 1559582841935 milliseconds
Total Time:         167.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       113.6 seconds, 67.9%
Fitness Testing:     28.8 seconds, 17.2%
Report:              24.8 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output:                    
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth integer_max boolean_empty boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_empty integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (boolean_frominteger boolean_swap in3) () ()))) ()) ())
Lexicase best errors: [0 0 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 93
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth integer_max boolean_empty boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_empty integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (boolean_frominteger boolean_swap in3) () ()))) ()) ())
Zero cases best errors: [0 0 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 93
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (821 821 733 4 815 2 2 732 3 837)
Population mean number of elite cases: 4.77
Count of perfect (error zero) individuals by case: (821 821 733 4 815 2 2 732 3 837)
Population mean number of perfect (error zero) cases: 4.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth boolean_yank exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (in3) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc boolean_or integer_gte) integer_pop exec_eq exec_dup (in3 integer_gt boolean_frominteger exec_yankdup integer_dup_times exec_s (print_integer boolean_swap in3) () ())) ()) ())
Errors: [0 0 0 1 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 54
Size: 74
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 5.23
Median total errors in population: 4
Error averages by case: (0.179 0.179 0.267 0.996 0.185 0.998 0.998 0.268 0.997 0.163)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.394
Average program size in population (points): 77.037
Average percent parens in population: 0.267
Minimum age in population: 83.78754919866105
Maximum age in population: 88.5934895765643
Average age in population: 86.68392226710625
Median age in population: 86.77892286754219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 30917825
--- Timings ---
Current time: 1559582845027 milliseconds
Total Time:         170.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       115.8 seconds, 68.0%
Fitness Testing:     29.3 seconds, 17.2%
Report:              25.2 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37                 
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: 60                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub integer_yankdup integer_sub boolean_shove in2 integer_sub in2 exec_s () (exec_do*while (in1) exec_rot () (exec_while (boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 75
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub integer_yankdup integer_sub boolean_shove in2 integer_sub in2 exec_s () (exec_do*while (in1) exec_rot () (exec_while (boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 75
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (603 830 604 835 267 431 716 265 602 435)
Population mean number of elite cases: 5.59
Count of perfect (error zero) individuals by case: (603 830 604 835 267 431 716 265 602 435)
Population mean number of perfect (error zero) cases: 5.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_392} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_div integer_eq tagged_392 integer_sub integer_lte in3) print_integer integer_rot integer_rot boolean_shove boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (boolean_flush boolean_swap in3) () ()))) ()) ())
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 59
Size: 80
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 4.412
Median total errors in population: 2
Error averages by case: (0.397 0.17 0.396 0.165 0.733 0.569 0.284 0.735 0.398 0.565)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.506
Average program size in population (points): 75.914
Average percent parens in population: 0.269
Minimum age in population: 85.50140942887889
Maximum age in population: 89.88764379772574
Average age in population: 88.4705327177554
Median age in population: 88.44338180452046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.744
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.009
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 31387229
--- Timings ---
Current time: 1559582847719 milliseconds
Total Time:         173.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       117.6 seconds, 67.9%
Fitness Testing:     29.8 seconds, 17.2%
Report:              25.6 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37                 
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: 60                 
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_dec) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) ()) () ())
Lexicase best errors: [1 0 1 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 77
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_dec) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) ()) () ())
Zero cases best errors: [1 0 1 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 77
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 813 15 418 416 416 3 650 489 3)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (4 813 15 418 416 416 3 650 489 3)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_392} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_div integer_eq tagged_392 integer_sub integer_lte in3) print_integer integer_rot integer_rot boolean_shove boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) ()) ())
Errors: [1 0 1 1 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 59
Size: 80
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.773
Median total errors in population: 6
Error averages by case: (0.996 0.187 0.985 0.582 0.584 0.584 0.997 0.35 0.511 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.833
Average program size in population (points): 78.473
Average percent parens in population: 0.262
Minimum age in population: 87.2653577643861
Maximum age in population: 91.7267809875911
Average age in population: 90.01306685892196
Median age in population: 90.07075495660834
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.005
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 31884285
--- Timings ---
Current time: 1559582850443 milliseconds
Total Time:         175.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       119.4 seconds, 67.9%
Fitness Testing:     30.3 seconds, 17.2%
Report:              26.0 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 546
Test mean error for best: 0.54600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: 64                 
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 58                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 60                 
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_do*while (in1) exec_rot () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (in4 boolean_dup_times exec_swap (integer_dec integer_gte) (exec_do*while ()))) ()) ())
Lexicase best errors: [0 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 70
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_do*while (in1) exec_rot () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (in4 boolean_dup_times exec_swap (integer_dec integer_gte) (exec_do*while ()))) ()) ())
Zero cases best errors: [0 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 70
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 603 356 234 811 231 144 299 442 222)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (235 603 356 234 811 231 144 299 442 222)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing ()) (integer_yankdup) integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in4 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_do*while (in1) exec_rot () (exec_while (boolean_yank integer_div integer_eq integer_empty integer_sub integer_add in3) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))) ()) ())
Errors: [0 0 0 1 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 59
Size: 83
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 6.423
Median total errors in population: 6
Error averages by case: (0.765 0.397 0.644 0.766 0.189 0.769 0.856 0.701 0.558 0.778)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.237
Average program size in population (points): 76.182
Average percent parens in population: 0.261
Minimum age in population: 89.14115520958316
Maximum age in population: 93.32706137730845
Average age in population: 91.50728923567924
Median age in population: 91.55868009062698
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.008
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 32380005
--- Timings ---
Current time: 1559582853148 milliseconds
Total Time:         178.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       121.2 seconds, 67.9%
Fitness Testing:     30.7 seconds, 17.2%
Report:              26.5 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 53                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: 80                 
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: 22                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_do*while (in1) exec_rot () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (in4 in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 71
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_do*while (in1) exec_rot () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (in4 in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 71
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (518 839 125 522 224 479 171 318 345 424)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (518 839 125 522 224 479 171 318 345 424)
Population mean number of perfect (error zero) cases: 3.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_do*while (in1) exec_rot () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (in4 in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ()) ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 48
Size: 71
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.035
Median total errors in population: 5
Error averages by case: (0.482 0.161 0.875 0.478 0.776 0.521 0.829 0.682 0.655 0.576)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.255
Average program size in population (points): 77.901
Average percent parens in population: 0.278
Minimum age in population: 90.14115520958316
Maximum age in population: 94.70928474415972
Average age in population: 93.07447898371498
Median age in population: 93.0150126545119
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.009
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 32900171
--- Timings ---
Current time: 1559582855868 milliseconds
Total Time:         181.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       122.9 seconds, 67.8%
Fitness Testing:     31.2 seconds, 17.2%
Report:              26.9 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 575
Test mean error for best: 0.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 99                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 75                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 5                  
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: 87                 
Correct output: -96                 | Program output: -47                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: 55                 
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 100                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (exec_rot () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (in4 in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 60
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (exec_rot () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (in4 in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 60
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (137 725 678 647 198 678 650 847 849 614)
Population mean number of elite cases: 6.02
Count of perfect (error zero) individuals by case: (137 725 678 647 198 678 650 847 849 614)
Population mean number of perfect (error zero) cases: 6.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (in4 in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ())
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 43
Size: 61
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 3.977
Median total errors in population: 2
Error averages by case: (0.863 0.275 0.322 0.353 0.802 0.322 0.35 0.153 0.151 0.386)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.789
Average program size in population (points): 73.347
Average percent parens in population: 0.308
Minimum age in population: 91.60417119688886
Maximum age in population: 96.12155792795502
Average age in population: 94.36257414537235
Median age in population: 94.47888583303622
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 345
Genome diversity (% unique genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 352
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.01
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 33424533
--- Timings ---
Current time: 1559582858560 milliseconds
Total Time:         183.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       124.7 seconds, 67.8%
Fitness Testing:     31.7 seconds, 17.3%
Report:              27.4 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 455
Test mean error for best: 0.45500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 5                  
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (integer_rot in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 64
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (integer_rot in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 64
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (754 868 561 74 826 562 751 4 4 311)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (754 868 561 74 826 562 751 4 4 311)
Population mean number of perfect (error zero) cases: 4.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Best program: (boolean_shove exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (integer_empty in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ())
Errors: [0 0 0 0 0 0 0 1 1 1]
Total: 3
Mean: 0.3
Genome size: 43
Size: 61
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 5.285
Median total errors in population: 4
Error averages by case: (0.246 0.132 0.439 0.926 0.174 0.438 0.249 0.996 0.996 0.689)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.153
Average program size in population (points): 65.685
Average percent parens in population: 0.312
Minimum age in population: 93.52796376386935
Maximum age in population: 97.10880875477547
Average age in population: 96.10090967262288
Median age in population: 95.80184385953008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 33894145
--- Timings ---
Current time: 1559582861227 milliseconds
Total Time:         186.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       126.4 seconds, 67.8%
Fitness Testing:     32.2 seconds, 17.2%
Report:              27.8 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 48                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: 37                 
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 42                 
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth integer_yank boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq boolean_dup integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq integer_inc in3 integer_gt boolean_rot integer_dec integer_dup_times in3)) ()) ()) ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 64
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth integer_yank boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq boolean_dup integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq integer_inc in3 integer_gt boolean_rot integer_dec integer_dup_times in3)) ()) ()) ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 64
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (478 465 480 233 627 463 815 880 236 167)
Population mean number of elite cases: 4.84
Count of perfect (error zero) individuals by case: (478 465 480 233 627 463 815 880 236 167)
Population mean number of perfect (error zero) cases: 4.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty integer_min exec_s_when_autoconstructing (integer_gt integer_gt boolean_yankdup exec_y_when_autoconstructing () integer_yankdup) (integer_sub) () integer_sub in2 exec_s (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_swap exec_eq boolean_yank integer_div integer_eq integer_flush integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove boolean_shove integer_add) (in4 exec_yankdup integer_inc integer_dec integer_gte) exec_do*while (exec_eq exec_dup (in3 integer_gt boolean_frominteger integer_dec))) ()) () ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 51
Size: 69
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 5.156
Median total errors in population: 4
Error averages by case: (0.522 0.535 0.52 0.767 0.373 0.537 0.185 0.12 0.764 0.833)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.808
Average program size in population (points): 65.642
Average percent parens in population: 0.302
Minimum age in population: 95.17203309580167
Maximum age in population: 98.95479315043691
Average age in population: 97.83894752422994
Median age in population: 97.80184385953008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.01
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 34382537
--- Timings ---
Current time: 1559582863863 milliseconds
Total Time:         189.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       128.2 seconds, 67.8%
Fitness Testing:     32.6 seconds, 17.2%
Report:              28.3 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 454
Test mean error for best: 0.45400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 5                  
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (integer_rot in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ())
Lexicase best errors: [0 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 64
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (integer_rot in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ())
Zero cases best errors: [0 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 64
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (300 301 521 663 525 2 519 815 2 298)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (300 301 521 663 525 2 519 815 2 298)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction 98} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Best program: (boolean_shove exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing ()) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) integer_sub exec_y_when_autoconstructing (integer_yankdup) integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_while (boolean_yank 98 integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (integer_empty in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ())
Errors: [0 0 0 1 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 43
Size: 61
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 6.054
Median total errors in population: 5
Error averages by case: (0.7 0.699 0.479 0.337 0.475 0.998 0.481 0.185 0.998 0.702)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.958
Average program size in population (points): 73.033
Average percent parens in population: 0.288
Minimum age in population: 96.65783631698586
Maximum age in population: 100.8758605243569
Average age in population: 99.04973471028607
Median age in population: 99.10202335137573
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 35022388
--- Timings ---
Current time: 1559582866732 milliseconds
Total Time:         192.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       130.1 seconds, 67.7%
Fitness Testing:     33.2 seconds, 17.3%
Report:              28.7 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_do*while (in1) exec_rot () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (boolean_yank in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ()) ())
Lexicase best errors: [0 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 71
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_do*while (in1) exec_rot () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (boolean_yank in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ()) ())
Zero cases best errors: [0 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 71
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (513 513 237 871 512 241 199 676 467 200)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (513 513 237 871 512 241 199 676 467 200)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_k () (exec_shove () boolean_eq)) (integer_sub exec_y_when_autoconstructing () integer_yankdup) integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_do*while (in1) exec_rot () (exec_while (boolean_yank integer_stackdepth integer_eq integer_swap integer_sub integer_add in3) print_integer integer_rot integer_add) (boolean_yankdup in3 exec_swap (integer_dec integer_gte) (exec_do*while ()))) ()) ())
Errors: [0 0 0 0 0 0 1 0 1 1]
Total: 3
Mean: 0.3
Genome size: 48
Size: 72
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.571
Median total errors in population: 5
Error averages by case: (0.487 0.487 0.763 0.129 0.488 0.759 0.801 0.324 0.533 0.8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.394
Average program size in population (points): 67.049
Average percent parens in population: 0.293
Minimum age in population: 98.40220284322137
Maximum age in population: 102.6941783901717
Average age in population: 100.7049741154967
Median age in population: 100.831779112794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 35611225
--- Timings ---
Current time: 1559582869498 milliseconds
Total Time:         194.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       131.9 seconds, 67.7%
Fitness Testing:     33.8 seconds, 17.3%
Report:              29.1 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 231
Test mean error for best: 0.23100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_stackdepth) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 83
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_stackdepth) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 83
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (628 476 243 477 477 823 834 473 241 173)
Population mean number of elite cases: 4.84
Count of perfect (error zero) individuals by case: (628 476 243 477 477 823 834 473 241 173)
Population mean number of perfect (error zero) cases: 4.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_stackdepth) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 58
Size: 83
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 5.155
Median total errors in population: 4
Error averages by case: (0.372 0.524 0.757 0.523 0.523 0.177 0.166 0.527 0.759 0.827)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.968
Average program size in population (points): 69.928
Average percent parens in population: 0.299
Minimum age in population: 99.40220284322137
Maximum age in population: 104.0829735461788
Average age in population: 102.0390911312274
Median age in population: 102.0979105188375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.01
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 36248469
--- Timings ---
Current time: 1559582872655 milliseconds
Total Time:         197.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       133.7 seconds, 67.6%
Fitness Testing:     34.3 seconds, 17.4%
Report:              29.5 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Smallest problem report - generation 69
Test total error for best: 231
Test mean error for best: 0.23100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub exec_yankdup in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_stackdepth) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()) () ())))))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 95
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub exec_yankdup in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_stackdepth) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()) () ())))))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 95
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (773 809 578 802 577 551 113 551 798 549)
Population mean number of elite cases: 6.10
Count of perfect (error zero) individuals by case: (773 809 578 802 577 551 113 551 798 549)
Population mean number of perfect (error zero) cases: 6.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in1) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove integer_stackdepth) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt exec_do*times (integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ()))))))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 58
Size: 84
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 3.899
Median total errors in population: 1
Error averages by case: (0.227 0.191 0.422 0.198 0.423 0.449 0.887 0.449 0.202 0.451)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.747
Average program size in population (points): 80.886
Average percent parens in population: 0.298
Minimum age in population: 100.4022028432214
Maximum age in population: 104.0090846296552
Average age in population: 103.3324881366151
Median age in population: 103.0090846296552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 332
Genome diversity (% unique genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 340
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.01
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 37340336
--- Timings ---
Current time: 1559582876233 milliseconds
Total Time:         201.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       135.5 seconds, 67.3%
Fitness Testing:     35.3 seconds, 17.5%
Report:              30.3 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Smallest problem report - generation 70
Test total error for best: 217
Test mean error for best: 0.21700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 83
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 83
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (576 167 567 576 798 673 782 174 572 783)
Population mean number of elite cases: 5.67
Count of perfect (error zero) individuals by case: (576 167 567 576 798 673 782 174 572 783)
Population mean number of perfect (error zero) cases: 5.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_yankdup boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 58
Size: 83
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 4.332
Median total errors in population: 2
Error averages by case: (0.424 0.833 0.433 0.424 0.202 0.327 0.218 0.826 0.428 0.217)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.131
Average program size in population (points): 81.486
Average percent parens in population: 0.298
Minimum age in population: 101.4022028432214
Maximum age in population: 106.0090846296552
Average age in population: 104.763010083084
Median age in population: 105.0090846296552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 185
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.01
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 38398391
--- Timings ---
Current time: 1559582879771 milliseconds
Total Time:         204.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       137.3 seconds, 67.0%
Fitness Testing:     36.2 seconds, 17.7%
Report:              31.1 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Smallest problem report - generation 71
Test total error for best: 217
Test mean error for best: 0.21700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_dup_times (integer_max exec_stackdepth boolean_and boolean_eq) exec_empty integer_stackdepth integer_gt boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 81
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_dup_times (integer_max exec_stackdepth boolean_and boolean_eq) exec_empty integer_stackdepth integer_gt boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 81
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (583 628 825 586 474 281 474 820 853 584)
Population mean number of elite cases: 6.11
Count of perfect (error zero) individuals by case: (583 628 825 586 474 281 474 820 853 584)
Population mean number of perfect (error zero) cases: 6.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 58
Size: 83
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 3.892
Median total errors in population: 3
Error averages by case: (0.417 0.372 0.175 0.414 0.526 0.719 0.526 0.18 0.147 0.416)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.315
Average program size in population (points): 80.826
Average percent parens in population: 0.303
Minimum age in population: 102.4022028432214
Maximum age in population: 107.7590846296552
Average age in population: 106.1009711747096
Median age in population: 106.0090846296552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 39387473
--- Timings ---
Current time: 1559582883243 milliseconds
Total Time:         208.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       139.1 seconds, 66.8%
Fitness Testing:     37.1 seconds, 17.8%
Report:              31.9 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Smallest problem report - generation 72
Test total error for best: 217
Test mean error for best: 0.21700
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 83
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 83
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (536 530 536 553 785 502 529 536 553 502)
Population mean number of elite cases: 5.56
Count of perfect (error zero) individuals by case: (536 530 536 553 785 502 529 536 553 502)
Population mean number of perfect (error zero) cases: 5.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3})
Best program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 58
Size: 83
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 4.438
Median total errors in population: 3
Error averages by case: (0.464 0.47 0.464 0.447 0.215 0.498 0.471 0.464 0.447 0.498)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.64
Average program size in population (points): 80.626
Average percent parens in population: 0.297
Minimum age in population: 104.7056437364383
Maximum age in population: 109.3840846296552
Average age in population: 107.513055329724
Median age in population: 107.5090846296552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.011
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 40430025
--- Timings ---
Current time: 1559582886801 milliseconds
Total Time:         211.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       140.9 seconds, 66.5%
Fitness Testing:     38.0 seconds, 18.0%
Report:              32.7 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 72
Successful program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 83


Auto-simplifying with starting size: 83
step: 0
program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 500
program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 1000
program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 1500
program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 2000
program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 2500
program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 3000
program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 3500
program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 4000
program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 4500
program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 5000
program: (integer_max exec_stackdepth integer_max exec_stackdepth boolean_and boolean_eq exec_empty exec_s_when_autoconstructing (integer_gt) (boolean_xor boolean_yankdup exec_y_when_autoconstructing () boolean_xor boolean_yankdup exec_y_when_autoconstructing () exec_shove () boolean_eq) () integer_sub exec_y_when_autoconstructing () integer_yankdup integer_sub integer_sub in2 exec_s () (in2 exec_s () (exec_y_when_autoconstructing (in4) exec_rot () (exec_while (integer_lte integer_swap integer_sub integer_add in1) print_integer integer_rot integer_rot boolean_shove in4) (in4 integer_pop integer_inc integer_dec integer_min)) (integer_min)) (exec_do*while (exec_do*while (exec_dup (in3 integer_gt boolean_frominteger integer_dec integer_dup_times exec_s (print_integer boolean_swap in3) () ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 72
Test total error for best: 217
Test mean error for best: 0.21700
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
